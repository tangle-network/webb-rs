#[allow(dead_code, unused_imports, non_camel_case_types)]
pub mod api {
    use super::api as root_mod;
    pub static PALLETS: [&str; 48usize] = [
        "System",
        "RandomnessCollectiveFlip",
        "Timestamp",
        "Babe",
        "Authorship",
        "Indices",
        "Balances",
        "TransactionPayment",
        "AssetTxPayment",
        "ElectionProviderMultiPhase",
        "Staking",
        "Session",
        "Democracy",
        "Council",
        "Elections",
        "Grandpa",
        "Treasury",
        "Utility",
        "Multisig",
        "Scheduler",
        "Preimage",
        "Proxy",
        "Assets",
        "Sudo",
        "ImOnline",
        "AuthorityDiscovery",
        "Offences",
        "Historical",
        "Bounties",
        "ChildBounties",
        "BagsList",
        "NominationPools",
        "HasherBn254",
        "AssetRegistry",
        "Currencies",
        "Tokens",
        "TokenWrapper",
        "TokenWrapperHandler",
        "MixerVerifierBn254",
        "VAnchorVerifier",
        "MerkleTreeBn254",
        "LinkableTreeBn254",
        "MixerBn254",
        "VAnchorBn254",
        "VAnchorHandlerBn254",
        "SignatureBridge",
        "RelayerRegistry",
        "KeyStorage",
    ];
    #[derive(
        :: subxt :: ext :: codec :: Decode,
        :: subxt :: ext :: codec :: Encode,
        Clone,
        Debug,
        Eq,
        PartialEq,
    )]
    pub enum Event {
        #[codec(index = 0)]
        System(system::Event),
        #[codec(index = 5)]
        Indices(indices::Event),
        #[codec(index = 6)]
        Balances(balances::Event),
        #[codec(index = 7)]
        TransactionPayment(transaction_payment::Event),
        #[codec(index = 8)]
        AssetTxPayment(asset_tx_payment::Event),
        #[codec(index = 9)]
        ElectionProviderMultiPhase(election_provider_multi_phase::Event),
        #[codec(index = 10)]
        Staking(staking::Event),
        #[codec(index = 11)]
        Session(session::Event),
        #[codec(index = 12)]
        Democracy(democracy::Event),
        #[codec(index = 13)]
        Council(council::Event),
        #[codec(index = 14)]
        Elections(elections::Event),
        #[codec(index = 15)]
        Grandpa(grandpa::Event),
        #[codec(index = 16)]
        Treasury(treasury::Event),
        #[codec(index = 17)]
        Utility(utility::Event),
        #[codec(index = 18)]
        Multisig(multisig::Event),
        #[codec(index = 19)]
        Scheduler(scheduler::Event),
        #[codec(index = 20)]
        Preimage(preimage::Event),
        #[codec(index = 21)]
        Proxy(proxy::Event),
        #[codec(index = 22)]
        Assets(assets::Event),
        #[codec(index = 23)]
        Sudo(sudo::Event),
        #[codec(index = 24)]
        ImOnline(im_online::Event),
        #[codec(index = 26)]
        Offences(offences::Event),
        #[codec(index = 28)]
        Bounties(bounties::Event),
        #[codec(index = 29)]
        ChildBounties(child_bounties::Event),
        #[codec(index = 30)]
        BagsList(bags_list::Event),
        #[codec(index = 31)]
        NominationPools(nomination_pools::Event),
        #[codec(index = 32)]
        HasherBn254(hasher_bn254::Event),
        #[codec(index = 33)]
        AssetRegistry(asset_registry::Event),
        #[codec(index = 35)]
        Tokens(tokens::Event),
        #[codec(index = 36)]
        TokenWrapper(token_wrapper::Event),
        #[codec(index = 37)]
        TokenWrapperHandler(token_wrapper_handler::Event),
        #[codec(index = 38)]
        MixerVerifierBn254(mixer_verifier_bn254::Event),
        #[codec(index = 39)]
        VAnchorVerifier(v_anchor_verifier::Event),
        #[codec(index = 40)]
        MerkleTreeBn254(merkle_tree_bn254::Event),
        #[codec(index = 41)]
        LinkableTreeBn254(linkable_tree_bn254::Event),
        #[codec(index = 42)]
        MixerBn254(mixer_bn254::Event),
        #[codec(index = 43)]
        VAnchorBn254(v_anchor_bn254::Event),
        #[codec(index = 44)]
        VAnchorHandlerBn254(v_anchor_handler_bn254::Event),
        #[codec(index = 45)]
        SignatureBridge(signature_bridge::Event),
        #[codec(index = 46)]
        RelayerRegistry(relayer_registry::Event),
        #[codec(index = 47)]
        KeyStorage(key_storage::Event),
    }
    pub mod system {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct FillBlock {
                pub ratio: runtime_types::sp_arithmetic::per_things::Perbill,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Remark {
                pub remark: ::std::vec::Vec<::core::primitive::u8>,
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct SetHeapPages {
                pub pages: ::core::primitive::u64,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct SetCode {
                pub code: ::std::vec::Vec<::core::primitive::u8>,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct SetCodeWithoutChecks {
                pub code: ::std::vec::Vec<::core::primitive::u8>,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct SetStorage {
                pub items: ::std::vec::Vec<(
                    ::std::vec::Vec<::core::primitive::u8>,
                    ::std::vec::Vec<::core::primitive::u8>,
                )>,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct KillStorage {
                pub keys:
                    ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct KillPrefix {
                pub prefix: ::std::vec::Vec<::core::primitive::u8>,
                pub subkeys: ::core::primitive::u32,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct RemarkWithEvent {
                pub remark: ::std::vec::Vec<::core::primitive::u8>,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "A dispatch that will fill the block weight up to the given ratio."]
                pub fn fill_block(
                    &self,
                    ratio: runtime_types::sp_arithmetic::per_things::Perbill,
                ) -> ::subxt::tx::StaticTxPayload<FillBlock> {
                    ::subxt::tx::StaticTxPayload::new(
                        "System",
                        "fill_block",
                        FillBlock { ratio },
                        [
                            48u8, 18u8, 205u8, 90u8, 222u8, 4u8, 20u8, 251u8,
                            173u8, 76u8, 167u8, 4u8, 83u8, 203u8, 160u8, 89u8,
                            132u8, 218u8, 191u8, 145u8, 130u8, 245u8, 177u8,
                            201u8, 169u8, 129u8, 173u8, 105u8, 88u8, 45u8,
                            136u8, 191u8,
                        ],
                    )
                }
                #[doc = "Make some on-chain remark."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- `O(1)`"]
                #[doc = "# </weight>"]
                pub fn remark(
                    &self,
                    remark: ::std::vec::Vec<::core::primitive::u8>,
                ) -> ::subxt::tx::StaticTxPayload<Remark> {
                    ::subxt::tx::StaticTxPayload::new(
                        "System",
                        "remark",
                        Remark { remark },
                        [
                            101u8, 80u8, 195u8, 226u8, 224u8, 247u8, 60u8,
                            128u8, 3u8, 101u8, 51u8, 147u8, 96u8, 126u8, 76u8,
                            230u8, 194u8, 227u8, 191u8, 73u8, 160u8, 146u8,
                            87u8, 147u8, 243u8, 28u8, 228u8, 116u8, 224u8,
                            181u8, 129u8, 160u8,
                        ],
                    )
                }
                #[doc = "Set the number of pages in the WebAssembly environment's heap."]
                pub fn set_heap_pages(
                    &self,
                    pages: ::core::primitive::u64,
                ) -> ::subxt::tx::StaticTxPayload<SetHeapPages>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "System",
                        "set_heap_pages",
                        SetHeapPages { pages },
                        [
                            43u8, 103u8, 128u8, 49u8, 156u8, 136u8, 11u8,
                            204u8, 80u8, 6u8, 244u8, 86u8, 171u8, 44u8, 140u8,
                            225u8, 142u8, 198u8, 43u8, 87u8, 26u8, 45u8, 125u8,
                            222u8, 165u8, 254u8, 172u8, 158u8, 39u8, 178u8,
                            86u8, 87u8,
                        ],
                    )
                }
                #[doc = "Set the new runtime code."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- `O(C + S)` where `C` length of `code` and `S` complexity of `can_set_code`"]
                #[doc = "- 1 call to `can_set_code`: `O(S)` (calls `sp_io::misc::runtime_version` which is"]
                #[doc = "  expensive)."]
                #[doc = "- 1 storage write (codec `O(C)`)."]
                #[doc = "- 1 digest item."]
                #[doc = "- 1 event."]
                #[doc = "The weight of this function is dependent on the runtime, but generally this is very"]
                #[doc = "expensive. We will treat this as a full block."]
                #[doc = "# </weight>"]
                pub fn set_code(
                    &self,
                    code: ::std::vec::Vec<::core::primitive::u8>,
                ) -> ::subxt::tx::StaticTxPayload<SetCode> {
                    ::subxt::tx::StaticTxPayload::new(
                        "System",
                        "set_code",
                        SetCode { code },
                        [
                            27u8, 104u8, 244u8, 205u8, 188u8, 254u8, 121u8,
                            13u8, 106u8, 120u8, 244u8, 108u8, 97u8, 84u8,
                            100u8, 68u8, 26u8, 69u8, 93u8, 128u8, 107u8, 4u8,
                            3u8, 142u8, 13u8, 134u8, 196u8, 62u8, 113u8, 181u8,
                            14u8, 40u8,
                        ],
                    )
                }
                #[doc = "Set the new runtime code without doing any checks of the given `code`."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- `O(C)` where `C` length of `code`"]
                #[doc = "- 1 storage write (codec `O(C)`)."]
                #[doc = "- 1 digest item."]
                #[doc = "- 1 event."]
                #[doc = "The weight of this function is dependent on the runtime. We will treat this as a full"]
                #[doc = "block. # </weight>"]
                pub fn set_code_without_checks(
                    &self,
                    code: ::std::vec::Vec<::core::primitive::u8>,
                ) -> ::subxt::tx::StaticTxPayload<SetCodeWithoutChecks>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "System",
                        "set_code_without_checks",
                        SetCodeWithoutChecks { code },
                        [
                            102u8, 160u8, 125u8, 235u8, 30u8, 23u8, 45u8,
                            239u8, 112u8, 148u8, 159u8, 158u8, 42u8, 93u8,
                            206u8, 94u8, 80u8, 250u8, 66u8, 195u8, 60u8, 40u8,
                            142u8, 169u8, 183u8, 80u8, 80u8, 96u8, 3u8, 231u8,
                            99u8, 216u8,
                        ],
                    )
                }
                #[doc = "Set some items of storage."]
                pub fn set_storage(
                    &self,
                    items: ::std::vec::Vec<(
                        ::std::vec::Vec<::core::primitive::u8>,
                        ::std::vec::Vec<::core::primitive::u8>,
                    )>,
                ) -> ::subxt::tx::StaticTxPayload<SetStorage> {
                    ::subxt::tx::StaticTxPayload::new(
                        "System",
                        "set_storage",
                        SetStorage { items },
                        [
                            74u8, 43u8, 106u8, 255u8, 50u8, 151u8, 192u8,
                            155u8, 14u8, 90u8, 19u8, 45u8, 165u8, 16u8, 235u8,
                            242u8, 21u8, 131u8, 33u8, 172u8, 119u8, 78u8,
                            140u8, 10u8, 107u8, 202u8, 122u8, 235u8, 181u8,
                            191u8, 22u8, 116u8,
                        ],
                    )
                }
                #[doc = "Kill some items from storage."]
                pub fn kill_storage(
                    &self,
                    keys: ::std::vec::Vec<
                        ::std::vec::Vec<::core::primitive::u8>,
                    >,
                ) -> ::subxt::tx::StaticTxPayload<KillStorage> {
                    ::subxt::tx::StaticTxPayload::new(
                        "System",
                        "kill_storage",
                        KillStorage { keys },
                        [
                            174u8, 174u8, 13u8, 174u8, 75u8, 138u8, 128u8,
                            235u8, 222u8, 216u8, 85u8, 18u8, 198u8, 1u8, 138u8,
                            70u8, 19u8, 108u8, 209u8, 41u8, 228u8, 67u8, 130u8,
                            230u8, 160u8, 207u8, 11u8, 180u8, 139u8, 242u8,
                            41u8, 15u8,
                        ],
                    )
                }
                #[doc = "Kill all storage items with a key that starts with the given prefix."]
                #[doc = ""]
                #[doc = "**NOTE:** We rely on the Root origin to provide us the number of subkeys under"]
                #[doc = "the prefix we are removing to accurately calculate the weight of this function."]
                pub fn kill_prefix(
                    &self,
                    prefix: ::std::vec::Vec<::core::primitive::u8>,
                    subkeys: ::core::primitive::u32,
                ) -> ::subxt::tx::StaticTxPayload<KillPrefix> {
                    ::subxt::tx::StaticTxPayload::new(
                        "System",
                        "kill_prefix",
                        KillPrefix { prefix, subkeys },
                        [
                            203u8, 116u8, 217u8, 42u8, 154u8, 215u8, 77u8,
                            217u8, 13u8, 22u8, 193u8, 2u8, 128u8, 115u8, 179u8,
                            115u8, 187u8, 218u8, 129u8, 34u8, 80u8, 4u8, 173u8,
                            120u8, 92u8, 35u8, 237u8, 112u8, 201u8, 207u8,
                            200u8, 48u8,
                        ],
                    )
                }
                #[doc = "Make some on-chain remark and emit event."]
                pub fn remark_with_event(
                    &self,
                    remark: ::std::vec::Vec<::core::primitive::u8>,
                ) -> ::subxt::tx::StaticTxPayload<RemarkWithEvent>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "System",
                        "remark_with_event",
                        RemarkWithEvent { remark },
                        [
                            123u8, 225u8, 180u8, 179u8, 144u8, 74u8, 27u8,
                            85u8, 101u8, 75u8, 134u8, 44u8, 181u8, 25u8, 183u8,
                            158u8, 14u8, 213u8, 56u8, 225u8, 136u8, 88u8, 26u8,
                            114u8, 178u8, 43u8, 176u8, 43u8, 240u8, 84u8,
                            116u8, 46u8,
                        ],
                    )
                }
            }
        }
        #[doc = "Event for the System pallet."]
        pub type Event = runtime_types::frame_system::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "An extrinsic completed successfully."]
            pub struct ExtrinsicSuccess {
                pub dispatch_info:
                    runtime_types::frame_support::weights::DispatchInfo,
            }
            impl ::subxt::events::StaticEvent for ExtrinsicSuccess {
                const PALLET: &'static str = "System";
                const EVENT: &'static str = "ExtrinsicSuccess";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "An extrinsic failed."]
            pub struct ExtrinsicFailed {
                pub dispatch_error: runtime_types::sp_runtime::DispatchError,
                pub dispatch_info:
                    runtime_types::frame_support::weights::DispatchInfo,
            }
            impl ::subxt::events::StaticEvent for ExtrinsicFailed {
                const PALLET: &'static str = "System";
                const EVENT: &'static str = "ExtrinsicFailed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "`:code` was updated."]
            pub struct CodeUpdated;
            impl ::subxt::events::StaticEvent for CodeUpdated {
                const PALLET: &'static str = "System";
                const EVENT: &'static str = "CodeUpdated";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "A new account was created."]
            pub struct NewAccount {
                pub account: ::subxt::ext::sp_core::crypto::AccountId32,
            }
            impl ::subxt::events::StaticEvent for NewAccount {
                const PALLET: &'static str = "System";
                const EVENT: &'static str = "NewAccount";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "An account was reaped."]
            pub struct KilledAccount {
                pub account: ::subxt::ext::sp_core::crypto::AccountId32,
            }
            impl ::subxt::events::StaticEvent for KilledAccount {
                const PALLET: &'static str = "System";
                const EVENT: &'static str = "KilledAccount";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "On on-chain remark happened."]
            pub struct Remarked {
                pub sender: ::subxt::ext::sp_core::crypto::AccountId32,
                pub hash: ::subxt::ext::sp_core::H256,
            }
            impl ::subxt::events::StaticEvent for Remarked {
                const PALLET: &'static str = "System";
                const EVENT: &'static str = "Remarked";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The full account information for a particular account ID."]                pub fn account (& self , _0 : impl :: std :: borrow :: Borrow < :: subxt :: ext :: sp_core :: crypto :: AccountId32 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: frame_system :: AccountInfo < :: core :: primitive :: u32 , runtime_types :: pallet_balances :: AccountData < :: core :: primitive :: u128 > > > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("System" , "Account" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Blake2_128Concat)] , [176u8 , 187u8 , 21u8 , 220u8 , 159u8 , 204u8 , 127u8 , 14u8 , 21u8 , 69u8 , 77u8 , 114u8 , 230u8 , 141u8 , 107u8 , 79u8 , 23u8 , 16u8 , 174u8 , 243u8 , 252u8 , 42u8 , 65u8 , 120u8 , 229u8 , 38u8 , 210u8 , 255u8 , 22u8 , 40u8 , 109u8 , 223u8 ,])
                }
                #[doc = " The full account information for a particular account ID."]                pub fn account_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: frame_system :: AccountInfo < :: core :: primitive :: u32 , runtime_types :: pallet_balances :: AccountData < :: core :: primitive :: u128 > > > , () , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "System",
                        "Account",
                        Vec::new(),
                        [
                            176u8, 187u8, 21u8, 220u8, 159u8, 204u8, 127u8,
                            14u8, 21u8, 69u8, 77u8, 114u8, 230u8, 141u8, 107u8,
                            79u8, 23u8, 16u8, 174u8, 243u8, 252u8, 42u8, 65u8,
                            120u8, 229u8, 38u8, 210u8, 255u8, 22u8, 40u8,
                            109u8, 223u8,
                        ],
                    )
                }
                #[doc = " Total extrinsics count for the current block."]                pub fn extrinsic_count (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u32 > , :: subxt :: storage :: address :: Yes , () , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "System",
                        "ExtrinsicCount",
                        vec![],
                        [
                            223u8, 60u8, 201u8, 120u8, 36u8, 44u8, 180u8,
                            210u8, 242u8, 53u8, 222u8, 154u8, 123u8, 176u8,
                            249u8, 8u8, 225u8, 28u8, 232u8, 4u8, 136u8, 41u8,
                            151u8, 82u8, 189u8, 149u8, 49u8, 166u8, 139u8, 9u8,
                            163u8, 231u8,
                        ],
                    )
                }
                #[doc = " The current weight for the block."]                pub fn block_weight (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: frame_support :: weights :: PerDispatchClass < runtime_types :: frame_support :: weights :: weight_v2 :: Weight > > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "System",
                        "BlockWeight",
                        vec![],
                        [
                            25u8, 97u8, 54u8, 87u8, 196u8, 64u8, 243u8, 40u8,
                            63u8, 215u8, 225u8, 108u8, 83u8, 110u8, 180u8,
                            62u8, 160u8, 84u8, 65u8, 29u8, 225u8, 34u8, 221u8,
                            108u8, 242u8, 129u8, 215u8, 27u8, 28u8, 158u8,
                            72u8, 250u8,
                        ],
                    )
                }
                #[doc = " Total length (in bytes) for all extrinsics put together, for the current block."]                pub fn all_extrinsics_len (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u32 > , :: subxt :: storage :: address :: Yes , () , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "System",
                        "AllExtrinsicsLen",
                        vec![],
                        [
                            202u8, 145u8, 209u8, 225u8, 40u8, 220u8, 174u8,
                            74u8, 93u8, 164u8, 254u8, 248u8, 254u8, 192u8,
                            32u8, 117u8, 96u8, 149u8, 53u8, 145u8, 219u8, 64u8,
                            234u8, 18u8, 217u8, 200u8, 203u8, 141u8, 145u8,
                            28u8, 134u8, 60u8,
                        ],
                    )
                }
                #[doc = " Map of block numbers to block hashes."]                pub fn block_hash (& self , _0 : impl :: std :: borrow :: Borrow < :: core :: primitive :: u64 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: subxt :: ext :: sp_core :: H256 > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("System" , "BlockHash" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Twox64Concat)] , [208u8 , 90u8 , 9u8 , 85u8 , 0u8 , 40u8 , 80u8 , 160u8 , 135u8 , 204u8 , 83u8 , 145u8 , 18u8 , 16u8 , 7u8 , 118u8 , 213u8 , 100u8 , 26u8 , 239u8 , 198u8 , 149u8 , 188u8 , 207u8 , 66u8 , 28u8 , 157u8 , 229u8 , 187u8 , 143u8 , 223u8 , 138u8 ,])
                }
                #[doc = " Map of block numbers to block hashes."]                pub fn block_hash_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: subxt :: ext :: sp_core :: H256 > , () , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "System",
                        "BlockHash",
                        Vec::new(),
                        [
                            208u8, 90u8, 9u8, 85u8, 0u8, 40u8, 80u8, 160u8,
                            135u8, 204u8, 83u8, 145u8, 18u8, 16u8, 7u8, 118u8,
                            213u8, 100u8, 26u8, 239u8, 198u8, 149u8, 188u8,
                            207u8, 66u8, 28u8, 157u8, 229u8, 187u8, 143u8,
                            223u8, 138u8,
                        ],
                    )
                }
                #[doc = " Extrinsics data for the current block (maps an extrinsic's index to its data)."]                pub fn extrinsic_data (& self , _0 : impl :: std :: borrow :: Borrow < :: core :: primitive :: u32 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: std :: vec :: Vec < :: core :: primitive :: u8 > > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("System" , "ExtrinsicData" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Twox64Concat)] , [210u8 , 224u8 , 211u8 , 186u8 , 118u8 , 210u8 , 185u8 , 194u8 , 238u8 , 211u8 , 254u8 , 73u8 , 67u8 , 184u8 , 31u8 , 229u8 , 168u8 , 125u8 , 98u8 , 23u8 , 241u8 , 59u8 , 49u8 , 86u8 , 126u8 , 9u8 , 114u8 , 163u8 , 160u8 , 62u8 , 50u8 , 67u8 ,])
                }
                #[doc = " Extrinsics data for the current block (maps an extrinsic's index to its data)."]                pub fn extrinsic_data_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: std :: vec :: Vec < :: core :: primitive :: u8 > > , () , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "System",
                        "ExtrinsicData",
                        Vec::new(),
                        [
                            210u8, 224u8, 211u8, 186u8, 118u8, 210u8, 185u8,
                            194u8, 238u8, 211u8, 254u8, 73u8, 67u8, 184u8,
                            31u8, 229u8, 168u8, 125u8, 98u8, 23u8, 241u8, 59u8,
                            49u8, 86u8, 126u8, 9u8, 114u8, 163u8, 160u8, 62u8,
                            50u8, 67u8,
                        ],
                    )
                }
                #[doc = " The current block number being processed. Set by `execute_block`."]                pub fn number (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u64 > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "System",
                        "Number",
                        vec![],
                        [
                            9u8, 143u8, 246u8, 146u8, 99u8, 116u8, 84u8, 22u8,
                            199u8, 223u8, 48u8, 145u8, 245u8, 95u8, 225u8,
                            149u8, 107u8, 46u8, 237u8, 158u8, 12u8, 135u8,
                            104u8, 253u8, 72u8, 139u8, 178u8, 15u8, 25u8, 78u8,
                            5u8, 207u8,
                        ],
                    )
                }
                #[doc = " Hash of the previous block."]                pub fn parent_hash (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: subxt :: ext :: sp_core :: H256 > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "System",
                        "ParentHash",
                        vec![],
                        [
                            232u8, 206u8, 177u8, 119u8, 38u8, 57u8, 233u8,
                            50u8, 225u8, 49u8, 169u8, 176u8, 210u8, 51u8,
                            231u8, 176u8, 234u8, 186u8, 188u8, 112u8, 15u8,
                            152u8, 195u8, 232u8, 201u8, 97u8, 208u8, 249u8,
                            9u8, 163u8, 69u8, 36u8,
                        ],
                    )
                }
                #[doc = " Digest of the current block, also part of the block header."]                pub fn digest (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: sp_runtime :: generic :: digest :: Digest > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "System",
                        "Digest",
                        vec![],
                        [
                            83u8, 141u8, 200u8, 132u8, 182u8, 55u8, 197u8,
                            122u8, 13u8, 159u8, 31u8, 42u8, 60u8, 191u8, 89u8,
                            221u8, 242u8, 47u8, 199u8, 213u8, 48u8, 216u8,
                            131u8, 168u8, 245u8, 82u8, 56u8, 190u8, 62u8, 69u8,
                            96u8, 37u8,
                        ],
                    )
                }
                #[doc = " Events deposited for the current block."]
                #[doc = ""]
                #[doc = " NOTE: The item is unbound and should therefore never be read on chain."]
                #[doc = " It could otherwise inflate the PoV size of a block."]
                #[doc = ""]
                #[doc = " Events have a large in-memory size. Box the events to not go out-of-memory"]
                #[doc = " just in case someone still reads them from within the runtime."]                pub fn events (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: std :: vec :: Vec < runtime_types :: frame_system :: EventRecord < runtime_types :: webb_standalone_runtime :: Event , :: subxt :: ext :: sp_core :: H256 > > > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "System",
                        "Events",
                        vec![],
                        [
                            86u8, 115u8, 126u8, 122u8, 80u8, 135u8, 254u8,
                            50u8, 47u8, 52u8, 22u8, 47u8, 119u8, 39u8, 25u8,
                            170u8, 162u8, 209u8, 243u8, 154u8, 153u8, 132u8,
                            119u8, 253u8, 70u8, 133u8, 99u8, 251u8, 125u8,
                            68u8, 64u8, 108u8,
                        ],
                    )
                }
                #[doc = " The number of events in the `Events<T>` list."]                pub fn event_count (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u32 > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "System",
                        "EventCount",
                        vec![],
                        [
                            236u8, 93u8, 90u8, 177u8, 250u8, 211u8, 138u8,
                            187u8, 26u8, 208u8, 203u8, 113u8, 221u8, 233u8,
                            227u8, 9u8, 249u8, 25u8, 202u8, 185u8, 161u8,
                            144u8, 167u8, 104u8, 127u8, 187u8, 38u8, 18u8,
                            52u8, 61u8, 66u8, 112u8,
                        ],
                    )
                }
                #[doc = " Mapping between a topic (represented by T::Hash) and a vector of indexes"]
                #[doc = " of events in the `<Events<T>>` list."]
                #[doc = ""]
                #[doc = " All topic vectors have deterministic storage locations depending on the topic. This"]
                #[doc = " allows light-clients to leverage the changes trie storage tracking mechanism and"]
                #[doc = " in case of changes fetch the list of events of interest."]
                #[doc = ""]
                #[doc = " The value has the type `(T::BlockNumber, EventIndex)` because if we used only just"]
                #[doc = " the `EventIndex` then in case if the topic has the same contents on the next block"]
                #[doc = " no notification will be triggered thus the event might be lost."]                pub fn event_topics (& self , _0 : impl :: std :: borrow :: Borrow < :: subxt :: ext :: sp_core :: H256 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: std :: vec :: Vec < (:: core :: primitive :: u64 , :: core :: primitive :: u32 ,) > > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("System" , "EventTopics" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Blake2_128Concat)] , [53u8 , 63u8 , 144u8 , 127u8 , 156u8 , 40u8 , 137u8 , 72u8 , 156u8 , 219u8 , 147u8 , 209u8 , 38u8 , 22u8 , 8u8 , 70u8 , 128u8 , 101u8 , 202u8 , 79u8 , 235u8 , 239u8 , 54u8 , 249u8 , 185u8 , 219u8 , 167u8 , 38u8 , 249u8 , 130u8 , 134u8 , 179u8 ,])
                }
                #[doc = " Mapping between a topic (represented by T::Hash) and a vector of indexes"]
                #[doc = " of events in the `<Events<T>>` list."]
                #[doc = ""]
                #[doc = " All topic vectors have deterministic storage locations depending on the topic. This"]
                #[doc = " allows light-clients to leverage the changes trie storage tracking mechanism and"]
                #[doc = " in case of changes fetch the list of events of interest."]
                #[doc = ""]
                #[doc = " The value has the type `(T::BlockNumber, EventIndex)` because if we used only just"]
                #[doc = " the `EventIndex` then in case if the topic has the same contents on the next block"]
                #[doc = " no notification will be triggered thus the event might be lost."]                pub fn event_topics_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: std :: vec :: Vec < (:: core :: primitive :: u64 , :: core :: primitive :: u32 ,) > > , () , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "System",
                        "EventTopics",
                        Vec::new(),
                        [
                            53u8, 63u8, 144u8, 127u8, 156u8, 40u8, 137u8, 72u8,
                            156u8, 219u8, 147u8, 209u8, 38u8, 22u8, 8u8, 70u8,
                            128u8, 101u8, 202u8, 79u8, 235u8, 239u8, 54u8,
                            249u8, 185u8, 219u8, 167u8, 38u8, 249u8, 130u8,
                            134u8, 179u8,
                        ],
                    )
                }
                #[doc = " Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."]                pub fn last_runtime_upgrade (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: frame_system :: LastRuntimeUpgradeInfo > , :: subxt :: storage :: address :: Yes , () , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "System",
                        "LastRuntimeUpgrade",
                        vec![],
                        [
                            52u8, 37u8, 117u8, 111u8, 57u8, 130u8, 196u8, 14u8,
                            99u8, 77u8, 91u8, 126u8, 178u8, 249u8, 78u8, 34u8,
                            9u8, 194u8, 92u8, 105u8, 113u8, 81u8, 185u8, 127u8,
                            245u8, 184u8, 60u8, 29u8, 234u8, 182u8, 96u8,
                            196u8,
                        ],
                    )
                }
                #[doc = " True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."]                pub fn upgraded_to_u32_ref_count (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: bool > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "System",
                        "UpgradedToU32RefCount",
                        vec![],
                        [
                            171u8, 88u8, 244u8, 92u8, 122u8, 67u8, 27u8, 18u8,
                            59u8, 175u8, 175u8, 178u8, 20u8, 150u8, 213u8,
                            59u8, 222u8, 141u8, 32u8, 107u8, 3u8, 114u8, 83u8,
                            250u8, 180u8, 233u8, 152u8, 54u8, 187u8, 99u8,
                            131u8, 204u8,
                        ],
                    )
                }
                #[doc = " True if we have upgraded so that AccountInfo contains three types of `RefCount`. False"]
                #[doc = " (default) if not."]                pub fn upgraded_to_triple_ref_count (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: bool > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "System",
                        "UpgradedToTripleRefCount",
                        vec![],
                        [
                            90u8, 33u8, 56u8, 86u8, 90u8, 101u8, 89u8, 133u8,
                            203u8, 56u8, 201u8, 210u8, 244u8, 232u8, 150u8,
                            18u8, 51u8, 105u8, 14u8, 230u8, 103u8, 155u8,
                            246u8, 99u8, 53u8, 207u8, 225u8, 128u8, 186u8,
                            76u8, 40u8, 185u8,
                        ],
                    )
                }
                #[doc = " The execution phase of the block."]                pub fn execution_phase (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: frame_system :: Phase > , :: subxt :: storage :: address :: Yes , () , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "System",
                        "ExecutionPhase",
                        vec![],
                        [
                            230u8, 183u8, 221u8, 135u8, 226u8, 223u8, 55u8,
                            104u8, 138u8, 224u8, 103u8, 156u8, 222u8, 99u8,
                            203u8, 199u8, 164u8, 168u8, 193u8, 133u8, 201u8,
                            155u8, 63u8, 95u8, 17u8, 206u8, 165u8, 123u8,
                            161u8, 33u8, 172u8, 93u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " Block & extrinsics weights: base values and limits."]
                pub fn block_weights(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<
                        runtime_types::frame_system::limits::BlockWeights,
                    >,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "System",
                        "BlockWeights",
                        [
                            64u8, 123u8, 136u8, 20u8, 38u8, 151u8, 254u8, 81u8,
                            251u8, 41u8, 4u8, 87u8, 167u8, 25u8, 149u8, 3u8,
                            17u8, 65u8, 145u8, 192u8, 195u8, 87u8, 182u8, 78u8,
                            104u8, 147u8, 9u8, 56u8, 146u8, 20u8, 47u8, 22u8,
                        ],
                    )
                }
                #[doc = " The maximum length of a block (in bytes)."]
                pub fn block_length(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<
                        runtime_types::frame_system::limits::BlockLength,
                    >,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "System",
                        "BlockLength",
                        [
                            116u8, 184u8, 225u8, 228u8, 207u8, 203u8, 4u8,
                            220u8, 234u8, 198u8, 150u8, 108u8, 205u8, 87u8,
                            194u8, 131u8, 229u8, 51u8, 140u8, 4u8, 47u8, 12u8,
                            200u8, 144u8, 153u8, 62u8, 51u8, 39u8, 138u8,
                            205u8, 203u8, 236u8,
                        ],
                    )
                }
                #[doc = " Maximum number of block number to block hash mappings to keep (oldest pruned first)."]
                pub fn block_hash_count(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<::core::primitive::u64>,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "System",
                        "BlockHashCount",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8,
                            231u8, 190u8, 146u8, 59u8, 226u8, 157u8, 101u8,
                            103u8, 117u8, 249u8, 65u8, 18u8, 191u8, 103u8,
                            119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8,
                            239u8, 42u8, 246u8,
                        ],
                    )
                }
                #[doc = " The weight of runtime database operations the runtime can invoke."]
                pub fn db_weight(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<
                        runtime_types::frame_support::weights::RuntimeDbWeight,
                    >,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "System",
                        "DbWeight",
                        [
                            124u8, 162u8, 190u8, 149u8, 49u8, 177u8, 162u8,
                            231u8, 62u8, 167u8, 199u8, 181u8, 43u8, 232u8,
                            185u8, 116u8, 195u8, 51u8, 233u8, 223u8, 20u8,
                            129u8, 246u8, 13u8, 65u8, 180u8, 64u8, 9u8, 157u8,
                            59u8, 245u8, 118u8,
                        ],
                    )
                }
                #[doc = " Get the chain's current version."]
                pub fn version(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<
                        runtime_types::sp_version::RuntimeVersion,
                    >,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "System",
                        "Version",
                        [
                            93u8, 98u8, 57u8, 243u8, 229u8, 8u8, 234u8, 231u8,
                            72u8, 230u8, 139u8, 47u8, 63u8, 181u8, 17u8, 2u8,
                            220u8, 231u8, 104u8, 237u8, 185u8, 143u8, 165u8,
                            253u8, 188u8, 76u8, 147u8, 12u8, 170u8, 26u8, 74u8,
                            200u8,
                        ],
                    )
                }
                #[doc = " The designated SS58 prefix of this chain."]
                #[doc = ""]
                #[doc = " This replaces the \"ss58Format\" property declared in the chain spec. Reason is"]
                #[doc = " that the runtime should know about the prefix in order to make use of it as"]
                #[doc = " an identifier of the chain."]
                pub fn ss58_prefix(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<::core::primitive::u16>,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "System",
                        "SS58Prefix",
                        [
                            116u8, 33u8, 2u8, 170u8, 181u8, 147u8, 171u8,
                            169u8, 167u8, 227u8, 41u8, 144u8, 11u8, 236u8,
                            82u8, 100u8, 74u8, 60u8, 184u8, 72u8, 169u8, 90u8,
                            208u8, 135u8, 15u8, 117u8, 10u8, 123u8, 128u8,
                            193u8, 29u8, 70u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod randomness_collective_flip {
        use super::root_mod;
        use super::runtime_types;
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Series of block headers from the last 81 blocks that acts as random seed material. This"]
                #[doc = " is arranged as a ring buffer with `block_number % 81` being the index into the `Vec` of"]
                #[doc = " the oldest hash."]                pub fn random_material (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: sp_runtime :: bounded :: bounded_vec :: BoundedVec < :: subxt :: ext :: sp_core :: H256 > > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "RandomnessCollectiveFlip",
                        "RandomMaterial",
                        vec![],
                        [
                            152u8, 126u8, 73u8, 88u8, 54u8, 147u8, 6u8, 19u8,
                            214u8, 40u8, 159u8, 30u8, 236u8, 61u8, 240u8, 65u8,
                            178u8, 94u8, 146u8, 152u8, 135u8, 252u8, 160u8,
                            86u8, 123u8, 114u8, 251u8, 140u8, 98u8, 143u8,
                            217u8, 242u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod timestamp {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Set {
                #[codec(compact)]
                pub now: ::core::primitive::u64,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Set the current time."]
                #[doc = ""]
                #[doc = "This call should be invoked exactly once per block. It will panic at the finalization"]
                #[doc = "phase, if this call hasn't been invoked by that time."]
                #[doc = ""]
                #[doc = "The timestamp should be greater than the previous one by the amount specified by"]
                #[doc = "`MinimumPeriod`."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be `Inherent`."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)"]
                #[doc = "- 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in"]
                #[doc = "  `on_finalize`)"]
                #[doc = "- 1 event handler `on_timestamp_set`. Must be `O(1)`."]
                #[doc = "# </weight>"]
                pub fn set(
                    &self,
                    now: ::core::primitive::u64,
                ) -> ::subxt::tx::StaticTxPayload<Set> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Timestamp",
                        "set",
                        Set { now },
                        [
                            6u8, 97u8, 172u8, 236u8, 118u8, 238u8, 228u8,
                            114u8, 15u8, 115u8, 102u8, 85u8, 66u8, 151u8, 16u8,
                            33u8, 187u8, 17u8, 166u8, 88u8, 127u8, 214u8,
                            182u8, 51u8, 168u8, 88u8, 43u8, 101u8, 185u8, 8u8,
                            1u8, 28u8,
                        ],
                    )
                }
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Current time for the current block."]                pub fn now (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u64 > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Timestamp",
                        "Now",
                        vec![],
                        [
                            148u8, 53u8, 50u8, 54u8, 13u8, 161u8, 57u8, 150u8,
                            16u8, 83u8, 144u8, 221u8, 59u8, 75u8, 158u8, 130u8,
                            39u8, 123u8, 106u8, 134u8, 202u8, 185u8, 83u8,
                            85u8, 60u8, 41u8, 120u8, 96u8, 210u8, 34u8, 2u8,
                            250u8,
                        ],
                    )
                }
                #[doc = " Did the timestamp get updated in this block?"]                pub fn did_update (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: bool > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Timestamp",
                        "DidUpdate",
                        vec![],
                        [
                            70u8, 13u8, 92u8, 186u8, 80u8, 151u8, 167u8, 90u8,
                            158u8, 232u8, 175u8, 13u8, 103u8, 135u8, 2u8, 78u8,
                            16u8, 6u8, 39u8, 158u8, 167u8, 85u8, 27u8, 47u8,
                            122u8, 73u8, 127u8, 26u8, 35u8, 168u8, 72u8, 204u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The minimum period between blocks. Beware that this is different to the *expected*"]
                #[doc = " period that the block production apparatus provides. Your chosen consensus system will"]
                #[doc = " generally work with this to determine a sensible block time. e.g. For Aura, it will be"]
                #[doc = " double this period on default settings."]
                pub fn minimum_period(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<::core::primitive::u64>,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "Timestamp",
                        "MinimumPeriod",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8,
                            231u8, 190u8, 146u8, 59u8, 226u8, 157u8, 101u8,
                            103u8, 117u8, 249u8, 65u8, 18u8, 191u8, 103u8,
                            119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8,
                            239u8, 42u8, 246u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod babe {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct ReportEquivocation {
                pub equivocation_proof: ::std::boxed::Box<
                    runtime_types::sp_consensus_slots::EquivocationProof<
                        runtime_types::sp_runtime::generic::header::Header<
                            ::core::primitive::u64,
                            runtime_types::sp_runtime::traits::BlakeTwo256,
                        >,
                        runtime_types::sp_consensus_babe::app::Public,
                    >,
                >,
                pub key_owner_proof: runtime_types::sp_session::MembershipProof,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct ReportEquivocationUnsigned {
                pub equivocation_proof: ::std::boxed::Box<
                    runtime_types::sp_consensus_slots::EquivocationProof<
                        runtime_types::sp_runtime::generic::header::Header<
                            ::core::primitive::u64,
                            runtime_types::sp_runtime::traits::BlakeTwo256,
                        >,
                        runtime_types::sp_consensus_babe::app::Public,
                    >,
                >,
                pub key_owner_proof: runtime_types::sp_session::MembershipProof,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct PlanConfigChange { pub config : runtime_types :: sp_consensus_babe :: digests :: NextConfigDescriptor , }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Report authority equivocation/misbehavior. This method will verify"]
                #[doc = "the equivocation proof and validate the given key ownership proof"]
                #[doc = "against the extracted offender. If both are valid, the offence will"]
                #[doc = "be reported."]
                pub fn report_equivocation(
                    &self,
                    equivocation_proof : runtime_types :: sp_consensus_slots :: EquivocationProof < runtime_types :: sp_runtime :: generic :: header :: Header < :: core :: primitive :: u64 , runtime_types :: sp_runtime :: traits :: BlakeTwo256 > , runtime_types :: sp_consensus_babe :: app :: Public >,
                    key_owner_proof: runtime_types::sp_session::MembershipProof,
                ) -> ::subxt::tx::StaticTxPayload<ReportEquivocation>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Babe",
                        "report_equivocation",
                        ReportEquivocation {
                            equivocation_proof: ::std::boxed::Box::new(
                                equivocation_proof,
                            ),
                            key_owner_proof,
                        },
                        [
                            197u8, 69u8, 250u8, 137u8, 133u8, 235u8, 135u8,
                            236u8, 50u8, 219u8, 142u8, 88u8, 122u8, 80u8,
                            210u8, 52u8, 99u8, 118u8, 68u8, 177u8, 160u8,
                            118u8, 208u8, 34u8, 128u8, 133u8, 135u8, 75u8,
                            146u8, 212u8, 125u8, 97u8,
                        ],
                    )
                }
                #[doc = "Report authority equivocation/misbehavior. This method will verify"]
                #[doc = "the equivocation proof and validate the given key ownership proof"]
                #[doc = "against the extracted offender. If both are valid, the offence will"]
                #[doc = "be reported."]
                #[doc = "This extrinsic must be called unsigned and it is expected that only"]
                #[doc = "block authors will call it (validated in `ValidateUnsigned`), as such"]
                #[doc = "if the block author is defined it will be defined as the equivocation"]
                #[doc = "reporter."]
                pub fn report_equivocation_unsigned(
                    &self,
                    equivocation_proof : runtime_types :: sp_consensus_slots :: EquivocationProof < runtime_types :: sp_runtime :: generic :: header :: Header < :: core :: primitive :: u64 , runtime_types :: sp_runtime :: traits :: BlakeTwo256 > , runtime_types :: sp_consensus_babe :: app :: Public >,
                    key_owner_proof: runtime_types::sp_session::MembershipProof,
                ) -> ::subxt::tx::StaticTxPayload<ReportEquivocationUnsigned>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Babe",
                        "report_equivocation_unsigned",
                        ReportEquivocationUnsigned {
                            equivocation_proof: ::std::boxed::Box::new(
                                equivocation_proof,
                            ),
                            key_owner_proof,
                        },
                        [
                            163u8, 128u8, 193u8, 185u8, 172u8, 43u8, 25u8,
                            115u8, 211u8, 32u8, 4u8, 235u8, 28u8, 138u8, 48u8,
                            111u8, 92u8, 30u8, 104u8, 29u8, 19u8, 163u8, 144u8,
                            175u8, 243u8, 122u8, 217u8, 118u8, 101u8, 0u8,
                            68u8, 147u8,
                        ],
                    )
                }
                #[doc = "Plan an epoch config change. The epoch config change is recorded and will be enacted on"]
                #[doc = "the next call to `enact_epoch_change`. The config will be activated one epoch after."]
                #[doc = "Multiple calls to this method will replace any existing planned config change that had"]
                #[doc = "not been enacted yet."]
                pub fn plan_config_change(
                    &self,
                    config : runtime_types :: sp_consensus_babe :: digests :: NextConfigDescriptor,
                ) -> ::subxt::tx::StaticTxPayload<PlanConfigChange>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Babe",
                        "plan_config_change",
                        PlanConfigChange { config },
                        [
                            229u8, 157u8, 41u8, 58u8, 56u8, 4u8, 52u8, 107u8,
                            104u8, 20u8, 42u8, 110u8, 1u8, 17u8, 45u8, 196u8,
                            30u8, 135u8, 63u8, 46u8, 40u8, 137u8, 209u8, 37u8,
                            24u8, 108u8, 251u8, 189u8, 77u8, 208u8, 74u8, 32u8,
                        ],
                    )
                }
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Current epoch index."]                pub fn epoch_index (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u64 > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Babe",
                        "EpochIndex",
                        vec![],
                        [
                            51u8, 27u8, 91u8, 156u8, 118u8, 99u8, 46u8, 219u8,
                            190u8, 147u8, 205u8, 23u8, 106u8, 169u8, 121u8,
                            218u8, 208u8, 235u8, 135u8, 127u8, 243u8, 41u8,
                            55u8, 243u8, 235u8, 122u8, 57u8, 86u8, 37u8, 90u8,
                            208u8, 71u8,
                        ],
                    )
                }
                #[doc = " Current epoch authorities."]                pub fn authorities (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: sp_runtime :: bounded :: weak_bounded_vec :: WeakBoundedVec < (runtime_types :: sp_consensus_babe :: app :: Public , :: core :: primitive :: u64 ,) > > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Babe",
                        "Authorities",
                        vec![],
                        [
                            61u8, 8u8, 133u8, 111u8, 169u8, 120u8, 0u8, 213u8,
                            31u8, 159u8, 204u8, 212u8, 18u8, 205u8, 93u8, 84u8,
                            140u8, 108u8, 136u8, 209u8, 234u8, 107u8, 145u8,
                            9u8, 204u8, 224u8, 105u8, 9u8, 238u8, 241u8, 65u8,
                            30u8,
                        ],
                    )
                }
                #[doc = " The slot at which the first epoch actually started. This is 0"]
                #[doc = " until the first block of the chain."]                pub fn genesis_slot (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: sp_consensus_slots :: Slot > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Babe",
                        "GenesisSlot",
                        vec![],
                        [
                            234u8, 127u8, 243u8, 100u8, 124u8, 160u8, 66u8,
                            248u8, 48u8, 218u8, 61u8, 52u8, 54u8, 142u8, 158u8,
                            77u8, 32u8, 63u8, 156u8, 39u8, 94u8, 255u8, 192u8,
                            238u8, 170u8, 118u8, 58u8, 42u8, 199u8, 61u8,
                            199u8, 77u8,
                        ],
                    )
                }
                #[doc = " Current slot number."]                pub fn current_slot (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: sp_consensus_slots :: Slot > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Babe",
                        "CurrentSlot",
                        vec![],
                        [
                            139u8, 237u8, 185u8, 137u8, 251u8, 179u8, 69u8,
                            167u8, 133u8, 168u8, 204u8, 64u8, 178u8, 123u8,
                            92u8, 250u8, 119u8, 190u8, 208u8, 178u8, 208u8,
                            176u8, 124u8, 187u8, 74u8, 165u8, 33u8, 78u8,
                            161u8, 206u8, 8u8, 108u8,
                        ],
                    )
                }
                #[doc = " The epoch randomness for the *current* epoch."]
                #[doc = ""]
                #[doc = " # Security"]
                #[doc = ""]
                #[doc = " This MUST NOT be used for gambling, as it can be influenced by a"]
                #[doc = " malicious validator in the short term. It MAY be used in many"]
                #[doc = " cryptographic protocols, however, so long as one remembers that this"]
                #[doc = " (like everything else on-chain) it is public. For example, it can be"]
                #[doc = " used where a number is needed that cannot have been chosen by an"]
                #[doc = " adversary, for purposes such as public-coin zero-knowledge proofs."]                pub fn randomness (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < [:: core :: primitive :: u8 ; 32usize] > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Babe",
                        "Randomness",
                        vec![],
                        [
                            191u8, 197u8, 25u8, 164u8, 104u8, 248u8, 247u8,
                            193u8, 244u8, 60u8, 181u8, 195u8, 248u8, 90u8,
                            41u8, 199u8, 82u8, 123u8, 72u8, 126u8, 18u8, 17u8,
                            128u8, 215u8, 34u8, 251u8, 227u8, 70u8, 166u8,
                            10u8, 104u8, 140u8,
                        ],
                    )
                }
                #[doc = " Pending epoch configuration change that will be applied when the next epoch is enacted."]                pub fn pending_epoch_config_change (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: sp_consensus_babe :: digests :: NextConfigDescriptor > , :: subxt :: storage :: address :: Yes , () , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Babe",
                        "PendingEpochConfigChange",
                        vec![],
                        [
                            4u8, 201u8, 0u8, 204u8, 47u8, 246u8, 4u8, 185u8,
                            163u8, 242u8, 242u8, 152u8, 29u8, 222u8, 71u8,
                            127u8, 49u8, 203u8, 206u8, 180u8, 244u8, 50u8,
                            80u8, 49u8, 199u8, 97u8, 3u8, 170u8, 156u8, 139u8,
                            106u8, 113u8,
                        ],
                    )
                }
                #[doc = " Next epoch randomness."]                pub fn next_randomness (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < [:: core :: primitive :: u8 ; 32usize] > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Babe",
                        "NextRandomness",
                        vec![],
                        [
                            185u8, 98u8, 45u8, 109u8, 253u8, 38u8, 238u8,
                            221u8, 240u8, 29u8, 38u8, 107u8, 118u8, 117u8,
                            131u8, 115u8, 21u8, 255u8, 203u8, 81u8, 243u8,
                            251u8, 91u8, 60u8, 163u8, 202u8, 125u8, 193u8,
                            173u8, 234u8, 166u8, 92u8,
                        ],
                    )
                }
                #[doc = " Next epoch authorities."]                pub fn next_authorities (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: sp_runtime :: bounded :: weak_bounded_vec :: WeakBoundedVec < (runtime_types :: sp_consensus_babe :: app :: Public , :: core :: primitive :: u64 ,) > > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Babe",
                        "NextAuthorities",
                        vec![],
                        [
                            201u8, 193u8, 164u8, 18u8, 155u8, 253u8, 124u8,
                            163u8, 143u8, 73u8, 212u8, 20u8, 241u8, 108u8,
                            110u8, 5u8, 171u8, 66u8, 224u8, 208u8, 10u8, 65u8,
                            148u8, 164u8, 1u8, 12u8, 216u8, 83u8, 20u8, 226u8,
                            254u8, 183u8,
                        ],
                    )
                }
                #[doc = " Randomness under construction."]
                #[doc = ""]
                #[doc = " We make a trade-off between storage accesses and list length."]
                #[doc = " We store the under-construction randomness in segments of up to"]
                #[doc = " `UNDER_CONSTRUCTION_SEGMENT_LENGTH`."]
                #[doc = ""]
                #[doc = " Once a segment reaches this length, we begin the next one."]
                #[doc = " We reset all segments and return to `0` at the beginning of every"]
                #[doc = " epoch."]                pub fn segment_index (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u32 > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Babe",
                        "SegmentIndex",
                        vec![],
                        [
                            128u8, 45u8, 87u8, 58u8, 174u8, 152u8, 241u8,
                            156u8, 56u8, 192u8, 19u8, 45u8, 75u8, 160u8, 35u8,
                            253u8, 145u8, 11u8, 178u8, 81u8, 114u8, 117u8,
                            112u8, 107u8, 163u8, 208u8, 240u8, 151u8, 102u8,
                            176u8, 246u8, 5u8,
                        ],
                    )
                }
                #[doc = " TWOX-NOTE: `SegmentIndex` is an increasing integer, so this is okay."]                pub fn under_construction (& self , _0 : impl :: std :: borrow :: Borrow < :: core :: primitive :: u32 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: sp_runtime :: bounded :: bounded_vec :: BoundedVec < [:: core :: primitive :: u8 ; 32usize] > > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("Babe" , "UnderConstruction" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Twox64Concat)] , [180u8 , 4u8 , 149u8 , 245u8 , 231u8 , 92u8 , 99u8 , 170u8 , 254u8 , 172u8 , 182u8 , 3u8 , 152u8 , 156u8 , 132u8 , 196u8 , 140u8 , 97u8 , 7u8 , 84u8 , 220u8 , 89u8 , 195u8 , 177u8 , 235u8 , 51u8 , 98u8 , 144u8 , 73u8 , 238u8 , 59u8 , 164u8 ,])
                }
                #[doc = " TWOX-NOTE: `SegmentIndex` is an increasing integer, so this is okay."]                pub fn under_construction_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: sp_runtime :: bounded :: bounded_vec :: BoundedVec < [:: core :: primitive :: u8 ; 32usize] > > , () , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Babe",
                        "UnderConstruction",
                        Vec::new(),
                        [
                            180u8, 4u8, 149u8, 245u8, 231u8, 92u8, 99u8, 170u8,
                            254u8, 172u8, 182u8, 3u8, 152u8, 156u8, 132u8,
                            196u8, 140u8, 97u8, 7u8, 84u8, 220u8, 89u8, 195u8,
                            177u8, 235u8, 51u8, 98u8, 144u8, 73u8, 238u8, 59u8,
                            164u8,
                        ],
                    )
                }
                #[doc = " Temporary value (cleared at block finalization) which is `Some`"]
                #[doc = " if per-block initialization has already been called for current block."]                pub fn initialized (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: option :: Option < runtime_types :: sp_consensus_babe :: digests :: PreDigest > > , :: subxt :: storage :: address :: Yes , () , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Babe",
                        "Initialized",
                        vec![],
                        [
                            142u8, 101u8, 250u8, 113u8, 93u8, 201u8, 157u8,
                            18u8, 166u8, 153u8, 59u8, 197u8, 107u8, 247u8,
                            124u8, 110u8, 202u8, 67u8, 62u8, 57u8, 186u8,
                            134u8, 49u8, 182u8, 149u8, 44u8, 255u8, 85u8, 87u8,
                            177u8, 149u8, 121u8,
                        ],
                    )
                }
                #[doc = " This field should always be populated during block processing unless"]
                #[doc = " secondary plain slots are enabled (which don't contain a VRF output)."]
                #[doc = ""]
                #[doc = " It is set in `on_finalize`, before it will contain the value from the last block."]                pub fn author_vrf_randomness (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: option :: Option < [:: core :: primitive :: u8 ; 32usize] > > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Babe",
                        "AuthorVrfRandomness",
                        vec![],
                        [
                            66u8, 235u8, 74u8, 252u8, 222u8, 135u8, 19u8, 28u8,
                            74u8, 191u8, 170u8, 197u8, 207u8, 127u8, 77u8,
                            121u8, 138u8, 138u8, 110u8, 187u8, 34u8, 14u8,
                            230u8, 43u8, 241u8, 241u8, 63u8, 163u8, 53u8,
                            179u8, 250u8, 247u8,
                        ],
                    )
                }
                #[doc = " The block numbers when the last and current epoch have started, respectively `N-1` and"]
                #[doc = " `N`."]
                #[doc = " NOTE: We track this is in order to annotate the block number when a given pool of"]
                #[doc = " entropy was fixed (i.e. it was known to chain observers). Since epochs are defined in"]
                #[doc = " slots, which may be skipped, the block numbers may not line up with the slot numbers."]                pub fn epoch_start (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < (:: core :: primitive :: u64 , :: core :: primitive :: u64 ,) > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Babe",
                        "EpochStart",
                        vec![],
                        [
                            108u8, 16u8, 132u8, 125u8, 122u8, 198u8, 22u8,
                            251u8, 231u8, 157u8, 74u8, 188u8, 193u8, 42u8,
                            78u8, 83u8, 108u8, 207u8, 49u8, 166u8, 105u8,
                            143u8, 25u8, 87u8, 145u8, 240u8, 229u8, 211u8,
                            90u8, 43u8, 22u8, 197u8,
                        ],
                    )
                }
                #[doc = " How late the current block is compared to its parent."]
                #[doc = ""]
                #[doc = " This entry is populated as part of block execution and is cleaned up"]
                #[doc = " on block finalization. Querying this storage entry outside of block"]
                #[doc = " execution context should always yield zero."]                pub fn lateness (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u64 > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Babe",
                        "Lateness",
                        vec![],
                        [
                            8u8, 9u8, 112u8, 117u8, 174u8, 35u8, 125u8, 86u8,
                            41u8, 12u8, 7u8, 240u8, 27u8, 162u8, 6u8, 167u8,
                            143u8, 69u8, 140u8, 109u8, 99u8, 209u8, 105u8,
                            65u8, 240u8, 79u8, 76u8, 4u8, 3u8, 55u8, 157u8,
                            40u8,
                        ],
                    )
                }
                #[doc = " The configuration for the current epoch. Should never be `None` as it is initialized in"]
                #[doc = " genesis."]                pub fn epoch_config (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: sp_consensus_babe :: BabeEpochConfiguration > , :: subxt :: storage :: address :: Yes , () , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Babe",
                        "EpochConfig",
                        vec![],
                        [
                            41u8, 118u8, 141u8, 244u8, 72u8, 17u8, 125u8,
                            203u8, 43u8, 153u8, 203u8, 119u8, 117u8, 223u8,
                            123u8, 133u8, 73u8, 235u8, 130u8, 21u8, 160u8,
                            167u8, 16u8, 173u8, 177u8, 35u8, 117u8, 97u8,
                            149u8, 49u8, 220u8, 24u8,
                        ],
                    )
                }
                #[doc = " The configuration for the next epoch, `None` if the config will not change"]
                #[doc = " (you can fallback to `EpochConfig` instead in that case)."]                pub fn next_epoch_config (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: sp_consensus_babe :: BabeEpochConfiguration > , :: subxt :: storage :: address :: Yes , () , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Babe",
                        "NextEpochConfig",
                        vec![],
                        [
                            111u8, 182u8, 144u8, 180u8, 92u8, 146u8, 102u8,
                            249u8, 196u8, 229u8, 226u8, 30u8, 25u8, 198u8,
                            133u8, 9u8, 136u8, 95u8, 11u8, 151u8, 139u8, 156u8,
                            105u8, 228u8, 181u8, 12u8, 175u8, 148u8, 174u8,
                            33u8, 233u8, 228u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The amount of time, in slots, that each epoch should last."]
                #[doc = " NOTE: Currently it is not possible to change the epoch duration after"]
                #[doc = " the chain has started. Attempting to do so will brick block production."]
                pub fn epoch_duration(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<::core::primitive::u64>,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "Babe",
                        "EpochDuration",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8,
                            231u8, 190u8, 146u8, 59u8, 226u8, 157u8, 101u8,
                            103u8, 117u8, 249u8, 65u8, 18u8, 191u8, 103u8,
                            119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8,
                            239u8, 42u8, 246u8,
                        ],
                    )
                }
                #[doc = " The expected average block time at which BABE should be creating"]
                #[doc = " blocks. Since BABE is probabilistic it is not trivial to figure out"]
                #[doc = " what the expected average block time should be based on the slot"]
                #[doc = " duration and the security parameter `c` (where `1 - c` represents"]
                #[doc = " the probability of a slot being empty)."]
                pub fn expected_block_time(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<::core::primitive::u64>,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "Babe",
                        "ExpectedBlockTime",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8,
                            231u8, 190u8, 146u8, 59u8, 226u8, 157u8, 101u8,
                            103u8, 117u8, 249u8, 65u8, 18u8, 191u8, 103u8,
                            119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8,
                            239u8, 42u8, 246u8,
                        ],
                    )
                }
                #[doc = " Max number of authorities allowed"]
                pub fn max_authorities(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "Babe",
                        "MaxAuthorities",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8,
                            200u8, 157u8, 125u8, 151u8, 53u8, 76u8, 168u8,
                            26u8, 10u8, 9u8, 98u8, 68u8, 9u8, 178u8, 197u8,
                            113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod authorship {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct SetUncles {
                pub new_uncles: ::std::vec::Vec<
                    runtime_types::sp_runtime::generic::header::Header<
                        ::core::primitive::u64,
                        runtime_types::sp_runtime::traits::BlakeTwo256,
                    >,
                >,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Provide a set of uncles."]
                pub fn set_uncles(
                    &self,
                    new_uncles: ::std::vec::Vec<
                        runtime_types::sp_runtime::generic::header::Header<
                            ::core::primitive::u64,
                            runtime_types::sp_runtime::traits::BlakeTwo256,
                        >,
                    >,
                ) -> ::subxt::tx::StaticTxPayload<SetUncles> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Authorship",
                        "set_uncles",
                        SetUncles { new_uncles },
                        [
                            145u8, 151u8, 19u8, 25u8, 215u8, 52u8, 2u8, 133u8,
                            36u8, 96u8, 254u8, 251u8, 120u8, 238u8, 183u8,
                            33u8, 150u8, 5u8, 102u8, 122u8, 28u8, 51u8, 248u8,
                            21u8, 160u8, 196u8, 111u8, 159u8, 145u8, 71u8,
                            144u8, 126u8,
                        ],
                    )
                }
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Uncles"]                pub fn uncles (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: sp_runtime :: bounded :: bounded_vec :: BoundedVec < runtime_types :: pallet_authorship :: UncleEntryItem < :: core :: primitive :: u64 , :: subxt :: ext :: sp_core :: H256 , :: subxt :: ext :: sp_core :: crypto :: AccountId32 > > > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Authorship",
                        "Uncles",
                        vec![],
                        [
                            111u8, 12u8, 34u8, 219u8, 27u8, 243u8, 210u8, 10u8,
                            36u8, 166u8, 107u8, 2u8, 103u8, 149u8, 185u8, 83u8,
                            221u8, 138u8, 173u8, 172u8, 176u8, 136u8, 106u8,
                            169u8, 49u8, 254u8, 21u8, 45u8, 70u8, 228u8, 127u8,
                            30u8,
                        ],
                    )
                }
                #[doc = " Author of current block."]                pub fn author (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: subxt :: ext :: sp_core :: crypto :: AccountId32 > , :: subxt :: storage :: address :: Yes , () , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Authorship",
                        "Author",
                        vec![],
                        [
                            149u8, 42u8, 33u8, 147u8, 190u8, 207u8, 174u8,
                            227u8, 190u8, 110u8, 25u8, 131u8, 5u8, 167u8,
                            237u8, 188u8, 188u8, 33u8, 177u8, 126u8, 181u8,
                            49u8, 126u8, 118u8, 46u8, 128u8, 154u8, 95u8, 15u8,
                            91u8, 103u8, 113u8,
                        ],
                    )
                }
                #[doc = " Whether uncles were already set in this block."]                pub fn did_set_uncles (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: bool > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Authorship",
                        "DidSetUncles",
                        vec![],
                        [
                            64u8, 3u8, 208u8, 187u8, 50u8, 45u8, 37u8, 88u8,
                            163u8, 226u8, 37u8, 126u8, 232u8, 107u8, 156u8,
                            187u8, 29u8, 15u8, 53u8, 46u8, 28u8, 73u8, 83u8,
                            123u8, 14u8, 244u8, 243u8, 43u8, 245u8, 143u8,
                            15u8, 115u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The number of blocks back we should accept uncles."]
                #[doc = " This means that we will deal with uncle-parents that are"]
                #[doc = " `UncleGenerations + 1` before `now`."]
                pub fn uncle_generations(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<::core::primitive::u64>,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "Authorship",
                        "UncleGenerations",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8,
                            231u8, 190u8, 146u8, 59u8, 226u8, 157u8, 101u8,
                            103u8, 117u8, 249u8, 65u8, 18u8, 191u8, 103u8,
                            119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8,
                            239u8, 42u8, 246u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod indices {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Claim {
                pub index: ::core::primitive::u32,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Transfer {
                pub new: ::subxt::ext::sp_runtime::MultiAddress<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                pub index: ::core::primitive::u32,
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Free {
                pub index: ::core::primitive::u32,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct ForceTransfer {
                pub new: ::subxt::ext::sp_runtime::MultiAddress<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                pub index: ::core::primitive::u32,
                pub freeze: ::core::primitive::bool,
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Freeze {
                pub index: ::core::primitive::u32,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Assign an previously unassigned index."]
                #[doc = ""]
                #[doc = "Payment: `Deposit` is reserved from the sender account."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `index`: the index to be claimed. This must not be in use."]
                #[doc = ""]
                #[doc = "Emits `IndexAssigned` if successful."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- `O(1)`."]
                #[doc = "- One storage mutation (codec `O(1)`)."]
                #[doc = "- One reserve operation."]
                #[doc = "- One event."]
                #[doc = "-------------------"]
                #[doc = "- DB Weight: 1 Read/Write (Accounts)"]
                #[doc = "# </weight>"]
                pub fn claim(
                    &self,
                    index: ::core::primitive::u32,
                ) -> ::subxt::tx::StaticTxPayload<Claim> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Indices",
                        "claim",
                        Claim { index },
                        [
                            5u8, 24u8, 11u8, 173u8, 226u8, 170u8, 0u8, 30u8,
                            193u8, 102u8, 214u8, 59u8, 252u8, 32u8, 221u8,
                            88u8, 196u8, 189u8, 244u8, 18u8, 233u8, 37u8,
                            228u8, 248u8, 76u8, 175u8, 212u8, 233u8, 238u8,
                            203u8, 162u8, 68u8,
                        ],
                    )
                }
                #[doc = "Assign an index already owned by the sender to another account. The balance reservation"]
                #[doc = "is effectively transferred to the new account."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `index`: the index to be re-assigned. This must be owned by the sender."]
                #[doc = "- `new`: the new owner of the index. This function is a no-op if it is equal to sender."]
                #[doc = ""]
                #[doc = "Emits `IndexAssigned` if successful."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- `O(1)`."]
                #[doc = "- One storage mutation (codec `O(1)`)."]
                #[doc = "- One transfer operation."]
                #[doc = "- One event."]
                #[doc = "-------------------"]
                #[doc = "- DB Weight:"]
                #[doc = "   - Reads: Indices Accounts, System Account (recipient)"]
                #[doc = "   - Writes: Indices Accounts, System Account (recipient)"]
                #[doc = "# </weight>"]
                pub fn transfer(
                    &self,
                    new: ::subxt::ext::sp_runtime::MultiAddress<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    index: ::core::primitive::u32,
                ) -> ::subxt::tx::StaticTxPayload<Transfer> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Indices",
                        "transfer",
                        Transfer { new, index },
                        [
                            1u8, 83u8, 197u8, 184u8, 8u8, 96u8, 48u8, 146u8,
                            116u8, 76u8, 229u8, 115u8, 226u8, 215u8, 41u8,
                            154u8, 27u8, 34u8, 205u8, 188u8, 10u8, 169u8,
                            203u8, 39u8, 2u8, 236u8, 181u8, 162u8, 115u8,
                            254u8, 42u8, 28u8,
                        ],
                    )
                }
                #[doc = "Free up an index owned by the sender."]
                #[doc = ""]
                #[doc = "Payment: Any previous deposit placed for the index is unreserved in the sender account."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ and the sender must own the index."]
                #[doc = ""]
                #[doc = "- `index`: the index to be freed. This must be owned by the sender."]
                #[doc = ""]
                #[doc = "Emits `IndexFreed` if successful."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- `O(1)`."]
                #[doc = "- One storage mutation (codec `O(1)`)."]
                #[doc = "- One reserve operation."]
                #[doc = "- One event."]
                #[doc = "-------------------"]
                #[doc = "- DB Weight: 1 Read/Write (Accounts)"]
                #[doc = "# </weight>"]
                pub fn free(
                    &self,
                    index: ::core::primitive::u32,
                ) -> ::subxt::tx::StaticTxPayload<Free> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Indices",
                        "free",
                        Free { index },
                        [
                            133u8, 202u8, 225u8, 127u8, 69u8, 145u8, 43u8,
                            13u8, 160u8, 248u8, 215u8, 243u8, 232u8, 166u8,
                            74u8, 203u8, 235u8, 138u8, 255u8, 27u8, 163u8,
                            71u8, 254u8, 217u8, 6u8, 208u8, 202u8, 204u8,
                            238u8, 70u8, 126u8, 252u8,
                        ],
                    )
                }
                #[doc = "Force an index to an account. This doesn't require a deposit. If the index is already"]
                #[doc = "held, then any deposit is reimbursed to its current owner."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Root_."]
                #[doc = ""]
                #[doc = "- `index`: the index to be (re-)assigned."]
                #[doc = "- `new`: the new owner of the index. This function is a no-op if it is equal to sender."]
                #[doc = "- `freeze`: if set to `true`, will freeze the index so it cannot be transferred."]
                #[doc = ""]
                #[doc = "Emits `IndexAssigned` if successful."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- `O(1)`."]
                #[doc = "- One storage mutation (codec `O(1)`)."]
                #[doc = "- Up to one reserve operation."]
                #[doc = "- One event."]
                #[doc = "-------------------"]
                #[doc = "- DB Weight:"]
                #[doc = "   - Reads: Indices Accounts, System Account (original owner)"]
                #[doc = "   - Writes: Indices Accounts, System Account (original owner)"]
                #[doc = "# </weight>"]
                pub fn force_transfer(
                    &self,
                    new: ::subxt::ext::sp_runtime::MultiAddress<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    index: ::core::primitive::u32,
                    freeze: ::core::primitive::bool,
                ) -> ::subxt::tx::StaticTxPayload<ForceTransfer>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Indices",
                        "force_transfer",
                        ForceTransfer { new, index, freeze },
                        [
                            126u8, 8u8, 145u8, 175u8, 177u8, 153u8, 131u8,
                            123u8, 184u8, 53u8, 72u8, 207u8, 21u8, 140u8, 87u8,
                            181u8, 172u8, 64u8, 37u8, 165u8, 121u8, 111u8,
                            173u8, 224u8, 181u8, 79u8, 76u8, 134u8, 93u8,
                            169u8, 65u8, 131u8,
                        ],
                    )
                }
                #[doc = "Freeze an index so it will always point to the sender account. This consumes the"]
                #[doc = "deposit."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ and the signing account must have a"]
                #[doc = "non-frozen account `index`."]
                #[doc = ""]
                #[doc = "- `index`: the index to be frozen in place."]
                #[doc = ""]
                #[doc = "Emits `IndexFrozen` if successful."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- `O(1)`."]
                #[doc = "- One storage mutation (codec `O(1)`)."]
                #[doc = "- Up to one slash operation."]
                #[doc = "- One event."]
                #[doc = "-------------------"]
                #[doc = "- DB Weight: 1 Read/Write (Accounts)"]
                #[doc = "# </weight>"]
                pub fn freeze(
                    &self,
                    index: ::core::primitive::u32,
                ) -> ::subxt::tx::StaticTxPayload<Freeze> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Indices",
                        "freeze",
                        Freeze { index },
                        [
                            121u8, 45u8, 118u8, 2u8, 72u8, 48u8, 38u8, 7u8,
                            234u8, 204u8, 68u8, 20u8, 76u8, 251u8, 205u8,
                            246u8, 149u8, 31u8, 168u8, 186u8, 208u8, 90u8,
                            40u8, 47u8, 100u8, 228u8, 188u8, 33u8, 79u8, 220u8,
                            105u8, 209u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_indices::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "A account index was assigned."]
            pub struct IndexAssigned {
                pub who: ::subxt::ext::sp_core::crypto::AccountId32,
                pub index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for IndexAssigned {
                const PALLET: &'static str = "Indices";
                const EVENT: &'static str = "IndexAssigned";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "A account index has been freed up (unassigned)."]
            pub struct IndexFreed {
                pub index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for IndexFreed {
                const PALLET: &'static str = "Indices";
                const EVENT: &'static str = "IndexFreed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "A account index has been frozen to its current account ID."]
            pub struct IndexFrozen {
                pub index: ::core::primitive::u32,
                pub who: ::subxt::ext::sp_core::crypto::AccountId32,
            }
            impl ::subxt::events::StaticEvent for IndexFrozen {
                const PALLET: &'static str = "Indices";
                const EVENT: &'static str = "IndexFrozen";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The lookup from index to account."]                pub fn accounts (& self , _0 : impl :: std :: borrow :: Borrow < :: core :: primitive :: u32 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < (:: subxt :: ext :: sp_core :: crypto :: AccountId32 , :: core :: primitive :: u128 , :: core :: primitive :: bool ,) > , :: subxt :: storage :: address :: Yes , () , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("Indices" , "Accounts" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Blake2_128Concat)] , [211u8 , 169u8 , 54u8 , 254u8 , 88u8 , 57u8 , 22u8 , 223u8 , 108u8 , 27u8 , 38u8 , 9u8 , 202u8 , 209u8 , 111u8 , 209u8 , 144u8 , 13u8 , 211u8 , 114u8 , 239u8 , 127u8 , 75u8 , 166u8 , 234u8 , 222u8 , 225u8 , 35u8 , 160u8 , 163u8 , 112u8 , 242u8 ,])
                }
                #[doc = " The lookup from index to account."]                pub fn accounts_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < (:: subxt :: ext :: sp_core :: crypto :: AccountId32 , :: core :: primitive :: u128 , :: core :: primitive :: bool ,) > , () , () , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Indices",
                        "Accounts",
                        Vec::new(),
                        [
                            211u8, 169u8, 54u8, 254u8, 88u8, 57u8, 22u8, 223u8,
                            108u8, 27u8, 38u8, 9u8, 202u8, 209u8, 111u8, 209u8,
                            144u8, 13u8, 211u8, 114u8, 239u8, 127u8, 75u8,
                            166u8, 234u8, 222u8, 225u8, 35u8, 160u8, 163u8,
                            112u8, 242u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The deposit needed for reserving an index."]
                pub fn deposit(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<
                        ::core::primitive::u128,
                    >,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "Indices",
                        "Deposit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8,
                            105u8, 200u8, 214u8, 27u8, 144u8, 208u8, 218u8,
                            160u8, 130u8, 109u8, 101u8, 54u8, 210u8, 136u8,
                            71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8,
                            148u8, 156u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod balances {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Transfer {
                pub dest: ::subxt::ext::sp_runtime::MultiAddress<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                #[codec(compact)]
                pub value: ::core::primitive::u128,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct SetBalance {
                pub who: ::subxt::ext::sp_runtime::MultiAddress<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                #[codec(compact)]
                pub new_free: ::core::primitive::u128,
                #[codec(compact)]
                pub new_reserved: ::core::primitive::u128,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct ForceTransfer {
                pub source: ::subxt::ext::sp_runtime::MultiAddress<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                pub dest: ::subxt::ext::sp_runtime::MultiAddress<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                #[codec(compact)]
                pub value: ::core::primitive::u128,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct TransferKeepAlive {
                pub dest: ::subxt::ext::sp_runtime::MultiAddress<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                #[codec(compact)]
                pub value: ::core::primitive::u128,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct TransferAll {
                pub dest: ::subxt::ext::sp_runtime::MultiAddress<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                pub keep_alive: ::core::primitive::bool,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct ForceUnreserve {
                pub who: ::subxt::ext::sp_runtime::MultiAddress<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                pub amount: ::core::primitive::u128,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Transfer some liquid free balance to another account."]
                #[doc = ""]
                #[doc = "`transfer` will set the `FreeBalance` of the sender and receiver."]
                #[doc = "If the sender's account is below the existential deposit as a result"]
                #[doc = "of the transfer, the account will be reaped."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be `Signed` by the transactor."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- Dependent on arguments but not critical, given proper implementations for input config"]
                #[doc = "  types. See related functions below."]
                #[doc = "- It contains a limited number of reads and writes internally and no complex"]
                #[doc = "  computation."]
                #[doc = ""]
                #[doc = "Related functions:"]
                #[doc = ""]
                #[doc = "  - `ensure_can_withdraw` is always called internally but has a bounded complexity."]
                #[doc = "  - Transferring balances to accounts that did not exist before will cause"]
                #[doc = "    `T::OnNewAccount::on_new_account` to be called."]
                #[doc = "  - Removing enough funds from an account will trigger `T::DustRemoval::on_unbalanced`."]
                #[doc = "  - `transfer_keep_alive` works the same way as `transfer`, but has an additional check"]
                #[doc = "    that the transfer will not kill the origin account."]
                #[doc = "---------------------------------"]
                #[doc = "- Origin account is already in memory, so no DB operations for them."]
                #[doc = "# </weight>"]
                pub fn transfer(
                    &self,
                    dest: ::subxt::ext::sp_runtime::MultiAddress<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    value: ::core::primitive::u128,
                ) -> ::subxt::tx::StaticTxPayload<Transfer> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Balances",
                        "transfer",
                        Transfer { dest, value },
                        [
                            255u8, 181u8, 144u8, 248u8, 64u8, 167u8, 5u8,
                            134u8, 208u8, 20u8, 223u8, 103u8, 235u8, 35u8,
                            66u8, 184u8, 27u8, 94u8, 176u8, 60u8, 233u8, 236u8,
                            145u8, 218u8, 44u8, 138u8, 240u8, 224u8, 16u8,
                            193u8, 220u8, 95u8,
                        ],
                    )
                }
                #[doc = "Set the balances of a given account."]
                #[doc = ""]
                #[doc = "This will alter `FreeBalance` and `ReservedBalance` in storage. it will"]
                #[doc = "also alter the total issuance of the system (`TotalIssuance`) appropriately."]
                #[doc = "If the new free or reserved balance is below the existential deposit,"]
                #[doc = "it will reset the account nonce (`frame_system::AccountNonce`)."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call is `root`."]
                pub fn set_balance(
                    &self,
                    who: ::subxt::ext::sp_runtime::MultiAddress<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    new_free: ::core::primitive::u128,
                    new_reserved: ::core::primitive::u128,
                ) -> ::subxt::tx::StaticTxPayload<SetBalance> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Balances",
                        "set_balance",
                        SetBalance {
                            who,
                            new_free,
                            new_reserved,
                        },
                        [
                            174u8, 34u8, 80u8, 252u8, 193u8, 51u8, 228u8,
                            236u8, 234u8, 16u8, 173u8, 214u8, 122u8, 21u8,
                            254u8, 7u8, 49u8, 176u8, 18u8, 128u8, 122u8, 68u8,
                            72u8, 181u8, 119u8, 90u8, 167u8, 46u8, 203u8,
                            220u8, 109u8, 110u8,
                        ],
                    )
                }
                #[doc = "Exactly as `transfer`, except the origin must be root and the source account may be"]
                #[doc = "specified."]
                #[doc = "# <weight>"]
                #[doc = "- Same as transfer, but additional read and write because the source account is not"]
                #[doc = "  assumed to be in the overlay."]
                #[doc = "# </weight>"]
                pub fn force_transfer(
                    &self,
                    source: ::subxt::ext::sp_runtime::MultiAddress<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    dest: ::subxt::ext::sp_runtime::MultiAddress<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    value: ::core::primitive::u128,
                ) -> ::subxt::tx::StaticTxPayload<ForceTransfer>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Balances",
                        "force_transfer",
                        ForceTransfer {
                            source,
                            dest,
                            value,
                        },
                        [
                            56u8, 80u8, 186u8, 45u8, 134u8, 147u8, 200u8, 19u8,
                            53u8, 221u8, 213u8, 32u8, 13u8, 51u8, 130u8, 42u8,
                            244u8, 85u8, 50u8, 246u8, 189u8, 51u8, 93u8, 1u8,
                            108u8, 142u8, 112u8, 245u8, 104u8, 255u8, 15u8,
                            62u8,
                        ],
                    )
                }
                #[doc = "Same as the [`transfer`] call, but with a check that the transfer will not kill the"]
                #[doc = "origin account."]
                #[doc = ""]
                #[doc = "99% of the time you want [`transfer`] instead."]
                #[doc = ""]
                #[doc = "[`transfer`]: struct.Pallet.html#method.transfer"]
                pub fn transfer_keep_alive(
                    &self,
                    dest: ::subxt::ext::sp_runtime::MultiAddress<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    value: ::core::primitive::u128,
                ) -> ::subxt::tx::StaticTxPayload<TransferKeepAlive>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Balances",
                        "transfer_keep_alive",
                        TransferKeepAlive { dest, value },
                        [
                            202u8, 239u8, 204u8, 0u8, 52u8, 57u8, 158u8, 8u8,
                            252u8, 178u8, 91u8, 197u8, 238u8, 186u8, 205u8,
                            56u8, 217u8, 250u8, 21u8, 44u8, 239u8, 66u8, 79u8,
                            99u8, 25u8, 106u8, 70u8, 226u8, 50u8, 255u8, 176u8,
                            71u8,
                        ],
                    )
                }
                #[doc = "Transfer the entire transferable balance from the caller account."]
                #[doc = ""]
                #[doc = "NOTE: This function only attempts to transfer _transferable_ balances. This means that"]
                #[doc = "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be"]
                #[doc = "transferred by this function. To ensure that this function results in a killed account,"]
                #[doc = "you might need to prepare the account by removing any reference counters, storage"]
                #[doc = "deposits, etc..."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be Signed."]
                #[doc = ""]
                #[doc = "- `dest`: The recipient of the transfer."]
                #[doc = "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all"]
                #[doc = "  of the funds the account has, causing the sender account to be killed (false), or"]
                #[doc = "  transfer everything except at least the existential deposit, which will guarantee to"]
                #[doc = "  keep the sender account alive (true). # <weight>"]
                #[doc = "- O(1). Just like transfer, but reading the user's transferable balance first."]
                #[doc = "  #</weight>"]
                pub fn transfer_all(
                    &self,
                    dest: ::subxt::ext::sp_runtime::MultiAddress<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    keep_alive: ::core::primitive::bool,
                ) -> ::subxt::tx::StaticTxPayload<TransferAll> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Balances",
                        "transfer_all",
                        TransferAll { dest, keep_alive },
                        [
                            118u8, 215u8, 198u8, 243u8, 4u8, 173u8, 108u8,
                            224u8, 113u8, 203u8, 149u8, 23u8, 130u8, 176u8,
                            53u8, 205u8, 112u8, 147u8, 88u8, 167u8, 197u8,
                            32u8, 104u8, 117u8, 201u8, 168u8, 144u8, 230u8,
                            120u8, 29u8, 122u8, 159u8,
                        ],
                    )
                }
                #[doc = "Unreserve some balance from a user by force."]
                #[doc = ""]
                #[doc = "Can only be called by ROOT."]
                pub fn force_unreserve(
                    &self,
                    who: ::subxt::ext::sp_runtime::MultiAddress<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    amount: ::core::primitive::u128,
                ) -> ::subxt::tx::StaticTxPayload<ForceUnreserve>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Balances",
                        "force_unreserve",
                        ForceUnreserve { who, amount },
                        [
                            39u8, 229u8, 111u8, 44u8, 147u8, 80u8, 7u8, 26u8,
                            185u8, 121u8, 149u8, 25u8, 151u8, 37u8, 124u8,
                            46u8, 108u8, 136u8, 167u8, 145u8, 103u8, 65u8,
                            33u8, 168u8, 36u8, 214u8, 126u8, 237u8, 180u8,
                            61u8, 108u8, 110u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_balances::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "An account was created with some free balance."]
            pub struct Endowed {
                pub account: ::subxt::ext::sp_core::crypto::AccountId32,
                pub free_balance: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Endowed {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Endowed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "An account was removed whose balance was non-zero but below ExistentialDeposit,"]
            #[doc = "resulting in an outright loss."]
            pub struct DustLost {
                pub account: ::subxt::ext::sp_core::crypto::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for DustLost {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "DustLost";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "Transfer succeeded."]
            pub struct Transfer {
                pub from: ::subxt::ext::sp_core::crypto::AccountId32,
                pub to: ::subxt::ext::sp_core::crypto::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Transfer {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Transfer";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "A balance was set by root."]
            pub struct BalanceSet {
                pub who: ::subxt::ext::sp_core::crypto::AccountId32,
                pub free: ::core::primitive::u128,
                pub reserved: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for BalanceSet {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "BalanceSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "Some balance was reserved (moved from free to reserved)."]
            pub struct Reserved {
                pub who: ::subxt::ext::sp_core::crypto::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Reserved {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Reserved";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "Some balance was unreserved (moved from reserved to free)."]
            pub struct Unreserved {
                pub who: ::subxt::ext::sp_core::crypto::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Unreserved {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Unreserved";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "Some balance was moved from the reserve of the first account to the second account."]
            #[doc = "Final argument indicates the destination balance type."]
            pub struct ReserveRepatriated { pub from : :: subxt :: ext :: sp_core :: crypto :: AccountId32 , pub to : :: subxt :: ext :: sp_core :: crypto :: AccountId32 , pub amount : :: core :: primitive :: u128 , pub destination_status : runtime_types :: frame_support :: traits :: tokens :: misc :: BalanceStatus , }
            impl ::subxt::events::StaticEvent for ReserveRepatriated {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "ReserveRepatriated";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "Some amount was deposited (e.g. for transaction fees)."]
            pub struct Deposit {
                pub who: ::subxt::ext::sp_core::crypto::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Deposit {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Deposit";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "Some amount was withdrawn from the account (e.g. for transaction fees)."]
            pub struct Withdraw {
                pub who: ::subxt::ext::sp_core::crypto::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Withdraw {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Withdraw";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "Some amount was removed from the account (e.g. for misbehavior)."]
            pub struct Slashed {
                pub who: ::subxt::ext::sp_core::crypto::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Slashed {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Slashed";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The total units issued in the system."]                pub fn total_issuance (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u128 > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Balances",
                        "TotalIssuance",
                        vec![],
                        [
                            1u8, 206u8, 252u8, 237u8, 6u8, 30u8, 20u8, 232u8,
                            164u8, 115u8, 51u8, 156u8, 156u8, 206u8, 241u8,
                            187u8, 44u8, 84u8, 25u8, 164u8, 235u8, 20u8, 86u8,
                            242u8, 124u8, 23u8, 28u8, 140u8, 26u8, 73u8, 231u8,
                            51u8,
                        ],
                    )
                }
                #[doc = " The Balances pallet example of storing the balance of an account."]
                #[doc = ""]
                #[doc = " # Example"]
                #[doc = ""]
                #[doc = " ```nocompile"]
                #[doc = "  impl pallet_balances::Config for Runtime {"]
                #[doc = "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>"]
                #[doc = "  }"]
                #[doc = " ```"]
                #[doc = ""]
                #[doc = " You can also store the balance of an account in the `System` pallet."]
                #[doc = ""]
                #[doc = " # Example"]
                #[doc = ""]
                #[doc = " ```nocompile"]
                #[doc = "  impl pallet_balances::Config for Runtime {"]
                #[doc = "   type AccountStore = System"]
                #[doc = "  }"]
                #[doc = " ```"]
                #[doc = ""]
                #[doc = " But this comes with tradeoffs, storing account balances in the system pallet stores"]
                #[doc = " `frame_system` data alongside the account data contrary to storing account balances in the"]
                #[doc = " `Balances` pallet, which uses a `StorageMap` to store balances data only."]
                #[doc = " NOTE: This is only used in the case that this pallet is used to store balances."]                pub fn account (& self , _0 : impl :: std :: borrow :: Borrow < :: subxt :: ext :: sp_core :: crypto :: AccountId32 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_balances :: AccountData < :: core :: primitive :: u128 > > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("Balances" , "Account" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Blake2_128Concat)] , [246u8 , 154u8 , 253u8 , 71u8 , 192u8 , 192u8 , 192u8 , 236u8 , 128u8 , 80u8 , 40u8 , 252u8 , 201u8 , 43u8 , 3u8 , 131u8 , 19u8 , 49u8 , 141u8 , 240u8 , 172u8 , 217u8 , 215u8 , 109u8 , 87u8 , 135u8 , 248u8 , 57u8 , 98u8 , 185u8 , 22u8 , 4u8 ,])
                }
                #[doc = " The Balances pallet example of storing the balance of an account."]
                #[doc = ""]
                #[doc = " # Example"]
                #[doc = ""]
                #[doc = " ```nocompile"]
                #[doc = "  impl pallet_balances::Config for Runtime {"]
                #[doc = "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>"]
                #[doc = "  }"]
                #[doc = " ```"]
                #[doc = ""]
                #[doc = " You can also store the balance of an account in the `System` pallet."]
                #[doc = ""]
                #[doc = " # Example"]
                #[doc = ""]
                #[doc = " ```nocompile"]
                #[doc = "  impl pallet_balances::Config for Runtime {"]
                #[doc = "   type AccountStore = System"]
                #[doc = "  }"]
                #[doc = " ```"]
                #[doc = ""]
                #[doc = " But this comes with tradeoffs, storing account balances in the system pallet stores"]
                #[doc = " `frame_system` data alongside the account data contrary to storing account balances in the"]
                #[doc = " `Balances` pallet, which uses a `StorageMap` to store balances data only."]
                #[doc = " NOTE: This is only used in the case that this pallet is used to store balances."]                pub fn account_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_balances :: AccountData < :: core :: primitive :: u128 > > , () , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Balances",
                        "Account",
                        Vec::new(),
                        [
                            246u8, 154u8, 253u8, 71u8, 192u8, 192u8, 192u8,
                            236u8, 128u8, 80u8, 40u8, 252u8, 201u8, 43u8, 3u8,
                            131u8, 19u8, 49u8, 141u8, 240u8, 172u8, 217u8,
                            215u8, 109u8, 87u8, 135u8, 248u8, 57u8, 98u8,
                            185u8, 22u8, 4u8,
                        ],
                    )
                }
                #[doc = " Any liquidity locks on some account balances."]
                #[doc = " NOTE: Should only be accessed when setting, changing and freeing a lock."]                pub fn locks (& self , _0 : impl :: std :: borrow :: Borrow < :: subxt :: ext :: sp_core :: crypto :: AccountId32 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: sp_runtime :: bounded :: weak_bounded_vec :: WeakBoundedVec < runtime_types :: pallet_balances :: BalanceLock < :: core :: primitive :: u128 > > > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("Balances" , "Locks" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Blake2_128Concat)] , [216u8 , 253u8 , 87u8 , 73u8 , 24u8 , 218u8 , 35u8 , 0u8 , 244u8 , 134u8 , 195u8 , 58u8 , 255u8 , 64u8 , 153u8 , 212u8 , 210u8 , 232u8 , 4u8 , 122u8 , 90u8 , 212u8 , 136u8 , 14u8 , 127u8 , 232u8 , 8u8 , 192u8 , 40u8 , 233u8 , 18u8 , 250u8 ,])
                }
                #[doc = " Any liquidity locks on some account balances."]
                #[doc = " NOTE: Should only be accessed when setting, changing and freeing a lock."]                pub fn locks_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: sp_runtime :: bounded :: weak_bounded_vec :: WeakBoundedVec < runtime_types :: pallet_balances :: BalanceLock < :: core :: primitive :: u128 > > > , () , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Balances",
                        "Locks",
                        Vec::new(),
                        [
                            216u8, 253u8, 87u8, 73u8, 24u8, 218u8, 35u8, 0u8,
                            244u8, 134u8, 195u8, 58u8, 255u8, 64u8, 153u8,
                            212u8, 210u8, 232u8, 4u8, 122u8, 90u8, 212u8,
                            136u8, 14u8, 127u8, 232u8, 8u8, 192u8, 40u8, 233u8,
                            18u8, 250u8,
                        ],
                    )
                }
                #[doc = " Named reserves on some account balances."]                pub fn reserves (& self , _0 : impl :: std :: borrow :: Borrow < :: subxt :: ext :: sp_core :: crypto :: AccountId32 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: sp_runtime :: bounded :: bounded_vec :: BoundedVec < runtime_types :: pallet_balances :: ReserveData < [:: core :: primitive :: u8 ; 8usize] , :: core :: primitive :: u128 > > > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("Balances" , "Reserves" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Blake2_128Concat)] , [17u8 , 32u8 , 191u8 , 46u8 , 76u8 , 220u8 , 101u8 , 100u8 , 42u8 , 250u8 , 128u8 , 167u8 , 117u8 , 44u8 , 85u8 , 96u8 , 105u8 , 216u8 , 16u8 , 147u8 , 74u8 , 55u8 , 183u8 , 94u8 , 160u8 , 177u8 , 26u8 , 187u8 , 71u8 , 197u8 , 187u8 , 163u8 ,])
                }
                #[doc = " Named reserves on some account balances."]                pub fn reserves_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: sp_runtime :: bounded :: bounded_vec :: BoundedVec < runtime_types :: pallet_balances :: ReserveData < [:: core :: primitive :: u8 ; 8usize] , :: core :: primitive :: u128 > > > , () , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Balances",
                        "Reserves",
                        Vec::new(),
                        [
                            17u8, 32u8, 191u8, 46u8, 76u8, 220u8, 101u8, 100u8,
                            42u8, 250u8, 128u8, 167u8, 117u8, 44u8, 85u8, 96u8,
                            105u8, 216u8, 16u8, 147u8, 74u8, 55u8, 183u8, 94u8,
                            160u8, 177u8, 26u8, 187u8, 71u8, 197u8, 187u8,
                            163u8,
                        ],
                    )
                }
                #[doc = " Storage version of the pallet."]
                #[doc = ""]
                #[doc = " This is set to v2.0.0 for new networks."]                pub fn storage_version (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_balances :: Releases > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Balances",
                        "StorageVersion",
                        vec![],
                        [
                            135u8, 96u8, 28u8, 234u8, 124u8, 212u8, 56u8,
                            140u8, 40u8, 101u8, 235u8, 128u8, 136u8, 221u8,
                            182u8, 81u8, 17u8, 9u8, 184u8, 228u8, 174u8, 165u8,
                            200u8, 162u8, 214u8, 178u8, 227u8, 72u8, 34u8, 5u8,
                            173u8, 96u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The minimum amount required to keep an account open."]
                pub fn existential_deposit(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<
                        ::core::primitive::u128,
                    >,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "Balances",
                        "ExistentialDeposit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8,
                            105u8, 200u8, 214u8, 27u8, 144u8, 208u8, 218u8,
                            160u8, 130u8, 109u8, 101u8, 54u8, 210u8, 136u8,
                            71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8,
                            148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The maximum number of locks that should exist on an account."]
                #[doc = " Not strictly enforced, but used for weight estimation."]
                pub fn max_locks(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "Balances",
                        "MaxLocks",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8,
                            200u8, 157u8, 125u8, 151u8, 53u8, 76u8, 168u8,
                            26u8, 10u8, 9u8, 98u8, 68u8, 9u8, 178u8, 197u8,
                            113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The maximum number of named reserves that can exist on an account."]
                pub fn max_reserves(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "Balances",
                        "MaxReserves",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8,
                            200u8, 157u8, 125u8, 151u8, 53u8, 76u8, 168u8,
                            26u8, 10u8, 9u8, 98u8, 68u8, 9u8, 178u8, 197u8,
                            113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod transaction_payment {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event =
            runtime_types::pallet_transaction_payment::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,"]
            #[doc = "has been paid by `who`."]
            pub struct TransactionFeePaid {
                pub who: ::subxt::ext::sp_core::crypto::AccountId32,
                pub actual_fee: ::core::primitive::u128,
                pub tip: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for TransactionFeePaid {
                const PALLET: &'static str = "TransactionPayment";
                const EVENT: &'static str = "TransactionFeePaid";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                pub fn next_fee_multiplier (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: sp_arithmetic :: fixed_point :: FixedU128 > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "TransactionPayment",
                        "NextFeeMultiplier",
                        vec![],
                        [
                            210u8, 0u8, 206u8, 165u8, 183u8, 10u8, 206u8, 52u8,
                            14u8, 90u8, 218u8, 197u8, 189u8, 125u8, 113u8,
                            216u8, 52u8, 161u8, 45u8, 24u8, 245u8, 237u8,
                            121u8, 41u8, 106u8, 29u8, 45u8, 129u8, 250u8,
                            203u8, 206u8, 180u8,
                        ],
                    )
                }                pub fn storage_version (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_transaction_payment :: Releases > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "TransactionPayment",
                        "StorageVersion",
                        vec![],
                        [
                            219u8, 243u8, 82u8, 176u8, 65u8, 5u8, 132u8, 114u8,
                            8u8, 82u8, 176u8, 200u8, 97u8, 150u8, 177u8, 164u8,
                            166u8, 11u8, 34u8, 12u8, 12u8, 198u8, 58u8, 191u8,
                            186u8, 221u8, 221u8, 119u8, 181u8, 253u8, 154u8,
                            228u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " A fee mulitplier for `Operational` extrinsics to compute \"virtual tip\" to boost their"]
                #[doc = " `priority`"]
                #[doc = ""]
                #[doc = " This value is multipled by the `final_fee` to obtain a \"virtual tip\" that is later"]
                #[doc = " added to a tip component in regular `priority` calculations."]
                #[doc = " It means that a `Normal` transaction can front-run a similarly-sized `Operational`"]
                #[doc = " extrinsic (with no tip), by including a tip value greater than the virtual tip."]
                #[doc = ""]
                #[doc = " ```rust,ignore"]
                #[doc = " // For `Normal`"]
                #[doc = " let priority = priority_calc(tip);"]
                #[doc = ""]
                #[doc = " // For `Operational`"]
                #[doc = " let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;"]
                #[doc = " let priority = priority_calc(tip + virtual_tip);"]
                #[doc = " ```"]
                #[doc = ""]
                #[doc = " Note that since we use `final_fee` the multiplier applies also to the regular `tip`"]
                #[doc = " sent with the transaction. So, not only does the transaction get a priority bump based"]
                #[doc = " on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`"]
                #[doc = " transactions."]
                pub fn operational_fee_multiplier(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<::core::primitive::u8>,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "TransactionPayment",
                        "OperationalFeeMultiplier",
                        [
                            141u8, 130u8, 11u8, 35u8, 226u8, 114u8, 92u8,
                            179u8, 168u8, 110u8, 28u8, 91u8, 221u8, 64u8, 4u8,
                            148u8, 201u8, 193u8, 185u8, 66u8, 226u8, 114u8,
                            97u8, 79u8, 62u8, 212u8, 202u8, 114u8, 237u8,
                            228u8, 183u8, 165u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod asset_tx_payment {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_asset_tx_payment::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,"]
            #[doc = "has been paid by `who` in an asset `asset_id`."]
            pub struct AssetTxFeePaid {
                pub who: ::subxt::ext::sp_core::crypto::AccountId32,
                pub actual_fee: ::core::primitive::u128,
                pub tip: ::core::primitive::u128,
                pub asset_id: ::core::option::Option<::core::primitive::u32>,
            }
            impl ::subxt::events::StaticEvent for AssetTxFeePaid {
                const PALLET: &'static str = "AssetTxPayment";
                const EVENT: &'static str = "AssetTxFeePaid";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {}
        }
    }
    pub mod election_provider_multi_phase {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct SubmitUnsigned { pub raw_solution : :: std :: boxed :: Box < runtime_types :: pallet_election_provider_multi_phase :: RawSolution < runtime_types :: webb_standalone_runtime :: NposSolution16 > > , pub witness : runtime_types :: pallet_election_provider_multi_phase :: SolutionOrSnapshotSize , }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct SetMinimumUntrustedScore {
                pub maybe_next_score: ::core::option::Option<
                    runtime_types::sp_npos_elections::ElectionScore,
                >,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct SetEmergencyElectionResult {
                pub supports: ::std::vec::Vec<(
                    ::subxt::ext::sp_core::crypto::AccountId32,
                    runtime_types::sp_npos_elections::Support<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                    >,
                )>,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Submit { pub raw_solution : :: std :: boxed :: Box < runtime_types :: pallet_election_provider_multi_phase :: RawSolution < runtime_types :: webb_standalone_runtime :: NposSolution16 > > , }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct GovernanceFallback {
                pub maybe_max_voters:
                    ::core::option::Option<::core::primitive::u32>,
                pub maybe_max_targets:
                    ::core::option::Option<::core::primitive::u32>,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Submit a solution for the unsigned phase."]
                #[doc = ""]
                #[doc = "The dispatch origin fo this call must be __none__."]
                #[doc = ""]
                #[doc = "This submission is checked on the fly. Moreover, this unsigned solution is only"]
                #[doc = "validated when submitted to the pool from the **local** node. Effectively, this means"]
                #[doc = "that only active validators can submit this transaction when authoring a block (similar"]
                #[doc = "to an inherent)."]
                #[doc = ""]
                #[doc = "To prevent any incorrect solution (and thus wasted time/weight), this transaction will"]
                #[doc = "panic if the solution submitted by the validator is invalid in any way, effectively"]
                #[doc = "putting their authoring reward at risk."]
                #[doc = ""]
                #[doc = "No deposit or reward is associated with this submission."]
                pub fn submit_unsigned(
                    &self,
                    raw_solution : runtime_types :: pallet_election_provider_multi_phase :: RawSolution < runtime_types :: webb_standalone_runtime :: NposSolution16 >,
                    witness : runtime_types :: pallet_election_provider_multi_phase :: SolutionOrSnapshotSize,
                ) -> ::subxt::tx::StaticTxPayload<SubmitUnsigned>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "ElectionProviderMultiPhase",
                        "submit_unsigned",
                        SubmitUnsigned {
                            raw_solution: ::std::boxed::Box::new(raw_solution),
                            witness,
                        },
                        [
                            100u8, 240u8, 31u8, 34u8, 93u8, 98u8, 93u8, 57u8,
                            41u8, 197u8, 97u8, 58u8, 242u8, 10u8, 69u8, 250u8,
                            185u8, 169u8, 21u8, 8u8, 202u8, 61u8, 36u8, 25u8,
                            4u8, 148u8, 82u8, 56u8, 242u8, 18u8, 27u8, 219u8,
                        ],
                    )
                }
                #[doc = "Set a new value for `MinimumUntrustedScore`."]
                #[doc = ""]
                #[doc = "Dispatch origin must be aligned with `T::ForceOrigin`."]
                #[doc = ""]
                #[doc = "This check can be turned off by setting the value to `None`."]
                pub fn set_minimum_untrusted_score(
                    &self,
                    maybe_next_score: ::core::option::Option<
                        runtime_types::sp_npos_elections::ElectionScore,
                    >,
                ) -> ::subxt::tx::StaticTxPayload<SetMinimumUntrustedScore>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "ElectionProviderMultiPhase",
                        "set_minimum_untrusted_score",
                        SetMinimumUntrustedScore { maybe_next_score },
                        [
                            63u8, 101u8, 105u8, 146u8, 133u8, 162u8, 149u8,
                            112u8, 150u8, 219u8, 183u8, 213u8, 234u8, 211u8,
                            144u8, 74u8, 106u8, 15u8, 62u8, 196u8, 247u8, 49u8,
                            20u8, 48u8, 3u8, 105u8, 85u8, 46u8, 76u8, 4u8,
                            67u8, 81u8,
                        ],
                    )
                }
                #[doc = "Set a solution in the queue, to be handed out to the client of this pallet in the next"]
                #[doc = "call to `ElectionProvider::elect`."]
                #[doc = ""]
                #[doc = "This can only be set by `T::ForceOrigin`, and only when the phase is `Emergency`."]
                #[doc = ""]
                #[doc = "The solution is not checked for any feasibility and is assumed to be trustworthy, as any"]
                #[doc = "feasibility check itself can in principle cause the election process to fail (due to"]
                #[doc = "memory/weight constrains)."]
                pub fn set_emergency_election_result(
                    &self,
                    supports: ::std::vec::Vec<(
                        ::subxt::ext::sp_core::crypto::AccountId32,
                        runtime_types::sp_npos_elections::Support<
                            ::subxt::ext::sp_core::crypto::AccountId32,
                        >,
                    )>,
                ) -> ::subxt::tx::StaticTxPayload<SetEmergencyElectionResult>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "ElectionProviderMultiPhase",
                        "set_emergency_election_result",
                        SetEmergencyElectionResult { supports },
                        [
                            115u8, 255u8, 205u8, 58u8, 153u8, 1u8, 246u8, 8u8,
                            225u8, 36u8, 66u8, 144u8, 250u8, 145u8, 70u8, 76u8,
                            54u8, 63u8, 251u8, 51u8, 214u8, 204u8, 55u8, 112u8,
                            46u8, 228u8, 255u8, 250u8, 151u8, 5u8, 44u8, 133u8,
                        ],
                    )
                }
                #[doc = "Submit a solution for the signed phase."]
                #[doc = ""]
                #[doc = "The dispatch origin fo this call must be __signed__."]
                #[doc = ""]
                #[doc = "The solution is potentially queued, based on the claimed score and processed at the end"]
                #[doc = "of the signed phase."]
                #[doc = ""]
                #[doc = "A deposit is reserved and recorded for the solution. Based on the outcome, the solution"]
                #[doc = "might be rewarded, slashed, or get all or a part of the deposit back."]
                pub fn submit(
                    &self,
                    raw_solution : runtime_types :: pallet_election_provider_multi_phase :: RawSolution < runtime_types :: webb_standalone_runtime :: NposSolution16 >,
                ) -> ::subxt::tx::StaticTxPayload<Submit> {
                    ::subxt::tx::StaticTxPayload::new(
                        "ElectionProviderMultiPhase",
                        "submit",
                        Submit {
                            raw_solution: ::std::boxed::Box::new(raw_solution),
                        },
                        [
                            220u8, 167u8, 40u8, 47u8, 253u8, 244u8, 72u8,
                            124u8, 30u8, 123u8, 127u8, 227u8, 2u8, 66u8, 119u8,
                            64u8, 211u8, 200u8, 210u8, 98u8, 248u8, 132u8,
                            68u8, 25u8, 34u8, 182u8, 230u8, 225u8, 241u8, 58u8,
                            193u8, 134u8,
                        ],
                    )
                }
                #[doc = "Trigger the governance fallback."]
                #[doc = ""]
                #[doc = "This can only be called when [`Phase::Emergency`] is enabled, as an alternative to"]
                #[doc = "calling [`Call::set_emergency_election_result`]."]
                pub fn governance_fallback(
                    &self,
                    maybe_max_voters: ::core::option::Option<
                        ::core::primitive::u32,
                    >,
                    maybe_max_targets: ::core::option::Option<
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::StaticTxPayload<GovernanceFallback>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "ElectionProviderMultiPhase",
                        "governance_fallback",
                        GovernanceFallback {
                            maybe_max_voters,
                            maybe_max_targets,
                        },
                        [
                            206u8, 247u8, 76u8, 85u8, 7u8, 24u8, 231u8, 226u8,
                            192u8, 143u8, 43u8, 67u8, 91u8, 202u8, 88u8, 176u8,
                            130u8, 1u8, 83u8, 229u8, 227u8, 200u8, 179u8, 4u8,
                            113u8, 60u8, 99u8, 190u8, 53u8, 226u8, 142u8,
                            182u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event =
            runtime_types::pallet_election_provider_multi_phase::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "A solution was stored with the given compute."]
            #[doc = ""]
            #[doc = "If the solution is signed, this means that it hasn't yet been processed. If the"]
            #[doc = "solution is unsigned, this means that it has also been processed."]
            #[doc = ""]
            #[doc = "The `bool` is `true` when a previous solution was ejected to make room for this one."]
            pub struct SolutionStored { pub compute : runtime_types :: pallet_election_provider_multi_phase :: ElectionCompute , pub prev_ejected : :: core :: primitive :: bool , }
            impl ::subxt::events::StaticEvent for SolutionStored {
                const PALLET: &'static str = "ElectionProviderMultiPhase";
                const EVENT: &'static str = "SolutionStored";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "The election has been finalized, with the given computation and score."]
            pub struct ElectionFinalized { pub compute : runtime_types :: pallet_election_provider_multi_phase :: ElectionCompute , pub score : runtime_types :: sp_npos_elections :: ElectionScore , }
            impl ::subxt::events::StaticEvent for ElectionFinalized {
                const PALLET: &'static str = "ElectionProviderMultiPhase";
                const EVENT: &'static str = "ElectionFinalized";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "An election failed."]
            #[doc = ""]
            #[doc = "Not much can be said about which computes failed in the process."]
            pub struct ElectionFailed;
            impl ::subxt::events::StaticEvent for ElectionFailed {
                const PALLET: &'static str = "ElectionProviderMultiPhase";
                const EVENT: &'static str = "ElectionFailed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "An account has been rewarded for their signed submission being finalized."]
            pub struct Rewarded {
                pub account: ::subxt::ext::sp_core::crypto::AccountId32,
                pub value: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Rewarded {
                const PALLET: &'static str = "ElectionProviderMultiPhase";
                const EVENT: &'static str = "Rewarded";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "An account has been slashed for submitting an invalid signed submission."]
            pub struct Slashed {
                pub account: ::subxt::ext::sp_core::crypto::AccountId32,
                pub value: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Slashed {
                const PALLET: &'static str = "ElectionProviderMultiPhase";
                const EVENT: &'static str = "Slashed";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "The signed phase of the given round has started."]
            pub struct SignedPhaseStarted {
                pub round: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for SignedPhaseStarted {
                const PALLET: &'static str = "ElectionProviderMultiPhase";
                const EVENT: &'static str = "SignedPhaseStarted";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "The unsigned phase of the given round has started."]
            pub struct UnsignedPhaseStarted {
                pub round: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for UnsignedPhaseStarted {
                const PALLET: &'static str = "ElectionProviderMultiPhase";
                const EVENT: &'static str = "UnsignedPhaseStarted";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Internal counter for the number of rounds."]
                #[doc = ""]
                #[doc = " This is useful for de-duplication of transactions submitted to the pool, and general"]
                #[doc = " diagnostics of the pallet."]
                #[doc = ""]
                #[doc = " This is merely incremented once per every time that an upstream `elect` is called."]                pub fn round (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u32 > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "ElectionProviderMultiPhase",
                        "Round",
                        vec![],
                        [
                            16u8, 49u8, 176u8, 52u8, 202u8, 111u8, 120u8, 8u8,
                            217u8, 96u8, 35u8, 14u8, 233u8, 130u8, 47u8, 98u8,
                            34u8, 44u8, 166u8, 188u8, 199u8, 210u8, 21u8, 19u8,
                            70u8, 96u8, 139u8, 8u8, 53u8, 82u8, 165u8, 239u8,
                        ],
                    )
                }
                #[doc = " Current phase."]                pub fn current_phase (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_election_provider_multi_phase :: Phase < :: core :: primitive :: u64 > > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "ElectionProviderMultiPhase",
                        "CurrentPhase",
                        vec![],
                        [
                            144u8, 190u8, 94u8, 47u8, 205u8, 116u8, 228u8,
                            239u8, 155u8, 128u8, 246u8, 168u8, 192u8, 10u8,
                            102u8, 179u8, 53u8, 210u8, 181u8, 63u8, 209u8,
                            231u8, 100u8, 103u8, 249u8, 197u8, 171u8, 43u8,
                            12u8, 42u8, 177u8, 234u8,
                        ],
                    )
                }
                #[doc = " Current best solution, signed or unsigned, queued to be returned upon `elect`."]                pub fn queued_solution (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_election_provider_multi_phase :: ReadySolution < :: subxt :: ext :: sp_core :: crypto :: AccountId32 > > , :: subxt :: storage :: address :: Yes , () , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "ElectionProviderMultiPhase",
                        "QueuedSolution",
                        vec![],
                        [
                            149u8, 246u8, 152u8, 57u8, 54u8, 217u8, 14u8,
                            124u8, 125u8, 202u8, 242u8, 149u8, 147u8, 201u8,
                            168u8, 99u8, 249u8, 17u8, 163u8, 184u8, 254u8,
                            115u8, 100u8, 108u8, 28u8, 14u8, 139u8, 215u8,
                            26u8, 93u8, 215u8, 251u8,
                        ],
                    )
                }
                #[doc = " Snapshot data of the round."]
                #[doc = ""]
                #[doc = " This is created at the beginning of the signed phase and cleared upon calling `elect`."]                pub fn snapshot (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_election_provider_multi_phase :: RoundSnapshot > , :: subxt :: storage :: address :: Yes , () , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "ElectionProviderMultiPhase",
                        "Snapshot",
                        vec![],
                        [
                            239u8, 56u8, 191u8, 77u8, 150u8, 224u8, 248u8,
                            88u8, 132u8, 224u8, 164u8, 83u8, 253u8, 36u8, 46u8,
                            156u8, 72u8, 152u8, 36u8, 206u8, 72u8, 27u8, 226u8,
                            87u8, 146u8, 220u8, 93u8, 178u8, 26u8, 115u8,
                            232u8, 71u8,
                        ],
                    )
                }
                #[doc = " Desired number of targets to elect for this round."]
                #[doc = ""]
                #[doc = " Only exists when [`Snapshot`] is present."]                pub fn desired_targets (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u32 > , :: subxt :: storage :: address :: Yes , () , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "ElectionProviderMultiPhase",
                        "DesiredTargets",
                        vec![],
                        [
                            16u8, 247u8, 4u8, 181u8, 93u8, 79u8, 12u8, 212u8,
                            146u8, 167u8, 80u8, 58u8, 118u8, 52u8, 68u8, 87u8,
                            90u8, 140u8, 31u8, 210u8, 2u8, 116u8, 220u8, 231u8,
                            115u8, 112u8, 118u8, 118u8, 68u8, 34u8, 151u8,
                            165u8,
                        ],
                    )
                }
                #[doc = " The metadata of the [`RoundSnapshot`]"]
                #[doc = ""]
                #[doc = " Only exists when [`Snapshot`] is present."]                pub fn snapshot_metadata (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_election_provider_multi_phase :: SolutionOrSnapshotSize > , :: subxt :: storage :: address :: Yes , () , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "ElectionProviderMultiPhase",
                        "SnapshotMetadata",
                        vec![],
                        [
                            135u8, 122u8, 60u8, 75u8, 194u8, 240u8, 187u8,
                            96u8, 240u8, 203u8, 192u8, 22u8, 117u8, 148u8,
                            118u8, 24u8, 240u8, 213u8, 94u8, 22u8, 194u8, 47u8,
                            181u8, 245u8, 77u8, 149u8, 11u8, 251u8, 117u8,
                            220u8, 205u8, 78u8,
                        ],
                    )
                }
                #[doc = " The next index to be assigned to an incoming signed submission."]
                #[doc = ""]
                #[doc = " Every accepted submission is assigned a unique index; that index is bound to that particular"]
                #[doc = " submission for the duration of the election. On election finalization, the next index is"]
                #[doc = " reset to 0."]
                #[doc = ""]
                #[doc = " We can't just use `SignedSubmissionIndices.len()`, because that's a bounded set; past its"]
                #[doc = " capacity, it will simply saturate. We can't just iterate over `SignedSubmissionsMap`,"]
                #[doc = " because iteration is slow. Instead, we store the value here."]                pub fn signed_submission_next_index (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u32 > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "ElectionProviderMultiPhase",
                        "SignedSubmissionNextIndex",
                        vec![],
                        [
                            242u8, 11u8, 157u8, 105u8, 96u8, 7u8, 31u8, 20u8,
                            51u8, 141u8, 182u8, 180u8, 13u8, 172u8, 155u8,
                            59u8, 42u8, 238u8, 115u8, 8u8, 6u8, 137u8, 45u8,
                            2u8, 123u8, 187u8, 53u8, 215u8, 19u8, 129u8, 54u8,
                            22u8,
                        ],
                    )
                }
                #[doc = " A sorted, bounded set of `(score, index)`, where each `index` points to a value in"]
                #[doc = " `SignedSubmissions`."]
                #[doc = ""]
                #[doc = " We never need to process more than a single signed submission at a time. Signed submissions"]
                #[doc = " can be quite large, so we're willing to pay the cost of multiple database accesses to access"]
                #[doc = " them one at a time instead of reading and decoding all of them at once."]                pub fn signed_submission_indices (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: sp_runtime :: bounded :: bounded_btree_map :: BoundedBTreeMap < runtime_types :: sp_npos_elections :: ElectionScore , :: core :: primitive :: u32 > > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "ElectionProviderMultiPhase",
                        "SignedSubmissionIndices",
                        vec![],
                        [
                            121u8, 119u8, 26u8, 183u8, 167u8, 33u8, 230u8,
                            159u8, 230u8, 171u8, 8u8, 52u8, 178u8, 214u8,
                            245u8, 148u8, 202u8, 6u8, 7u8, 50u8, 84u8, 174u8,
                            253u8, 131u8, 235u8, 136u8, 40u8, 83u8, 2u8, 64u8,
                            9u8, 83u8,
                        ],
                    )
                }
                #[doc = " Unchecked, signed solutions."]
                #[doc = ""]
                #[doc = " Together with `SubmissionIndices`, this stores a bounded set of `SignedSubmissions` while"]
                #[doc = " allowing us to keep only a single one in memory at a time."]
                #[doc = ""]
                #[doc = " Twox note: the key of the map is an auto-incrementing index which users cannot inspect or"]
                #[doc = " affect; we shouldn't need a cryptographically secure hasher."]                pub fn signed_submissions_map (& self , _0 : impl :: std :: borrow :: Borrow < :: core :: primitive :: u32 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_election_provider_multi_phase :: signed :: SignedSubmission < :: subxt :: ext :: sp_core :: crypto :: AccountId32 , :: core :: primitive :: u128 , runtime_types :: webb_standalone_runtime :: NposSolution16 > > , :: subxt :: storage :: address :: Yes , () , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("ElectionProviderMultiPhase" , "SignedSubmissionsMap" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Twox64Concat)] , [84u8 , 65u8 , 205u8 , 191u8 , 143u8 , 246u8 , 239u8 , 27u8 , 243u8 , 54u8 , 250u8 , 8u8 , 125u8 , 32u8 , 241u8 , 141u8 , 210u8 , 225u8 , 56u8 , 101u8 , 241u8 , 52u8 , 157u8 , 29u8 , 13u8 , 155u8 , 73u8 , 132u8 , 118u8 , 53u8 , 2u8 , 135u8 ,])
                }
                #[doc = " Unchecked, signed solutions."]
                #[doc = ""]
                #[doc = " Together with `SubmissionIndices`, this stores a bounded set of `SignedSubmissions` while"]
                #[doc = " allowing us to keep only a single one in memory at a time."]
                #[doc = ""]
                #[doc = " Twox note: the key of the map is an auto-incrementing index which users cannot inspect or"]
                #[doc = " affect; we shouldn't need a cryptographically secure hasher."]                pub fn signed_submissions_map_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_election_provider_multi_phase :: signed :: SignedSubmission < :: subxt :: ext :: sp_core :: crypto :: AccountId32 , :: core :: primitive :: u128 , runtime_types :: webb_standalone_runtime :: NposSolution16 > > , () , () , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "ElectionProviderMultiPhase",
                        "SignedSubmissionsMap",
                        Vec::new(),
                        [
                            84u8, 65u8, 205u8, 191u8, 143u8, 246u8, 239u8,
                            27u8, 243u8, 54u8, 250u8, 8u8, 125u8, 32u8, 241u8,
                            141u8, 210u8, 225u8, 56u8, 101u8, 241u8, 52u8,
                            157u8, 29u8, 13u8, 155u8, 73u8, 132u8, 118u8, 53u8,
                            2u8, 135u8,
                        ],
                    )
                }
                #[doc = " The minimum score that each 'untrusted' solution must attain in order to be considered"]
                #[doc = " feasible."]
                #[doc = ""]
                #[doc = " Can be set via `set_minimum_untrusted_score`."]                pub fn minimum_untrusted_score (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: sp_npos_elections :: ElectionScore > , :: subxt :: storage :: address :: Yes , () , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "ElectionProviderMultiPhase",
                        "MinimumUntrustedScore",
                        vec![],
                        [
                            77u8, 235u8, 181u8, 45u8, 230u8, 12u8, 0u8, 179u8,
                            152u8, 38u8, 74u8, 199u8, 47u8, 84u8, 85u8, 55u8,
                            171u8, 226u8, 217u8, 125u8, 17u8, 194u8, 95u8,
                            157u8, 73u8, 245u8, 75u8, 130u8, 248u8, 7u8, 53u8,
                            226u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " Duration of the unsigned phase."]
                pub fn unsigned_phase(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<::core::primitive::u64>,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "ElectionProviderMultiPhase",
                        "UnsignedPhase",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8,
                            231u8, 190u8, 146u8, 59u8, 226u8, 157u8, 101u8,
                            103u8, 117u8, 249u8, 65u8, 18u8, 191u8, 103u8,
                            119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8,
                            239u8, 42u8, 246u8,
                        ],
                    )
                }
                #[doc = " Duration of the signed phase."]
                pub fn signed_phase(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<::core::primitive::u64>,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "ElectionProviderMultiPhase",
                        "SignedPhase",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8,
                            231u8, 190u8, 146u8, 59u8, 226u8, 157u8, 101u8,
                            103u8, 117u8, 249u8, 65u8, 18u8, 191u8, 103u8,
                            119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8,
                            239u8, 42u8, 246u8,
                        ],
                    )
                }
                #[doc = " The minimum amount of improvement to the solution score that defines a solution as"]
                #[doc = " \"better\" in the Signed phase."]
                pub fn better_signed_threshold(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<
                        runtime_types::sp_arithmetic::per_things::Perbill,
                    >,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "ElectionProviderMultiPhase",
                        "BetterSignedThreshold",
                        [
                            225u8, 236u8, 95u8, 157u8, 90u8, 94u8, 106u8,
                            192u8, 254u8, 19u8, 87u8, 80u8, 16u8, 62u8, 42u8,
                            204u8, 136u8, 106u8, 225u8, 53u8, 212u8, 52u8,
                            177u8, 79u8, 4u8, 116u8, 201u8, 104u8, 222u8, 75u8,
                            86u8, 227u8,
                        ],
                    )
                }
                #[doc = " The minimum amount of improvement to the solution score that defines a solution as"]
                #[doc = " \"better\" in the Unsigned phase."]
                pub fn better_unsigned_threshold(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<
                        runtime_types::sp_arithmetic::per_things::Perbill,
                    >,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "ElectionProviderMultiPhase",
                        "BetterUnsignedThreshold",
                        [
                            225u8, 236u8, 95u8, 157u8, 90u8, 94u8, 106u8,
                            192u8, 254u8, 19u8, 87u8, 80u8, 16u8, 62u8, 42u8,
                            204u8, 136u8, 106u8, 225u8, 53u8, 212u8, 52u8,
                            177u8, 79u8, 4u8, 116u8, 201u8, 104u8, 222u8, 75u8,
                            86u8, 227u8,
                        ],
                    )
                }
                #[doc = " The repeat threshold of the offchain worker."]
                #[doc = ""]
                #[doc = " For example, if it is 5, that means that at least 5 blocks will elapse between attempts"]
                #[doc = " to submit the worker's solution."]
                pub fn offchain_repeat(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<::core::primitive::u64>,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "ElectionProviderMultiPhase",
                        "OffchainRepeat",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8,
                            231u8, 190u8, 146u8, 59u8, 226u8, 157u8, 101u8,
                            103u8, 117u8, 249u8, 65u8, 18u8, 191u8, 103u8,
                            119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8,
                            239u8, 42u8, 246u8,
                        ],
                    )
                }
                #[doc = " The priority of the unsigned transaction submitted in the unsigned-phase"]
                pub fn miner_tx_priority(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<::core::primitive::u64>,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "ElectionProviderMultiPhase",
                        "MinerTxPriority",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8,
                            231u8, 190u8, 146u8, 59u8, 226u8, 157u8, 101u8,
                            103u8, 117u8, 249u8, 65u8, 18u8, 191u8, 103u8,
                            119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8,
                            239u8, 42u8, 246u8,
                        ],
                    )
                }
                #[doc = " Maximum number of signed submissions that can be queued."]
                #[doc = ""]
                #[doc = " It is best to avoid adjusting this during an election, as it impacts downstream data"]
                #[doc = " structures. In particular, `SignedSubmissionIndices<T>` is bounded on this value. If you"]
                #[doc = " update this value during an election, you _must_ ensure that"]
                #[doc = " `SignedSubmissionIndices.len()` is less than or equal to the new value. Otherwise,"]
                #[doc = " attempts to submit new solutions may cause a runtime panic."]
                pub fn signed_max_submissions(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "ElectionProviderMultiPhase",
                        "SignedMaxSubmissions",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8,
                            200u8, 157u8, 125u8, 151u8, 53u8, 76u8, 168u8,
                            26u8, 10u8, 9u8, 98u8, 68u8, 9u8, 178u8, 197u8,
                            113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Maximum weight of a signed solution."]
                #[doc = ""]
                #[doc = " If [`Config::MinerConfig`] is being implemented to submit signed solutions (outside of"]
                #[doc = " this pallet), then [`MinerConfig::solution_weight`] is used to compare against"]
                #[doc = " this value."]                pub fn signed_max_weight (& self) -> :: subxt :: constants :: StaticConstantAddress < :: subxt :: metadata :: DecodeStaticType < runtime_types :: frame_support :: weights :: weight_v2 :: Weight >>{
                    ::subxt::constants::StaticConstantAddress::new(
                        "ElectionProviderMultiPhase",
                        "SignedMaxWeight",
                        [
                            67u8, 70u8, 203u8, 252u8, 102u8, 92u8, 175u8, 48u8,
                            35u8, 141u8, 85u8, 109u8, 102u8, 228u8, 244u8,
                            116u8, 6u8, 210u8, 54u8, 115u8, 86u8, 234u8, 159u8,
                            246u8, 251u8, 91u8, 202u8, 141u8, 32u8, 21u8, 97u8,
                            85u8,
                        ],
                    )
                }
                #[doc = " The maximum amount of unchecked solutions to refund the call fee for."]
                pub fn signed_max_refunds(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "ElectionProviderMultiPhase",
                        "SignedMaxRefunds",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8,
                            200u8, 157u8, 125u8, 151u8, 53u8, 76u8, 168u8,
                            26u8, 10u8, 9u8, 98u8, 68u8, 9u8, 178u8, 197u8,
                            113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Base reward for a signed solution"]
                pub fn signed_reward_base(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<
                        ::core::primitive::u128,
                    >,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "ElectionProviderMultiPhase",
                        "SignedRewardBase",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8,
                            105u8, 200u8, 214u8, 27u8, 144u8, 208u8, 218u8,
                            160u8, 130u8, 109u8, 101u8, 54u8, 210u8, 136u8,
                            71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8,
                            148u8, 156u8,
                        ],
                    )
                }
                #[doc = " Base deposit for a signed solution."]
                pub fn signed_deposit_base(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<
                        ::core::primitive::u128,
                    >,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "ElectionProviderMultiPhase",
                        "SignedDepositBase",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8,
                            105u8, 200u8, 214u8, 27u8, 144u8, 208u8, 218u8,
                            160u8, 130u8, 109u8, 101u8, 54u8, 210u8, 136u8,
                            71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8,
                            148u8, 156u8,
                        ],
                    )
                }
                #[doc = " Per-byte deposit for a signed solution."]
                pub fn signed_deposit_byte(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<
                        ::core::primitive::u128,
                    >,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "ElectionProviderMultiPhase",
                        "SignedDepositByte",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8,
                            105u8, 200u8, 214u8, 27u8, 144u8, 208u8, 218u8,
                            160u8, 130u8, 109u8, 101u8, 54u8, 210u8, 136u8,
                            71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8,
                            148u8, 156u8,
                        ],
                    )
                }
                #[doc = " Per-weight deposit for a signed solution."]
                pub fn signed_deposit_weight(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<
                        ::core::primitive::u128,
                    >,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "ElectionProviderMultiPhase",
                        "SignedDepositWeight",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8,
                            105u8, 200u8, 214u8, 27u8, 144u8, 208u8, 218u8,
                            160u8, 130u8, 109u8, 101u8, 54u8, 210u8, 136u8,
                            71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8,
                            148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The maximum number of electing voters to put in the snapshot. At the moment, snapshots"]
                #[doc = " are only over a single block, but once multi-block elections are introduced they will"]
                #[doc = " take place over multiple blocks."]
                pub fn max_electing_voters(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "ElectionProviderMultiPhase",
                        "MaxElectingVoters",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8,
                            200u8, 157u8, 125u8, 151u8, 53u8, 76u8, 168u8,
                            26u8, 10u8, 9u8, 98u8, 68u8, 9u8, 178u8, 197u8,
                            113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The maximum number of electable targets to put in the snapshot."]
                pub fn max_electable_targets(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<::core::primitive::u16>,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "ElectionProviderMultiPhase",
                        "MaxElectableTargets",
                        [
                            116u8, 33u8, 2u8, 170u8, 181u8, 147u8, 171u8,
                            169u8, 167u8, 227u8, 41u8, 144u8, 11u8, 236u8,
                            82u8, 100u8, 74u8, 60u8, 184u8, 72u8, 169u8, 90u8,
                            208u8, 135u8, 15u8, 117u8, 10u8, 123u8, 128u8,
                            193u8, 29u8, 70u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod staking {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Bond {
                pub controller: ::subxt::ext::sp_runtime::MultiAddress<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                #[codec(compact)]
                pub value: ::core::primitive::u128,
                pub payee: runtime_types::pallet_staking::RewardDestination<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                >,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct BondExtra {
                #[codec(compact)]
                pub max_additional: ::core::primitive::u128,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Unbond {
                #[codec(compact)]
                pub value: ::core::primitive::u128,
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct WithdrawUnbonded {
                pub num_slashing_spans: ::core::primitive::u32,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Validate {
                pub prefs: runtime_types::pallet_staking::ValidatorPrefs,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Nominate {
                pub targets: ::std::vec::Vec<
                    ::subxt::ext::sp_runtime::MultiAddress<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                >,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Chill;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct SetPayee {
                pub payee: runtime_types::pallet_staking::RewardDestination<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                >,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct SetController {
                pub controller: ::subxt::ext::sp_runtime::MultiAddress<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct SetValidatorCount {
                #[codec(compact)]
                pub new: ::core::primitive::u32,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct IncreaseValidatorCount {
                #[codec(compact)]
                pub additional: ::core::primitive::u32,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct ScaleValidatorCount {
                pub factor: runtime_types::sp_arithmetic::per_things::Percent,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct ForceNoEras;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct ForceNewEra;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct SetInvulnerables {
                pub invulnerables:
                    ::std::vec::Vec<::subxt::ext::sp_core::crypto::AccountId32>,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct ForceUnstake {
                pub stash: ::subxt::ext::sp_core::crypto::AccountId32,
                pub num_slashing_spans: ::core::primitive::u32,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct ForceNewEraAlways;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct CancelDeferredSlash {
                pub era: ::core::primitive::u32,
                pub slash_indices: ::std::vec::Vec<::core::primitive::u32>,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct PayoutStakers {
                pub validator_stash: ::subxt::ext::sp_core::crypto::AccountId32,
                pub era: ::core::primitive::u32,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Rebond {
                #[codec(compact)]
                pub value: ::core::primitive::u128,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct SetHistoryDepth {
                #[codec(compact)]
                pub new_history_depth: ::core::primitive::u32,
                #[codec(compact)]
                pub era_items_deleted: ::core::primitive::u32,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct ReapStash {
                pub stash: ::subxt::ext::sp_core::crypto::AccountId32,
                pub num_slashing_spans: ::core::primitive::u32,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Kick {
                pub who: ::std::vec::Vec<
                    ::subxt::ext::sp_runtime::MultiAddress<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                >,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct SetStakingConfigs {
                pub min_nominator_bond:
                    runtime_types::pallet_staking::pallet::pallet::ConfigOp<
                        ::core::primitive::u128,
                    >,
                pub min_validator_bond:
                    runtime_types::pallet_staking::pallet::pallet::ConfigOp<
                        ::core::primitive::u128,
                    >,
                pub max_nominator_count:
                    runtime_types::pallet_staking::pallet::pallet::ConfigOp<
                        ::core::primitive::u32,
                    >,
                pub max_validator_count:
                    runtime_types::pallet_staking::pallet::pallet::ConfigOp<
                        ::core::primitive::u32,
                    >,
                pub chill_threshold:
                    runtime_types::pallet_staking::pallet::pallet::ConfigOp<
                        runtime_types::sp_arithmetic::per_things::Percent,
                    >,
                pub min_commission:
                    runtime_types::pallet_staking::pallet::pallet::ConfigOp<
                        runtime_types::sp_arithmetic::per_things::Perbill,
                    >,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct ChillOther {
                pub controller: ::subxt::ext::sp_core::crypto::AccountId32,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct ForceApplyMinCommission {
                pub validator_stash: ::subxt::ext::sp_core::crypto::AccountId32,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Take the origin account as a stash and lock up `value` of its balance. `controller` will"]
                #[doc = "be the account that controls it."]
                #[doc = ""]
                #[doc = "`value` must be more than the `minimum_balance` specified by `T::Currency`."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ by the stash account."]
                #[doc = ""]
                #[doc = "Emits `Bonded`."]
                #[doc = "# <weight>"]
                #[doc = "- Independent of the arguments. Moderate complexity."]
                #[doc = "- O(1)."]
                #[doc = "- Three extra DB entries."]
                #[doc = ""]
                #[doc = "NOTE: Two of the storage writes (`Self::bonded`, `Self::payee`) are _never_ cleaned"]
                #[doc = "unless the `origin` falls below _existential deposit_ and gets removed as dust."]
                #[doc = "------------------"]
                #[doc = "# </weight>"]
                pub fn bond(
                    &self,
                    controller: ::subxt::ext::sp_runtime::MultiAddress<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    value: ::core::primitive::u128,
                    payee: runtime_types::pallet_staking::RewardDestination<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                    >,
                ) -> ::subxt::tx::StaticTxPayload<Bond> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Staking",
                        "bond",
                        Bond {
                            controller,
                            value,
                            payee,
                        },
                        [
                            140u8, 13u8, 108u8, 181u8, 212u8, 177u8, 190u8,
                            212u8, 163u8, 40u8, 120u8, 232u8, 126u8, 213u8,
                            6u8, 181u8, 99u8, 252u8, 58u8, 54u8, 139u8, 64u8,
                            67u8, 76u8, 53u8, 226u8, 11u8, 133u8, 235u8, 159u8,
                            103u8, 210u8,
                        ],
                    )
                }
                #[doc = "Add some extra amount that have appeared in the stash `free_balance` into the balance up"]
                #[doc = "for staking."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ by the stash, not the controller."]
                #[doc = ""]
                #[doc = "Use this if there are additional funds in your stash account that you wish to bond."]
                #[doc = "Unlike [`bond`](Self::bond) or [`unbond`](Self::unbond) this function does not impose"]
                #[doc = "any limitation on the amount that can be added."]
                #[doc = ""]
                #[doc = "Emits `Bonded`."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- Independent of the arguments. Insignificant complexity."]
                #[doc = "- O(1)."]
                #[doc = "# </weight>"]
                pub fn bond_extra(
                    &self,
                    max_additional: ::core::primitive::u128,
                ) -> ::subxt::tx::StaticTxPayload<BondExtra> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Staking",
                        "bond_extra",
                        BondExtra { max_additional },
                        [
                            60u8, 45u8, 82u8, 223u8, 113u8, 95u8, 0u8, 71u8,
                            59u8, 108u8, 228u8, 9u8, 95u8, 210u8, 113u8, 106u8,
                            252u8, 15u8, 19u8, 128u8, 11u8, 187u8, 4u8, 151u8,
                            103u8, 143u8, 24u8, 33u8, 149u8, 82u8, 35u8, 192u8,
                        ],
                    )
                }
                #[doc = "Schedule a portion of the stash to be unlocked ready for transfer out after the bond"]
                #[doc = "period ends. If this leaves an amount actively bonded less than"]
                #[doc = "T::Currency::minimum_balance(), then it is increased to the full amount."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ by the controller, not the stash."]
                #[doc = ""]
                #[doc = "Once the unlock period is done, you can call `withdraw_unbonded` to actually move"]
                #[doc = "the funds out of management ready for transfer."]
                #[doc = ""]
                #[doc = "No more than a limited number of unlocking chunks (see `MaxUnlockingChunks`)"]
                #[doc = "can co-exists at the same time. In that case, [`Call::withdraw_unbonded`] need"]
                #[doc = "to be called first to remove some of the chunks (if possible)."]
                #[doc = ""]
                #[doc = "If a user encounters the `InsufficientBond` error when calling this extrinsic,"]
                #[doc = "they should call `chill` first in order to free up their bonded funds."]
                #[doc = ""]
                #[doc = "Emits `Unbonded`."]
                #[doc = ""]
                #[doc = "See also [`Call::withdraw_unbonded`]."]
                pub fn unbond(
                    &self,
                    value: ::core::primitive::u128,
                ) -> ::subxt::tx::StaticTxPayload<Unbond> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Staking",
                        "unbond",
                        Unbond { value },
                        [
                            85u8, 62u8, 34u8, 127u8, 60u8, 241u8, 134u8, 60u8,
                            125u8, 91u8, 31u8, 193u8, 50u8, 230u8, 237u8, 42u8,
                            114u8, 230u8, 240u8, 146u8, 14u8, 109u8, 185u8,
                            151u8, 148u8, 44u8, 147u8, 182u8, 192u8, 253u8,
                            51u8, 87u8,
                        ],
                    )
                }
                #[doc = "Remove any unlocked chunks from the `unlocking` queue from our management."]
                #[doc = ""]
                #[doc = "This essentially frees up that balance to be used by the stash account to do"]
                #[doc = "whatever it wants."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ by the controller."]
                #[doc = ""]
                #[doc = "Emits `Withdrawn`."]
                #[doc = ""]
                #[doc = "See also [`Call::unbond`]."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "Complexity O(S) where S is the number of slashing spans to remove"]
                #[doc = "NOTE: Weight annotation is the kill scenario, we refund otherwise."]
                #[doc = "# </weight>"]
                pub fn withdraw_unbonded(
                    &self,
                    num_slashing_spans: ::core::primitive::u32,
                ) -> ::subxt::tx::StaticTxPayload<WithdrawUnbonded>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Staking",
                        "withdraw_unbonded",
                        WithdrawUnbonded { num_slashing_spans },
                        [
                            95u8, 223u8, 122u8, 217u8, 76u8, 208u8, 86u8,
                            129u8, 31u8, 104u8, 70u8, 154u8, 23u8, 250u8,
                            165u8, 192u8, 149u8, 249u8, 158u8, 159u8, 194u8,
                            224u8, 118u8, 134u8, 204u8, 157u8, 72u8, 136u8,
                            19u8, 193u8, 183u8, 84u8,
                        ],
                    )
                }
                #[doc = "Declare the desire to validate for the origin controller."]
                #[doc = ""]
                #[doc = "Effects will be felt at the beginning of the next era."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ by the controller, not the stash."]
                pub fn validate(
                    &self,
                    prefs: runtime_types::pallet_staking::ValidatorPrefs,
                ) -> ::subxt::tx::StaticTxPayload<Validate> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Staking",
                        "validate",
                        Validate { prefs },
                        [
                            191u8, 116u8, 139u8, 35u8, 250u8, 211u8, 86u8,
                            240u8, 35u8, 9u8, 19u8, 44u8, 148u8, 35u8, 91u8,
                            106u8, 200u8, 172u8, 108u8, 145u8, 194u8, 146u8,
                            61u8, 145u8, 233u8, 168u8, 2u8, 26u8, 145u8, 101u8,
                            114u8, 157u8,
                        ],
                    )
                }
                #[doc = "Declare the desire to nominate `targets` for the origin controller."]
                #[doc = ""]
                #[doc = "Effects will be felt at the beginning of the next era."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ by the controller, not the stash."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- The transaction's complexity is proportional to the size of `targets` (N)"]
                #[doc = "which is capped at CompactAssignments::LIMIT (T::MaxNominations)."]
                #[doc = "- Both the reads and writes follow a similar pattern."]
                #[doc = "# </weight>"]
                pub fn nominate(
                    &self,
                    targets: ::std::vec::Vec<
                        ::subxt::ext::sp_runtime::MultiAddress<
                            ::subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                    >,
                ) -> ::subxt::tx::StaticTxPayload<Nominate> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Staking",
                        "nominate",
                        Nominate { targets },
                        [
                            249u8, 66u8, 140u8, 39u8, 26u8, 221u8, 135u8,
                            225u8, 98u8, 255u8, 13u8, 54u8, 106u8, 215u8,
                            129u8, 156u8, 190u8, 83u8, 178u8, 170u8, 116u8,
                            27u8, 8u8, 244u8, 56u8, 73u8, 164u8, 223u8, 199u8,
                            115u8, 168u8, 83u8,
                        ],
                    )
                }
                #[doc = "Declare no desire to either validate or nominate."]
                #[doc = ""]
                #[doc = "Effects will be felt at the beginning of the next era."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ by the controller, not the stash."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- Independent of the arguments. Insignificant complexity."]
                #[doc = "- Contains one read."]
                #[doc = "- Writes are limited to the `origin` account key."]
                #[doc = "# </weight>"]
                pub fn chill(&self) -> ::subxt::tx::StaticTxPayload<Chill> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Staking",
                        "chill",
                        Chill {},
                        [
                            94u8, 20u8, 196u8, 31u8, 220u8, 125u8, 115u8,
                            167u8, 140u8, 3u8, 20u8, 132u8, 81u8, 120u8, 215u8,
                            166u8, 230u8, 56u8, 16u8, 222u8, 31u8, 153u8,
                            120u8, 62u8, 153u8, 67u8, 220u8, 239u8, 11u8,
                            234u8, 127u8, 122u8,
                        ],
                    )
                }
                #[doc = "(Re-)set the payment target for a controller."]
                #[doc = ""]
                #[doc = "Effects will be felt instantly (as soon as this function is completed successfully)."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ by the controller, not the stash."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- Independent of the arguments. Insignificant complexity."]
                #[doc = "- Contains a limited number of reads."]
                #[doc = "- Writes are limited to the `origin` account key."]
                #[doc = "---------"]
                #[doc = "- Weight: O(1)"]
                #[doc = "- DB Weight:"]
                #[doc = "    - Read: Ledger"]
                #[doc = "    - Write: Payee"]
                #[doc = "# </weight>"]
                pub fn set_payee(
                    &self,
                    payee: runtime_types::pallet_staking::RewardDestination<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                    >,
                ) -> ::subxt::tx::StaticTxPayload<SetPayee> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Staking",
                        "set_payee",
                        SetPayee { payee },
                        [
                            96u8, 8u8, 254u8, 164u8, 87u8, 46u8, 120u8, 11u8,
                            197u8, 63u8, 20u8, 178u8, 167u8, 236u8, 149u8,
                            245u8, 14u8, 171u8, 108u8, 195u8, 250u8, 133u8,
                            0u8, 75u8, 192u8, 159u8, 84u8, 220u8, 242u8, 133u8,
                            60u8, 62u8,
                        ],
                    )
                }
                #[doc = "(Re-)set the controller of a stash."]
                #[doc = ""]
                #[doc = "Effects will be felt instantly (as soon as this function is completed successfully)."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ by the stash, not the controller."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- Independent of the arguments. Insignificant complexity."]
                #[doc = "- Contains a limited number of reads."]
                #[doc = "- Writes are limited to the `origin` account key."]
                #[doc = "----------"]
                #[doc = "Weight: O(1)"]
                #[doc = "DB Weight:"]
                #[doc = "- Read: Bonded, Ledger New Controller, Ledger Old Controller"]
                #[doc = "- Write: Bonded, Ledger New Controller, Ledger Old Controller"]
                #[doc = "# </weight>"]
                pub fn set_controller(
                    &self,
                    controller: ::subxt::ext::sp_runtime::MultiAddress<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::StaticTxPayload<SetController>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Staking",
                        "set_controller",
                        SetController { controller },
                        [
                            154u8, 80u8, 184u8, 176u8, 74u8, 106u8, 72u8,
                            242u8, 64u8, 81u8, 169u8, 157u8, 200u8, 97u8,
                            117u8, 192u8, 143u8, 166u8, 38u8, 235u8, 75u8,
                            161u8, 177u8, 229u8, 229u8, 82u8, 95u8, 39u8, 40u8,
                            116u8, 9u8, 204u8,
                        ],
                    )
                }
                #[doc = "Sets the ideal number of validators."]
                #[doc = ""]
                #[doc = "The dispatch origin must be Root."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "Weight: O(1)"]
                #[doc = "Write: Validator Count"]
                #[doc = "# </weight>"]
                pub fn set_validator_count(
                    &self,
                    new: ::core::primitive::u32,
                ) -> ::subxt::tx::StaticTxPayload<SetValidatorCount>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Staking",
                        "set_validator_count",
                        SetValidatorCount { new },
                        [
                            55u8, 232u8, 95u8, 66u8, 228u8, 217u8, 11u8, 27u8,
                            3u8, 202u8, 199u8, 242u8, 70u8, 160u8, 250u8,
                            187u8, 194u8, 91u8, 15u8, 36u8, 215u8, 36u8, 160u8,
                            108u8, 251u8, 60u8, 240u8, 202u8, 249u8, 235u8,
                            28u8, 94u8,
                        ],
                    )
                }
                #[doc = "Increments the ideal number of validators."]
                #[doc = ""]
                #[doc = "The dispatch origin must be Root."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "Same as [`Self::set_validator_count`]."]
                #[doc = "# </weight>"]
                pub fn increase_validator_count(
                    &self,
                    additional: ::core::primitive::u32,
                ) -> ::subxt::tx::StaticTxPayload<IncreaseValidatorCount>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Staking",
                        "increase_validator_count",
                        IncreaseValidatorCount { additional },
                        [
                            239u8, 184u8, 155u8, 213u8, 25u8, 22u8, 193u8,
                            13u8, 102u8, 192u8, 82u8, 153u8, 249u8, 192u8,
                            60u8, 158u8, 8u8, 78u8, 175u8, 219u8, 46u8, 51u8,
                            222u8, 193u8, 193u8, 201u8, 78u8, 90u8, 58u8, 86u8,
                            196u8, 17u8,
                        ],
                    )
                }
                #[doc = "Scale up the ideal number of validators by a factor."]
                #[doc = ""]
                #[doc = "The dispatch origin must be Root."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "Same as [`Self::set_validator_count`]."]
                #[doc = "# </weight>"]
                pub fn scale_validator_count(
                    &self,
                    factor: runtime_types::sp_arithmetic::per_things::Percent,
                ) -> ::subxt::tx::StaticTxPayload<ScaleValidatorCount>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Staking",
                        "scale_validator_count",
                        ScaleValidatorCount { factor },
                        [
                            198u8, 68u8, 227u8, 94u8, 110u8, 157u8, 209u8,
                            217u8, 112u8, 37u8, 78u8, 142u8, 12u8, 193u8,
                            219u8, 167u8, 149u8, 112u8, 49u8, 139u8, 74u8,
                            81u8, 172u8, 72u8, 253u8, 224u8, 56u8, 194u8,
                            185u8, 90u8, 87u8, 125u8,
                        ],
                    )
                }
                #[doc = "Force there to be no new eras indefinitely."]
                #[doc = ""]
                #[doc = "The dispatch origin must be Root."]
                #[doc = ""]
                #[doc = "# Warning"]
                #[doc = ""]
                #[doc = "The election process starts multiple blocks before the end of the era."]
                #[doc = "Thus the election process may be ongoing when this is called. In this case the"]
                #[doc = "election will continue until the next era is triggered."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- No arguments."]
                #[doc = "- Weight: O(1)"]
                #[doc = "- Write: ForceEra"]
                #[doc = "# </weight>"]
                pub fn force_no_eras(
                    &self,
                ) -> ::subxt::tx::StaticTxPayload<ForceNoEras> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Staking",
                        "force_no_eras",
                        ForceNoEras {},
                        [
                            16u8, 81u8, 207u8, 168u8, 23u8, 236u8, 11u8, 75u8,
                            141u8, 107u8, 92u8, 2u8, 53u8, 111u8, 252u8, 116u8,
                            91u8, 120u8, 75u8, 24u8, 125u8, 53u8, 9u8, 28u8,
                            242u8, 87u8, 245u8, 55u8, 40u8, 103u8, 151u8,
                            178u8,
                        ],
                    )
                }
                #[doc = "Force there to be a new era at the end of the next session. After this, it will be"]
                #[doc = "reset to normal (non-forced) behaviour."]
                #[doc = ""]
                #[doc = "The dispatch origin must be Root."]
                #[doc = ""]
                #[doc = "# Warning"]
                #[doc = ""]
                #[doc = "The election process starts multiple blocks before the end of the era."]
                #[doc = "If this is called just before a new era is triggered, the election process may not"]
                #[doc = "have enough blocks to get a result."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- No arguments."]
                #[doc = "- Weight: O(1)"]
                #[doc = "- Write ForceEra"]
                #[doc = "# </weight>"]
                pub fn force_new_era(
                    &self,
                ) -> ::subxt::tx::StaticTxPayload<ForceNewEra> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Staking",
                        "force_new_era",
                        ForceNewEra {},
                        [
                            230u8, 242u8, 169u8, 196u8, 78u8, 145u8, 24u8,
                            191u8, 113u8, 68u8, 5u8, 138u8, 48u8, 51u8, 109u8,
                            126u8, 73u8, 136u8, 162u8, 158u8, 174u8, 201u8,
                            213u8, 230u8, 215u8, 44u8, 200u8, 32u8, 75u8, 27u8,
                            23u8, 254u8,
                        ],
                    )
                }
                #[doc = "Set the validators who cannot be slashed (if any)."]
                #[doc = ""]
                #[doc = "The dispatch origin must be Root."]
                pub fn set_invulnerables(
                    &self,
                    invulnerables: ::std::vec::Vec<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                    >,
                ) -> ::subxt::tx::StaticTxPayload<SetInvulnerables>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Staking",
                        "set_invulnerables",
                        SetInvulnerables { invulnerables },
                        [
                            2u8, 148u8, 221u8, 111u8, 153u8, 48u8, 222u8, 36u8,
                            228u8, 84u8, 18u8, 35u8, 168u8, 239u8, 53u8, 245u8,
                            27u8, 76u8, 18u8, 203u8, 206u8, 9u8, 8u8, 81u8,
                            35u8, 224u8, 22u8, 133u8, 58u8, 99u8, 103u8, 39u8,
                        ],
                    )
                }
                #[doc = "Force a current staker to become completely unstaked, immediately."]
                #[doc = ""]
                #[doc = "The dispatch origin must be Root."]
                pub fn force_unstake(
                    &self,
                    stash: ::subxt::ext::sp_core::crypto::AccountId32,
                    num_slashing_spans: ::core::primitive::u32,
                ) -> ::subxt::tx::StaticTxPayload<ForceUnstake>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Staking",
                        "force_unstake",
                        ForceUnstake {
                            stash,
                            num_slashing_spans,
                        },
                        [
                            94u8, 247u8, 238u8, 47u8, 250u8, 6u8, 96u8, 175u8,
                            173u8, 123u8, 161u8, 187u8, 162u8, 214u8, 176u8,
                            233u8, 33u8, 33u8, 167u8, 239u8, 40u8, 223u8, 19u8,
                            131u8, 230u8, 39u8, 175u8, 200u8, 36u8, 182u8,
                            76u8, 207u8,
                        ],
                    )
                }
                #[doc = "Force there to be a new era at the end of sessions indefinitely."]
                #[doc = ""]
                #[doc = "The dispatch origin must be Root."]
                #[doc = ""]
                #[doc = "# Warning"]
                #[doc = ""]
                #[doc = "The election process starts multiple blocks before the end of the era."]
                #[doc = "If this is called just before a new era is triggered, the election process may not"]
                #[doc = "have enough blocks to get a result."]
                pub fn force_new_era_always(
                    &self,
                ) -> ::subxt::tx::StaticTxPayload<ForceNewEraAlways>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Staking",
                        "force_new_era_always",
                        ForceNewEraAlways {},
                        [
                            179u8, 118u8, 189u8, 54u8, 248u8, 141u8, 207u8,
                            142u8, 80u8, 37u8, 241u8, 185u8, 138u8, 254u8,
                            117u8, 147u8, 225u8, 118u8, 34u8, 177u8, 197u8,
                            158u8, 8u8, 82u8, 202u8, 108u8, 208u8, 26u8, 64u8,
                            33u8, 74u8, 43u8,
                        ],
                    )
                }
                #[doc = "Cancel enactment of a deferred slash."]
                #[doc = ""]
                #[doc = "Can be called by the `T::SlashCancelOrigin`."]
                #[doc = ""]
                #[doc = "Parameters: era and indices of the slashes for that era to kill."]
                pub fn cancel_deferred_slash(
                    &self,
                    era: ::core::primitive::u32,
                    slash_indices: ::std::vec::Vec<::core::primitive::u32>,
                ) -> ::subxt::tx::StaticTxPayload<CancelDeferredSlash>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Staking",
                        "cancel_deferred_slash",
                        CancelDeferredSlash { era, slash_indices },
                        [
                            120u8, 57u8, 162u8, 105u8, 91u8, 250u8, 129u8,
                            240u8, 110u8, 234u8, 170u8, 98u8, 164u8, 65u8,
                            106u8, 101u8, 19u8, 88u8, 146u8, 210u8, 171u8,
                            44u8, 37u8, 50u8, 65u8, 178u8, 37u8, 223u8, 239u8,
                            197u8, 116u8, 168u8,
                        ],
                    )
                }
                #[doc = "Pay out all the stakers behind a single validator for a single era."]
                #[doc = ""]
                #[doc = "- `validator_stash` is the stash account of the validator. Their nominators, up to"]
                #[doc = "  `T::MaxNominatorRewardedPerValidator`, will also receive their rewards."]
                #[doc = "- `era` may be any era between `[current_era - history_depth; current_era]`."]
                #[doc = ""]
                #[doc = "The origin of this call must be _Signed_. Any account can call this function, even if"]
                #[doc = "it is not one of the stakers."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- Time complexity: at most O(MaxNominatorRewardedPerValidator)."]
                #[doc = "- Contains a limited number of reads and writes."]
                #[doc = "-----------"]
                #[doc = "N is the Number of payouts for the validator (including the validator)"]
                #[doc = "Weight:"]
                #[doc = "- Reward Destination Staked: O(N)"]
                #[doc = "- Reward Destination Controller (Creating): O(N)"]
                #[doc = ""]
                #[doc = "  NOTE: weights are assuming that payouts are made to alive stash account (Staked)."]
                #[doc = "  Paying even a dead controller is cheaper weight-wise. We don't do any refunds here."]
                #[doc = "# </weight>"]
                pub fn payout_stakers(
                    &self,
                    validator_stash: ::subxt::ext::sp_core::crypto::AccountId32,
                    era: ::core::primitive::u32,
                ) -> ::subxt::tx::StaticTxPayload<PayoutStakers>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Staking",
                        "payout_stakers",
                        PayoutStakers {
                            validator_stash,
                            era,
                        },
                        [
                            184u8, 194u8, 33u8, 118u8, 7u8, 203u8, 89u8, 119u8,
                            214u8, 76u8, 178u8, 20u8, 82u8, 111u8, 57u8, 132u8,
                            212u8, 43u8, 232u8, 91u8, 252u8, 49u8, 42u8, 115u8,
                            1u8, 181u8, 154u8, 207u8, 144u8, 206u8, 205u8,
                            33u8,
                        ],
                    )
                }
                #[doc = "Rebond a portion of the stash scheduled to be unlocked."]
                #[doc = ""]
                #[doc = "The dispatch origin must be signed by the controller."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- Time complexity: O(L), where L is unlocking chunks"]
                #[doc = "- Bounded by `MaxUnlockingChunks`."]
                #[doc = "- Storage changes: Can't increase storage, only decrease it."]
                #[doc = "# </weight>"]
                pub fn rebond(
                    &self,
                    value: ::core::primitive::u128,
                ) -> ::subxt::tx::StaticTxPayload<Rebond> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Staking",
                        "rebond",
                        Rebond { value },
                        [
                            25u8, 22u8, 191u8, 172u8, 133u8, 101u8, 139u8,
                            102u8, 134u8, 16u8, 136u8, 56u8, 137u8, 162u8, 4u8,
                            253u8, 196u8, 30u8, 234u8, 49u8, 102u8, 68u8,
                            145u8, 96u8, 148u8, 219u8, 162u8, 17u8, 177u8,
                            184u8, 34u8, 113u8,
                        ],
                    )
                }
                #[doc = "Set `HistoryDepth` value. This function will delete any history information"]
                #[doc = "when `HistoryDepth` is reduced."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- `new_history_depth`: The new history depth you would like to set."]
                #[doc = "- `era_items_deleted`: The number of items that will be deleted by this dispatch. This"]
                #[doc = "  should report all the storage items that will be deleted by clearing old era history."]
                #[doc = "  Needed to report an accurate weight for the dispatch. Trusted by `Root` to report an"]
                #[doc = "  accurate number."]
                #[doc = ""]
                #[doc = "Origin must be root."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- E: Number of history depths removed, i.e. 10 -> 7 = 3"]
                #[doc = "- Weight: O(E)"]
                #[doc = "- DB Weight:"]
                #[doc = "    - Reads: Current Era, History Depth"]
                #[doc = "    - Writes: History Depth"]
                #[doc = "    - Clear Prefix Each: Era Stakers, EraStakersClipped, ErasValidatorPrefs"]
                #[doc = "    - Writes Each: ErasValidatorReward, ErasRewardPoints, ErasTotalStake,"]
                #[doc = "      ErasStartSessionIndex"]
                #[doc = "# </weight>"]
                pub fn set_history_depth(
                    &self,
                    new_history_depth: ::core::primitive::u32,
                    era_items_deleted: ::core::primitive::u32,
                ) -> ::subxt::tx::StaticTxPayload<SetHistoryDepth>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Staking",
                        "set_history_depth",
                        SetHistoryDepth {
                            new_history_depth,
                            era_items_deleted,
                        },
                        [
                            174u8, 55u8, 231u8, 132u8, 219u8, 215u8, 118u8,
                            202u8, 13u8, 151u8, 193u8, 248u8, 141u8, 180u8,
                            56u8, 103u8, 90u8, 182u8, 194u8, 198u8, 120u8,
                            251u8, 143u8, 218u8, 81u8, 59u8, 13u8, 161u8,
                            247u8, 57u8, 178u8, 122u8,
                        ],
                    )
                }
                #[doc = "Remove all data structures concerning a staker/stash once it is at a state where it can"]
                #[doc = "be considered `dust` in the staking system. The requirements are:"]
                #[doc = ""]
                #[doc = "1. the `total_balance` of the stash is below existential deposit."]
                #[doc = "2. or, the `ledger.total` of the stash is below existential deposit."]
                #[doc = ""]
                #[doc = "The former can happen in cases like a slash; the latter when a fully unbonded account"]
                #[doc = "is still receiving staking rewards in `RewardDestination::Staked`."]
                #[doc = ""]
                #[doc = "It can be called by anyone, as long as `stash` meets the above requirements."]
                #[doc = ""]
                #[doc = "Refunds the transaction fees upon successful execution."]
                pub fn reap_stash(
                    &self,
                    stash: ::subxt::ext::sp_core::crypto::AccountId32,
                    num_slashing_spans: ::core::primitive::u32,
                ) -> ::subxt::tx::StaticTxPayload<ReapStash> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Staking",
                        "reap_stash",
                        ReapStash {
                            stash,
                            num_slashing_spans,
                        },
                        [
                            34u8, 168u8, 120u8, 161u8, 95u8, 199u8, 106u8,
                            233u8, 61u8, 240u8, 166u8, 31u8, 183u8, 165u8,
                            158u8, 179u8, 32u8, 130u8, 27u8, 164u8, 112u8,
                            44u8, 14u8, 125u8, 227u8, 87u8, 70u8, 203u8, 194u8,
                            24u8, 212u8, 177u8,
                        ],
                    )
                }
                #[doc = "Remove the given nominations from the calling validator."]
                #[doc = ""]
                #[doc = "Effects will be felt at the beginning of the next era."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ by the controller, not the stash."]
                #[doc = ""]
                #[doc = "- `who`: A list of nominator stash accounts who are nominating this validator which"]
                #[doc = "  should no longer be nominating this validator."]
                #[doc = ""]
                #[doc = "Note: Making this call only makes sense if you first set the validator preferences to"]
                #[doc = "block any further nominations."]
                pub fn kick(
                    &self,
                    who: ::std::vec::Vec<
                        ::subxt::ext::sp_runtime::MultiAddress<
                            ::subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                    >,
                ) -> ::subxt::tx::StaticTxPayload<Kick> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Staking",
                        "kick",
                        Kick { who },
                        [
                            94u8, 27u8, 18u8, 16u8, 126u8, 129u8, 47u8, 169u8,
                            114u8, 84u8, 48u8, 95u8, 235u8, 237u8, 33u8, 118u8,
                            115u8, 243u8, 166u8, 120u8, 121u8, 70u8, 227u8,
                            240u8, 205u8, 240u8, 211u8, 202u8, 251u8, 232u8,
                            209u8, 12u8,
                        ],
                    )
                }
                #[doc = "Update the various staking configurations ."]
                #[doc = ""]
                #[doc = "* `min_nominator_bond`: The minimum active bond needed to be a nominator."]
                #[doc = "* `min_validator_bond`: The minimum active bond needed to be a validator."]
                #[doc = "* `max_nominator_count`: The max number of users who can be a nominator at once. When"]
                #[doc = "  set to `None`, no limit is enforced."]
                #[doc = "* `max_validator_count`: The max number of users who can be a validator at once. When"]
                #[doc = "  set to `None`, no limit is enforced."]
                #[doc = "* `chill_threshold`: The ratio of `max_nominator_count` or `max_validator_count` which"]
                #[doc = "  should be filled in order for the `chill_other` transaction to work."]
                #[doc = "* `min_commission`: The minimum amount of commission that each validators must maintain."]
                #[doc = "  This is checked only upon calling `validate`. Existing validators are not affected."]
                #[doc = ""]
                #[doc = "Origin must be Root to call this function."]
                #[doc = ""]
                #[doc = "NOTE: Existing nominators and validators will not be affected by this update."]
                #[doc = "to kick people under the new limits, `chill_other` should be called."]
                pub fn set_staking_configs(
                    &self,
                    min_nominator_bond : runtime_types :: pallet_staking :: pallet :: pallet :: ConfigOp < :: core :: primitive :: u128 >,
                    min_validator_bond : runtime_types :: pallet_staking :: pallet :: pallet :: ConfigOp < :: core :: primitive :: u128 >,
                    max_nominator_count : runtime_types :: pallet_staking :: pallet :: pallet :: ConfigOp < :: core :: primitive :: u32 >,
                    max_validator_count : runtime_types :: pallet_staking :: pallet :: pallet :: ConfigOp < :: core :: primitive :: u32 >,
                    chill_threshold : runtime_types :: pallet_staking :: pallet :: pallet :: ConfigOp < runtime_types :: sp_arithmetic :: per_things :: Percent >,
                    min_commission : runtime_types :: pallet_staking :: pallet :: pallet :: ConfigOp < runtime_types :: sp_arithmetic :: per_things :: Perbill >,
                ) -> ::subxt::tx::StaticTxPayload<SetStakingConfigs>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Staking",
                        "set_staking_configs",
                        SetStakingConfigs {
                            min_nominator_bond,
                            min_validator_bond,
                            max_nominator_count,
                            max_validator_count,
                            chill_threshold,
                            min_commission,
                        },
                        [
                            176u8, 168u8, 155u8, 176u8, 27u8, 79u8, 223u8,
                            92u8, 88u8, 93u8, 223u8, 69u8, 179u8, 250u8, 138u8,
                            138u8, 87u8, 220u8, 36u8, 3u8, 126u8, 213u8, 16u8,
                            68u8, 3u8, 16u8, 218u8, 151u8, 98u8, 169u8, 217u8,
                            75u8,
                        ],
                    )
                }
                #[doc = "Declare a `controller` to stop participating as either a validator or nominator."]
                #[doc = ""]
                #[doc = "Effects will be felt at the beginning of the next era."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_, but can be called by anyone."]
                #[doc = ""]
                #[doc = "If the caller is the same as the controller being targeted, then no further checks are"]
                #[doc = "enforced, and this function behaves just like `chill`."]
                #[doc = ""]
                #[doc = "If the caller is different than the controller being targeted, the following conditions"]
                #[doc = "must be met:"]
                #[doc = ""]
                #[doc = "* `controller` must belong to a nominator who has become non-decodable,"]
                #[doc = ""]
                #[doc = "Or:"]
                #[doc = ""]
                #[doc = "* A `ChillThreshold` must be set and checked which defines how close to the max"]
                #[doc = "  nominators or validators we must reach before users can start chilling one-another."]
                #[doc = "* A `MaxNominatorCount` and `MaxValidatorCount` must be set which is used to determine"]
                #[doc = "  how close we are to the threshold."]
                #[doc = "* A `MinNominatorBond` and `MinValidatorBond` must be set and checked, which determines"]
                #[doc = "  if this is a person that should be chilled because they have not met the threshold"]
                #[doc = "  bond required."]
                #[doc = ""]
                #[doc = "This can be helpful if bond requirements are updated, and we need to remove old users"]
                #[doc = "who do not satisfy these requirements."]
                pub fn chill_other(
                    &self,
                    controller: ::subxt::ext::sp_core::crypto::AccountId32,
                ) -> ::subxt::tx::StaticTxPayload<ChillOther> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Staking",
                        "chill_other",
                        ChillOther { controller },
                        [
                            140u8, 98u8, 4u8, 203u8, 91u8, 131u8, 123u8, 119u8,
                            169u8, 47u8, 188u8, 23u8, 205u8, 170u8, 82u8,
                            220u8, 166u8, 170u8, 135u8, 176u8, 68u8, 228u8,
                            14u8, 67u8, 42u8, 52u8, 140u8, 231u8, 62u8, 167u8,
                            80u8, 173u8,
                        ],
                    )
                }
                #[doc = "Force a validator to have at least the minimum commission. This will not affect a"]
                #[doc = "validator who already has a commission greater than or equal to the minimum. Any account"]
                #[doc = "can call this."]
                pub fn force_apply_min_commission(
                    &self,
                    validator_stash: ::subxt::ext::sp_core::crypto::AccountId32,
                ) -> ::subxt::tx::StaticTxPayload<ForceApplyMinCommission>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Staking",
                        "force_apply_min_commission",
                        ForceApplyMinCommission { validator_stash },
                        [
                            136u8, 163u8, 85u8, 134u8, 240u8, 247u8, 183u8,
                            227u8, 226u8, 202u8, 102u8, 186u8, 138u8, 119u8,
                            78u8, 123u8, 229u8, 135u8, 129u8, 241u8, 119u8,
                            106u8, 41u8, 182u8, 121u8, 181u8, 242u8, 175u8,
                            74u8, 207u8, 64u8, 106u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_staking::pallet::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "The era payout has been set; the first balance is the validator-payout; the second is"]
            #[doc = "the remainder from the maximum amount of reward."]
            #[doc = "\\[era_index, validator_payout, remainder\\]"]
            pub struct EraPaid(
                pub ::core::primitive::u32,
                pub ::core::primitive::u128,
                pub ::core::primitive::u128,
            );
            impl ::subxt::events::StaticEvent for EraPaid {
                const PALLET: &'static str = "Staking";
                const EVENT: &'static str = "EraPaid";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "The nominator has been rewarded by this amount. \\[stash, amount\\]"]
            pub struct Rewarded(
                pub ::subxt::ext::sp_core::crypto::AccountId32,
                pub ::core::primitive::u128,
            );
            impl ::subxt::events::StaticEvent for Rewarded {
                const PALLET: &'static str = "Staking";
                const EVENT: &'static str = "Rewarded";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "One validator (and its nominators) has been slashed by the given amount."]
            #[doc = "\\[validator, amount\\]"]
            pub struct Slashed(
                pub ::subxt::ext::sp_core::crypto::AccountId32,
                pub ::core::primitive::u128,
            );
            impl ::subxt::events::StaticEvent for Slashed {
                const PALLET: &'static str = "Staking";
                const EVENT: &'static str = "Slashed";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "An old slashing report from a prior era was discarded because it could"]
            #[doc = "not be processed. \\[session_index\\]"]
            pub struct OldSlashingReportDiscarded(pub ::core::primitive::u32);
            impl ::subxt::events::StaticEvent for OldSlashingReportDiscarded {
                const PALLET: &'static str = "Staking";
                const EVENT: &'static str = "OldSlashingReportDiscarded";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "A new set of stakers was elected."]
            pub struct StakersElected;
            impl ::subxt::events::StaticEvent for StakersElected {
                const PALLET: &'static str = "Staking";
                const EVENT: &'static str = "StakersElected";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "An account has bonded this amount. \\[stash, amount\\]"]
            #[doc = ""]
            #[doc = "NOTE: This event is only emitted when funds are bonded via a dispatchable. Notably,"]
            #[doc = "it will not be emitted for staking rewards when they are added to stake."]
            pub struct Bonded(
                pub ::subxt::ext::sp_core::crypto::AccountId32,
                pub ::core::primitive::u128,
            );
            impl ::subxt::events::StaticEvent for Bonded {
                const PALLET: &'static str = "Staking";
                const EVENT: &'static str = "Bonded";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "An account has unbonded this amount. \\[stash, amount\\]"]
            pub struct Unbonded(
                pub ::subxt::ext::sp_core::crypto::AccountId32,
                pub ::core::primitive::u128,
            );
            impl ::subxt::events::StaticEvent for Unbonded {
                const PALLET: &'static str = "Staking";
                const EVENT: &'static str = "Unbonded";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "An account has called `withdraw_unbonded` and removed unbonding chunks worth `Balance`"]
            #[doc = "from the unlocking queue. \\[stash, amount\\]"]
            pub struct Withdrawn(
                pub ::subxt::ext::sp_core::crypto::AccountId32,
                pub ::core::primitive::u128,
            );
            impl ::subxt::events::StaticEvent for Withdrawn {
                const PALLET: &'static str = "Staking";
                const EVENT: &'static str = "Withdrawn";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "A nominator has been kicked from a validator. \\[nominator, stash\\]"]
            pub struct Kicked(
                pub ::subxt::ext::sp_core::crypto::AccountId32,
                pub ::subxt::ext::sp_core::crypto::AccountId32,
            );
            impl ::subxt::events::StaticEvent for Kicked {
                const PALLET: &'static str = "Staking";
                const EVENT: &'static str = "Kicked";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "The election failed. No new era is planned."]
            pub struct StakingElectionFailed;
            impl ::subxt::events::StaticEvent for StakingElectionFailed {
                const PALLET: &'static str = "Staking";
                const EVENT: &'static str = "StakingElectionFailed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "An account has stopped participating as either a validator or nominator."]
            #[doc = "\\[stash\\]"]
            pub struct Chilled(pub ::subxt::ext::sp_core::crypto::AccountId32);
            impl ::subxt::events::StaticEvent for Chilled {
                const PALLET: &'static str = "Staking";
                const EVENT: &'static str = "Chilled";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "The stakers' rewards are getting paid. \\[era_index, validator_stash\\]"]
            pub struct PayoutStarted(
                pub ::core::primitive::u32,
                pub ::subxt::ext::sp_core::crypto::AccountId32,
            );
            impl ::subxt::events::StaticEvent for PayoutStarted {
                const PALLET: &'static str = "Staking";
                const EVENT: &'static str = "PayoutStarted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "A validator has set their preferences."]
            pub struct ValidatorPrefsSet(
                pub ::subxt::ext::sp_core::crypto::AccountId32,
                pub runtime_types::pallet_staking::ValidatorPrefs,
            );
            impl ::subxt::events::StaticEvent for ValidatorPrefsSet {
                const PALLET: &'static str = "Staking";
                const EVENT: &'static str = "ValidatorPrefsSet";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Number of eras to keep in history."]
                #[doc = ""]
                #[doc = " Information is kept for eras in `[current_era - history_depth; current_era]`."]
                #[doc = ""]
                #[doc = " Must be more than the number of eras delayed by session otherwise. I.e. active era must"]
                #[doc = " always be in history. I.e. `active_era > current_era - history_depth` must be"]
                #[doc = " guaranteed."]                pub fn history_depth (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u32 > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Staking",
                        "HistoryDepth",
                        vec![],
                        [
                            41u8, 54u8, 118u8, 245u8, 75u8, 136u8, 220u8, 25u8,
                            55u8, 255u8, 149u8, 177u8, 49u8, 155u8, 167u8,
                            188u8, 170u8, 29u8, 251u8, 44u8, 240u8, 250u8,
                            225u8, 205u8, 102u8, 74u8, 25u8, 47u8, 52u8, 235u8,
                            204u8, 167u8,
                        ],
                    )
                }
                #[doc = " The ideal number of staking participants."]                pub fn validator_count (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u32 > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Staking",
                        "ValidatorCount",
                        vec![],
                        [
                            245u8, 75u8, 214u8, 110u8, 66u8, 164u8, 86u8,
                            206u8, 69u8, 89u8, 12u8, 111u8, 117u8, 16u8, 228u8,
                            184u8, 207u8, 6u8, 0u8, 126u8, 221u8, 67u8, 125u8,
                            218u8, 188u8, 245u8, 156u8, 188u8, 34u8, 85u8,
                            208u8, 197u8,
                        ],
                    )
                }
                #[doc = " Minimum number of staking participants before emergency conditions are imposed."]                pub fn minimum_validator_count (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u32 > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Staking",
                        "MinimumValidatorCount",
                        vec![],
                        [
                            82u8, 95u8, 128u8, 55u8, 136u8, 134u8, 71u8, 117u8,
                            135u8, 76u8, 44u8, 46u8, 174u8, 34u8, 170u8, 228u8,
                            175u8, 1u8, 234u8, 162u8, 91u8, 252u8, 127u8, 68u8,
                            243u8, 241u8, 13u8, 107u8, 214u8, 70u8, 87u8,
                            249u8,
                        ],
                    )
                }
                #[doc = " Any validators that may never be slashed or forcibly kicked. It's a Vec since they're"]
                #[doc = " easy to initialize and the performance hit is minimal (we expect no more than four"]
                #[doc = " invulnerables) and restricted to testnets."]                pub fn invulnerables (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: std :: vec :: Vec < :: subxt :: ext :: sp_core :: crypto :: AccountId32 > > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Staking",
                        "Invulnerables",
                        vec![],
                        [
                            77u8, 78u8, 63u8, 199u8, 150u8, 167u8, 135u8,
                            130u8, 192u8, 51u8, 202u8, 119u8, 68u8, 49u8,
                            241u8, 68u8, 82u8, 90u8, 226u8, 201u8, 96u8, 170u8,
                            21u8, 173u8, 236u8, 116u8, 148u8, 8u8, 174u8, 92u8,
                            7u8, 11u8,
                        ],
                    )
                }
                #[doc = " Map from all locked \"stash\" accounts to the controller account."]                pub fn bonded (& self , _0 : impl :: std :: borrow :: Borrow < :: subxt :: ext :: sp_core :: crypto :: AccountId32 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: subxt :: ext :: sp_core :: crypto :: AccountId32 > , :: subxt :: storage :: address :: Yes , () , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("Staking" , "Bonded" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Twox64Concat)] , [35u8 , 197u8 , 156u8 , 60u8 , 22u8 , 59u8 , 103u8 , 83u8 , 77u8 , 15u8 , 118u8 , 193u8 , 155u8 , 97u8 , 229u8 , 36u8 , 119u8 , 128u8 , 224u8 , 162u8 , 21u8 , 46u8 , 199u8 , 221u8 , 15u8 , 74u8 , 59u8 , 70u8 , 77u8 , 218u8 , 73u8 , 165u8 ,])
                }
                #[doc = " Map from all locked \"stash\" accounts to the controller account."]                pub fn bonded_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: subxt :: ext :: sp_core :: crypto :: AccountId32 > , () , () , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Staking",
                        "Bonded",
                        Vec::new(),
                        [
                            35u8, 197u8, 156u8, 60u8, 22u8, 59u8, 103u8, 83u8,
                            77u8, 15u8, 118u8, 193u8, 155u8, 97u8, 229u8, 36u8,
                            119u8, 128u8, 224u8, 162u8, 21u8, 46u8, 199u8,
                            221u8, 15u8, 74u8, 59u8, 70u8, 77u8, 218u8, 73u8,
                            165u8,
                        ],
                    )
                }
                #[doc = " The minimum active bond to become and maintain the role of a nominator."]                pub fn min_nominator_bond (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u128 > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Staking",
                        "MinNominatorBond",
                        vec![],
                        [
                            187u8, 66u8, 149u8, 226u8, 72u8, 219u8, 57u8,
                            246u8, 102u8, 47u8, 71u8, 12u8, 219u8, 204u8,
                            127u8, 223u8, 58u8, 134u8, 81u8, 165u8, 200u8,
                            142u8, 196u8, 158u8, 26u8, 38u8, 165u8, 19u8, 91u8,
                            251u8, 119u8, 84u8,
                        ],
                    )
                }
                #[doc = " The minimum active bond to become and maintain the role of a validator."]                pub fn min_validator_bond (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u128 > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Staking",
                        "MinValidatorBond",
                        vec![],
                        [
                            48u8, 105u8, 85u8, 178u8, 142u8, 208u8, 208u8,
                            19u8, 236u8, 130u8, 129u8, 169u8, 35u8, 245u8,
                            66u8, 182u8, 92u8, 20u8, 22u8, 109u8, 155u8, 174u8,
                            87u8, 118u8, 242u8, 216u8, 193u8, 154u8, 4u8, 5u8,
                            66u8, 56u8,
                        ],
                    )
                }
                #[doc = " The minimum amount of commission that validators can set."]
                #[doc = ""]
                #[doc = " If set to `0`, no limit exists."]                pub fn min_commission (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: sp_arithmetic :: per_things :: Perbill > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Staking",
                        "MinCommission",
                        vec![],
                        [
                            61u8, 101u8, 69u8, 27u8, 220u8, 179u8, 5u8, 71u8,
                            66u8, 227u8, 84u8, 98u8, 18u8, 141u8, 183u8, 49u8,
                            98u8, 46u8, 123u8, 114u8, 198u8, 85u8, 15u8, 175u8,
                            243u8, 239u8, 133u8, 129u8, 146u8, 174u8, 254u8,
                            158u8,
                        ],
                    )
                }
                #[doc = " Map from all (unlocked) \"controller\" accounts to the info regarding the staking."]                pub fn ledger (& self , _0 : impl :: std :: borrow :: Borrow < :: subxt :: ext :: sp_core :: crypto :: AccountId32 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_staking :: StakingLedger > , :: subxt :: storage :: address :: Yes , () , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("Staking" , "Ledger" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Blake2_128Concat)] , [117u8 , 177u8 , 209u8 , 237u8 , 0u8 , 30u8 , 228u8 , 128u8 , 150u8 , 69u8 , 138u8 , 21u8 , 9u8 , 74u8 , 178u8 , 113u8 , 238u8 , 111u8 , 57u8 , 222u8 , 242u8 , 241u8 , 191u8 , 50u8 , 225u8 , 51u8 , 99u8 , 211u8 , 210u8 , 163u8 , 60u8 , 205u8 ,])
                }
                #[doc = " Map from all (unlocked) \"controller\" accounts to the info regarding the staking."]                pub fn ledger_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_staking :: StakingLedger > , () , () , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Staking",
                        "Ledger",
                        Vec::new(),
                        [
                            117u8, 177u8, 209u8, 237u8, 0u8, 30u8, 228u8,
                            128u8, 150u8, 69u8, 138u8, 21u8, 9u8, 74u8, 178u8,
                            113u8, 238u8, 111u8, 57u8, 222u8, 242u8, 241u8,
                            191u8, 50u8, 225u8, 51u8, 99u8, 211u8, 210u8,
                            163u8, 60u8, 205u8,
                        ],
                    )
                }
                #[doc = " Where the reward payment should be made. Keyed by stash."]                pub fn payee (& self , _0 : impl :: std :: borrow :: Borrow < :: subxt :: ext :: sp_core :: crypto :: AccountId32 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_staking :: RewardDestination < :: subxt :: ext :: sp_core :: crypto :: AccountId32 > > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("Staking" , "Payee" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Twox64Concat)] , [195u8 , 125u8 , 82u8 , 213u8 , 216u8 , 64u8 , 76u8 , 63u8 , 187u8 , 163u8 , 20u8 , 230u8 , 153u8 , 13u8 , 189u8 , 232u8 , 119u8 , 118u8 , 107u8 , 17u8 , 102u8 , 245u8 , 36u8 , 42u8 , 232u8 , 137u8 , 177u8 , 165u8 , 169u8 , 246u8 , 199u8 , 57u8 ,])
                }
                #[doc = " Where the reward payment should be made. Keyed by stash."]                pub fn payee_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_staking :: RewardDestination < :: subxt :: ext :: sp_core :: crypto :: AccountId32 > > , () , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Staking",
                        "Payee",
                        Vec::new(),
                        [
                            195u8, 125u8, 82u8, 213u8, 216u8, 64u8, 76u8, 63u8,
                            187u8, 163u8, 20u8, 230u8, 153u8, 13u8, 189u8,
                            232u8, 119u8, 118u8, 107u8, 17u8, 102u8, 245u8,
                            36u8, 42u8, 232u8, 137u8, 177u8, 165u8, 169u8,
                            246u8, 199u8, 57u8,
                        ],
                    )
                }
                #[doc = " The map from (wannabe) validator stash key to the preferences of that validator."]                pub fn validators (& self , _0 : impl :: std :: borrow :: Borrow < :: subxt :: ext :: sp_core :: crypto :: AccountId32 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_staking :: ValidatorPrefs > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("Staking" , "Validators" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Twox64Concat)] , [80u8 , 77u8 , 66u8 , 18u8 , 197u8 , 250u8 , 41u8 , 185u8 , 43u8 , 24u8 , 149u8 , 164u8 , 208u8 , 60u8 , 144u8 , 29u8 , 251u8 , 195u8 , 236u8 , 196u8 , 108u8 , 58u8 , 80u8 , 115u8 , 246u8 , 66u8 , 226u8 , 241u8 , 201u8 , 172u8 , 229u8 , 152u8 ,])
                }
                #[doc = " The map from (wannabe) validator stash key to the preferences of that validator."]                pub fn validators_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_staking :: ValidatorPrefs > , () , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Staking",
                        "Validators",
                        Vec::new(),
                        [
                            80u8, 77u8, 66u8, 18u8, 197u8, 250u8, 41u8, 185u8,
                            43u8, 24u8, 149u8, 164u8, 208u8, 60u8, 144u8, 29u8,
                            251u8, 195u8, 236u8, 196u8, 108u8, 58u8, 80u8,
                            115u8, 246u8, 66u8, 226u8, 241u8, 201u8, 172u8,
                            229u8, 152u8,
                        ],
                    )
                }
                #[doc = "Counter for the related counted storage map"]                pub fn counter_for_validators (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u32 > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Staking",
                        "CounterForValidators",
                        vec![],
                        [
                            139u8, 25u8, 223u8, 6u8, 160u8, 239u8, 212u8, 85u8,
                            36u8, 185u8, 69u8, 63u8, 21u8, 156u8, 144u8, 241u8,
                            112u8, 85u8, 49u8, 78u8, 88u8, 11u8, 8u8, 48u8,
                            118u8, 34u8, 62u8, 159u8, 239u8, 122u8, 90u8, 45u8,
                        ],
                    )
                }
                #[doc = " The maximum validator count before we stop allowing new validators to join."]
                #[doc = ""]
                #[doc = " When this value is not set, no limits are enforced."]                pub fn max_validators_count (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u32 > , :: subxt :: storage :: address :: Yes , () , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Staking",
                        "MaxValidatorsCount",
                        vec![],
                        [
                            250u8, 62u8, 16u8, 68u8, 192u8, 216u8, 236u8,
                            211u8, 217u8, 9u8, 213u8, 49u8, 41u8, 37u8, 58u8,
                            62u8, 131u8, 112u8, 64u8, 26u8, 133u8, 7u8, 130u8,
                            1u8, 71u8, 158u8, 14u8, 55u8, 169u8, 239u8, 223u8,
                            245u8,
                        ],
                    )
                }
                #[doc = " The map from nominator stash key to their nomination preferences, namely the validators that"]
                #[doc = " they wish to support."]
                #[doc = ""]
                #[doc = " Note that the keys of this storage map might become non-decodable in case the"]
                #[doc = " [`Config::MaxNominations`] configuration is decreased. In this rare case, these nominators"]
                #[doc = " are still existent in storage, their key is correct and retrievable (i.e. `contains_key`"]
                #[doc = " indicates that they exist), but their value cannot be decoded. Therefore, the non-decodable"]
                #[doc = " nominators will effectively not-exist, until they re-submit their preferences such that it"]
                #[doc = " is within the bounds of the newly set `Config::MaxNominations`."]
                #[doc = ""]
                #[doc = " This implies that `::iter_keys().count()` and `::iter().count()` might return different"]
                #[doc = " values for this map. Moreover, the main `::count()` is aligned with the former, namely the"]
                #[doc = " number of keys that exist."]
                #[doc = ""]
                #[doc = " Lastly, if any of the nominators become non-decodable, they can be chilled immediately via"]
                #[doc = " [`Call::chill_other`] dispatchable by anyone."]                pub fn nominators (& self , _0 : impl :: std :: borrow :: Borrow < :: subxt :: ext :: sp_core :: crypto :: AccountId32 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_staking :: Nominations > , :: subxt :: storage :: address :: Yes , () , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("Staking" , "Nominators" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Twox64Concat)] , [1u8 , 154u8 , 55u8 , 170u8 , 215u8 , 64u8 , 56u8 , 83u8 , 254u8 , 19u8 , 152u8 , 85u8 , 164u8 , 171u8 , 206u8 , 129u8 , 184u8 , 45u8 , 221u8 , 181u8 , 229u8 , 133u8 , 200u8 , 231u8 , 16u8 , 146u8 , 247u8 , 21u8 , 77u8 , 122u8 , 165u8 , 134u8 ,])
                }
                #[doc = " The map from nominator stash key to their nomination preferences, namely the validators that"]
                #[doc = " they wish to support."]
                #[doc = ""]
                #[doc = " Note that the keys of this storage map might become non-decodable in case the"]
                #[doc = " [`Config::MaxNominations`] configuration is decreased. In this rare case, these nominators"]
                #[doc = " are still existent in storage, their key is correct and retrievable (i.e. `contains_key`"]
                #[doc = " indicates that they exist), but their value cannot be decoded. Therefore, the non-decodable"]
                #[doc = " nominators will effectively not-exist, until they re-submit their preferences such that it"]
                #[doc = " is within the bounds of the newly set `Config::MaxNominations`."]
                #[doc = ""]
                #[doc = " This implies that `::iter_keys().count()` and `::iter().count()` might return different"]
                #[doc = " values for this map. Moreover, the main `::count()` is aligned with the former, namely the"]
                #[doc = " number of keys that exist."]
                #[doc = ""]
                #[doc = " Lastly, if any of the nominators become non-decodable, they can be chilled immediately via"]
                #[doc = " [`Call::chill_other`] dispatchable by anyone."]                pub fn nominators_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_staking :: Nominations > , () , () , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Staking",
                        "Nominators",
                        Vec::new(),
                        [
                            1u8, 154u8, 55u8, 170u8, 215u8, 64u8, 56u8, 83u8,
                            254u8, 19u8, 152u8, 85u8, 164u8, 171u8, 206u8,
                            129u8, 184u8, 45u8, 221u8, 181u8, 229u8, 133u8,
                            200u8, 231u8, 16u8, 146u8, 247u8, 21u8, 77u8,
                            122u8, 165u8, 134u8,
                        ],
                    )
                }
                #[doc = "Counter for the related counted storage map"]                pub fn counter_for_nominators (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u32 > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Staking",
                        "CounterForNominators",
                        vec![],
                        [
                            31u8, 94u8, 130u8, 138u8, 75u8, 8u8, 38u8, 162u8,
                            181u8, 5u8, 125u8, 116u8, 9u8, 51u8, 22u8, 234u8,
                            40u8, 117u8, 215u8, 46u8, 82u8, 117u8, 225u8, 1u8,
                            9u8, 208u8, 83u8, 63u8, 39u8, 187u8, 207u8, 191u8,
                        ],
                    )
                }
                #[doc = " The maximum nominator count before we stop allowing new validators to join."]
                #[doc = ""]
                #[doc = " When this value is not set, no limits are enforced."]                pub fn max_nominators_count (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u32 > , :: subxt :: storage :: address :: Yes , () , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Staking",
                        "MaxNominatorsCount",
                        vec![],
                        [
                            180u8, 190u8, 180u8, 66u8, 235u8, 173u8, 76u8,
                            160u8, 197u8, 92u8, 96u8, 165u8, 220u8, 188u8,
                            32u8, 119u8, 3u8, 73u8, 86u8, 49u8, 104u8, 17u8,
                            186u8, 98u8, 221u8, 175u8, 109u8, 254u8, 207u8,
                            245u8, 125u8, 179u8,
                        ],
                    )
                }
                #[doc = " The current era index."]
                #[doc = ""]
                #[doc = " This is the latest planned era, depending on how the Session pallet queues the validator"]
                #[doc = " set, it might be active or not."]                pub fn current_era (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u32 > , :: subxt :: storage :: address :: Yes , () , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Staking",
                        "CurrentEra",
                        vec![],
                        [
                            105u8, 150u8, 49u8, 122u8, 4u8, 78u8, 8u8, 121u8,
                            34u8, 136u8, 157u8, 227u8, 59u8, 139u8, 7u8, 253u8,
                            7u8, 10u8, 117u8, 71u8, 240u8, 74u8, 86u8, 36u8,
                            198u8, 37u8, 153u8, 93u8, 196u8, 22u8, 192u8,
                            243u8,
                        ],
                    )
                }
                #[doc = " The active era information, it holds index and start."]
                #[doc = ""]
                #[doc = " The active era is the era being currently rewarded. Validator set of this era must be"]
                #[doc = " equal to [`SessionInterface::validators`]."]                pub fn active_era (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_staking :: ActiveEraInfo > , :: subxt :: storage :: address :: Yes , () , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Staking",
                        "ActiveEra",
                        vec![],
                        [
                            15u8, 112u8, 251u8, 183u8, 108u8, 61u8, 28u8, 71u8,
                            44u8, 150u8, 162u8, 4u8, 143u8, 121u8, 11u8, 37u8,
                            83u8, 29u8, 193u8, 21u8, 210u8, 116u8, 190u8,
                            236u8, 213u8, 235u8, 49u8, 97u8, 189u8, 142u8,
                            251u8, 124u8,
                        ],
                    )
                }
                #[doc = " The session index at which the era start for the last `HISTORY_DEPTH` eras."]
                #[doc = ""]
                #[doc = " Note: This tracks the starting session (i.e. session index when era start being active)"]
                #[doc = " for the eras in `[CurrentEra - HISTORY_DEPTH, CurrentEra]`."]                pub fn eras_start_session_index (& self , _0 : impl :: std :: borrow :: Borrow < :: core :: primitive :: u32 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u32 > , :: subxt :: storage :: address :: Yes , () , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("Staking" , "ErasStartSessionIndex" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Twox64Concat)] , [92u8 , 157u8 , 168u8 , 144u8 , 132u8 , 3u8 , 212u8 , 80u8 , 230u8 , 229u8 , 251u8 , 218u8 , 97u8 , 55u8 , 79u8 , 100u8 , 163u8 , 91u8 , 32u8 , 246u8 , 122u8 , 78u8 , 149u8 , 214u8 , 103u8 , 249u8 , 119u8 , 20u8 , 101u8 , 116u8 , 110u8 , 185u8 ,])
                }
                #[doc = " The session index at which the era start for the last `HISTORY_DEPTH` eras."]
                #[doc = ""]
                #[doc = " Note: This tracks the starting session (i.e. session index when era start being active)"]
                #[doc = " for the eras in `[CurrentEra - HISTORY_DEPTH, CurrentEra]`."]                pub fn eras_start_session_index_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u32 > , () , () , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Staking",
                        "ErasStartSessionIndex",
                        Vec::new(),
                        [
                            92u8, 157u8, 168u8, 144u8, 132u8, 3u8, 212u8, 80u8,
                            230u8, 229u8, 251u8, 218u8, 97u8, 55u8, 79u8,
                            100u8, 163u8, 91u8, 32u8, 246u8, 122u8, 78u8,
                            149u8, 214u8, 103u8, 249u8, 119u8, 20u8, 101u8,
                            116u8, 110u8, 185u8,
                        ],
                    )
                }
                #[doc = " Exposure of validator at era."]
                #[doc = ""]
                #[doc = " This is keyed first by the era index to allow bulk deletion and then the stash account."]
                #[doc = ""]
                #[doc = " Is it removed after `HISTORY_DEPTH` eras."]
                #[doc = " If stakers hasn't been set or has been removed then empty exposure is returned."]                pub fn eras_stakers (& self , _0 : impl :: std :: borrow :: Borrow < :: core :: primitive :: u32 > , _1 : impl :: std :: borrow :: Borrow < :: subxt :: ext :: sp_core :: crypto :: AccountId32 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_staking :: Exposure < :: subxt :: ext :: sp_core :: crypto :: AccountId32 , :: core :: primitive :: u128 > > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("Staking" , "ErasStakers" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Twox64Concat) , :: subxt :: storage :: address :: StorageMapKey :: new (_1 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Twox64Concat)] , [192u8 , 50u8 , 152u8 , 151u8 , 92u8 , 180u8 , 206u8 , 15u8 , 139u8 , 210u8 , 128u8 , 65u8 , 92u8 , 253u8 , 43u8 , 35u8 , 139u8 , 171u8 , 73u8 , 185u8 , 32u8 , 78u8 , 20u8 , 197u8 , 154u8 , 90u8 , 233u8 , 231u8 , 23u8 , 22u8 , 187u8 , 156u8 ,])
                }
                #[doc = " Exposure of validator at era."]
                #[doc = ""]
                #[doc = " This is keyed first by the era index to allow bulk deletion and then the stash account."]
                #[doc = ""]
                #[doc = " Is it removed after `HISTORY_DEPTH` eras."]
                #[doc = " If stakers hasn't been set or has been removed then empty exposure is returned."]                pub fn eras_stakers_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_staking :: Exposure < :: subxt :: ext :: sp_core :: crypto :: AccountId32 , :: core :: primitive :: u128 > > , () , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Staking",
                        "ErasStakers",
                        Vec::new(),
                        [
                            192u8, 50u8, 152u8, 151u8, 92u8, 180u8, 206u8,
                            15u8, 139u8, 210u8, 128u8, 65u8, 92u8, 253u8, 43u8,
                            35u8, 139u8, 171u8, 73u8, 185u8, 32u8, 78u8, 20u8,
                            197u8, 154u8, 90u8, 233u8, 231u8, 23u8, 22u8,
                            187u8, 156u8,
                        ],
                    )
                }
                #[doc = " Clipped Exposure of validator at era."]
                #[doc = ""]
                #[doc = " This is similar to [`ErasStakers`] but number of nominators exposed is reduced to the"]
                #[doc = " `T::MaxNominatorRewardedPerValidator` biggest stakers."]
                #[doc = " (Note: the field `total` and `own` of the exposure remains unchanged)."]
                #[doc = " This is used to limit the i/o cost for the nominator payout."]
                #[doc = ""]
                #[doc = " This is keyed fist by the era index to allow bulk deletion and then the stash account."]
                #[doc = ""]
                #[doc = " Is it removed after `HISTORY_DEPTH` eras."]
                #[doc = " If stakers hasn't been set or has been removed then empty exposure is returned."]                pub fn eras_stakers_clipped (& self , _0 : impl :: std :: borrow :: Borrow < :: core :: primitive :: u32 > , _1 : impl :: std :: borrow :: Borrow < :: subxt :: ext :: sp_core :: crypto :: AccountId32 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_staking :: Exposure < :: subxt :: ext :: sp_core :: crypto :: AccountId32 , :: core :: primitive :: u128 > > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("Staking" , "ErasStakersClipped" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Twox64Concat) , :: subxt :: storage :: address :: StorageMapKey :: new (_1 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Twox64Concat)] , [43u8 , 159u8 , 113u8 , 223u8 , 122u8 , 169u8 , 98u8 , 153u8 , 26u8 , 55u8 , 71u8 , 119u8 , 174u8 , 48u8 , 158u8 , 45u8 , 214u8 , 26u8 , 136u8 , 215u8 , 46u8 , 161u8 , 185u8 , 17u8 , 174u8 , 204u8 , 206u8 , 246u8 , 49u8 , 87u8 , 134u8 , 169u8 ,])
                }
                #[doc = " Clipped Exposure of validator at era."]
                #[doc = ""]
                #[doc = " This is similar to [`ErasStakers`] but number of nominators exposed is reduced to the"]
                #[doc = " `T::MaxNominatorRewardedPerValidator` biggest stakers."]
                #[doc = " (Note: the field `total` and `own` of the exposure remains unchanged)."]
                #[doc = " This is used to limit the i/o cost for the nominator payout."]
                #[doc = ""]
                #[doc = " This is keyed fist by the era index to allow bulk deletion and then the stash account."]
                #[doc = ""]
                #[doc = " Is it removed after `HISTORY_DEPTH` eras."]
                #[doc = " If stakers hasn't been set or has been removed then empty exposure is returned."]                pub fn eras_stakers_clipped_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_staking :: Exposure < :: subxt :: ext :: sp_core :: crypto :: AccountId32 , :: core :: primitive :: u128 > > , () , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Staking",
                        "ErasStakersClipped",
                        Vec::new(),
                        [
                            43u8, 159u8, 113u8, 223u8, 122u8, 169u8, 98u8,
                            153u8, 26u8, 55u8, 71u8, 119u8, 174u8, 48u8, 158u8,
                            45u8, 214u8, 26u8, 136u8, 215u8, 46u8, 161u8,
                            185u8, 17u8, 174u8, 204u8, 206u8, 246u8, 49u8,
                            87u8, 134u8, 169u8,
                        ],
                    )
                }
                #[doc = " Similar to `ErasStakers`, this holds the preferences of validators."]
                #[doc = ""]
                #[doc = " This is keyed first by the era index to allow bulk deletion and then the stash account."]
                #[doc = ""]
                #[doc = " Is it removed after `HISTORY_DEPTH` eras."]                pub fn eras_validator_prefs (& self , _0 : impl :: std :: borrow :: Borrow < :: core :: primitive :: u32 > , _1 : impl :: std :: borrow :: Borrow < :: subxt :: ext :: sp_core :: crypto :: AccountId32 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_staking :: ValidatorPrefs > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("Staking" , "ErasValidatorPrefs" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Twox64Concat) , :: subxt :: storage :: address :: StorageMapKey :: new (_1 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Twox64Concat)] , [6u8 , 196u8 , 209u8 , 138u8 , 252u8 , 18u8 , 203u8 , 86u8 , 129u8 , 62u8 , 4u8 , 56u8 , 234u8 , 114u8 , 141u8 , 136u8 , 127u8 , 224u8 , 142u8 , 89u8 , 150u8 , 33u8 , 31u8 , 50u8 , 140u8 , 108u8 , 124u8 , 77u8 , 188u8 , 102u8 , 230u8 , 174u8 ,])
                }
                #[doc = " Similar to `ErasStakers`, this holds the preferences of validators."]
                #[doc = ""]
                #[doc = " This is keyed first by the era index to allow bulk deletion and then the stash account."]
                #[doc = ""]
                #[doc = " Is it removed after `HISTORY_DEPTH` eras."]                pub fn eras_validator_prefs_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_staking :: ValidatorPrefs > , () , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Staking",
                        "ErasValidatorPrefs",
                        Vec::new(),
                        [
                            6u8, 196u8, 209u8, 138u8, 252u8, 18u8, 203u8, 86u8,
                            129u8, 62u8, 4u8, 56u8, 234u8, 114u8, 141u8, 136u8,
                            127u8, 224u8, 142u8, 89u8, 150u8, 33u8, 31u8, 50u8,
                            140u8, 108u8, 124u8, 77u8, 188u8, 102u8, 230u8,
                            174u8,
                        ],
                    )
                }
                #[doc = " The total validator era payout for the last `HISTORY_DEPTH` eras."]
                #[doc = ""]
                #[doc = " Eras that haven't finished yet or has been removed doesn't have reward."]                pub fn eras_validator_reward (& self , _0 : impl :: std :: borrow :: Borrow < :: core :: primitive :: u32 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u128 > , :: subxt :: storage :: address :: Yes , () , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("Staking" , "ErasValidatorReward" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Twox64Concat)] , [87u8 , 80u8 , 156u8 , 123u8 , 107u8 , 77u8 , 203u8 , 37u8 , 231u8 , 84u8 , 124u8 , 155u8 , 227u8 , 212u8 , 212u8 , 179u8 , 84u8 , 161u8 , 223u8 , 255u8 , 254u8 , 107u8 , 52u8 , 89u8 , 98u8 , 169u8 , 136u8 , 241u8 , 104u8 , 3u8 , 244u8 , 161u8 ,])
                }
                #[doc = " The total validator era payout for the last `HISTORY_DEPTH` eras."]
                #[doc = ""]
                #[doc = " Eras that haven't finished yet or has been removed doesn't have reward."]                pub fn eras_validator_reward_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u128 > , () , () , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Staking",
                        "ErasValidatorReward",
                        Vec::new(),
                        [
                            87u8, 80u8, 156u8, 123u8, 107u8, 77u8, 203u8, 37u8,
                            231u8, 84u8, 124u8, 155u8, 227u8, 212u8, 212u8,
                            179u8, 84u8, 161u8, 223u8, 255u8, 254u8, 107u8,
                            52u8, 89u8, 98u8, 169u8, 136u8, 241u8, 104u8, 3u8,
                            244u8, 161u8,
                        ],
                    )
                }
                #[doc = " Rewards for the last `HISTORY_DEPTH` eras."]
                #[doc = " If reward hasn't been set or has been removed then 0 reward is returned."]                pub fn eras_reward_points (& self , _0 : impl :: std :: borrow :: Borrow < :: core :: primitive :: u32 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_staking :: EraRewardPoints < :: subxt :: ext :: sp_core :: crypto :: AccountId32 > > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("Staking" , "ErasRewardPoints" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Twox64Concat)] , [194u8 , 29u8 , 20u8 , 83u8 , 200u8 , 47u8 , 158u8 , 102u8 , 88u8 , 65u8 , 24u8 , 255u8 , 120u8 , 178u8 , 23u8 , 232u8 , 15u8 , 64u8 , 206u8 , 0u8 , 170u8 , 40u8 , 18u8 , 149u8 , 45u8 , 90u8 , 179u8 , 127u8 , 52u8 , 59u8 , 37u8 , 192u8 ,])
                }
                #[doc = " Rewards for the last `HISTORY_DEPTH` eras."]
                #[doc = " If reward hasn't been set or has been removed then 0 reward is returned."]                pub fn eras_reward_points_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_staking :: EraRewardPoints < :: subxt :: ext :: sp_core :: crypto :: AccountId32 > > , () , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Staking",
                        "ErasRewardPoints",
                        Vec::new(),
                        [
                            194u8, 29u8, 20u8, 83u8, 200u8, 47u8, 158u8, 102u8,
                            88u8, 65u8, 24u8, 255u8, 120u8, 178u8, 23u8, 232u8,
                            15u8, 64u8, 206u8, 0u8, 170u8, 40u8, 18u8, 149u8,
                            45u8, 90u8, 179u8, 127u8, 52u8, 59u8, 37u8, 192u8,
                        ],
                    )
                }
                #[doc = " The total amount staked for the last `HISTORY_DEPTH` eras."]
                #[doc = " If total hasn't been set or has been removed then 0 stake is returned."]                pub fn eras_total_stake (& self , _0 : impl :: std :: borrow :: Borrow < :: core :: primitive :: u32 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u128 > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("Staking" , "ErasTotalStake" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Twox64Concat)] , [224u8 , 240u8 , 168u8 , 69u8 , 148u8 , 140u8 , 249u8 , 240u8 , 4u8 , 46u8 , 77u8 , 11u8 , 224u8 , 65u8 , 26u8 , 239u8 , 1u8 , 110u8 , 53u8 , 11u8 , 247u8 , 235u8 , 142u8 , 234u8 , 22u8 , 43u8 , 24u8 , 36u8 , 37u8 , 43u8 , 170u8 , 40u8 ,])
                }
                #[doc = " The total amount staked for the last `HISTORY_DEPTH` eras."]
                #[doc = " If total hasn't been set or has been removed then 0 stake is returned."]                pub fn eras_total_stake_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u128 > , () , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Staking",
                        "ErasTotalStake",
                        Vec::new(),
                        [
                            224u8, 240u8, 168u8, 69u8, 148u8, 140u8, 249u8,
                            240u8, 4u8, 46u8, 77u8, 11u8, 224u8, 65u8, 26u8,
                            239u8, 1u8, 110u8, 53u8, 11u8, 247u8, 235u8, 142u8,
                            234u8, 22u8, 43u8, 24u8, 36u8, 37u8, 43u8, 170u8,
                            40u8,
                        ],
                    )
                }
                #[doc = " Mode of era forcing."]                pub fn force_era (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_staking :: Forcing > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Staking",
                        "ForceEra",
                        vec![],
                        [
                            221u8, 41u8, 71u8, 21u8, 28u8, 193u8, 65u8, 97u8,
                            103u8, 37u8, 145u8, 146u8, 183u8, 194u8, 57u8,
                            131u8, 214u8, 136u8, 68u8, 156u8, 140u8, 194u8,
                            69u8, 151u8, 115u8, 177u8, 92u8, 147u8, 29u8, 40u8,
                            41u8, 31u8,
                        ],
                    )
                }
                #[doc = " The percentage of the slash that is distributed to reporters."]
                #[doc = ""]
                #[doc = " The rest of the slashed value is handled by the `Slash`."]                pub fn slash_reward_fraction (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: sp_arithmetic :: per_things :: Perbill > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Staking",
                        "SlashRewardFraction",
                        vec![],
                        [
                            167u8, 79u8, 143u8, 202u8, 199u8, 100u8, 129u8,
                            162u8, 23u8, 165u8, 106u8, 170u8, 244u8, 86u8,
                            144u8, 242u8, 65u8, 207u8, 115u8, 224u8, 231u8,
                            155u8, 55u8, 139u8, 101u8, 129u8, 242u8, 196u8,
                            130u8, 50u8, 3u8, 117u8,
                        ],
                    )
                }
                #[doc = " The amount of currency given to reporters of a slash event which was"]
                #[doc = " canceled by extraordinary circumstances (e.g. governance)."]                pub fn canceled_slash_payout (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u128 > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Staking",
                        "CanceledSlashPayout",
                        vec![],
                        [
                            126u8, 218u8, 66u8, 92u8, 82u8, 124u8, 145u8,
                            161u8, 40u8, 176u8, 14u8, 211u8, 178u8, 216u8, 8u8,
                            156u8, 83u8, 14u8, 91u8, 15u8, 200u8, 170u8, 3u8,
                            127u8, 141u8, 139u8, 151u8, 98u8, 74u8, 96u8,
                            238u8, 29u8,
                        ],
                    )
                }
                #[doc = " All unapplied slashes that are queued for later."]                pub fn unapplied_slashes (& self , _0 : impl :: std :: borrow :: Borrow < :: core :: primitive :: u32 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: std :: vec :: Vec < runtime_types :: pallet_staking :: UnappliedSlash < :: subxt :: ext :: sp_core :: crypto :: AccountId32 , :: core :: primitive :: u128 > > > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("Staking" , "UnappliedSlashes" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Twox64Concat)] , [130u8 , 4u8 , 163u8 , 163u8 , 28u8 , 85u8 , 34u8 , 156u8 , 47u8 , 125u8 , 57u8 , 0u8 , 133u8 , 176u8 , 130u8 , 2u8 , 175u8 , 180u8 , 167u8 , 203u8 , 230u8 , 82u8 , 198u8 , 183u8 , 55u8 , 82u8 , 221u8 , 248u8 , 100u8 , 173u8 , 206u8 , 151u8 ,])
                }
                #[doc = " All unapplied slashes that are queued for later."]                pub fn unapplied_slashes_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: std :: vec :: Vec < runtime_types :: pallet_staking :: UnappliedSlash < :: subxt :: ext :: sp_core :: crypto :: AccountId32 , :: core :: primitive :: u128 > > > , () , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Staking",
                        "UnappliedSlashes",
                        Vec::new(),
                        [
                            130u8, 4u8, 163u8, 163u8, 28u8, 85u8, 34u8, 156u8,
                            47u8, 125u8, 57u8, 0u8, 133u8, 176u8, 130u8, 2u8,
                            175u8, 180u8, 167u8, 203u8, 230u8, 82u8, 198u8,
                            183u8, 55u8, 82u8, 221u8, 248u8, 100u8, 173u8,
                            206u8, 151u8,
                        ],
                    )
                }
                #[doc = " A mapping from still-bonded eras to the first session index of that era."]
                #[doc = ""]
                #[doc = " Must contains information for eras for the range:"]
                #[doc = " `[active_era - bounding_duration; active_era]`"]                pub fn bonded_eras (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: std :: vec :: Vec < (:: core :: primitive :: u32 , :: core :: primitive :: u32 ,) > > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Staking",
                        "BondedEras",
                        vec![],
                        [
                            243u8, 162u8, 236u8, 198u8, 122u8, 182u8, 37u8,
                            55u8, 171u8, 156u8, 235u8, 223u8, 226u8, 129u8,
                            89u8, 206u8, 2u8, 155u8, 222u8, 154u8, 116u8,
                            124u8, 4u8, 119u8, 155u8, 94u8, 248u8, 30u8, 171u8,
                            51u8, 78u8, 106u8,
                        ],
                    )
                }
                #[doc = " All slashing events on validators, mapped by era to the highest slash proportion"]
                #[doc = " and slash value of the era."]                pub fn validator_slash_in_era (& self , _0 : impl :: std :: borrow :: Borrow < :: core :: primitive :: u32 > , _1 : impl :: std :: borrow :: Borrow < :: subxt :: ext :: sp_core :: crypto :: AccountId32 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < (runtime_types :: sp_arithmetic :: per_things :: Perbill , :: core :: primitive :: u128 ,) > , :: subxt :: storage :: address :: Yes , () , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("Staking" , "ValidatorSlashInEra" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Twox64Concat) , :: subxt :: storage :: address :: StorageMapKey :: new (_1 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Twox64Concat)] , [237u8 , 80u8 , 3u8 , 237u8 , 9u8 , 40u8 , 212u8 , 15u8 , 251u8 , 196u8 , 85u8 , 29u8 , 27u8 , 151u8 , 98u8 , 122u8 , 189u8 , 147u8 , 205u8 , 40u8 , 202u8 , 194u8 , 158u8 , 96u8 , 138u8 , 16u8 , 116u8 , 71u8 , 140u8 , 163u8 , 121u8 , 197u8 ,])
                }
                #[doc = " All slashing events on validators, mapped by era to the highest slash proportion"]
                #[doc = " and slash value of the era."]                pub fn validator_slash_in_era_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < (runtime_types :: sp_arithmetic :: per_things :: Perbill , :: core :: primitive :: u128 ,) > , () , () , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Staking",
                        "ValidatorSlashInEra",
                        Vec::new(),
                        [
                            237u8, 80u8, 3u8, 237u8, 9u8, 40u8, 212u8, 15u8,
                            251u8, 196u8, 85u8, 29u8, 27u8, 151u8, 98u8, 122u8,
                            189u8, 147u8, 205u8, 40u8, 202u8, 194u8, 158u8,
                            96u8, 138u8, 16u8, 116u8, 71u8, 140u8, 163u8,
                            121u8, 197u8,
                        ],
                    )
                }
                #[doc = " All slashing events on nominators, mapped by era to the highest slash value of the era."]                pub fn nominator_slash_in_era (& self , _0 : impl :: std :: borrow :: Borrow < :: core :: primitive :: u32 > , _1 : impl :: std :: borrow :: Borrow < :: subxt :: ext :: sp_core :: crypto :: AccountId32 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u128 > , :: subxt :: storage :: address :: Yes , () , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("Staking" , "NominatorSlashInEra" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Twox64Concat) , :: subxt :: storage :: address :: StorageMapKey :: new (_1 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Twox64Concat)] , [249u8 , 85u8 , 170u8 , 41u8 , 179u8 , 194u8 , 180u8 , 12u8 , 53u8 , 101u8 , 80u8 , 96u8 , 166u8 , 71u8 , 239u8 , 23u8 , 153u8 , 19u8 , 152u8 , 38u8 , 138u8 , 136u8 , 221u8 , 200u8 , 18u8 , 165u8 , 26u8 , 228u8 , 195u8 , 199u8 , 62u8 , 4u8 ,])
                }
                #[doc = " All slashing events on nominators, mapped by era to the highest slash value of the era."]                pub fn nominator_slash_in_era_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u128 > , () , () , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Staking",
                        "NominatorSlashInEra",
                        Vec::new(),
                        [
                            249u8, 85u8, 170u8, 41u8, 179u8, 194u8, 180u8,
                            12u8, 53u8, 101u8, 80u8, 96u8, 166u8, 71u8, 239u8,
                            23u8, 153u8, 19u8, 152u8, 38u8, 138u8, 136u8,
                            221u8, 200u8, 18u8, 165u8, 26u8, 228u8, 195u8,
                            199u8, 62u8, 4u8,
                        ],
                    )
                }
                #[doc = " Slashing spans for stash accounts."]                pub fn slashing_spans (& self , _0 : impl :: std :: borrow :: Borrow < :: subxt :: ext :: sp_core :: crypto :: AccountId32 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_staking :: slashing :: SlashingSpans > , :: subxt :: storage :: address :: Yes , () , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("Staking" , "SlashingSpans" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Twox64Concat)] , [106u8 , 115u8 , 118u8 , 52u8 , 89u8 , 77u8 , 246u8 , 5u8 , 255u8 , 204u8 , 44u8 , 5u8 , 66u8 , 36u8 , 227u8 , 252u8 , 86u8 , 159u8 , 186u8 , 152u8 , 196u8 , 21u8 , 74u8 , 201u8 , 133u8 , 93u8 , 142u8 , 191u8 , 20u8 , 27u8 , 218u8 , 157u8 ,])
                }
                #[doc = " Slashing spans for stash accounts."]                pub fn slashing_spans_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_staking :: slashing :: SlashingSpans > , () , () , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Staking",
                        "SlashingSpans",
                        Vec::new(),
                        [
                            106u8, 115u8, 118u8, 52u8, 89u8, 77u8, 246u8, 5u8,
                            255u8, 204u8, 44u8, 5u8, 66u8, 36u8, 227u8, 252u8,
                            86u8, 159u8, 186u8, 152u8, 196u8, 21u8, 74u8,
                            201u8, 133u8, 93u8, 142u8, 191u8, 20u8, 27u8,
                            218u8, 157u8,
                        ],
                    )
                }
                #[doc = " Records information about the maximum slash of a stash within a slashing span,"]
                #[doc = " as well as how much reward has been paid out."]                pub fn span_slash (& self , _0 : impl :: std :: borrow :: Borrow < :: subxt :: ext :: sp_core :: crypto :: AccountId32 > , _1 : impl :: std :: borrow :: Borrow < :: core :: primitive :: u32 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_staking :: slashing :: SpanRecord < :: core :: primitive :: u128 > > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("Staking" , "SpanSlash" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (& (_0 . borrow () , _1 . borrow ()) , :: subxt :: storage :: address :: StorageHasher :: Twox64Concat)] , [160u8 , 63u8 , 115u8 , 190u8 , 233u8 , 148u8 , 75u8 , 3u8 , 11u8 , 59u8 , 184u8 , 220u8 , 205u8 , 64u8 , 28u8 , 190u8 , 116u8 , 210u8 , 225u8 , 230u8 , 224u8 , 163u8 , 103u8 , 157u8 , 100u8 , 29u8 , 86u8 , 167u8 , 84u8 , 217u8 , 109u8 , 200u8 ,])
                }
                #[doc = " Records information about the maximum slash of a stash within a slashing span,"]
                #[doc = " as well as how much reward has been paid out."]                pub fn span_slash_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_staking :: slashing :: SpanRecord < :: core :: primitive :: u128 > > , () , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Staking",
                        "SpanSlash",
                        Vec::new(),
                        [
                            160u8, 63u8, 115u8, 190u8, 233u8, 148u8, 75u8, 3u8,
                            11u8, 59u8, 184u8, 220u8, 205u8, 64u8, 28u8, 190u8,
                            116u8, 210u8, 225u8, 230u8, 224u8, 163u8, 103u8,
                            157u8, 100u8, 29u8, 86u8, 167u8, 84u8, 217u8,
                            109u8, 200u8,
                        ],
                    )
                }
                #[doc = " The last planned session scheduled by the session pallet."]
                #[doc = ""]
                #[doc = " This is basically in sync with the call to [`pallet_session::SessionManager::new_session`]."]                pub fn current_planned_session (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u32 > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Staking",
                        "CurrentPlannedSession",
                        vec![],
                        [
                            38u8, 22u8, 56u8, 250u8, 17u8, 154u8, 99u8, 37u8,
                            155u8, 253u8, 100u8, 117u8, 5u8, 239u8, 31u8,
                            190u8, 53u8, 241u8, 11u8, 185u8, 163u8, 227u8,
                            10u8, 77u8, 210u8, 64u8, 156u8, 218u8, 105u8, 16u8,
                            1u8, 57u8,
                        ],
                    )
                }
                #[doc = " Indices of validators that have offended in the active era and whether they are currently"]
                #[doc = " disabled."]
                #[doc = ""]
                #[doc = " This value should be a superset of disabled validators since not all offences lead to the"]
                #[doc = " validator being disabled (if there was no slash). This is needed to track the percentage of"]
                #[doc = " validators that have offended in the current era, ensuring a new era is forced if"]
                #[doc = " `OffendingValidatorsThreshold` is reached. The vec is always kept sorted so that we can find"]
                #[doc = " whether a given validator has previously offended using binary search. It gets cleared when"]
                #[doc = " the era ends."]                pub fn offending_validators (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: std :: vec :: Vec < (:: core :: primitive :: u32 , :: core :: primitive :: bool ,) > > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Staking",
                        "OffendingValidators",
                        vec![],
                        [
                            94u8, 254u8, 0u8, 50u8, 76u8, 232u8, 51u8, 153u8,
                            118u8, 14u8, 70u8, 101u8, 112u8, 215u8, 173u8,
                            82u8, 182u8, 104u8, 167u8, 103u8, 187u8, 168u8,
                            86u8, 16u8, 51u8, 235u8, 51u8, 119u8, 38u8, 154u8,
                            42u8, 113u8,
                        ],
                    )
                }
                #[doc = " True if network has been upgraded to this version."]
                #[doc = " Storage version of the pallet."]
                #[doc = ""]
                #[doc = " This is set to v7.0.0 for new networks."]                pub fn storage_version (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_staking :: Releases > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Staking",
                        "StorageVersion",
                        vec![],
                        [
                            8u8, 115u8, 68u8, 36u8, 142u8, 21u8, 152u8, 127u8,
                            211u8, 17u8, 75u8, 76u8, 65u8, 237u8, 187u8, 193u8,
                            176u8, 44u8, 19u8, 166u8, 116u8, 148u8, 110u8,
                            234u8, 115u8, 254u8, 73u8, 128u8, 111u8, 140u8,
                            2u8, 168u8,
                        ],
                    )
                }
                #[doc = " The threshold for when users can start calling `chill_other` for other validators /"]
                #[doc = " nominators. The threshold is compared to the actual number of validators / nominators"]
                #[doc = " (`CountFor*`) in the system compared to the configured max (`Max*Count`)."]                pub fn chill_threshold (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: sp_arithmetic :: per_things :: Percent > , :: subxt :: storage :: address :: Yes , () , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Staking",
                        "ChillThreshold",
                        vec![],
                        [
                            174u8, 165u8, 249u8, 105u8, 24u8, 151u8, 115u8,
                            166u8, 199u8, 251u8, 28u8, 5u8, 50u8, 95u8, 144u8,
                            110u8, 220u8, 76u8, 14u8, 23u8, 179u8, 41u8, 11u8,
                            248u8, 28u8, 154u8, 159u8, 255u8, 156u8, 109u8,
                            98u8, 92u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " Maximum number of nominations per nominator."]
                pub fn max_nominations(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "Staking",
                        "MaxNominations",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8,
                            200u8, 157u8, 125u8, 151u8, 53u8, 76u8, 168u8,
                            26u8, 10u8, 9u8, 98u8, 68u8, 9u8, 178u8, 197u8,
                            113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Number of sessions per era."]
                pub fn sessions_per_era(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "Staking",
                        "SessionsPerEra",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8,
                            200u8, 157u8, 125u8, 151u8, 53u8, 76u8, 168u8,
                            26u8, 10u8, 9u8, 98u8, 68u8, 9u8, 178u8, 197u8,
                            113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Number of eras that staked funds must remain bonded for."]
                pub fn bonding_duration(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "Staking",
                        "BondingDuration",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8,
                            200u8, 157u8, 125u8, 151u8, 53u8, 76u8, 168u8,
                            26u8, 10u8, 9u8, 98u8, 68u8, 9u8, 178u8, 197u8,
                            113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Number of eras that slashes are deferred by, after computation."]
                #[doc = ""]
                #[doc = " This should be less than the bonding duration. Set to 0 if slashes"]
                #[doc = " should be applied immediately, without opportunity for intervention."]
                pub fn slash_defer_duration(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "Staking",
                        "SlashDeferDuration",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8,
                            200u8, 157u8, 125u8, 151u8, 53u8, 76u8, 168u8,
                            26u8, 10u8, 9u8, 98u8, 68u8, 9u8, 178u8, 197u8,
                            113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The maximum number of nominators rewarded for each validator."]
                #[doc = ""]
                #[doc = " For each validator only the `$MaxNominatorRewardedPerValidator` biggest stakers can"]
                #[doc = " claim their reward. This used to limit the i/o cost for the nominator payout."]
                pub fn max_nominator_rewarded_per_validator(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "Staking",
                        "MaxNominatorRewardedPerValidator",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8,
                            200u8, 157u8, 125u8, 151u8, 53u8, 76u8, 168u8,
                            26u8, 10u8, 9u8, 98u8, 68u8, 9u8, 178u8, 197u8,
                            113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The maximum number of `unlocking` chunks a [`StakingLedger`] can have. Effectively"]
                #[doc = " determines how many unique eras a staker may be unbonding in."]
                pub fn max_unlocking_chunks(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "Staking",
                        "MaxUnlockingChunks",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8,
                            200u8, 157u8, 125u8, 151u8, 53u8, 76u8, 168u8,
                            26u8, 10u8, 9u8, 98u8, 68u8, 9u8, 178u8, 197u8,
                            113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod session {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct SetKeys {
                pub keys: runtime_types::webb_standalone_runtime::SessionKeys,
                pub proof: ::std::vec::Vec<::core::primitive::u8>,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct PurgeKeys;
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Sets the session key(s) of the function caller to `keys`."]
                #[doc = "Allows an account to set its session key prior to becoming a validator."]
                #[doc = "This doesn't take effect until the next session."]
                #[doc = ""]
                #[doc = "The dispatch origin of this function must be signed."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- Complexity: `O(1)`. Actual cost depends on the number of length of"]
                #[doc = "  `T::Keys::key_ids()` which is fixed."]
                #[doc = "- DbReads: `origin account`, `T::ValidatorIdOf`, `NextKeys`"]
                #[doc = "- DbWrites: `origin account`, `NextKeys`"]
                #[doc = "- DbReads per key id: `KeyOwner`"]
                #[doc = "- DbWrites per key id: `KeyOwner`"]
                #[doc = "# </weight>"]
                pub fn set_keys(
                    &self,
                    keys: runtime_types::webb_standalone_runtime::SessionKeys,
                    proof: ::std::vec::Vec<::core::primitive::u8>,
                ) -> ::subxt::tx::StaticTxPayload<SetKeys> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Session",
                        "set_keys",
                        SetKeys { keys, proof },
                        [
                            19u8, 210u8, 111u8, 216u8, 235u8, 1u8, 119u8,
                            211u8, 79u8, 9u8, 91u8, 245u8, 109u8, 116u8, 95u8,
                            223u8, 233u8, 189u8, 185u8, 243u8, 46u8, 178u8,
                            10u8, 4u8, 231u8, 159u8, 217u8, 59u8, 45u8, 167u8,
                            207u8, 137u8,
                        ],
                    )
                }
                #[doc = "Removes any session key(s) of the function caller."]
                #[doc = ""]
                #[doc = "This doesn't take effect until the next session."]
                #[doc = ""]
                #[doc = "The dispatch origin of this function must be Signed and the account must be either be"]
                #[doc = "convertible to a validator ID using the chain's typical addressing system (this usually"]
                #[doc = "means being a controller account) or directly convertible into a validator ID (which"]
                #[doc = "usually means being a stash account)."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- Complexity: `O(1)` in number of key types. Actual cost depends on the number of length"]
                #[doc = "  of `T::Keys::key_ids()` which is fixed."]
                #[doc = "- DbReads: `T::ValidatorIdOf`, `NextKeys`, `origin account`"]
                #[doc = "- DbWrites: `NextKeys`, `origin account`"]
                #[doc = "- DbWrites per key id: `KeyOwner`"]
                #[doc = "# </weight>"]
                pub fn purge_keys(
                    &self,
                ) -> ::subxt::tx::StaticTxPayload<PurgeKeys> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Session",
                        "purge_keys",
                        PurgeKeys {},
                        [
                            200u8, 255u8, 4u8, 213u8, 188u8, 92u8, 99u8, 116u8,
                            163u8, 152u8, 29u8, 35u8, 133u8, 119u8, 246u8,
                            44u8, 91u8, 31u8, 145u8, 23u8, 213u8, 64u8, 71u8,
                            242u8, 207u8, 239u8, 231u8, 37u8, 61u8, 63u8,
                            190u8, 35u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_session::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "New session has happened. Note that the argument is the session index, not the"]
            #[doc = "block number as the type might suggest."]
            pub struct NewSession {
                pub session_index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for NewSession {
                const PALLET: &'static str = "Session";
                const EVENT: &'static str = "NewSession";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The current set of validators."]                pub fn validators (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: std :: vec :: Vec < :: subxt :: ext :: sp_core :: crypto :: AccountId32 > > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Session",
                        "Validators",
                        vec![],
                        [
                            144u8, 235u8, 200u8, 43u8, 151u8, 57u8, 147u8,
                            172u8, 201u8, 202u8, 242u8, 96u8, 57u8, 76u8,
                            124u8, 77u8, 42u8, 113u8, 218u8, 220u8, 230u8,
                            32u8, 151u8, 152u8, 172u8, 106u8, 60u8, 227u8,
                            122u8, 118u8, 137u8, 68u8,
                        ],
                    )
                }
                #[doc = " Current index of the session."]                pub fn current_index (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u32 > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Session",
                        "CurrentIndex",
                        vec![],
                        [
                            148u8, 179u8, 159u8, 15u8, 197u8, 95u8, 214u8,
                            30u8, 209u8, 251u8, 183u8, 231u8, 91u8, 25u8,
                            181u8, 191u8, 143u8, 252u8, 227u8, 80u8, 159u8,
                            66u8, 194u8, 67u8, 113u8, 74u8, 111u8, 91u8, 218u8,
                            187u8, 130u8, 40u8,
                        ],
                    )
                }
                #[doc = " True if the underlying economic identities or weighting behind the validators"]
                #[doc = " has changed in the queued validator set."]                pub fn queued_changed (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: bool > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Session",
                        "QueuedChanged",
                        vec![],
                        [
                            105u8, 140u8, 235u8, 218u8, 96u8, 100u8, 252u8,
                            10u8, 58u8, 221u8, 244u8, 251u8, 67u8, 91u8, 80u8,
                            202u8, 152u8, 42u8, 50u8, 113u8, 200u8, 247u8,
                            59u8, 213u8, 77u8, 195u8, 1u8, 150u8, 220u8, 18u8,
                            245u8, 46u8,
                        ],
                    )
                }
                #[doc = " The queued keys for the next session. When the next session begins, these keys"]
                #[doc = " will be used to determine the validator's session keys."]                pub fn queued_keys (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: std :: vec :: Vec < (:: subxt :: ext :: sp_core :: crypto :: AccountId32 , runtime_types :: webb_standalone_runtime :: SessionKeys ,) > > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Session",
                        "QueuedKeys",
                        vec![],
                        [
                            57u8, 139u8, 66u8, 116u8, 133u8, 98u8, 66u8, 181u8,
                            96u8, 190u8, 69u8, 124u8, 158u8, 124u8, 187u8,
                            164u8, 223u8, 89u8, 209u8, 84u8, 106u8, 127u8,
                            85u8, 202u8, 130u8, 7u8, 250u8, 163u8, 99u8, 209u8,
                            225u8, 25u8,
                        ],
                    )
                }
                #[doc = " Indices of disabled validators."]
                #[doc = ""]
                #[doc = " The vec is always kept sorted so that we can find whether a given validator is"]
                #[doc = " disabled using binary search. It gets cleared when `on_session_ending` returns"]
                #[doc = " a new set of identities."]                pub fn disabled_validators (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: std :: vec :: Vec < :: core :: primitive :: u32 > > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Session",
                        "DisabledValidators",
                        vec![],
                        [
                            135u8, 22u8, 22u8, 97u8, 82u8, 217u8, 144u8, 141u8,
                            121u8, 240u8, 189u8, 16u8, 176u8, 88u8, 177u8,
                            31u8, 20u8, 242u8, 73u8, 104u8, 11u8, 110u8, 214u8,
                            34u8, 52u8, 217u8, 106u8, 33u8, 174u8, 174u8,
                            198u8, 84u8,
                        ],
                    )
                }
                #[doc = " The next session keys for a validator."]                pub fn next_keys (& self , _0 : impl :: std :: borrow :: Borrow < :: subxt :: ext :: sp_core :: crypto :: AccountId32 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: webb_standalone_runtime :: SessionKeys > , :: subxt :: storage :: address :: Yes , () , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("Session" , "NextKeys" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Twox64Concat)] , [246u8 , 66u8 , 207u8 , 19u8 , 247u8 , 26u8 , 110u8 , 116u8 , 209u8 , 77u8 , 141u8 , 64u8 , 128u8 , 214u8 , 71u8 , 104u8 , 56u8 , 117u8 , 10u8 , 162u8 , 166u8 , 137u8 , 33u8 , 98u8 , 110u8 , 31u8 , 161u8 , 116u8 , 207u8 , 46u8 , 82u8 , 64u8 ,])
                }
                #[doc = " The next session keys for a validator."]                pub fn next_keys_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: webb_standalone_runtime :: SessionKeys > , () , () , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Session",
                        "NextKeys",
                        Vec::new(),
                        [
                            246u8, 66u8, 207u8, 19u8, 247u8, 26u8, 110u8,
                            116u8, 209u8, 77u8, 141u8, 64u8, 128u8, 214u8,
                            71u8, 104u8, 56u8, 117u8, 10u8, 162u8, 166u8,
                            137u8, 33u8, 98u8, 110u8, 31u8, 161u8, 116u8,
                            207u8, 46u8, 82u8, 64u8,
                        ],
                    )
                }
                #[doc = " The owner of a key. The key is the `KeyTypeId` + the encoded key."]                pub fn key_owner (& self , _0 : impl :: std :: borrow :: Borrow < runtime_types :: sp_core :: crypto :: KeyTypeId > , _1 : impl :: std :: borrow :: Borrow < [:: core :: primitive :: u8] > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: subxt :: ext :: sp_core :: crypto :: AccountId32 > , :: subxt :: storage :: address :: Yes , () , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("Session" , "KeyOwner" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (& (_0 . borrow () , _1 . borrow ()) , :: subxt :: storage :: address :: StorageHasher :: Twox64Concat)] , [4u8 , 91u8 , 25u8 , 84u8 , 250u8 , 201u8 , 174u8 , 129u8 , 201u8 , 58u8 , 197u8 , 199u8 , 137u8 , 240u8 , 118u8 , 33u8 , 99u8 , 2u8 , 195u8 , 57u8 , 53u8 , 172u8 , 0u8 , 148u8 , 203u8 , 144u8 , 149u8 , 64u8 , 135u8 , 254u8 , 242u8 , 215u8 ,])
                }
                #[doc = " The owner of a key. The key is the `KeyTypeId` + the encoded key."]                pub fn key_owner_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: subxt :: ext :: sp_core :: crypto :: AccountId32 > , () , () , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Session",
                        "KeyOwner",
                        Vec::new(),
                        [
                            4u8, 91u8, 25u8, 84u8, 250u8, 201u8, 174u8, 129u8,
                            201u8, 58u8, 197u8, 199u8, 137u8, 240u8, 118u8,
                            33u8, 99u8, 2u8, 195u8, 57u8, 53u8, 172u8, 0u8,
                            148u8, 203u8, 144u8, 149u8, 64u8, 135u8, 254u8,
                            242u8, 215u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod democracy {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Propose {
                pub proposal_hash: ::subxt::ext::sp_core::H256,
                #[codec(compact)]
                pub value: ::core::primitive::u128,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Second {
                #[codec(compact)]
                pub proposal: ::core::primitive::u32,
                #[codec(compact)]
                pub seconds_upper_bound: ::core::primitive::u32,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Vote {
                #[codec(compact)]
                pub ref_index: ::core::primitive::u32,
                pub vote: runtime_types::pallet_democracy::vote::AccountVote<
                    ::core::primitive::u128,
                >,
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct EmergencyCancel {
                pub ref_index: ::core::primitive::u32,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct ExternalPropose {
                pub proposal_hash: ::subxt::ext::sp_core::H256,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct ExternalProposeMajority {
                pub proposal_hash: ::subxt::ext::sp_core::H256,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct ExternalProposeDefault {
                pub proposal_hash: ::subxt::ext::sp_core::H256,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct FastTrack {
                pub proposal_hash: ::subxt::ext::sp_core::H256,
                pub voting_period: ::core::primitive::u64,
                pub delay: ::core::primitive::u64,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct VetoExternal {
                pub proposal_hash: ::subxt::ext::sp_core::H256,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct CancelReferendum {
                #[codec(compact)]
                pub ref_index: ::core::primitive::u32,
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct CancelQueued {
                pub which: ::core::primitive::u32,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Delegate {
                pub to: ::subxt::ext::sp_runtime::MultiAddress<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                pub conviction:
                    runtime_types::pallet_democracy::conviction::Conviction,
                pub balance: ::core::primitive::u128,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Undelegate;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct ClearPublicProposals;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct NotePreimage {
                pub encoded_proposal: ::std::vec::Vec<::core::primitive::u8>,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct NotePreimageOperational {
                pub encoded_proposal: ::std::vec::Vec<::core::primitive::u8>,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct NoteImminentPreimage {
                pub encoded_proposal: ::std::vec::Vec<::core::primitive::u8>,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct NoteImminentPreimageOperational {
                pub encoded_proposal: ::std::vec::Vec<::core::primitive::u8>,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct ReapPreimage {
                pub proposal_hash: ::subxt::ext::sp_core::H256,
                #[codec(compact)]
                pub proposal_len_upper_bound: ::core::primitive::u32,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Unlock {
                pub target: ::subxt::ext::sp_runtime::MultiAddress<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct RemoveVote {
                pub index: ::core::primitive::u32,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct RemoveOtherVote {
                pub target: ::subxt::ext::sp_runtime::MultiAddress<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                pub index: ::core::primitive::u32,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct EnactProposal {
                pub proposal_hash: ::subxt::ext::sp_core::H256,
                pub index: ::core::primitive::u32,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Blacklist {
                pub proposal_hash: ::subxt::ext::sp_core::H256,
                pub maybe_ref_index:
                    ::core::option::Option<::core::primitive::u32>,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct CancelProposal {
                #[codec(compact)]
                pub prop_index: ::core::primitive::u32,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Propose a sensitive action to be taken."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be _Signed_ and the sender must"]
                #[doc = "have funds to cover the deposit."]
                #[doc = ""]
                #[doc = "- `proposal_hash`: The hash of the proposal preimage."]
                #[doc = "- `value`: The amount of deposit (must be at least `MinimumDeposit`)."]
                #[doc = ""]
                #[doc = "Emits `Proposed`."]
                #[doc = ""]
                #[doc = "Weight: `O(p)`"]
                pub fn propose(
                    &self,
                    proposal_hash: ::subxt::ext::sp_core::H256,
                    value: ::core::primitive::u128,
                ) -> ::subxt::tx::StaticTxPayload<Propose> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Democracy",
                        "propose",
                        Propose {
                            proposal_hash,
                            value,
                        },
                        [
                            151u8, 2u8, 117u8, 57u8, 201u8, 246u8, 181u8,
                            198u8, 83u8, 74u8, 99u8, 211u8, 237u8, 53u8, 90u8,
                            173u8, 161u8, 250u8, 139u8, 253u8, 223u8, 251u8,
                            39u8, 108u8, 254u8, 192u8, 233u8, 23u8, 9u8, 99u8,
                            169u8, 195u8,
                        ],
                    )
                }
                #[doc = "Signals agreement with a particular proposal."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be _Signed_ and the sender"]
                #[doc = "must have funds to cover the deposit, equal to the original deposit."]
                #[doc = ""]
                #[doc = "- `proposal`: The index of the proposal to second."]
                #[doc = "- `seconds_upper_bound`: an upper bound on the current number of seconds on this"]
                #[doc = "  proposal. Extrinsic is weighted according to this value with no refund."]
                #[doc = ""]
                #[doc = "Weight: `O(S)` where S is the number of seconds a proposal already has."]
                pub fn second(
                    &self,
                    proposal: ::core::primitive::u32,
                    seconds_upper_bound: ::core::primitive::u32,
                ) -> ::subxt::tx::StaticTxPayload<Second> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Democracy",
                        "second",
                        Second {
                            proposal,
                            seconds_upper_bound,
                        },
                        [
                            152u8, 56u8, 134u8, 181u8, 88u8, 224u8, 68u8,
                            238u8, 231u8, 78u8, 237u8, 142u8, 133u8, 16u8,
                            93u8, 63u8, 253u8, 81u8, 96u8, 200u8, 43u8, 21u8,
                            249u8, 92u8, 78u8, 24u8, 101u8, 217u8, 143u8, 16u8,
                            213u8, 244u8,
                        ],
                    )
                }
                #[doc = "Vote in a referendum. If `vote.is_aye()`, the vote is to enact the proposal;"]
                #[doc = "otherwise it is a vote to keep the status quo."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `ref_index`: The index of the referendum to vote for."]
                #[doc = "- `vote`: The vote configuration."]
                #[doc = ""]
                #[doc = "Weight: `O(R)` where R is the number of referendums the voter has voted on."]
                pub fn vote(
                    &self,
                    ref_index: ::core::primitive::u32,
                    vote: runtime_types::pallet_democracy::vote::AccountVote<
                        ::core::primitive::u128,
                    >,
                ) -> ::subxt::tx::StaticTxPayload<Vote> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Democracy",
                        "vote",
                        Vote { ref_index, vote },
                        [
                            138u8, 213u8, 229u8, 111u8, 1u8, 191u8, 73u8, 3u8,
                            145u8, 28u8, 44u8, 88u8, 163u8, 188u8, 129u8,
                            188u8, 64u8, 15u8, 64u8, 103u8, 250u8, 97u8, 234u8,
                            188u8, 29u8, 205u8, 51u8, 6u8, 116u8, 58u8, 156u8,
                            201u8,
                        ],
                    )
                }
                #[doc = "Schedule an emergency cancellation of a referendum. Cannot happen twice to the same"]
                #[doc = "referendum."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be `CancellationOrigin`."]
                #[doc = ""]
                #[doc = "-`ref_index`: The index of the referendum to cancel."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`."]
                pub fn emergency_cancel(
                    &self,
                    ref_index: ::core::primitive::u32,
                ) -> ::subxt::tx::StaticTxPayload<EmergencyCancel>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Democracy",
                        "emergency_cancel",
                        EmergencyCancel { ref_index },
                        [
                            139u8, 213u8, 133u8, 75u8, 34u8, 206u8, 124u8,
                            245u8, 35u8, 237u8, 132u8, 92u8, 49u8, 167u8,
                            117u8, 80u8, 188u8, 93u8, 198u8, 237u8, 132u8,
                            77u8, 195u8, 65u8, 29u8, 37u8, 86u8, 74u8, 214u8,
                            119u8, 71u8, 204u8,
                        ],
                    )
                }
                #[doc = "Schedule a referendum to be tabled once it is legal to schedule an external"]
                #[doc = "referendum."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be `ExternalOrigin`."]
                #[doc = ""]
                #[doc = "- `proposal_hash`: The preimage hash of the proposal."]
                #[doc = ""]
                #[doc = "Weight: `O(V)` with V number of vetoers in the blacklist of proposal."]
                #[doc = "  Decoding vec of length V. Charged as maximum"]
                pub fn external_propose(
                    &self,
                    proposal_hash: ::subxt::ext::sp_core::H256,
                ) -> ::subxt::tx::StaticTxPayload<ExternalPropose>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Democracy",
                        "external_propose",
                        ExternalPropose { proposal_hash },
                        [
                            8u8, 206u8, 229u8, 218u8, 203u8, 208u8, 253u8,
                            113u8, 43u8, 62u8, 110u8, 155u8, 123u8, 35u8,
                            187u8, 211u8, 180u8, 225u8, 41u8, 30u8, 204u8,
                            110u8, 202u8, 210u8, 143u8, 84u8, 117u8, 20u8,
                            215u8, 110u8, 211u8, 89u8,
                        ],
                    )
                }
                #[doc = "Schedule a majority-carries referendum to be tabled next once it is legal to schedule"]
                #[doc = "an external referendum."]
                #[doc = ""]
                #[doc = "The dispatch of this call must be `ExternalMajorityOrigin`."]
                #[doc = ""]
                #[doc = "- `proposal_hash`: The preimage hash of the proposal."]
                #[doc = ""]
                #[doc = "Unlike `external_propose`, blacklisting has no effect on this and it may replace a"]
                #[doc = "pre-scheduled `external_propose` call."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn external_propose_majority(
                    &self,
                    proposal_hash: ::subxt::ext::sp_core::H256,
                ) -> ::subxt::tx::StaticTxPayload<ExternalProposeMajority>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Democracy",
                        "external_propose_majority",
                        ExternalProposeMajority { proposal_hash },
                        [
                            36u8, 47u8, 192u8, 177u8, 164u8, 82u8, 109u8,
                            215u8, 98u8, 28u8, 47u8, 237u8, 159u8, 233u8, 53u8,
                            9u8, 158u8, 134u8, 232u8, 249u8, 55u8, 189u8, 48u8,
                            133u8, 201u8, 46u8, 237u8, 158u8, 181u8, 163u8,
                            166u8, 213u8,
                        ],
                    )
                }
                #[doc = "Schedule a negative-turnout-bias referendum to be tabled next once it is legal to"]
                #[doc = "schedule an external referendum."]
                #[doc = ""]
                #[doc = "The dispatch of this call must be `ExternalDefaultOrigin`."]
                #[doc = ""]
                #[doc = "- `proposal_hash`: The preimage hash of the proposal."]
                #[doc = ""]
                #[doc = "Unlike `external_propose`, blacklisting has no effect on this and it may replace a"]
                #[doc = "pre-scheduled `external_propose` call."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn external_propose_default(
                    &self,
                    proposal_hash: ::subxt::ext::sp_core::H256,
                ) -> ::subxt::tx::StaticTxPayload<ExternalProposeDefault>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Democracy",
                        "external_propose_default",
                        ExternalProposeDefault { proposal_hash },
                        [
                            32u8, 100u8, 249u8, 175u8, 187u8, 77u8, 30u8, 65u8,
                            90u8, 103u8, 251u8, 21u8, 21u8, 220u8, 8u8, 118u8,
                            97u8, 160u8, 152u8, 122u8, 71u8, 140u8, 96u8, 8u8,
                            245u8, 74u8, 112u8, 164u8, 55u8, 130u8, 38u8, 14u8,
                        ],
                    )
                }
                #[doc = "Schedule the currently externally-proposed majority-carries referendum to be tabled"]
                #[doc = "immediately. If there is no externally-proposed referendum currently, or if there is one"]
                #[doc = "but it is not a majority-carries referendum then it fails."]
                #[doc = ""]
                #[doc = "The dispatch of this call must be `FastTrackOrigin`."]
                #[doc = ""]
                #[doc = "- `proposal_hash`: The hash of the current external proposal."]
                #[doc = "- `voting_period`: The period that is allowed for voting on this proposal."]
                #[doc = "\tMust be always greater than zero."]
                #[doc = "\tFor `FastTrackOrigin` must be equal or greater than `FastTrackVotingPeriod`."]
                #[doc = "- `delay`: The number of block after voting has ended in approval and this should be"]
                #[doc = "  enacted. This doesn't have a minimum amount."]
                #[doc = ""]
                #[doc = "Emits `Started`."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn fast_track(
                    &self,
                    proposal_hash: ::subxt::ext::sp_core::H256,
                    voting_period: ::core::primitive::u64,
                    delay: ::core::primitive::u64,
                ) -> ::subxt::tx::StaticTxPayload<FastTrack> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Democracy",
                        "fast_track",
                        FastTrack {
                            proposal_hash,
                            voting_period,
                            delay,
                        },
                        [
                            218u8, 196u8, 235u8, 104u8, 184u8, 235u8, 225u8,
                            24u8, 15u8, 222u8, 181u8, 159u8, 234u8, 250u8,
                            94u8, 9u8, 246u8, 66u8, 121u8, 28u8, 105u8, 185u8,
                            225u8, 238u8, 17u8, 187u8, 187u8, 218u8, 193u8,
                            188u8, 199u8, 134u8,
                        ],
                    )
                }
                #[doc = "Veto and blacklist the external proposal hash."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be `VetoOrigin`."]
                #[doc = ""]
                #[doc = "- `proposal_hash`: The preimage hash of the proposal to veto and blacklist."]
                #[doc = ""]
                #[doc = "Emits `Vetoed`."]
                #[doc = ""]
                #[doc = "Weight: `O(V + log(V))` where V is number of `existing vetoers`"]
                pub fn veto_external(
                    &self,
                    proposal_hash: ::subxt::ext::sp_core::H256,
                ) -> ::subxt::tx::StaticTxPayload<VetoExternal>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Democracy",
                        "veto_external",
                        VetoExternal { proposal_hash },
                        [
                            209u8, 18u8, 18u8, 103u8, 186u8, 160u8, 214u8,
                            124u8, 150u8, 207u8, 112u8, 90u8, 84u8, 197u8,
                            95u8, 157u8, 165u8, 65u8, 109u8, 101u8, 75u8,
                            201u8, 41u8, 149u8, 75u8, 154u8, 37u8, 178u8,
                            239u8, 121u8, 124u8, 23u8,
                        ],
                    )
                }
                #[doc = "Remove a referendum."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be _Root_."]
                #[doc = ""]
                #[doc = "- `ref_index`: The index of the referendum to cancel."]
                #[doc = ""]
                #[doc = "# Weight: `O(1)`."]
                pub fn cancel_referendum(
                    &self,
                    ref_index: ::core::primitive::u32,
                ) -> ::subxt::tx::StaticTxPayload<CancelReferendum>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Democracy",
                        "cancel_referendum",
                        CancelReferendum { ref_index },
                        [
                            51u8, 25u8, 25u8, 251u8, 236u8, 115u8, 130u8,
                            230u8, 72u8, 186u8, 119u8, 71u8, 165u8, 137u8,
                            55u8, 167u8, 187u8, 128u8, 55u8, 8u8, 212u8, 139u8,
                            245u8, 232u8, 103u8, 136u8, 229u8, 113u8, 125u8,
                            36u8, 1u8, 149u8,
                        ],
                    )
                }
                #[doc = "Cancel a proposal queued for enactment."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be _Root_."]
                #[doc = ""]
                #[doc = "- `which`: The index of the referendum to cancel."]
                #[doc = ""]
                #[doc = "Weight: `O(D)` where `D` is the items in the dispatch queue. Weighted as `D = 10`."]
                pub fn cancel_queued(
                    &self,
                    which: ::core::primitive::u32,
                ) -> ::subxt::tx::StaticTxPayload<CancelQueued>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Democracy",
                        "cancel_queued",
                        CancelQueued { which },
                        [
                            6u8, 97u8, 182u8, 142u8, 165u8, 206u8, 218u8,
                            245u8, 206u8, 224u8, 143u8, 164u8, 232u8, 129u8,
                            202u8, 141u8, 78u8, 65u8, 79u8, 206u8, 3u8, 195u8,
                            151u8, 36u8, 8u8, 220u8, 184u8, 239u8, 28u8, 187u8,
                            208u8, 174u8,
                        ],
                    )
                }
                #[doc = "Delegate the voting power (with some given conviction) of the sending account."]
                #[doc = ""]
                #[doc = "The balance delegated is locked for as long as it's delegated, and thereafter for the"]
                #[doc = "time appropriate for the conviction's lock period."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be _Signed_, and the signing account must either:"]
                #[doc = "  - be delegating already; or"]
                #[doc = "  - have no voting activity (if there is, then it will need to be removed/consolidated"]
                #[doc = "    through `reap_vote` or `unvote`)."]
                #[doc = ""]
                #[doc = "- `to`: The account whose voting the `target` account's voting power will follow."]
                #[doc = "- `conviction`: The conviction that will be attached to the delegated votes. When the"]
                #[doc = "  account is undelegated, the funds will be locked for the corresponding period."]
                #[doc = "- `balance`: The amount of the account's balance to be used in delegating. This must not"]
                #[doc = "  be more than the account's current balance."]
                #[doc = ""]
                #[doc = "Emits `Delegated`."]
                #[doc = ""]
                #[doc = "Weight: `O(R)` where R is the number of referendums the voter delegating to has"]
                #[doc = "  voted on. Weight is charged as if maximum votes."]
                pub fn delegate(
                    &self,
                    to: ::subxt::ext::sp_runtime::MultiAddress<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    conviction : runtime_types :: pallet_democracy :: conviction :: Conviction,
                    balance: ::core::primitive::u128,
                ) -> ::subxt::tx::StaticTxPayload<Delegate> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Democracy",
                        "delegate",
                        Delegate {
                            to,
                            conviction,
                            balance,
                        },
                        [
                            247u8, 226u8, 242u8, 221u8, 47u8, 161u8, 91u8,
                            223u8, 6u8, 79u8, 238u8, 205u8, 41u8, 188u8, 140u8,
                            56u8, 181u8, 248u8, 102u8, 10u8, 127u8, 166u8,
                            90u8, 187u8, 13u8, 124u8, 209u8, 117u8, 16u8,
                            209u8, 74u8, 29u8,
                        ],
                    )
                }
                #[doc = "Undelegate the voting power of the sending account."]
                #[doc = ""]
                #[doc = "Tokens may be unlocked following once an amount of time consistent with the lock period"]
                #[doc = "of the conviction with which the delegation was issued."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be _Signed_ and the signing account must be"]
                #[doc = "currently delegating."]
                #[doc = ""]
                #[doc = "Emits `Undelegated`."]
                #[doc = ""]
                #[doc = "Weight: `O(R)` where R is the number of referendums the voter delegating to has"]
                #[doc = "  voted on. Weight is charged as if maximum votes."]
                pub fn undelegate(
                    &self,
                ) -> ::subxt::tx::StaticTxPayload<Undelegate> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Democracy",
                        "undelegate",
                        Undelegate {},
                        [
                            165u8, 40u8, 183u8, 209u8, 57u8, 153u8, 111u8,
                            29u8, 114u8, 109u8, 107u8, 235u8, 97u8, 61u8, 53u8,
                            155u8, 44u8, 245u8, 28u8, 220u8, 56u8, 134u8, 43u8,
                            122u8, 248u8, 156u8, 191u8, 154u8, 4u8, 121u8,
                            152u8, 153u8,
                        ],
                    )
                }
                #[doc = "Clears all public proposals."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be _Root_."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`."]
                pub fn clear_public_proposals(
                    &self,
                ) -> ::subxt::tx::StaticTxPayload<ClearPublicProposals>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Democracy",
                        "clear_public_proposals",
                        ClearPublicProposals {},
                        [
                            59u8, 126u8, 254u8, 223u8, 252u8, 225u8, 75u8,
                            185u8, 188u8, 181u8, 42u8, 179u8, 211u8, 73u8,
                            12u8, 141u8, 243u8, 197u8, 46u8, 130u8, 215u8,
                            196u8, 225u8, 88u8, 48u8, 199u8, 231u8, 249u8,
                            195u8, 53u8, 184u8, 204u8,
                        ],
                    )
                }
                #[doc = "Register the preimage for an upcoming proposal. This doesn't require the proposal to be"]
                #[doc = "in the dispatch queue but does require a deposit, returned once enacted."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `encoded_proposal`: The preimage of a proposal."]
                #[doc = ""]
                #[doc = "Emits `PreimageNoted`."]
                #[doc = ""]
                #[doc = "Weight: `O(E)` with E size of `encoded_proposal` (protected by a required deposit)."]
                pub fn note_preimage(
                    &self,
                    encoded_proposal: ::std::vec::Vec<::core::primitive::u8>,
                ) -> ::subxt::tx::StaticTxPayload<NotePreimage>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Democracy",
                        "note_preimage",
                        NotePreimage { encoded_proposal },
                        [
                            31u8, 252u8, 248u8, 238u8, 103u8, 1u8, 82u8, 84u8,
                            135u8, 152u8, 246u8, 234u8, 251u8, 124u8, 193u8,
                            73u8, 52u8, 255u8, 88u8, 31u8, 112u8, 99u8, 191u8,
                            245u8, 251u8, 202u8, 51u8, 130u8, 136u8, 114u8,
                            177u8, 241u8,
                        ],
                    )
                }
                #[doc = "Same as `note_preimage` but origin is `OperationalPreimageOrigin`."]
                pub fn note_preimage_operational(
                    &self,
                    encoded_proposal: ::std::vec::Vec<::core::primitive::u8>,
                ) -> ::subxt::tx::StaticTxPayload<NotePreimageOperational>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Democracy",
                        "note_preimage_operational",
                        NotePreimageOperational { encoded_proposal },
                        [
                            184u8, 81u8, 31u8, 172u8, 81u8, 113u8, 84u8, 246u8,
                            189u8, 219u8, 167u8, 32u8, 191u8, 126u8, 165u8,
                            250u8, 147u8, 199u8, 241u8, 196u8, 253u8, 34u8,
                            51u8, 158u8, 2u8, 157u8, 16u8, 122u8, 210u8, 66u8,
                            110u8, 234u8,
                        ],
                    )
                }
                #[doc = "Register the preimage for an upcoming proposal. This requires the proposal to be"]
                #[doc = "in the dispatch queue. No deposit is needed. When this call is successful, i.e."]
                #[doc = "the preimage has not been uploaded before and matches some imminent proposal,"]
                #[doc = "no fee is paid."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `encoded_proposal`: The preimage of a proposal."]
                #[doc = ""]
                #[doc = "Emits `PreimageNoted`."]
                #[doc = ""]
                #[doc = "Weight: `O(E)` with E size of `encoded_proposal` (protected by a required deposit)."]
                pub fn note_imminent_preimage(
                    &self,
                    encoded_proposal: ::std::vec::Vec<::core::primitive::u8>,
                ) -> ::subxt::tx::StaticTxPayload<NoteImminentPreimage>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Democracy",
                        "note_imminent_preimage",
                        NoteImminentPreimage { encoded_proposal },
                        [
                            32u8, 188u8, 10u8, 215u8, 245u8, 132u8, 234u8,
                            124u8, 19u8, 90u8, 225u8, 216u8, 169u8, 105u8,
                            95u8, 231u8, 12u8, 109u8, 16u8, 91u8, 153u8, 134u8,
                            240u8, 82u8, 80u8, 254u8, 117u8, 230u8, 88u8,
                            203u8, 68u8, 42u8,
                        ],
                    )
                }
                #[doc = "Same as `note_imminent_preimage` but origin is `OperationalPreimageOrigin`."]
                pub fn note_imminent_preimage_operational(
                    &self,
                    encoded_proposal: ::std::vec::Vec<::core::primitive::u8>,
                ) -> ::subxt::tx::StaticTxPayload<NoteImminentPreimageOperational>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Democracy",
                        "note_imminent_preimage_operational",
                        NoteImminentPreimageOperational { encoded_proposal },
                        [
                            7u8, 31u8, 49u8, 238u8, 155u8, 234u8, 187u8, 147u8,
                            123u8, 84u8, 50u8, 98u8, 221u8, 39u8, 218u8, 204u8,
                            175u8, 136u8, 44u8, 93u8, 140u8, 172u8, 73u8, 98u8,
                            168u8, 110u8, 31u8, 82u8, 22u8, 1u8, 205u8, 84u8,
                        ],
                    )
                }
                #[doc = "Remove an expired proposal preimage and collect the deposit."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `proposal_hash`: The preimage hash of a proposal."]
                #[doc = "- `proposal_length_upper_bound`: an upper bound on length of the proposal. Extrinsic is"]
                #[doc = "  weighted according to this value with no refund."]
                #[doc = ""]
                #[doc = "This will only work after `VotingPeriod` blocks from the time that the preimage was"]
                #[doc = "noted, if it's the same account doing it. If it's a different account, then it'll only"]
                #[doc = "work an additional `EnactmentPeriod` later."]
                #[doc = ""]
                #[doc = "Emits `PreimageReaped`."]
                #[doc = ""]
                #[doc = "Weight: `O(D)` where D is length of proposal."]
                pub fn reap_preimage(
                    &self,
                    proposal_hash: ::subxt::ext::sp_core::H256,
                    proposal_len_upper_bound: ::core::primitive::u32,
                ) -> ::subxt::tx::StaticTxPayload<ReapPreimage>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Democracy",
                        "reap_preimage",
                        ReapPreimage {
                            proposal_hash,
                            proposal_len_upper_bound,
                        },
                        [
                            135u8, 43u8, 115u8, 154u8, 93u8, 121u8, 112u8,
                            65u8, 145u8, 141u8, 236u8, 252u8, 203u8, 155u8,
                            63u8, 130u8, 120u8, 221u8, 13u8, 105u8, 81u8,
                            179u8, 167u8, 254u8, 213u8, 117u8, 146u8, 232u8,
                            18u8, 104u8, 196u8, 112u8,
                        ],
                    )
                }
                #[doc = "Unlock tokens that have an expired lock."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `target`: The account to remove the lock on."]
                #[doc = ""]
                #[doc = "Weight: `O(R)` with R number of vote of target."]
                pub fn unlock(
                    &self,
                    target: ::subxt::ext::sp_runtime::MultiAddress<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::StaticTxPayload<Unlock> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Democracy",
                        "unlock",
                        Unlock { target },
                        [
                            227u8, 6u8, 154u8, 150u8, 253u8, 167u8, 142u8, 6u8,
                            147u8, 24u8, 124u8, 51u8, 101u8, 185u8, 184u8,
                            170u8, 6u8, 223u8, 29u8, 167u8, 73u8, 31u8, 179u8,
                            60u8, 156u8, 244u8, 192u8, 233u8, 79u8, 99u8,
                            248u8, 126u8,
                        ],
                    )
                }
                #[doc = "Remove a vote for a referendum."]
                #[doc = ""]
                #[doc = "If:"]
                #[doc = "- the referendum was cancelled, or"]
                #[doc = "- the referendum is ongoing, or"]
                #[doc = "- the referendum has ended such that"]
                #[doc = "  - the vote of the account was in opposition to the result; or"]
                #[doc = "  - there was no conviction to the account's vote; or"]
                #[doc = "  - the account made a split vote"]
                #[doc = "...then the vote is removed cleanly and a following call to `unlock` may result in more"]
                #[doc = "funds being available."]
                #[doc = ""]
                #[doc = "If, however, the referendum has ended and:"]
                #[doc = "- it finished corresponding to the vote of the account, and"]
                #[doc = "- the account made a standard vote with conviction, and"]
                #[doc = "- the lock period of the conviction is not over"]
                #[doc = "...then the lock will be aggregated into the overall account's lock, which may involve"]
                #[doc = "*overlocking* (where the two locks are combined into a single lock that is the maximum"]
                #[doc = "of both the amount locked and the time is it locked for)."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be _Signed_, and the signer must have a vote"]
                #[doc = "registered for referendum `index`."]
                #[doc = ""]
                #[doc = "- `index`: The index of referendum of the vote to be removed."]
                #[doc = ""]
                #[doc = "Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on."]
                #[doc = "  Weight is calculated for the maximum number of vote."]
                pub fn remove_vote(
                    &self,
                    index: ::core::primitive::u32,
                ) -> ::subxt::tx::StaticTxPayload<RemoveVote> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Democracy",
                        "remove_vote",
                        RemoveVote { index },
                        [
                            148u8, 120u8, 14u8, 172u8, 81u8, 152u8, 159u8,
                            178u8, 106u8, 244u8, 36u8, 98u8, 120u8, 189u8,
                            213u8, 93u8, 119u8, 156u8, 112u8, 34u8, 241u8,
                            72u8, 206u8, 113u8, 212u8, 161u8, 164u8, 126u8,
                            122u8, 82u8, 160u8, 74u8,
                        ],
                    )
                }
                #[doc = "Remove a vote for a referendum."]
                #[doc = ""]
                #[doc = "If the `target` is equal to the signer, then this function is exactly equivalent to"]
                #[doc = "`remove_vote`. If not equal to the signer, then the vote must have expired,"]
                #[doc = "either because the referendum was cancelled, because the voter lost the referendum or"]
                #[doc = "because the conviction period is over."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `target`: The account of the vote to be removed; this account must have voted for"]
                #[doc = "  referendum `index`."]
                #[doc = "- `index`: The index of referendum of the vote to be removed."]
                #[doc = ""]
                #[doc = "Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on."]
                #[doc = "  Weight is calculated for the maximum number of vote."]
                pub fn remove_other_vote(
                    &self,
                    target: ::subxt::ext::sp_runtime::MultiAddress<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    index: ::core::primitive::u32,
                ) -> ::subxt::tx::StaticTxPayload<RemoveOtherVote>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Democracy",
                        "remove_other_vote",
                        RemoveOtherVote { target, index },
                        [
                            251u8, 245u8, 79u8, 229u8, 3u8, 107u8, 66u8, 202u8,
                            148u8, 31u8, 6u8, 236u8, 156u8, 202u8, 197u8,
                            107u8, 100u8, 60u8, 255u8, 213u8, 222u8, 209u8,
                            249u8, 61u8, 209u8, 215u8, 82u8, 73u8, 25u8, 73u8,
                            161u8, 24u8,
                        ],
                    )
                }
                #[doc = "Enact a proposal from a referendum. For now we just make the weight be the maximum."]
                pub fn enact_proposal(
                    &self,
                    proposal_hash: ::subxt::ext::sp_core::H256,
                    index: ::core::primitive::u32,
                ) -> ::subxt::tx::StaticTxPayload<EnactProposal>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Democracy",
                        "enact_proposal",
                        EnactProposal {
                            proposal_hash,
                            index,
                        },
                        [
                            191u8, 244u8, 244u8, 174u8, 95u8, 86u8, 132u8,
                            63u8, 2u8, 94u8, 3u8, 117u8, 96u8, 54u8, 100u8,
                            89u8, 124u8, 117u8, 205u8, 142u8, 214u8, 192u8,
                            137u8, 141u8, 178u8, 145u8, 241u8, 167u8, 163u8,
                            76u8, 61u8, 31u8,
                        ],
                    )
                }
                #[doc = "Permanently place a proposal into the blacklist. This prevents it from ever being"]
                #[doc = "proposed again."]
                #[doc = ""]
                #[doc = "If called on a queued public or external proposal, then this will result in it being"]
                #[doc = "removed. If the `ref_index` supplied is an active referendum with the proposal hash,"]
                #[doc = "then it will be cancelled."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be `BlacklistOrigin`."]
                #[doc = ""]
                #[doc = "- `proposal_hash`: The proposal hash to blacklist permanently."]
                #[doc = "- `ref_index`: An ongoing referendum whose hash is `proposal_hash`, which will be"]
                #[doc = "cancelled."]
                #[doc = ""]
                #[doc = "Weight: `O(p)` (though as this is an high-privilege dispatch, we assume it has a"]
                #[doc = "  reasonable value)."]
                pub fn blacklist(
                    &self,
                    proposal_hash: ::subxt::ext::sp_core::H256,
                    maybe_ref_index: ::core::option::Option<
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::StaticTxPayload<Blacklist> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Democracy",
                        "blacklist",
                        Blacklist {
                            proposal_hash,
                            maybe_ref_index,
                        },
                        [
                            48u8, 144u8, 81u8, 164u8, 54u8, 111u8, 197u8,
                            134u8, 6u8, 98u8, 121u8, 179u8, 254u8, 191u8,
                            204u8, 212u8, 84u8, 255u8, 86u8, 110u8, 225u8,
                            130u8, 26u8, 65u8, 133u8, 56u8, 231u8, 15u8, 245u8,
                            137u8, 146u8, 242u8,
                        ],
                    )
                }
                #[doc = "Remove a proposal."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be `CancelProposalOrigin`."]
                #[doc = ""]
                #[doc = "- `prop_index`: The index of the proposal to cancel."]
                #[doc = ""]
                #[doc = "Weight: `O(p)` where `p = PublicProps::<T>::decode_len()`"]
                pub fn cancel_proposal(
                    &self,
                    prop_index: ::core::primitive::u32,
                ) -> ::subxt::tx::StaticTxPayload<CancelProposal>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Democracy",
                        "cancel_proposal",
                        CancelProposal { prop_index },
                        [
                            179u8, 3u8, 198u8, 244u8, 241u8, 124u8, 205u8,
                            58u8, 100u8, 80u8, 177u8, 254u8, 98u8, 220u8,
                            189u8, 63u8, 229u8, 60u8, 157u8, 83u8, 142u8, 6u8,
                            236u8, 183u8, 193u8, 235u8, 253u8, 126u8, 153u8,
                            185u8, 74u8, 117u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_democracy::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "A motion has been proposed by a public account."]
            pub struct Proposed {
                pub proposal_index: ::core::primitive::u32,
                pub deposit: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Proposed {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "Proposed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "A public proposal has been tabled for referendum vote."]
            pub struct Tabled {
                pub proposal_index: ::core::primitive::u32,
                pub deposit: ::core::primitive::u128,
                pub depositors:
                    ::std::vec::Vec<::subxt::ext::sp_core::crypto::AccountId32>,
            }
            impl ::subxt::events::StaticEvent for Tabled {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "Tabled";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "An external proposal has been tabled."]
            pub struct ExternalTabled;
            impl ::subxt::events::StaticEvent for ExternalTabled {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "ExternalTabled";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "A referendum has begun."]
            pub struct Started { pub ref_index : :: core :: primitive :: u32 , pub threshold : runtime_types :: pallet_democracy :: vote_threshold :: VoteThreshold , }
            impl ::subxt::events::StaticEvent for Started {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "Started";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "A proposal has been approved by referendum."]
            pub struct Passed {
                pub ref_index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Passed {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "Passed";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "A proposal has been rejected by referendum."]
            pub struct NotPassed {
                pub ref_index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for NotPassed {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "NotPassed";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "A referendum has been cancelled."]
            pub struct Cancelled {
                pub ref_index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Cancelled {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "Cancelled";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "A proposal has been enacted."]
            pub struct Executed {
                pub ref_index: ::core::primitive::u32,
                pub result: ::core::result::Result<
                    (),
                    runtime_types::sp_runtime::DispatchError,
                >,
            }
            impl ::subxt::events::StaticEvent for Executed {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "Executed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "An account has delegated their vote to another account."]
            pub struct Delegated {
                pub who: ::subxt::ext::sp_core::crypto::AccountId32,
                pub target: ::subxt::ext::sp_core::crypto::AccountId32,
            }
            impl ::subxt::events::StaticEvent for Delegated {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "Delegated";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "An account has cancelled a previous delegation operation."]
            pub struct Undelegated {
                pub account: ::subxt::ext::sp_core::crypto::AccountId32,
            }
            impl ::subxt::events::StaticEvent for Undelegated {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "Undelegated";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "An external proposal has been vetoed."]
            pub struct Vetoed {
                pub who: ::subxt::ext::sp_core::crypto::AccountId32,
                pub proposal_hash: ::subxt::ext::sp_core::H256,
                pub until: ::core::primitive::u64,
            }
            impl ::subxt::events::StaticEvent for Vetoed {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "Vetoed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "A proposal's preimage was noted, and the deposit taken."]
            pub struct PreimageNoted {
                pub proposal_hash: ::subxt::ext::sp_core::H256,
                pub who: ::subxt::ext::sp_core::crypto::AccountId32,
                pub deposit: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for PreimageNoted {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "PreimageNoted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "A proposal preimage was removed and used (the deposit was returned)."]
            pub struct PreimageUsed {
                pub proposal_hash: ::subxt::ext::sp_core::H256,
                pub provider: ::subxt::ext::sp_core::crypto::AccountId32,
                pub deposit: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for PreimageUsed {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "PreimageUsed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "A proposal could not be executed because its preimage was invalid."]
            pub struct PreimageInvalid {
                pub proposal_hash: ::subxt::ext::sp_core::H256,
                pub ref_index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for PreimageInvalid {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "PreimageInvalid";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "A proposal could not be executed because its preimage was missing."]
            pub struct PreimageMissing {
                pub proposal_hash: ::subxt::ext::sp_core::H256,
                pub ref_index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for PreimageMissing {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "PreimageMissing";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "A registered preimage was removed and the deposit collected by the reaper."]
            pub struct PreimageReaped {
                pub proposal_hash: ::subxt::ext::sp_core::H256,
                pub provider: ::subxt::ext::sp_core::crypto::AccountId32,
                pub deposit: ::core::primitive::u128,
                pub reaper: ::subxt::ext::sp_core::crypto::AccountId32,
            }
            impl ::subxt::events::StaticEvent for PreimageReaped {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "PreimageReaped";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "A proposal_hash has been blacklisted permanently."]
            pub struct Blacklisted {
                pub proposal_hash: ::subxt::ext::sp_core::H256,
            }
            impl ::subxt::events::StaticEvent for Blacklisted {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "Blacklisted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "An account has voted in a referendum"]
            pub struct Voted {
                pub voter: ::subxt::ext::sp_core::crypto::AccountId32,
                pub ref_index: ::core::primitive::u32,
                pub vote: runtime_types::pallet_democracy::vote::AccountVote<
                    ::core::primitive::u128,
                >,
            }
            impl ::subxt::events::StaticEvent for Voted {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "Voted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "An account has secconded a proposal"]
            pub struct Seconded {
                pub seconder: ::subxt::ext::sp_core::crypto::AccountId32,
                pub prop_index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Seconded {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "Seconded";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "A proposal got canceled."]
            pub struct ProposalCanceled {
                pub prop_index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for ProposalCanceled {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "ProposalCanceled";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The number of (public) proposals that have been made so far."]                pub fn public_prop_count (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u32 > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Democracy",
                        "PublicPropCount",
                        vec![],
                        [
                            91u8, 14u8, 171u8, 94u8, 37u8, 157u8, 46u8, 157u8,
                            254u8, 13u8, 68u8, 144u8, 23u8, 146u8, 128u8,
                            159u8, 9u8, 174u8, 74u8, 174u8, 218u8, 197u8, 23u8,
                            235u8, 152u8, 226u8, 216u8, 4u8, 120u8, 121u8,
                            27u8, 138u8,
                        ],
                    )
                }
                #[doc = " The public proposals. Unsorted. The second item is the proposal's hash."]                pub fn public_props (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: std :: vec :: Vec < (:: core :: primitive :: u32 , :: subxt :: ext :: sp_core :: H256 , :: subxt :: ext :: sp_core :: crypto :: AccountId32 ,) > > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Democracy",
                        "PublicProps",
                        vec![],
                        [
                            151u8, 247u8, 196u8, 97u8, 171u8, 230u8, 55u8,
                            45u8, 220u8, 16u8, 12u8, 28u8, 22u8, 58u8, 127u8,
                            179u8, 130u8, 192u8, 115u8, 165u8, 5u8, 173u8,
                            87u8, 104u8, 7u8, 186u8, 114u8, 47u8, 162u8, 182u8,
                            252u8, 154u8,
                        ],
                    )
                }
                #[doc = " Those who have locked a deposit."]
                #[doc = ""]
                #[doc = " TWOX-NOTE: Safe, as increasing integer keys are safe."]                pub fn deposit_of (& self , _0 : impl :: std :: borrow :: Borrow < :: core :: primitive :: u32 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < (:: std :: vec :: Vec < :: subxt :: ext :: sp_core :: crypto :: AccountId32 > , :: core :: primitive :: u128 ,) > , :: subxt :: storage :: address :: Yes , () , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("Democracy" , "DepositOf" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Twox64Concat)] , [153u8 , 236u8 , 152u8 , 224u8 , 221u8 , 90u8 , 204u8 , 183u8 , 222u8 , 160u8 , 227u8 , 26u8 , 8u8 , 110u8 , 230u8 , 102u8 , 133u8 , 186u8 , 66u8 , 2u8 , 84u8 , 31u8 , 236u8 , 228u8 , 202u8 , 75u8 , 17u8 , 97u8 , 133u8 , 232u8 , 64u8 , 7u8 ,])
                }
                #[doc = " Those who have locked a deposit."]
                #[doc = ""]
                #[doc = " TWOX-NOTE: Safe, as increasing integer keys are safe."]                pub fn deposit_of_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < (:: std :: vec :: Vec < :: subxt :: ext :: sp_core :: crypto :: AccountId32 > , :: core :: primitive :: u128 ,) > , () , () , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Democracy",
                        "DepositOf",
                        Vec::new(),
                        [
                            153u8, 236u8, 152u8, 224u8, 221u8, 90u8, 204u8,
                            183u8, 222u8, 160u8, 227u8, 26u8, 8u8, 110u8,
                            230u8, 102u8, 133u8, 186u8, 66u8, 2u8, 84u8, 31u8,
                            236u8, 228u8, 202u8, 75u8, 17u8, 97u8, 133u8,
                            232u8, 64u8, 7u8,
                        ],
                    )
                }
                #[doc = " Map of hashes to the proposal preimage, along with who registered it and their deposit."]
                #[doc = " The block number is the block at which it was deposited."]                pub fn preimages (& self , _0 : impl :: std :: borrow :: Borrow < :: subxt :: ext :: sp_core :: H256 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_democracy :: PreimageStatus < :: subxt :: ext :: sp_core :: crypto :: AccountId32 , :: core :: primitive :: u128 , :: core :: primitive :: u64 > > , :: subxt :: storage :: address :: Yes , () , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Democracy",
                        "Preimages",
                        vec![::subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            ::subxt::storage::address::StorageHasher::Identity,
                        )],
                        [
                            56u8, 142u8, 50u8, 246u8, 6u8, 248u8, 189u8, 13u8,
                            113u8, 37u8, 64u8, 139u8, 128u8, 133u8, 173u8,
                            60u8, 140u8, 221u8, 37u8, 32u8, 186u8, 54u8, 152u8,
                            245u8, 241u8, 65u8, 226u8, 31u8, 233u8, 144u8,
                            121u8, 220u8,
                        ],
                    )
                }
                #[doc = " Map of hashes to the proposal preimage, along with who registered it and their deposit."]
                #[doc = " The block number is the block at which it was deposited."]                pub fn preimages_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_democracy :: PreimageStatus < :: subxt :: ext :: sp_core :: crypto :: AccountId32 , :: core :: primitive :: u128 , :: core :: primitive :: u64 > > , () , () , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Democracy",
                        "Preimages",
                        Vec::new(),
                        [
                            56u8, 142u8, 50u8, 246u8, 6u8, 248u8, 189u8, 13u8,
                            113u8, 37u8, 64u8, 139u8, 128u8, 133u8, 173u8,
                            60u8, 140u8, 221u8, 37u8, 32u8, 186u8, 54u8, 152u8,
                            245u8, 241u8, 65u8, 226u8, 31u8, 233u8, 144u8,
                            121u8, 220u8,
                        ],
                    )
                }
                #[doc = " The next free referendum index, aka the number of referenda started so far."]                pub fn referendum_count (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u32 > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Democracy",
                        "ReferendumCount",
                        vec![],
                        [
                            153u8, 210u8, 106u8, 244u8, 156u8, 70u8, 124u8,
                            251u8, 123u8, 75u8, 7u8, 189u8, 199u8, 145u8, 95u8,
                            119u8, 137u8, 11u8, 240u8, 160u8, 151u8, 248u8,
                            229u8, 231u8, 89u8, 222u8, 18u8, 237u8, 144u8,
                            78u8, 99u8, 58u8,
                        ],
                    )
                }
                #[doc = " The lowest referendum index representing an unbaked referendum. Equal to"]
                #[doc = " `ReferendumCount` if there isn't a unbaked referendum."]                pub fn lowest_unbaked (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u32 > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Democracy",
                        "LowestUnbaked",
                        vec![],
                        [
                            4u8, 51u8, 108u8, 11u8, 48u8, 165u8, 19u8, 251u8,
                            182u8, 76u8, 163u8, 73u8, 227u8, 2u8, 212u8, 74u8,
                            128u8, 27u8, 165u8, 164u8, 111u8, 22u8, 209u8,
                            190u8, 103u8, 7u8, 116u8, 16u8, 160u8, 144u8,
                            123u8, 64u8,
                        ],
                    )
                }
                #[doc = " Information concerning any given referendum."]
                #[doc = ""]
                #[doc = " TWOX-NOTE: SAFE as indexes are not under an attacker’s control."]                pub fn referendum_info_of (& self , _0 : impl :: std :: borrow :: Borrow < :: core :: primitive :: u32 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_democracy :: types :: ReferendumInfo < :: core :: primitive :: u64 , :: subxt :: ext :: sp_core :: H256 , :: core :: primitive :: u128 > > , :: subxt :: storage :: address :: Yes , () , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("Democracy" , "ReferendumInfoOf" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Twox64Concat)] , [189u8 , 204u8 , 209u8 , 7u8 , 206u8 , 124u8 , 176u8 , 180u8 , 44u8 , 25u8 , 19u8 , 253u8 , 118u8 , 84u8 , 243u8 , 83u8 , 58u8 , 95u8 , 159u8 , 210u8 , 53u8 , 29u8 , 250u8 , 126u8 , 68u8 , 97u8 , 205u8 , 39u8 , 131u8 , 37u8 , 143u8 , 198u8 ,])
                }
                #[doc = " Information concerning any given referendum."]
                #[doc = ""]
                #[doc = " TWOX-NOTE: SAFE as indexes are not under an attacker’s control."]                pub fn referendum_info_of_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_democracy :: types :: ReferendumInfo < :: core :: primitive :: u64 , :: subxt :: ext :: sp_core :: H256 , :: core :: primitive :: u128 > > , () , () , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Democracy",
                        "ReferendumInfoOf",
                        Vec::new(),
                        [
                            189u8, 204u8, 209u8, 7u8, 206u8, 124u8, 176u8,
                            180u8, 44u8, 25u8, 19u8, 253u8, 118u8, 84u8, 243u8,
                            83u8, 58u8, 95u8, 159u8, 210u8, 53u8, 29u8, 250u8,
                            126u8, 68u8, 97u8, 205u8, 39u8, 131u8, 37u8, 143u8,
                            198u8,
                        ],
                    )
                }
                #[doc = " All votes for a particular voter. We store the balance for the number of votes that we"]
                #[doc = " have recorded. The second item is the total amount of delegations, that will be added."]
                #[doc = ""]
                #[doc = " TWOX-NOTE: SAFE as `AccountId`s are crypto hashes anyway."]                pub fn voting_of (& self , _0 : impl :: std :: borrow :: Borrow < :: subxt :: ext :: sp_core :: crypto :: AccountId32 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_democracy :: vote :: Voting < :: core :: primitive :: u128 , :: subxt :: ext :: sp_core :: crypto :: AccountId32 , :: core :: primitive :: u64 > > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("Democracy" , "VotingOf" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Twox64Concat)] , [46u8 , 11u8 , 232u8 , 134u8 , 160u8 , 53u8 , 22u8 , 136u8 , 70u8 , 115u8 , 141u8 , 223u8 , 48u8 , 95u8 , 104u8 , 203u8 , 9u8 , 146u8 , 218u8 , 3u8 , 227u8 , 64u8 , 165u8 , 225u8 , 96u8 , 156u8 , 153u8 , 19u8 , 147u8 , 239u8 , 17u8 , 43u8 ,])
                }
                #[doc = " All votes for a particular voter. We store the balance for the number of votes that we"]
                #[doc = " have recorded. The second item is the total amount of delegations, that will be added."]
                #[doc = ""]
                #[doc = " TWOX-NOTE: SAFE as `AccountId`s are crypto hashes anyway."]                pub fn voting_of_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_democracy :: vote :: Voting < :: core :: primitive :: u128 , :: subxt :: ext :: sp_core :: crypto :: AccountId32 , :: core :: primitive :: u64 > > , () , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Democracy",
                        "VotingOf",
                        Vec::new(),
                        [
                            46u8, 11u8, 232u8, 134u8, 160u8, 53u8, 22u8, 136u8,
                            70u8, 115u8, 141u8, 223u8, 48u8, 95u8, 104u8,
                            203u8, 9u8, 146u8, 218u8, 3u8, 227u8, 64u8, 165u8,
                            225u8, 96u8, 156u8, 153u8, 19u8, 147u8, 239u8,
                            17u8, 43u8,
                        ],
                    )
                }
                #[doc = " True if the last referendum tabled was submitted externally. False if it was a public"]
                #[doc = " proposal."]                pub fn last_tabled_was_external (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: bool > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Democracy",
                        "LastTabledWasExternal",
                        vec![],
                        [
                            3u8, 67u8, 106u8, 1u8, 89u8, 204u8, 4u8, 145u8,
                            121u8, 44u8, 34u8, 76u8, 18u8, 206u8, 65u8, 214u8,
                            222u8, 82u8, 31u8, 223u8, 144u8, 169u8, 17u8, 6u8,
                            138u8, 36u8, 113u8, 155u8, 241u8, 106u8, 189u8,
                            218u8,
                        ],
                    )
                }
                #[doc = " The referendum to be tabled whenever it would be valid to table an external proposal."]
                #[doc = " This happens when a referendum needs to be tabled and one of two conditions are met:"]
                #[doc = " - `LastTabledWasExternal` is `false`; or"]
                #[doc = " - `PublicProps` is empty."]                pub fn next_external (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < (:: subxt :: ext :: sp_core :: H256 , runtime_types :: pallet_democracy :: vote_threshold :: VoteThreshold ,) > , :: subxt :: storage :: address :: Yes , () , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Democracy",
                        "NextExternal",
                        vec![],
                        [
                            123u8, 49u8, 252u8, 184u8, 75u8, 204u8, 16u8,
                            130u8, 43u8, 109u8, 62u8, 113u8, 95u8, 0u8, 20u8,
                            163u8, 186u8, 210u8, 253u8, 33u8, 58u8, 121u8,
                            36u8, 80u8, 9u8, 242u8, 180u8, 230u8, 167u8, 250u8,
                            32u8, 180u8,
                        ],
                    )
                }
                #[doc = " A record of who vetoed what. Maps proposal hash to a possible existent block number"]
                #[doc = " (until when it may not be resubmitted) and who vetoed it."]                pub fn blacklist (& self , _0 : impl :: std :: borrow :: Borrow < :: subxt :: ext :: sp_core :: H256 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < (:: core :: primitive :: u64 , :: std :: vec :: Vec < :: subxt :: ext :: sp_core :: crypto :: AccountId32 > ,) > , :: subxt :: storage :: address :: Yes , () , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Democracy",
                        "Blacklist",
                        vec![::subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            ::subxt::storage::address::StorageHasher::Identity,
                        )],
                        [
                            39u8, 158u8, 168u8, 51u8, 140u8, 10u8, 91u8, 234u8,
                            164u8, 14u8, 189u8, 113u8, 83u8, 11u8, 218u8,
                            185u8, 87u8, 149u8, 11u8, 249u8, 241u8, 4u8, 100u8,
                            252u8, 120u8, 9u8, 15u8, 92u8, 131u8, 168u8, 209u8,
                            115u8,
                        ],
                    )
                }
                #[doc = " A record of who vetoed what. Maps proposal hash to a possible existent block number"]
                #[doc = " (until when it may not be resubmitted) and who vetoed it."]                pub fn blacklist_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < (:: core :: primitive :: u64 , :: std :: vec :: Vec < :: subxt :: ext :: sp_core :: crypto :: AccountId32 > ,) > , () , () , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Democracy",
                        "Blacklist",
                        Vec::new(),
                        [
                            39u8, 158u8, 168u8, 51u8, 140u8, 10u8, 91u8, 234u8,
                            164u8, 14u8, 189u8, 113u8, 83u8, 11u8, 218u8,
                            185u8, 87u8, 149u8, 11u8, 249u8, 241u8, 4u8, 100u8,
                            252u8, 120u8, 9u8, 15u8, 92u8, 131u8, 168u8, 209u8,
                            115u8,
                        ],
                    )
                }
                #[doc = " Record of all proposals that have been subject to emergency cancellation."]                pub fn cancellations (& self , _0 : impl :: std :: borrow :: Borrow < :: subxt :: ext :: sp_core :: H256 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: bool > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Democracy",
                        "Cancellations",
                        vec![::subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            ::subxt::storage::address::StorageHasher::Identity,
                        )],
                        [
                            154u8, 36u8, 172u8, 46u8, 65u8, 218u8, 30u8, 151u8,
                            173u8, 186u8, 166u8, 79u8, 35u8, 226u8, 94u8,
                            200u8, 67u8, 44u8, 47u8, 7u8, 17u8, 89u8, 169u8,
                            166u8, 236u8, 101u8, 68u8, 54u8, 114u8, 141u8,
                            177u8, 135u8,
                        ],
                    )
                }
                #[doc = " Record of all proposals that have been subject to emergency cancellation."]                pub fn cancellations_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: bool > , () , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Democracy",
                        "Cancellations",
                        Vec::new(),
                        [
                            154u8, 36u8, 172u8, 46u8, 65u8, 218u8, 30u8, 151u8,
                            173u8, 186u8, 166u8, 79u8, 35u8, 226u8, 94u8,
                            200u8, 67u8, 44u8, 47u8, 7u8, 17u8, 89u8, 169u8,
                            166u8, 236u8, 101u8, 68u8, 54u8, 114u8, 141u8,
                            177u8, 135u8,
                        ],
                    )
                }
                #[doc = " Storage version of the pallet."]
                #[doc = ""]
                #[doc = " New networks start with last version."]                pub fn storage_version (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_democracy :: Releases > , :: subxt :: storage :: address :: Yes , () , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Democracy",
                        "StorageVersion",
                        vec![],
                        [
                            39u8, 219u8, 134u8, 64u8, 250u8, 96u8, 95u8, 156u8,
                            100u8, 236u8, 18u8, 78u8, 59u8, 146u8, 5u8, 245u8,
                            113u8, 125u8, 220u8, 140u8, 125u8, 5u8, 194u8,
                            134u8, 248u8, 95u8, 250u8, 108u8, 142u8, 230u8,
                            21u8, 120u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The period between a proposal being approved and enacted."]
                #[doc = ""]
                #[doc = " It should generally be a little more than the unstake period to ensure that"]
                #[doc = " voting stakers have an opportunity to remove themselves from the system in the case"]
                #[doc = " where they are on the losing side of a vote."]
                pub fn enactment_period(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<::core::primitive::u64>,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "Democracy",
                        "EnactmentPeriod",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8,
                            231u8, 190u8, 146u8, 59u8, 226u8, 157u8, 101u8,
                            103u8, 117u8, 249u8, 65u8, 18u8, 191u8, 103u8,
                            119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8,
                            239u8, 42u8, 246u8,
                        ],
                    )
                }
                #[doc = " How often (in blocks) new public referenda are launched."]
                pub fn launch_period(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<::core::primitive::u64>,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "Democracy",
                        "LaunchPeriod",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8,
                            231u8, 190u8, 146u8, 59u8, 226u8, 157u8, 101u8,
                            103u8, 117u8, 249u8, 65u8, 18u8, 191u8, 103u8,
                            119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8,
                            239u8, 42u8, 246u8,
                        ],
                    )
                }
                #[doc = " How often (in blocks) to check for new votes."]
                pub fn voting_period(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<::core::primitive::u64>,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "Democracy",
                        "VotingPeriod",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8,
                            231u8, 190u8, 146u8, 59u8, 226u8, 157u8, 101u8,
                            103u8, 117u8, 249u8, 65u8, 18u8, 191u8, 103u8,
                            119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8,
                            239u8, 42u8, 246u8,
                        ],
                    )
                }
                #[doc = " The minimum period of vote locking."]
                #[doc = ""]
                #[doc = " It should be no shorter than enactment period to ensure that in the case of an approval,"]
                #[doc = " those successful voters are locked into the consequences that their votes entail."]
                pub fn vote_locking_period(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<::core::primitive::u64>,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "Democracy",
                        "VoteLockingPeriod",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8,
                            231u8, 190u8, 146u8, 59u8, 226u8, 157u8, 101u8,
                            103u8, 117u8, 249u8, 65u8, 18u8, 191u8, 103u8,
                            119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8,
                            239u8, 42u8, 246u8,
                        ],
                    )
                }
                #[doc = " The minimum amount to be used as a deposit for a public referendum proposal."]
                pub fn minimum_deposit(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<
                        ::core::primitive::u128,
                    >,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "Democracy",
                        "MinimumDeposit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8,
                            105u8, 200u8, 214u8, 27u8, 144u8, 208u8, 218u8,
                            160u8, 130u8, 109u8, 101u8, 54u8, 210u8, 136u8,
                            71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8,
                            148u8, 156u8,
                        ],
                    )
                }
                #[doc = " Indicator for whether an emergency origin is even allowed to happen. Some chains may"]
                #[doc = " want to set this permanently to `false`, others may want to condition it on things such"]
                #[doc = " as an upgrade having happened recently."]
                pub fn instant_allowed(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<
                        ::core::primitive::bool,
                    >,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "Democracy",
                        "InstantAllowed",
                        [
                            165u8, 28u8, 112u8, 190u8, 18u8, 129u8, 182u8,
                            206u8, 237u8, 1u8, 68u8, 252u8, 125u8, 234u8,
                            185u8, 50u8, 149u8, 164u8, 47u8, 126u8, 134u8,
                            100u8, 14u8, 86u8, 209u8, 39u8, 20u8, 4u8, 233u8,
                            115u8, 102u8, 131u8,
                        ],
                    )
                }
                #[doc = " Minimum voting period allowed for a fast-track referendum."]
                pub fn fast_track_voting_period(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<::core::primitive::u64>,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "Democracy",
                        "FastTrackVotingPeriod",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8,
                            231u8, 190u8, 146u8, 59u8, 226u8, 157u8, 101u8,
                            103u8, 117u8, 249u8, 65u8, 18u8, 191u8, 103u8,
                            119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8,
                            239u8, 42u8, 246u8,
                        ],
                    )
                }
                #[doc = " Period in blocks where an external proposal may not be re-submitted after being vetoed."]
                pub fn cooloff_period(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<::core::primitive::u64>,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "Democracy",
                        "CooloffPeriod",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8,
                            231u8, 190u8, 146u8, 59u8, 226u8, 157u8, 101u8,
                            103u8, 117u8, 249u8, 65u8, 18u8, 191u8, 103u8,
                            119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8,
                            239u8, 42u8, 246u8,
                        ],
                    )
                }
                #[doc = " The amount of balance that must be deposited per byte of preimage stored."]
                pub fn preimage_byte_deposit(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<
                        ::core::primitive::u128,
                    >,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "Democracy",
                        "PreimageByteDeposit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8,
                            105u8, 200u8, 214u8, 27u8, 144u8, 208u8, 218u8,
                            160u8, 130u8, 109u8, 101u8, 54u8, 210u8, 136u8,
                            71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8,
                            148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The maximum number of votes for an account."]
                #[doc = ""]
                #[doc = " Also used to compute weight, an overly big value can"]
                #[doc = " lead to extrinsic with very big weight: see `delegate` for instance."]
                pub fn max_votes(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "Democracy",
                        "MaxVotes",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8,
                            200u8, 157u8, 125u8, 151u8, 53u8, 76u8, 168u8,
                            26u8, 10u8, 9u8, 98u8, 68u8, 9u8, 178u8, 197u8,
                            113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The maximum number of public proposals that can exist at any time."]
                pub fn max_proposals(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "Democracy",
                        "MaxProposals",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8,
                            200u8, 157u8, 125u8, 151u8, 53u8, 76u8, 168u8,
                            26u8, 10u8, 9u8, 98u8, 68u8, 9u8, 178u8, 197u8,
                            113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod council {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct SetMembers {
                pub new_members:
                    ::std::vec::Vec<::subxt::ext::sp_core::crypto::AccountId32>,
                pub prime: ::core::option::Option<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                >,
                pub old_count: ::core::primitive::u32,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Execute {
                pub proposal: ::std::boxed::Box<
                    runtime_types::webb_standalone_runtime::Call,
                >,
                #[codec(compact)]
                pub length_bound: ::core::primitive::u32,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Propose {
                #[codec(compact)]
                pub threshold: ::core::primitive::u32,
                pub proposal: ::std::boxed::Box<
                    runtime_types::webb_standalone_runtime::Call,
                >,
                #[codec(compact)]
                pub length_bound: ::core::primitive::u32,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Vote {
                pub proposal: ::subxt::ext::sp_core::H256,
                #[codec(compact)]
                pub index: ::core::primitive::u32,
                pub approve: ::core::primitive::bool,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Close {
                pub proposal_hash: ::subxt::ext::sp_core::H256,
                #[codec(compact)]
                pub index: ::core::primitive::u32,
                #[codec(compact)]
                pub proposal_weight_bound:
                    runtime_types::frame_support::weights::weight_v2::Weight,
                #[codec(compact)]
                pub length_bound: ::core::primitive::u32,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct DisapproveProposal {
                pub proposal_hash: ::subxt::ext::sp_core::H256,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Set the collective's membership."]
                #[doc = ""]
                #[doc = "- `new_members`: The new member list. Be nice to the chain and provide it sorted."]
                #[doc = "- `prime`: The prime member whose vote sets the default."]
                #[doc = "- `old_count`: The upper bound for the previous number of members in storage. Used for"]
                #[doc = "  weight estimation."]
                #[doc = ""]
                #[doc = "Requires root origin."]
                #[doc = ""]
                #[doc = "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but"]
                #[doc = "      the weight estimations rely on it to estimate dispatchable weight."]
                #[doc = ""]
                #[doc = "# WARNING:"]
                #[doc = ""]
                #[doc = "The `pallet-collective` can also be managed by logic outside of the pallet through the"]
                #[doc = "implementation of the trait [`ChangeMembers`]."]
                #[doc = "Any call to `set_members` must be careful that the member set doesn't get out of sync"]
                #[doc = "with other logic managing the member set."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "## Weight"]
                #[doc = "- `O(MP + N)` where:"]
                #[doc = "  - `M` old-members-count (code- and governance-bounded)"]
                #[doc = "  - `N` new-members-count (code- and governance-bounded)"]
                #[doc = "  - `P` proposals-count (code-bounded)"]
                #[doc = "- DB:"]
                #[doc = "  - 1 storage mutation (codec `O(M)` read, `O(N)` write) for reading and writing the"]
                #[doc = "    members"]
                #[doc = "  - 1 storage read (codec `O(P)`) for reading the proposals"]
                #[doc = "  - `P` storage mutations (codec `O(M)`) for updating the votes for each proposal"]
                #[doc = "  - 1 storage write (codec `O(1)`) for deleting the old `prime` and setting the new one"]
                #[doc = "# </weight>"]
                pub fn set_members(
                    &self,
                    new_members: ::std::vec::Vec<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                    >,
                    prime: ::core::option::Option<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                    >,
                    old_count: ::core::primitive::u32,
                ) -> ::subxt::tx::StaticTxPayload<SetMembers> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Council",
                        "set_members",
                        SetMembers {
                            new_members,
                            prime,
                            old_count,
                        },
                        [
                            196u8, 103u8, 123u8, 125u8, 226u8, 177u8, 126u8,
                            37u8, 160u8, 114u8, 34u8, 136u8, 219u8, 84u8,
                            199u8, 94u8, 242u8, 20u8, 126u8, 126u8, 166u8,
                            190u8, 198u8, 33u8, 162u8, 113u8, 237u8, 222u8,
                            90u8, 1u8, 2u8, 234u8,
                        ],
                    )
                }
                #[doc = "Dispatch a proposal from a member using the `Member` origin."]
                #[doc = ""]
                #[doc = "Origin must be a member of the collective."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "## Weight"]
                #[doc = "- `O(M + P)` where `M` members-count (code-bounded) and `P` complexity of dispatching"]
                #[doc = "  `proposal`"]
                #[doc = "- DB: 1 read (codec `O(M)`) + DB access of `proposal`"]
                #[doc = "- 1 event"]
                #[doc = "# </weight>"]
                pub fn execute(
                    &self,
                    proposal: runtime_types::webb_standalone_runtime::Call,
                    length_bound: ::core::primitive::u32,
                ) -> ::subxt::tx::StaticTxPayload<Execute> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Council",
                        "execute",
                        Execute {
                            proposal: ::std::boxed::Box::new(proposal),
                            length_bound,
                        },
                        [
                            188u8, 0u8, 10u8, 221u8, 110u8, 167u8, 121u8,
                            147u8, 170u8, 188u8, 249u8, 194u8, 144u8, 91u8,
                            155u8, 128u8, 31u8, 244u8, 222u8, 184u8, 127u8,
                            122u8, 37u8, 172u8, 177u8, 210u8, 98u8, 136u8,
                            188u8, 78u8, 20u8, 216u8,
                        ],
                    )
                }
                #[doc = "Add a new proposal to either be voted on or executed directly."]
                #[doc = ""]
                #[doc = "Requires the sender to be member."]
                #[doc = ""]
                #[doc = "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)"]
                #[doc = "or put up for voting."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "## Weight"]
                #[doc = "- `O(B + M + P1)` or `O(B + M + P2)` where:"]
                #[doc = "  - `B` is `proposal` size in bytes (length-fee-bounded)"]
                #[doc = "  - `M` is members-count (code- and governance-bounded)"]
                #[doc = "  - branching is influenced by `threshold` where:"]
                #[doc = "    - `P1` is proposal execution complexity (`threshold < 2`)"]
                #[doc = "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)"]
                #[doc = "- DB:"]
                #[doc = "  - 1 storage read `is_member` (codec `O(M)`)"]
                #[doc = "  - 1 storage read `ProposalOf::contains_key` (codec `O(1)`)"]
                #[doc = "  - DB accesses influenced by `threshold`:"]
                #[doc = "    - EITHER storage accesses done by `proposal` (`threshold < 2`)"]
                #[doc = "    - OR proposal insertion (`threshold <= 2`)"]
                #[doc = "      - 1 storage mutation `Proposals` (codec `O(P2)`)"]
                #[doc = "      - 1 storage mutation `ProposalCount` (codec `O(1)`)"]
                #[doc = "      - 1 storage write `ProposalOf` (codec `O(B)`)"]
                #[doc = "      - 1 storage write `Voting` (codec `O(M)`)"]
                #[doc = "  - 1 event"]
                #[doc = "# </weight>"]
                pub fn propose(
                    &self,
                    threshold: ::core::primitive::u32,
                    proposal: runtime_types::webb_standalone_runtime::Call,
                    length_bound: ::core::primitive::u32,
                ) -> ::subxt::tx::StaticTxPayload<Propose> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Council",
                        "propose",
                        Propose {
                            threshold,
                            proposal: ::std::boxed::Box::new(proposal),
                            length_bound,
                        },
                        [
                            61u8, 23u8, 182u8, 157u8, 91u8, 67u8, 30u8, 86u8,
                            137u8, 178u8, 0u8, 203u8, 27u8, 157u8, 203u8, 50u8,
                            13u8, 202u8, 81u8, 86u8, 220u8, 220u8, 144u8,
                            245u8, 49u8, 198u8, 66u8, 6u8, 239u8, 102u8, 205u8,
                            252u8,
                        ],
                    )
                }
                #[doc = "Add an aye or nay vote for the sender to the given proposal."]
                #[doc = ""]
                #[doc = "Requires the sender to be a member."]
                #[doc = ""]
                #[doc = "Transaction fees will be waived if the member is voting on any particular proposal"]
                #[doc = "for the first time and the call is successful. Subsequent vote changes will charge a"]
                #[doc = "fee."]
                #[doc = "# <weight>"]
                #[doc = "## Weight"]
                #[doc = "- `O(M)` where `M` is members-count (code- and governance-bounded)"]
                #[doc = "- DB:"]
                #[doc = "  - 1 storage read `Members` (codec `O(M)`)"]
                #[doc = "  - 1 storage mutation `Voting` (codec `O(M)`)"]
                #[doc = "- 1 event"]
                #[doc = "# </weight>"]
                pub fn vote(
                    &self,
                    proposal: ::subxt::ext::sp_core::H256,
                    index: ::core::primitive::u32,
                    approve: ::core::primitive::bool,
                ) -> ::subxt::tx::StaticTxPayload<Vote> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Council",
                        "vote",
                        Vote {
                            proposal,
                            index,
                            approve,
                        },
                        [
                            108u8, 46u8, 180u8, 148u8, 145u8, 24u8, 173u8,
                            56u8, 36u8, 100u8, 216u8, 43u8, 178u8, 202u8, 26u8,
                            136u8, 93u8, 84u8, 80u8, 134u8, 14u8, 42u8, 248u8,
                            205u8, 68u8, 92u8, 79u8, 11u8, 113u8, 115u8, 157u8,
                            100u8,
                        ],
                    )
                }
                #[doc = "Close a vote that is either approved, disapproved or whose voting period has ended."]
                #[doc = ""]
                #[doc = "May be called by any signed account in order to finish voting and close the proposal."]
                #[doc = ""]
                #[doc = "If called before the end of the voting period it will only close the vote if it is"]
                #[doc = "has enough votes to be approved or disapproved."]
                #[doc = ""]
                #[doc = "If called after the end of the voting period abstentions are counted as rejections"]
                #[doc = "unless there is a prime member set and the prime member cast an approval."]
                #[doc = ""]
                #[doc = "If the close operation completes successfully with disapproval, the transaction fee will"]
                #[doc = "be waived. Otherwise execution of the approved operation will be charged to the caller."]
                #[doc = ""]
                #[doc = "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed"]
                #[doc = "proposal."]
                #[doc = "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via"]
                #[doc = "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "## Weight"]
                #[doc = "- `O(B + M + P1 + P2)` where:"]
                #[doc = "  - `B` is `proposal` size in bytes (length-fee-bounded)"]
                #[doc = "  - `M` is members-count (code- and governance-bounded)"]
                #[doc = "  - `P1` is the complexity of `proposal` preimage."]
                #[doc = "  - `P2` is proposal-count (code-bounded)"]
                #[doc = "- DB:"]
                #[doc = " - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)"]
                #[doc = " - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec"]
                #[doc = "   `O(P2)`)"]
                #[doc = " - any mutations done while executing `proposal` (`P1`)"]
                #[doc = "- up to 3 events"]
                #[doc = "# </weight>"]
                pub fn close(
                    &self,
                    proposal_hash: ::subxt::ext::sp_core::H256,
                    index: ::core::primitive::u32,
                    proposal_weight_bound : runtime_types :: frame_support :: weights :: weight_v2 :: Weight,
                    length_bound: ::core::primitive::u32,
                ) -> ::subxt::tx::StaticTxPayload<Close> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Council",
                        "close",
                        Close {
                            proposal_hash,
                            index,
                            proposal_weight_bound,
                            length_bound,
                        },
                        [
                            1u8, 155u8, 107u8, 199u8, 57u8, 58u8, 183u8, 207u8,
                            14u8, 156u8, 87u8, 209u8, 166u8, 10u8, 178u8,
                            169u8, 94u8, 221u8, 195u8, 185u8, 57u8, 6u8, 242u8,
                            78u8, 83u8, 169u8, 21u8, 206u8, 45u8, 209u8, 64u8,
                            7u8,
                        ],
                    )
                }
                #[doc = "Disapprove a proposal, close, and remove it from the system, regardless of its current"]
                #[doc = "state."]
                #[doc = ""]
                #[doc = "Must be called by the Root origin."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "* `proposal_hash`: The hash of the proposal that should be disapproved."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "Complexity: O(P) where P is the number of max proposals"]
                #[doc = "DB Weight:"]
                #[doc = "* Reads: Proposals"]
                #[doc = "* Writes: Voting, Proposals, ProposalOf"]
                #[doc = "# </weight>"]
                pub fn disapprove_proposal(
                    &self,
                    proposal_hash: ::subxt::ext::sp_core::H256,
                ) -> ::subxt::tx::StaticTxPayload<DisapproveProposal>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Council",
                        "disapprove_proposal",
                        DisapproveProposal { proposal_hash },
                        [
                            25u8, 123u8, 1u8, 8u8, 74u8, 37u8, 3u8, 40u8, 97u8,
                            37u8, 175u8, 224u8, 72u8, 155u8, 123u8, 109u8,
                            104u8, 43u8, 91u8, 125u8, 199u8, 51u8, 17u8, 225u8,
                            133u8, 38u8, 120u8, 76u8, 164u8, 5u8, 194u8, 201u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_collective::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "A motion (given hash) has been proposed (by given account) with a threshold (given"]
            #[doc = "`MemberCount`)."]
            pub struct Proposed {
                pub account: ::subxt::ext::sp_core::crypto::AccountId32,
                pub proposal_index: ::core::primitive::u32,
                pub proposal_hash: ::subxt::ext::sp_core::H256,
                pub threshold: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Proposed {
                const PALLET: &'static str = "Council";
                const EVENT: &'static str = "Proposed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "A motion (given hash) has been voted on by given account, leaving"]
            #[doc = "a tally (yes votes and no votes given respectively as `MemberCount`)."]
            pub struct Voted {
                pub account: ::subxt::ext::sp_core::crypto::AccountId32,
                pub proposal_hash: ::subxt::ext::sp_core::H256,
                pub voted: ::core::primitive::bool,
                pub yes: ::core::primitive::u32,
                pub no: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Voted {
                const PALLET: &'static str = "Council";
                const EVENT: &'static str = "Voted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "A motion was approved by the required threshold."]
            pub struct Approved {
                pub proposal_hash: ::subxt::ext::sp_core::H256,
            }
            impl ::subxt::events::StaticEvent for Approved {
                const PALLET: &'static str = "Council";
                const EVENT: &'static str = "Approved";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "A motion was not approved by the required threshold."]
            pub struct Disapproved {
                pub proposal_hash: ::subxt::ext::sp_core::H256,
            }
            impl ::subxt::events::StaticEvent for Disapproved {
                const PALLET: &'static str = "Council";
                const EVENT: &'static str = "Disapproved";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "A motion was executed; result will be `Ok` if it returned without error."]
            pub struct Executed {
                pub proposal_hash: ::subxt::ext::sp_core::H256,
                pub result: ::core::result::Result<
                    (),
                    runtime_types::sp_runtime::DispatchError,
                >,
            }
            impl ::subxt::events::StaticEvent for Executed {
                const PALLET: &'static str = "Council";
                const EVENT: &'static str = "Executed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "A single member did some action; result will be `Ok` if it returned without error."]
            pub struct MemberExecuted {
                pub proposal_hash: ::subxt::ext::sp_core::H256,
                pub result: ::core::result::Result<
                    (),
                    runtime_types::sp_runtime::DispatchError,
                >,
            }
            impl ::subxt::events::StaticEvent for MemberExecuted {
                const PALLET: &'static str = "Council";
                const EVENT: &'static str = "MemberExecuted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "A proposal was closed because its threshold was reached or after its duration was up."]
            pub struct Closed {
                pub proposal_hash: ::subxt::ext::sp_core::H256,
                pub yes: ::core::primitive::u32,
                pub no: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Closed {
                const PALLET: &'static str = "Council";
                const EVENT: &'static str = "Closed";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The hashes of the active proposals."]                pub fn proposals (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: sp_runtime :: bounded :: bounded_vec :: BoundedVec < :: subxt :: ext :: sp_core :: H256 > > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Council",
                        "Proposals",
                        vec![],
                        [
                            10u8, 133u8, 82u8, 54u8, 193u8, 41u8, 253u8, 159u8,
                            56u8, 96u8, 249u8, 148u8, 43u8, 57u8, 116u8, 43u8,
                            222u8, 243u8, 237u8, 231u8, 238u8, 60u8, 26u8,
                            225u8, 19u8, 203u8, 213u8, 220u8, 114u8, 217u8,
                            100u8, 27u8,
                        ],
                    )
                }
                #[doc = " Actual proposal for a given hash, if it's current."]                pub fn proposal_of (& self , _0 : impl :: std :: borrow :: Borrow < :: subxt :: ext :: sp_core :: H256 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: webb_standalone_runtime :: Call > , :: subxt :: storage :: address :: Yes , () , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Council",
                        "ProposalOf",
                        vec![::subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            ::subxt::storage::address::StorageHasher::Identity,
                        )],
                        [
                            247u8, 51u8, 80u8, 201u8, 184u8, 190u8, 35u8, 59u8,
                            105u8, 50u8, 56u8, 171u8, 109u8, 224u8, 155u8,
                            248u8, 144u8, 226u8, 24u8, 28u8, 92u8, 80u8, 153u8,
                            13u8, 29u8, 7u8, 195u8, 223u8, 144u8, 194u8, 186u8,
                            147u8,
                        ],
                    )
                }
                #[doc = " Actual proposal for a given hash, if it's current."]                pub fn proposal_of_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: webb_standalone_runtime :: Call > , () , () , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Council",
                        "ProposalOf",
                        Vec::new(),
                        [
                            247u8, 51u8, 80u8, 201u8, 184u8, 190u8, 35u8, 59u8,
                            105u8, 50u8, 56u8, 171u8, 109u8, 224u8, 155u8,
                            248u8, 144u8, 226u8, 24u8, 28u8, 92u8, 80u8, 153u8,
                            13u8, 29u8, 7u8, 195u8, 223u8, 144u8, 194u8, 186u8,
                            147u8,
                        ],
                    )
                }
                #[doc = " Votes on a given proposal, if it is ongoing."]                pub fn voting (& self , _0 : impl :: std :: borrow :: Borrow < :: subxt :: ext :: sp_core :: H256 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_collective :: Votes < :: subxt :: ext :: sp_core :: crypto :: AccountId32 , :: core :: primitive :: u64 > > , :: subxt :: storage :: address :: Yes , () , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Council",
                        "Voting",
                        vec![::subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            ::subxt::storage::address::StorageHasher::Identity,
                        )],
                        [
                            196u8, 125u8, 235u8, 241u8, 133u8, 204u8, 38u8,
                            98u8, 47u8, 247u8, 147u8, 35u8, 182u8, 90u8, 54u8,
                            9u8, 221u8, 16u8, 75u8, 55u8, 249u8, 186u8, 3u8,
                            160u8, 54u8, 217u8, 3u8, 59u8, 216u8, 249u8, 254u8,
                            86u8,
                        ],
                    )
                }
                #[doc = " Votes on a given proposal, if it is ongoing."]                pub fn voting_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_collective :: Votes < :: subxt :: ext :: sp_core :: crypto :: AccountId32 , :: core :: primitive :: u64 > > , () , () , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Council",
                        "Voting",
                        Vec::new(),
                        [
                            196u8, 125u8, 235u8, 241u8, 133u8, 204u8, 38u8,
                            98u8, 47u8, 247u8, 147u8, 35u8, 182u8, 90u8, 54u8,
                            9u8, 221u8, 16u8, 75u8, 55u8, 249u8, 186u8, 3u8,
                            160u8, 54u8, 217u8, 3u8, 59u8, 216u8, 249u8, 254u8,
                            86u8,
                        ],
                    )
                }
                #[doc = " Proposals so far."]                pub fn proposal_count (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u32 > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Council",
                        "ProposalCount",
                        vec![],
                        [
                            132u8, 145u8, 78u8, 218u8, 51u8, 189u8, 55u8,
                            172u8, 143u8, 33u8, 140u8, 99u8, 124u8, 208u8,
                            57u8, 232u8, 154u8, 110u8, 32u8, 142u8, 24u8,
                            149u8, 109u8, 105u8, 30u8, 83u8, 39u8, 177u8,
                            127u8, 160u8, 34u8, 70u8,
                        ],
                    )
                }
                #[doc = " The current members of the collective. This is stored sorted (just by value)."]                pub fn members (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: std :: vec :: Vec < :: subxt :: ext :: sp_core :: crypto :: AccountId32 > > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Council",
                        "Members",
                        vec![],
                        [
                            162u8, 72u8, 174u8, 204u8, 140u8, 105u8, 205u8,
                            176u8, 197u8, 117u8, 206u8, 134u8, 157u8, 110u8,
                            139u8, 54u8, 43u8, 233u8, 25u8, 51u8, 36u8, 238u8,
                            94u8, 124u8, 221u8, 52u8, 237u8, 71u8, 125u8, 56u8,
                            129u8, 222u8,
                        ],
                    )
                }
                #[doc = " The prime member that helps determine the default vote behavior in case of absentations."]                pub fn prime (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: subxt :: ext :: sp_core :: crypto :: AccountId32 > , :: subxt :: storage :: address :: Yes , () , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Council",
                        "Prime",
                        vec![],
                        [
                            108u8, 118u8, 54u8, 193u8, 207u8, 227u8, 119u8,
                            97u8, 23u8, 239u8, 157u8, 69u8, 56u8, 142u8, 106u8,
                            17u8, 215u8, 159u8, 48u8, 42u8, 185u8, 209u8, 49u8,
                            159u8, 32u8, 168u8, 111u8, 158u8, 159u8, 217u8,
                            244u8, 158u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod elections {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Vote {
                pub votes:
                    ::std::vec::Vec<::subxt::ext::sp_core::crypto::AccountId32>,
                #[codec(compact)]
                pub value: ::core::primitive::u128,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct RemoveVoter;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct SubmitCandidacy {
                #[codec(compact)]
                pub candidate_count: ::core::primitive::u32,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct RenounceCandidacy {
                pub renouncing:
                    runtime_types::pallet_elections_phragmen::Renouncing,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct RemoveMember {
                pub who: ::subxt::ext::sp_runtime::MultiAddress<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                pub slash_bond: ::core::primitive::bool,
                pub rerun_election: ::core::primitive::bool,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct CleanDefunctVoters {
                pub num_voters: ::core::primitive::u32,
                pub num_defunct: ::core::primitive::u32,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Vote for a set of candidates for the upcoming round of election. This can be called to"]
                #[doc = "set the initial votes, or update already existing votes."]
                #[doc = ""]
                #[doc = "Upon initial voting, `value` units of `who`'s balance is locked and a deposit amount is"]
                #[doc = "reserved. The deposit is based on the number of votes and can be updated over time."]
                #[doc = ""]
                #[doc = "The `votes` should:"]
                #[doc = "  - not be empty."]
                #[doc = "  - be less than the number of possible candidates. Note that all current members and"]
                #[doc = "    runners-up are also automatically candidates for the next round."]
                #[doc = ""]
                #[doc = "If `value` is more than `who`'s free balance, then the maximum of the two is used."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be signed."]
                #[doc = ""]
                #[doc = "### Warning"]
                #[doc = ""]
                #[doc = "It is the responsibility of the caller to **NOT** place all of their balance into the"]
                #[doc = "lock and keep some for further operations."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "We assume the maximum weight among all 3 cases: vote_equal, vote_more and vote_less."]
                #[doc = "# </weight>"]
                pub fn vote(
                    &self,
                    votes: ::std::vec::Vec<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                    >,
                    value: ::core::primitive::u128,
                ) -> ::subxt::tx::StaticTxPayload<Vote> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Elections",
                        "vote",
                        Vote { votes, value },
                        [
                            71u8, 90u8, 175u8, 225u8, 51u8, 202u8, 197u8,
                            252u8, 183u8, 92u8, 239u8, 83u8, 112u8, 144u8,
                            128u8, 211u8, 109u8, 33u8, 252u8, 6u8, 156u8, 15u8,
                            91u8, 88u8, 70u8, 19u8, 32u8, 29u8, 224u8, 255u8,
                            26u8, 145u8,
                        ],
                    )
                }
                #[doc = "Remove `origin` as a voter."]
                #[doc = ""]
                #[doc = "This removes the lock and returns the deposit."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be signed and be a voter."]
                pub fn remove_voter(
                    &self,
                ) -> ::subxt::tx::StaticTxPayload<RemoveVoter> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Elections",
                        "remove_voter",
                        RemoveVoter {},
                        [
                            254u8, 46u8, 140u8, 4u8, 218u8, 45u8, 150u8, 72u8,
                            67u8, 131u8, 108u8, 201u8, 46u8, 157u8, 104u8,
                            161u8, 53u8, 155u8, 130u8, 50u8, 88u8, 149u8,
                            255u8, 12u8, 17u8, 85u8, 95u8, 69u8, 153u8, 130u8,
                            221u8, 1u8,
                        ],
                    )
                }
                #[doc = "Submit oneself for candidacy. A fixed amount of deposit is recorded."]
                #[doc = ""]
                #[doc = "All candidates are wiped at the end of the term. They either become a member/runner-up,"]
                #[doc = "or leave the system while their deposit is slashed."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be signed."]
                #[doc = ""]
                #[doc = "### Warning"]
                #[doc = ""]
                #[doc = "Even if a candidate ends up being a member, they must call [`Call::renounce_candidacy`]"]
                #[doc = "to get their deposit back. Losing the spot in an election will always lead to a slash."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "The number of current candidates must be provided as witness data."]
                #[doc = "# </weight>"]
                pub fn submit_candidacy(
                    &self,
                    candidate_count: ::core::primitive::u32,
                ) -> ::subxt::tx::StaticTxPayload<SubmitCandidacy>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Elections",
                        "submit_candidacy",
                        SubmitCandidacy { candidate_count },
                        [
                            228u8, 63u8, 217u8, 99u8, 128u8, 104u8, 175u8,
                            10u8, 30u8, 35u8, 47u8, 14u8, 254u8, 122u8, 146u8,
                            239u8, 61u8, 145u8, 82u8, 7u8, 181u8, 98u8, 238u8,
                            208u8, 23u8, 84u8, 48u8, 255u8, 177u8, 255u8, 84u8,
                            83u8,
                        ],
                    )
                }
                #[doc = "Renounce one's intention to be a candidate for the next election round. 3 potential"]
                #[doc = "outcomes exist:"]
                #[doc = ""]
                #[doc = "- `origin` is a candidate and not elected in any set. In this case, the deposit is"]
                #[doc = "  unreserved, returned and origin is removed as a candidate."]
                #[doc = "- `origin` is a current runner-up. In this case, the deposit is unreserved, returned and"]
                #[doc = "  origin is removed as a runner-up."]
                #[doc = "- `origin` is a current member. In this case, the deposit is unreserved and origin is"]
                #[doc = "  removed as a member, consequently not being a candidate for the next round anymore."]
                #[doc = "  Similar to [`remove_member`](Self::remove_member), if replacement runners exists, they"]
                #[doc = "  are immediately used. If the prime is renouncing, then no prime will exist until the"]
                #[doc = "  next round."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be signed, and have one of the above roles."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "The type of renouncing must be provided as witness data."]
                #[doc = "# </weight>"]
                pub fn renounce_candidacy(
                    &self,
                    renouncing : runtime_types :: pallet_elections_phragmen :: Renouncing,
                ) -> ::subxt::tx::StaticTxPayload<RenounceCandidacy>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Elections",
                        "renounce_candidacy",
                        RenounceCandidacy { renouncing },
                        [
                            70u8, 72u8, 208u8, 36u8, 80u8, 245u8, 224u8, 75u8,
                            60u8, 142u8, 19u8, 49u8, 142u8, 90u8, 14u8, 69u8,
                            15u8, 61u8, 170u8, 235u8, 16u8, 252u8, 86u8, 200u8,
                            120u8, 127u8, 36u8, 42u8, 143u8, 130u8, 217u8,
                            128u8,
                        ],
                    )
                }
                #[doc = "Remove a particular member from the set. This is effective immediately and the bond of"]
                #[doc = "the outgoing member is slashed."]
                #[doc = ""]
                #[doc = "If a runner-up is available, then the best runner-up will be removed and replaces the"]
                #[doc = "outgoing member. Otherwise, if `rerun_election` is `true`, a new phragmen election is"]
                #[doc = "started, else, nothing happens."]
                #[doc = ""]
                #[doc = "If `slash_bond` is set to true, the bond of the member being removed is slashed. Else,"]
                #[doc = "it is returned."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be root."]
                #[doc = ""]
                #[doc = "Note that this does not affect the designated block number of the next election."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "If we have a replacement, we use a small weight. Else, since this is a root call and"]
                #[doc = "will go into phragmen, we assume full block for now."]
                #[doc = "# </weight>"]
                pub fn remove_member(
                    &self,
                    who: ::subxt::ext::sp_runtime::MultiAddress<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    slash_bond: ::core::primitive::bool,
                    rerun_election: ::core::primitive::bool,
                ) -> ::subxt::tx::StaticTxPayload<RemoveMember>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Elections",
                        "remove_member",
                        RemoveMember {
                            who,
                            slash_bond,
                            rerun_election,
                        },
                        [
                            178u8, 90u8, 236u8, 184u8, 2u8, 67u8, 51u8, 162u8,
                            83u8, 131u8, 242u8, 137u8, 17u8, 243u8, 209u8,
                            110u8, 26u8, 238u8, 178u8, 136u8, 84u8, 74u8,
                            216u8, 173u8, 221u8, 82u8, 179u8, 218u8, 162u8,
                            159u8, 185u8, 59u8,
                        ],
                    )
                }
                #[doc = "Clean all voters who are defunct (i.e. they do not serve any purpose at all). The"]
                #[doc = "deposit of the removed voters are returned."]
                #[doc = ""]
                #[doc = "This is an root function to be used only for cleaning the state."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be root."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "The total number of voters and those that are defunct must be provided as witness data."]
                #[doc = "# </weight>"]
                pub fn clean_defunct_voters(
                    &self,
                    num_voters: ::core::primitive::u32,
                    num_defunct: ::core::primitive::u32,
                ) -> ::subxt::tx::StaticTxPayload<CleanDefunctVoters>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Elections",
                        "clean_defunct_voters",
                        CleanDefunctVoters {
                            num_voters,
                            num_defunct,
                        },
                        [
                            198u8, 162u8, 30u8, 249u8, 191u8, 38u8, 141u8,
                            123u8, 230u8, 90u8, 213u8, 103u8, 168u8, 28u8, 5u8,
                            215u8, 213u8, 152u8, 46u8, 189u8, 238u8, 209u8,
                            209u8, 142u8, 159u8, 222u8, 161u8, 26u8, 161u8,
                            250u8, 9u8, 100u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event =
            runtime_types::pallet_elections_phragmen::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "A new term with new_members. This indicates that enough candidates existed to run"]
            #[doc = "the election, not that enough have has been elected. The inner value must be examined"]
            #[doc = "for this purpose. A `NewTerm(\\[\\])` indicates that some candidates got their bond"]
            #[doc = "slashed and none were elected, whilst `EmptyTerm` means that no candidates existed to"]
            #[doc = "begin with."]
            pub struct NewTerm {
                pub new_members: ::std::vec::Vec<(
                    ::subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u128,
                )>,
            }
            impl ::subxt::events::StaticEvent for NewTerm {
                const PALLET: &'static str = "Elections";
                const EVENT: &'static str = "NewTerm";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "No (or not enough) candidates existed for this round. This is different from"]
            #[doc = "`NewTerm(\\[\\])`. See the description of `NewTerm`."]
            pub struct EmptyTerm;
            impl ::subxt::events::StaticEvent for EmptyTerm {
                const PALLET: &'static str = "Elections";
                const EVENT: &'static str = "EmptyTerm";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "Internal error happened while trying to perform election."]
            pub struct ElectionError;
            impl ::subxt::events::StaticEvent for ElectionError {
                const PALLET: &'static str = "Elections";
                const EVENT: &'static str = "ElectionError";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "A member has been removed. This should always be followed by either `NewTerm` or"]
            #[doc = "`EmptyTerm`."]
            pub struct MemberKicked {
                pub member: ::subxt::ext::sp_core::crypto::AccountId32,
            }
            impl ::subxt::events::StaticEvent for MemberKicked {
                const PALLET: &'static str = "Elections";
                const EVENT: &'static str = "MemberKicked";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "Someone has renounced their candidacy."]
            pub struct Renounced {
                pub candidate: ::subxt::ext::sp_core::crypto::AccountId32,
            }
            impl ::subxt::events::StaticEvent for Renounced {
                const PALLET: &'static str = "Elections";
                const EVENT: &'static str = "Renounced";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "A candidate was slashed by amount due to failing to obtain a seat as member or"]
            #[doc = "runner-up."]
            #[doc = ""]
            #[doc = "Note that old members and runners-up are also candidates."]
            pub struct CandidateSlashed {
                pub candidate: ::subxt::ext::sp_core::crypto::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for CandidateSlashed {
                const PALLET: &'static str = "Elections";
                const EVENT: &'static str = "CandidateSlashed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "A seat holder was slashed by amount by being forcefully removed from the set."]
            pub struct SeatHolderSlashed {
                pub seat_holder: ::subxt::ext::sp_core::crypto::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for SeatHolderSlashed {
                const PALLET: &'static str = "Elections";
                const EVENT: &'static str = "SeatHolderSlashed";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The current elected members."]
                #[doc = ""]
                #[doc = " Invariant: Always sorted based on account id."]                pub fn members (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: std :: vec :: Vec < runtime_types :: pallet_elections_phragmen :: SeatHolder < :: subxt :: ext :: sp_core :: crypto :: AccountId32 , :: core :: primitive :: u128 > > > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Elections",
                        "Members",
                        vec![],
                        [
                            2u8, 182u8, 43u8, 180u8, 87u8, 185u8, 26u8, 79u8,
                            196u8, 55u8, 28u8, 26u8, 174u8, 133u8, 158u8,
                            221u8, 101u8, 161u8, 83u8, 9u8, 221u8, 175u8,
                            221u8, 220u8, 81u8, 80u8, 1u8, 236u8, 74u8, 121u8,
                            10u8, 82u8,
                        ],
                    )
                }
                #[doc = " The current reserved runners-up."]
                #[doc = ""]
                #[doc = " Invariant: Always sorted based on rank (worse to best). Upon removal of a member, the"]
                #[doc = " last (i.e. _best_) runner-up will be replaced."]                pub fn runners_up (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: std :: vec :: Vec < runtime_types :: pallet_elections_phragmen :: SeatHolder < :: subxt :: ext :: sp_core :: crypto :: AccountId32 , :: core :: primitive :: u128 > > > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Elections",
                        "RunnersUp",
                        vec![],
                        [
                            248u8, 81u8, 190u8, 53u8, 121u8, 49u8, 55u8, 69u8,
                            116u8, 177u8, 46u8, 30u8, 131u8, 14u8, 32u8, 198u8,
                            10u8, 132u8, 73u8, 117u8, 2u8, 146u8, 188u8, 146u8,
                            214u8, 227u8, 97u8, 77u8, 7u8, 131u8, 208u8, 209u8,
                        ],
                    )
                }
                #[doc = " The present candidate list. A current member or runner-up can never enter this vector"]
                #[doc = " and is always implicitly assumed to be a candidate."]
                #[doc = ""]
                #[doc = " Second element is the deposit."]
                #[doc = ""]
                #[doc = " Invariant: Always sorted based on account id."]                pub fn candidates (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: std :: vec :: Vec < (:: subxt :: ext :: sp_core :: crypto :: AccountId32 , :: core :: primitive :: u128 ,) > > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Elections",
                        "Candidates",
                        vec![],
                        [
                            224u8, 107u8, 141u8, 11u8, 54u8, 86u8, 117u8, 45u8,
                            195u8, 252u8, 152u8, 21u8, 165u8, 23u8, 198u8,
                            117u8, 5u8, 216u8, 183u8, 163u8, 243u8, 56u8, 11u8,
                            102u8, 85u8, 107u8, 219u8, 250u8, 45u8, 80u8,
                            108u8, 127u8,
                        ],
                    )
                }
                #[doc = " The total number of vote rounds that have happened, excluding the upcoming one."]                pub fn election_rounds (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u32 > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Elections",
                        "ElectionRounds",
                        vec![],
                        [
                            144u8, 146u8, 10u8, 32u8, 149u8, 147u8, 59u8,
                            205u8, 61u8, 246u8, 28u8, 169u8, 130u8, 136u8,
                            143u8, 104u8, 253u8, 86u8, 228u8, 68u8, 19u8,
                            184u8, 166u8, 214u8, 58u8, 103u8, 176u8, 160u8,
                            240u8, 249u8, 117u8, 115u8,
                        ],
                    )
                }
                #[doc = " Votes and locked stake of a particular voter."]
                #[doc = ""]
                #[doc = " TWOX-NOTE: SAFE as `AccountId` is a crypto hash."]                pub fn voting (& self , _0 : impl :: std :: borrow :: Borrow < :: subxt :: ext :: sp_core :: crypto :: AccountId32 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_elections_phragmen :: Voter < :: subxt :: ext :: sp_core :: crypto :: AccountId32 , :: core :: primitive :: u128 > > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("Elections" , "Voting" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Twox64Concat)] , [9u8 , 135u8 , 76u8 , 194u8 , 240u8 , 182u8 , 111u8 , 207u8 , 102u8 , 37u8 , 126u8 , 36u8 , 84u8 , 112u8 , 26u8 , 216u8 , 175u8 , 5u8 , 14u8 , 189u8 , 83u8 , 185u8 , 136u8 , 39u8 , 171u8 , 221u8 , 147u8 , 20u8 , 168u8 , 126u8 , 111u8 , 137u8 ,])
                }
                #[doc = " Votes and locked stake of a particular voter."]
                #[doc = ""]
                #[doc = " TWOX-NOTE: SAFE as `AccountId` is a crypto hash."]                pub fn voting_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_elections_phragmen :: Voter < :: subxt :: ext :: sp_core :: crypto :: AccountId32 , :: core :: primitive :: u128 > > , () , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Elections",
                        "Voting",
                        Vec::new(),
                        [
                            9u8, 135u8, 76u8, 194u8, 240u8, 182u8, 111u8,
                            207u8, 102u8, 37u8, 126u8, 36u8, 84u8, 112u8, 26u8,
                            216u8, 175u8, 5u8, 14u8, 189u8, 83u8, 185u8, 136u8,
                            39u8, 171u8, 221u8, 147u8, 20u8, 168u8, 126u8,
                            111u8, 137u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " Identifier for the elections-phragmen pallet's lock"]
                pub fn pallet_id(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<
                        [::core::primitive::u8; 8usize],
                    >,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "Elections",
                        "PalletId",
                        [
                            224u8, 197u8, 247u8, 125u8, 62u8, 180u8, 69u8,
                            91u8, 226u8, 36u8, 82u8, 148u8, 70u8, 147u8, 209u8,
                            40u8, 210u8, 229u8, 181u8, 191u8, 170u8, 205u8,
                            138u8, 97u8, 127u8, 59u8, 124u8, 244u8, 252u8,
                            30u8, 213u8, 179u8,
                        ],
                    )
                }
                #[doc = " How much should be locked up in order to submit one's candidacy."]
                pub fn candidacy_bond(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<
                        ::core::primitive::u128,
                    >,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "Elections",
                        "CandidacyBond",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8,
                            105u8, 200u8, 214u8, 27u8, 144u8, 208u8, 218u8,
                            160u8, 130u8, 109u8, 101u8, 54u8, 210u8, 136u8,
                            71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8,
                            148u8, 156u8,
                        ],
                    )
                }
                #[doc = " Base deposit associated with voting."]
                #[doc = ""]
                #[doc = " This should be sensibly high to economically ensure the pallet cannot be attacked by"]
                #[doc = " creating a gigantic number of votes."]
                pub fn voting_bond_base(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<
                        ::core::primitive::u128,
                    >,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "Elections",
                        "VotingBondBase",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8,
                            105u8, 200u8, 214u8, 27u8, 144u8, 208u8, 218u8,
                            160u8, 130u8, 109u8, 101u8, 54u8, 210u8, 136u8,
                            71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8,
                            148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The amount of bond that need to be locked for each vote (32 bytes)."]
                pub fn voting_bond_factor(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<
                        ::core::primitive::u128,
                    >,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "Elections",
                        "VotingBondFactor",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8,
                            105u8, 200u8, 214u8, 27u8, 144u8, 208u8, 218u8,
                            160u8, 130u8, 109u8, 101u8, 54u8, 210u8, 136u8,
                            71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8,
                            148u8, 156u8,
                        ],
                    )
                }
                #[doc = " Number of members to elect."]
                pub fn desired_members(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "Elections",
                        "DesiredMembers",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8,
                            200u8, 157u8, 125u8, 151u8, 53u8, 76u8, 168u8,
                            26u8, 10u8, 9u8, 98u8, 68u8, 9u8, 178u8, 197u8,
                            113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Number of runners_up to keep."]
                pub fn desired_runners_up(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "Elections",
                        "DesiredRunnersUp",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8,
                            200u8, 157u8, 125u8, 151u8, 53u8, 76u8, 168u8,
                            26u8, 10u8, 9u8, 98u8, 68u8, 9u8, 178u8, 197u8,
                            113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " How long each seat is kept. This defines the next block number at which an election"]
                #[doc = " round will happen. If set to zero, no elections are ever triggered and the module will"]
                #[doc = " be in passive mode."]
                pub fn term_duration(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<::core::primitive::u64>,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "Elections",
                        "TermDuration",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8,
                            231u8, 190u8, 146u8, 59u8, 226u8, 157u8, 101u8,
                            103u8, 117u8, 249u8, 65u8, 18u8, 191u8, 103u8,
                            119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8,
                            239u8, 42u8, 246u8,
                        ],
                    )
                }
                #[doc = " The maximum number of candidates in a phragmen election."]
                #[doc = ""]
                #[doc = " Warning: The election happens onchain, and this value will determine"]
                #[doc = " the size of the election. When this limit is reached no more"]
                #[doc = " candidates are accepted in the election."]
                pub fn max_candidates(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "Elections",
                        "MaxCandidates",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8,
                            200u8, 157u8, 125u8, 151u8, 53u8, 76u8, 168u8,
                            26u8, 10u8, 9u8, 98u8, 68u8, 9u8, 178u8, 197u8,
                            113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The maximum number of voters to allow in a phragmen election."]
                #[doc = ""]
                #[doc = " Warning: This impacts the size of the election which is run onchain."]
                #[doc = " When the limit is reached the new voters are ignored."]
                pub fn max_voters(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "Elections",
                        "MaxVoters",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8,
                            200u8, 157u8, 125u8, 151u8, 53u8, 76u8, 168u8,
                            26u8, 10u8, 9u8, 98u8, 68u8, 9u8, 178u8, 197u8,
                            113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod grandpa {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct ReportEquivocation {
                pub equivocation_proof: ::std::boxed::Box<
                    runtime_types::sp_finality_grandpa::EquivocationProof<
                        ::subxt::ext::sp_core::H256,
                        ::core::primitive::u64,
                    >,
                >,
                pub key_owner_proof: runtime_types::sp_session::MembershipProof,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct ReportEquivocationUnsigned {
                pub equivocation_proof: ::std::boxed::Box<
                    runtime_types::sp_finality_grandpa::EquivocationProof<
                        ::subxt::ext::sp_core::H256,
                        ::core::primitive::u64,
                    >,
                >,
                pub key_owner_proof: runtime_types::sp_session::MembershipProof,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct NoteStalled {
                pub delay: ::core::primitive::u64,
                pub best_finalized_block_number: ::core::primitive::u64,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Report voter equivocation/misbehavior. This method will verify the"]
                #[doc = "equivocation proof and validate the given key ownership proof"]
                #[doc = "against the extracted offender. If both are valid, the offence"]
                #[doc = "will be reported."]
                pub fn report_equivocation(
                    &self,
                    equivocation_proof : runtime_types :: sp_finality_grandpa :: EquivocationProof < :: subxt :: ext :: sp_core :: H256 , :: core :: primitive :: u64 >,
                    key_owner_proof: runtime_types::sp_session::MembershipProof,
                ) -> ::subxt::tx::StaticTxPayload<ReportEquivocation>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Grandpa",
                        "report_equivocation",
                        ReportEquivocation {
                            equivocation_proof: ::std::boxed::Box::new(
                                equivocation_proof,
                            ),
                            key_owner_proof,
                        },
                        [
                            99u8, 148u8, 112u8, 118u8, 17u8, 142u8, 167u8,
                            162u8, 101u8, 236u8, 46u8, 164u8, 81u8, 182u8,
                            18u8, 159u8, 141u8, 43u8, 173u8, 120u8, 28u8,
                            168u8, 90u8, 243u8, 108u8, 108u8, 207u8, 156u8,
                            162u8, 101u8, 205u8, 181u8,
                        ],
                    )
                }
                #[doc = "Report voter equivocation/misbehavior. This method will verify the"]
                #[doc = "equivocation proof and validate the given key ownership proof"]
                #[doc = "against the extracted offender. If both are valid, the offence"]
                #[doc = "will be reported."]
                #[doc = ""]
                #[doc = "This extrinsic must be called unsigned and it is expected that only"]
                #[doc = "block authors will call it (validated in `ValidateUnsigned`), as such"]
                #[doc = "if the block author is defined it will be defined as the equivocation"]
                #[doc = "reporter."]
                pub fn report_equivocation_unsigned(
                    &self,
                    equivocation_proof : runtime_types :: sp_finality_grandpa :: EquivocationProof < :: subxt :: ext :: sp_core :: H256 , :: core :: primitive :: u64 >,
                    key_owner_proof: runtime_types::sp_session::MembershipProof,
                ) -> ::subxt::tx::StaticTxPayload<ReportEquivocationUnsigned>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Grandpa",
                        "report_equivocation_unsigned",
                        ReportEquivocationUnsigned {
                            equivocation_proof: ::std::boxed::Box::new(
                                equivocation_proof,
                            ),
                            key_owner_proof,
                        },
                        [
                            205u8, 218u8, 179u8, 128u8, 57u8, 43u8, 124u8,
                            211u8, 44u8, 244u8, 200u8, 204u8, 188u8, 106u8,
                            114u8, 147u8, 37u8, 240u8, 75u8, 172u8, 175u8,
                            94u8, 197u8, 114u8, 53u8, 192u8, 157u8, 87u8,
                            108u8, 60u8, 81u8, 198u8,
                        ],
                    )
                }
                #[doc = "Note that the current authority set of the GRANDPA finality gadget has stalled."]
                #[doc = ""]
                #[doc = "This will trigger a forced authority set change at the beginning of the next session, to"]
                #[doc = "be enacted `delay` blocks after that. The `delay` should be high enough to safely assume"]
                #[doc = "that the block signalling the forced change will not be re-orged e.g. 1000 blocks."]
                #[doc = "The block production rate (which may be slowed down because of finality lagging) should"]
                #[doc = "be taken into account when choosing the `delay`. The GRANDPA voters based on the new"]
                #[doc = "authority will start voting on top of `best_finalized_block_number` for new finalized"]
                #[doc = "blocks. `best_finalized_block_number` should be the highest of the latest finalized"]
                #[doc = "block of all validators of the new authority set."]
                #[doc = ""]
                #[doc = "Only callable by root."]
                pub fn note_stalled(
                    &self,
                    delay: ::core::primitive::u64,
                    best_finalized_block_number: ::core::primitive::u64,
                ) -> ::subxt::tx::StaticTxPayload<NoteStalled> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Grandpa",
                        "note_stalled",
                        NoteStalled {
                            delay,
                            best_finalized_block_number,
                        },
                        [
                            97u8, 60u8, 121u8, 239u8, 221u8, 126u8, 45u8,
                            211u8, 169u8, 129u8, 54u8, 35u8, 65u8, 117u8,
                            224u8, 174u8, 189u8, 55u8, 189u8, 91u8, 217u8,
                            66u8, 39u8, 52u8, 24u8, 247u8, 108u8, 169u8, 128u8,
                            85u8, 43u8, 24u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_grandpa::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "New authority set has been applied."]
            pub struct NewAuthorities {
                pub authority_set: ::std::vec::Vec<(
                    runtime_types::sp_finality_grandpa::app::Public,
                    ::core::primitive::u64,
                )>,
            }
            impl ::subxt::events::StaticEvent for NewAuthorities {
                const PALLET: &'static str = "Grandpa";
                const EVENT: &'static str = "NewAuthorities";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "Current authority set has been paused."]
            pub struct Paused;
            impl ::subxt::events::StaticEvent for Paused {
                const PALLET: &'static str = "Grandpa";
                const EVENT: &'static str = "Paused";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "Current authority set has been resumed."]
            pub struct Resumed;
            impl ::subxt::events::StaticEvent for Resumed {
                const PALLET: &'static str = "Grandpa";
                const EVENT: &'static str = "Resumed";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " State of the current authority set."]                pub fn state (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_grandpa :: StoredState < :: core :: primitive :: u64 > > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Grandpa",
                        "State",
                        vec![],
                        [
                            254u8, 245u8, 141u8, 149u8, 219u8, 90u8, 110u8,
                            106u8, 87u8, 147u8, 144u8, 230u8, 186u8, 178u8,
                            183u8, 85u8, 226u8, 100u8, 127u8, 253u8, 71u8,
                            245u8, 52u8, 200u8, 13u8, 242u8, 62u8, 222u8, 72u8,
                            117u8, 253u8, 231u8,
                        ],
                    )
                }
                #[doc = " Pending change: (signaled at, scheduled change)."]                pub fn pending_change (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_grandpa :: StoredPendingChange < :: core :: primitive :: u64 > > , :: subxt :: storage :: address :: Yes , () , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Grandpa",
                        "PendingChange",
                        vec![],
                        [
                            145u8, 1u8, 218u8, 98u8, 162u8, 146u8, 154u8,
                            117u8, 212u8, 77u8, 20u8, 60u8, 99u8, 165u8, 118u8,
                            179u8, 100u8, 222u8, 218u8, 106u8, 200u8, 139u8,
                            247u8, 19u8, 215u8, 227u8, 1u8, 190u8, 45u8, 240u8,
                            115u8, 44u8,
                        ],
                    )
                }
                #[doc = " next block number where we can force a change."]                pub fn next_forced (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u64 > , :: subxt :: storage :: address :: Yes , () , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Grandpa",
                        "NextForced",
                        vec![],
                        [
                            129u8, 1u8, 76u8, 115u8, 147u8, 51u8, 231u8, 215u8,
                            202u8, 18u8, 5u8, 115u8, 105u8, 172u8, 124u8, 44u8,
                            57u8, 152u8, 78u8, 72u8, 125u8, 108u8, 52u8, 83u8,
                            37u8, 100u8, 112u8, 115u8, 10u8, 153u8, 83u8,
                            251u8,
                        ],
                    )
                }
                #[doc = " `true` if we are currently stalled."]                pub fn stalled (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < (:: core :: primitive :: u64 , :: core :: primitive :: u64 ,) > , :: subxt :: storage :: address :: Yes , () , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Grandpa",
                        "Stalled",
                        vec![],
                        [
                            250u8, 88u8, 175u8, 251u8, 162u8, 216u8, 94u8,
                            93u8, 238u8, 2u8, 26u8, 67u8, 158u8, 242u8, 168u8,
                            120u8, 112u8, 217u8, 191u8, 189u8, 70u8, 158u8,
                            122u8, 130u8, 28u8, 205u8, 34u8, 245u8, 45u8,
                            178u8, 85u8, 120u8,
                        ],
                    )
                }
                #[doc = " The number of changes (both in terms of keys and underlying economic responsibilities)"]
                #[doc = " in the \"set\" of Grandpa validators from genesis."]                pub fn current_set_id (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u64 > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Grandpa",
                        "CurrentSetId",
                        vec![],
                        [
                            129u8, 7u8, 62u8, 101u8, 199u8, 60u8, 56u8, 33u8,
                            54u8, 158u8, 20u8, 178u8, 244u8, 145u8, 189u8,
                            197u8, 157u8, 163u8, 116u8, 36u8, 105u8, 52u8,
                            149u8, 244u8, 108u8, 94u8, 109u8, 111u8, 244u8,
                            137u8, 7u8, 108u8,
                        ],
                    )
                }
                #[doc = " A mapping from grandpa set ID to the index of the *most recent* session for which its"]
                #[doc = " members were responsible."]
                #[doc = ""]
                #[doc = " TWOX-NOTE: `SetId` is not under user control."]                pub fn set_id_session (& self , _0 : impl :: std :: borrow :: Borrow < :: core :: primitive :: u64 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u32 > , :: subxt :: storage :: address :: Yes , () , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("Grandpa" , "SetIdSession" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Twox64Concat)] , [91u8 , 175u8 , 145u8 , 127u8 , 242u8 , 81u8 , 13u8 , 231u8 , 110u8 , 11u8 , 166u8 , 169u8 , 103u8 , 146u8 , 123u8 , 133u8 , 157u8 , 15u8 , 33u8 , 234u8 , 108u8 , 13u8 , 88u8 , 115u8 , 254u8 , 9u8 , 145u8 , 199u8 , 102u8 , 47u8 , 53u8 , 134u8 ,])
                }
                #[doc = " A mapping from grandpa set ID to the index of the *most recent* session for which its"]
                #[doc = " members were responsible."]
                #[doc = ""]
                #[doc = " TWOX-NOTE: `SetId` is not under user control."]                pub fn set_id_session_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u32 > , () , () , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Grandpa",
                        "SetIdSession",
                        Vec::new(),
                        [
                            91u8, 175u8, 145u8, 127u8, 242u8, 81u8, 13u8,
                            231u8, 110u8, 11u8, 166u8, 169u8, 103u8, 146u8,
                            123u8, 133u8, 157u8, 15u8, 33u8, 234u8, 108u8,
                            13u8, 88u8, 115u8, 254u8, 9u8, 145u8, 199u8, 102u8,
                            47u8, 53u8, 134u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " Max Authorities in use"]
                pub fn max_authorities(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "Grandpa",
                        "MaxAuthorities",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8,
                            200u8, 157u8, 125u8, 151u8, 53u8, 76u8, 168u8,
                            26u8, 10u8, 9u8, 98u8, 68u8, 9u8, 178u8, 197u8,
                            113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod treasury {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct ProposeSpend {
                #[codec(compact)]
                pub value: ::core::primitive::u128,
                pub beneficiary: ::subxt::ext::sp_runtime::MultiAddress<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct RejectProposal {
                #[codec(compact)]
                pub proposal_id: ::core::primitive::u32,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct ApproveProposal {
                #[codec(compact)]
                pub proposal_id: ::core::primitive::u32,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Spend {
                #[codec(compact)]
                pub amount: ::core::primitive::u128,
                pub beneficiary: ::subxt::ext::sp_runtime::MultiAddress<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct RemoveApproval {
                #[codec(compact)]
                pub proposal_id: ::core::primitive::u32,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Put forward a suggestion for spending. A deposit proportional to the value"]
                #[doc = "is reserved and slashed if the proposal is rejected. It is returned once the"]
                #[doc = "proposal is awarded."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- Complexity: O(1)"]
                #[doc = "- DbReads: `ProposalCount`, `origin account`"]
                #[doc = "- DbWrites: `ProposalCount`, `Proposals`, `origin account`"]
                #[doc = "# </weight>"]
                pub fn propose_spend(
                    &self,
                    value: ::core::primitive::u128,
                    beneficiary: ::subxt::ext::sp_runtime::MultiAddress<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::StaticTxPayload<ProposeSpend>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Treasury",
                        "propose_spend",
                        ProposeSpend { value, beneficiary },
                        [
                            124u8, 32u8, 83u8, 127u8, 240u8, 169u8, 3u8, 190u8,
                            235u8, 163u8, 23u8, 29u8, 88u8, 242u8, 238u8,
                            187u8, 136u8, 75u8, 193u8, 192u8, 239u8, 2u8, 54u8,
                            238u8, 147u8, 42u8, 91u8, 14u8, 244u8, 175u8, 41u8,
                            14u8,
                        ],
                    )
                }
                #[doc = "Reject a proposed spend. The original deposit will be slashed."]
                #[doc = ""]
                #[doc = "May only be called from `T::RejectOrigin`."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- Complexity: O(1)"]
                #[doc = "- DbReads: `Proposals`, `rejected proposer account`"]
                #[doc = "- DbWrites: `Proposals`, `rejected proposer account`"]
                #[doc = "# </weight>"]
                pub fn reject_proposal(
                    &self,
                    proposal_id: ::core::primitive::u32,
                ) -> ::subxt::tx::StaticTxPayload<RejectProposal>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Treasury",
                        "reject_proposal",
                        RejectProposal { proposal_id },
                        [
                            106u8, 223u8, 97u8, 22u8, 111u8, 208u8, 128u8,
                            26u8, 198u8, 140u8, 118u8, 126u8, 187u8, 51u8,
                            193u8, 50u8, 193u8, 68u8, 143u8, 144u8, 34u8,
                            132u8, 44u8, 244u8, 105u8, 186u8, 223u8, 234u8,
                            17u8, 145u8, 209u8, 145u8,
                        ],
                    )
                }
                #[doc = "Approve a proposal. At a later time, the proposal will be allocated to the beneficiary"]
                #[doc = "and the original deposit will be returned."]
                #[doc = ""]
                #[doc = "May only be called from `T::ApproveOrigin`."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- Complexity: O(1)."]
                #[doc = "- DbReads: `Proposals`, `Approvals`"]
                #[doc = "- DbWrite: `Approvals`"]
                #[doc = "# </weight>"]
                pub fn approve_proposal(
                    &self,
                    proposal_id: ::core::primitive::u32,
                ) -> ::subxt::tx::StaticTxPayload<ApproveProposal>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Treasury",
                        "approve_proposal",
                        ApproveProposal { proposal_id },
                        [
                            164u8, 229u8, 172u8, 98u8, 129u8, 62u8, 84u8,
                            128u8, 47u8, 108u8, 33u8, 120u8, 89u8, 79u8, 57u8,
                            121u8, 4u8, 197u8, 170u8, 153u8, 156u8, 17u8, 59u8,
                            164u8, 123u8, 227u8, 175u8, 195u8, 220u8, 160u8,
                            60u8, 186u8,
                        ],
                    )
                }
                #[doc = "Propose and approve a spend of treasury funds."]
                #[doc = ""]
                #[doc = "- `origin`: Must be `SpendOrigin` with the `Success` value being at least `amount`."]
                #[doc = "- `amount`: The amount to be transferred from the treasury to the `beneficiary`."]
                #[doc = "- `beneficiary`: The destination account for the transfer."]
                #[doc = ""]
                #[doc = "NOTE: For record-keeping purposes, the proposer is deemed to be equivalent to the"]
                #[doc = "beneficiary."]
                pub fn spend(
                    &self,
                    amount: ::core::primitive::u128,
                    beneficiary: ::subxt::ext::sp_runtime::MultiAddress<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::StaticTxPayload<Spend> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Treasury",
                        "spend",
                        Spend {
                            amount,
                            beneficiary,
                        },
                        [
                            208u8, 79u8, 96u8, 218u8, 205u8, 209u8, 165u8,
                            119u8, 92u8, 208u8, 54u8, 168u8, 83u8, 190u8, 98u8,
                            97u8, 6u8, 2u8, 35u8, 249u8, 18u8, 88u8, 193u8,
                            51u8, 130u8, 33u8, 28u8, 99u8, 49u8, 194u8, 34u8,
                            77u8,
                        ],
                    )
                }
                #[doc = "Force a previously approved proposal to be removed from the approval queue."]
                #[doc = "The original deposit will no longer be returned."]
                #[doc = ""]
                #[doc = "May only be called from `T::RejectOrigin`."]
                #[doc = "- `proposal_id`: The index of a proposal"]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- Complexity: O(A) where `A` is the number of approvals"]
                #[doc = "- Db reads and writes: `Approvals`"]
                #[doc = "# </weight>"]
                #[doc = ""]
                #[doc = "Errors:"]
                #[doc = "- `ProposalNotApproved`: The `proposal_id` supplied was not found in the approval queue,"]
                #[doc = "i.e., the proposal has not been approved. This could also mean the proposal does not"]
                #[doc = "exist altogether, thus there is no way it would have been approved in the first place."]
                pub fn remove_approval(
                    &self,
                    proposal_id: ::core::primitive::u32,
                ) -> ::subxt::tx::StaticTxPayload<RemoveApproval>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Treasury",
                        "remove_approval",
                        RemoveApproval { proposal_id },
                        [
                            133u8, 126u8, 181u8, 47u8, 196u8, 243u8, 7u8, 46u8,
                            25u8, 251u8, 154u8, 125u8, 217u8, 77u8, 54u8,
                            245u8, 240u8, 180u8, 97u8, 34u8, 186u8, 53u8,
                            225u8, 144u8, 155u8, 107u8, 172u8, 54u8, 250u8,
                            184u8, 178u8, 86u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_treasury::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "New proposal."]
            pub struct Proposed {
                pub proposal_index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Proposed {
                const PALLET: &'static str = "Treasury";
                const EVENT: &'static str = "Proposed";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "We have ended a spend period and will now allocate funds."]
            pub struct Spending {
                pub budget_remaining: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Spending {
                const PALLET: &'static str = "Treasury";
                const EVENT: &'static str = "Spending";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "Some funds have been allocated."]
            pub struct Awarded {
                pub proposal_index: ::core::primitive::u32,
                pub award: ::core::primitive::u128,
                pub account: ::subxt::ext::sp_core::crypto::AccountId32,
            }
            impl ::subxt::events::StaticEvent for Awarded {
                const PALLET: &'static str = "Treasury";
                const EVENT: &'static str = "Awarded";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "A proposal was rejected; funds were slashed."]
            pub struct Rejected {
                pub proposal_index: ::core::primitive::u32,
                pub slashed: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Rejected {
                const PALLET: &'static str = "Treasury";
                const EVENT: &'static str = "Rejected";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "Some of our funds have been burnt."]
            pub struct Burnt {
                pub burnt_funds: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Burnt {
                const PALLET: &'static str = "Treasury";
                const EVENT: &'static str = "Burnt";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "Spending has finished; this is the amount that rolls over until next spend."]
            pub struct Rollover {
                pub rollover_balance: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Rollover {
                const PALLET: &'static str = "Treasury";
                const EVENT: &'static str = "Rollover";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "Some funds have been deposited."]
            pub struct Deposit {
                pub value: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Deposit {
                const PALLET: &'static str = "Treasury";
                const EVENT: &'static str = "Deposit";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "A new spend proposal has been approved."]
            pub struct SpendApproved {
                pub proposal_index: ::core::primitive::u32,
                pub amount: ::core::primitive::u128,
                pub beneficiary: ::subxt::ext::sp_core::crypto::AccountId32,
            }
            impl ::subxt::events::StaticEvent for SpendApproved {
                const PALLET: &'static str = "Treasury";
                const EVENT: &'static str = "SpendApproved";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Number of proposals that have been made."]                pub fn proposal_count (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u32 > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Treasury",
                        "ProposalCount",
                        vec![],
                        [
                            132u8, 145u8, 78u8, 218u8, 51u8, 189u8, 55u8,
                            172u8, 143u8, 33u8, 140u8, 99u8, 124u8, 208u8,
                            57u8, 232u8, 154u8, 110u8, 32u8, 142u8, 24u8,
                            149u8, 109u8, 105u8, 30u8, 83u8, 39u8, 177u8,
                            127u8, 160u8, 34u8, 70u8,
                        ],
                    )
                }
                #[doc = " Proposals that have been made."]                pub fn proposals (& self , _0 : impl :: std :: borrow :: Borrow < :: core :: primitive :: u32 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_treasury :: Proposal < :: subxt :: ext :: sp_core :: crypto :: AccountId32 , :: core :: primitive :: u128 > > , :: subxt :: storage :: address :: Yes , () , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("Treasury" , "Proposals" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Twox64Concat)] , [62u8 , 223u8 , 55u8 , 209u8 , 151u8 , 134u8 , 122u8 , 65u8 , 207u8 , 38u8 , 113u8 , 213u8 , 237u8 , 48u8 , 129u8 , 32u8 , 91u8 , 228u8 , 108u8 , 91u8 , 37u8 , 49u8 , 94u8 , 4u8 , 75u8 , 122u8 , 25u8 , 34u8 , 198u8 , 224u8 , 246u8 , 160u8 ,])
                }
                #[doc = " Proposals that have been made."]                pub fn proposals_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_treasury :: Proposal < :: subxt :: ext :: sp_core :: crypto :: AccountId32 , :: core :: primitive :: u128 > > , () , () , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Treasury",
                        "Proposals",
                        Vec::new(),
                        [
                            62u8, 223u8, 55u8, 209u8, 151u8, 134u8, 122u8,
                            65u8, 207u8, 38u8, 113u8, 213u8, 237u8, 48u8,
                            129u8, 32u8, 91u8, 228u8, 108u8, 91u8, 37u8, 49u8,
                            94u8, 4u8, 75u8, 122u8, 25u8, 34u8, 198u8, 224u8,
                            246u8, 160u8,
                        ],
                    )
                }
                #[doc = " Proposal indices that have been approved but not yet awarded."]                pub fn approvals (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: sp_runtime :: bounded :: bounded_vec :: BoundedVec < :: core :: primitive :: u32 > > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Treasury",
                        "Approvals",
                        vec![],
                        [
                            202u8, 106u8, 189u8, 40u8, 127u8, 172u8, 108u8,
                            50u8, 193u8, 4u8, 248u8, 226u8, 176u8, 101u8,
                            212u8, 222u8, 64u8, 206u8, 244u8, 175u8, 111u8,
                            106u8, 86u8, 96u8, 19u8, 109u8, 218u8, 152u8, 30u8,
                            59u8, 96u8, 1u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " Fraction of a proposal's value that should be bonded in order to place the proposal."]
                #[doc = " An accepted proposal gets these back. A rejected proposal does not."]
                pub fn proposal_bond(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<
                        runtime_types::sp_arithmetic::per_things::Permill,
                    >,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "Treasury",
                        "ProposalBond",
                        [
                            225u8, 236u8, 95u8, 157u8, 90u8, 94u8, 106u8,
                            192u8, 254u8, 19u8, 87u8, 80u8, 16u8, 62u8, 42u8,
                            204u8, 136u8, 106u8, 225u8, 53u8, 212u8, 52u8,
                            177u8, 79u8, 4u8, 116u8, 201u8, 104u8, 222u8, 75u8,
                            86u8, 227u8,
                        ],
                    )
                }
                #[doc = " Minimum amount of funds that should be placed in a deposit for making a proposal."]
                pub fn proposal_bond_minimum(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<
                        ::core::primitive::u128,
                    >,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "Treasury",
                        "ProposalBondMinimum",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8,
                            105u8, 200u8, 214u8, 27u8, 144u8, 208u8, 218u8,
                            160u8, 130u8, 109u8, 101u8, 54u8, 210u8, 136u8,
                            71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8,
                            148u8, 156u8,
                        ],
                    )
                }
                #[doc = " Maximum amount of funds that should be placed in a deposit for making a proposal."]
                pub fn proposal_bond_maximum(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<
                        ::core::option::Option<::core::primitive::u128>,
                    >,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "Treasury",
                        "ProposalBondMaximum",
                        [
                            84u8, 154u8, 218u8, 83u8, 84u8, 189u8, 32u8, 20u8,
                            120u8, 194u8, 88u8, 205u8, 109u8, 216u8, 114u8,
                            193u8, 120u8, 198u8, 154u8, 237u8, 134u8, 204u8,
                            102u8, 247u8, 52u8, 103u8, 231u8, 43u8, 243u8,
                            122u8, 60u8, 216u8,
                        ],
                    )
                }
                #[doc = " Period between successive spends."]
                pub fn spend_period(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<::core::primitive::u64>,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "Treasury",
                        "SpendPeriod",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8,
                            231u8, 190u8, 146u8, 59u8, 226u8, 157u8, 101u8,
                            103u8, 117u8, 249u8, 65u8, 18u8, 191u8, 103u8,
                            119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8,
                            239u8, 42u8, 246u8,
                        ],
                    )
                }
                #[doc = " Percentage of spare funds (if any) that are burnt per spend period."]
                pub fn burn(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<
                        runtime_types::sp_arithmetic::per_things::Permill,
                    >,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "Treasury",
                        "Burn",
                        [
                            225u8, 236u8, 95u8, 157u8, 90u8, 94u8, 106u8,
                            192u8, 254u8, 19u8, 87u8, 80u8, 16u8, 62u8, 42u8,
                            204u8, 136u8, 106u8, 225u8, 53u8, 212u8, 52u8,
                            177u8, 79u8, 4u8, 116u8, 201u8, 104u8, 222u8, 75u8,
                            86u8, 227u8,
                        ],
                    )
                }
                #[doc = " The treasury's pallet id, used for deriving its sovereign account ID."]
                pub fn pallet_id(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<
                        runtime_types::frame_support::PalletId,
                    >,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "Treasury",
                        "PalletId",
                        [
                            139u8, 109u8, 228u8, 151u8, 252u8, 32u8, 130u8,
                            69u8, 112u8, 154u8, 174u8, 45u8, 83u8, 245u8, 51u8,
                            132u8, 173u8, 5u8, 186u8, 24u8, 243u8, 9u8, 12u8,
                            214u8, 80u8, 74u8, 69u8, 189u8, 30u8, 94u8, 22u8,
                            39u8,
                        ],
                    )
                }
                #[doc = " The maximum number of approvals that can wait in the spending queue."]
                #[doc = ""]
                #[doc = " NOTE: This parameter is also used within the Bounties Pallet extension if enabled."]
                pub fn max_approvals(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "Treasury",
                        "MaxApprovals",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8,
                            200u8, 157u8, 125u8, 151u8, 53u8, 76u8, 168u8,
                            26u8, 10u8, 9u8, 98u8, 68u8, 9u8, 178u8, 197u8,
                            113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod utility {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Batch {
                pub calls: ::std::vec::Vec<
                    runtime_types::webb_standalone_runtime::Call,
                >,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct AsDerivative {
                pub index: ::core::primitive::u16,
                pub call: ::std::boxed::Box<
                    runtime_types::webb_standalone_runtime::Call,
                >,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct BatchAll {
                pub calls: ::std::vec::Vec<
                    runtime_types::webb_standalone_runtime::Call,
                >,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct DispatchAs {
                pub as_origin: ::std::boxed::Box<
                    runtime_types::webb_standalone_runtime::OriginCaller,
                >,
                pub call: ::std::boxed::Box<
                    runtime_types::webb_standalone_runtime::Call,
                >,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct ForceBatch {
                pub calls: ::std::vec::Vec<
                    runtime_types::webb_standalone_runtime::Call,
                >,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Send a batch of dispatch calls."]
                #[doc = ""]
                #[doc = "May be called from any origin."]
                #[doc = ""]
                #[doc = "- `calls`: The calls to be dispatched from the same origin. The number of call must not"]
                #[doc = "  exceed the constant: `batched_calls_limit` (available in constant metadata)."]
                #[doc = ""]
                #[doc = "If origin is root then call are dispatch without checking origin filter. (This includes"]
                #[doc = "bypassing `frame_system::Config::BaseCallFilter`)."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- Complexity: O(C) where C is the number of calls to be batched."]
                #[doc = "# </weight>"]
                #[doc = ""]
                #[doc = "This will return `Ok` in all circumstances. To determine the success of the batch, an"]
                #[doc = "event is deposited. If a call failed and the batch was interrupted, then the"]
                #[doc = "`BatchInterrupted` event is deposited, along with the number of successful calls made"]
                #[doc = "and the error of the failed call. If all were successful, then the `BatchCompleted`"]
                #[doc = "event is deposited."]
                pub fn batch(
                    &self,
                    calls: ::std::vec::Vec<
                        runtime_types::webb_standalone_runtime::Call,
                    >,
                ) -> ::subxt::tx::StaticTxPayload<Batch> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Utility",
                        "batch",
                        Batch { calls },
                        [
                            108u8, 132u8, 75u8, 152u8, 103u8, 195u8, 9u8,
                            254u8, 71u8, 1u8, 147u8, 6u8, 176u8, 243u8, 191u8,
                            179u8, 101u8, 228u8, 89u8, 59u8, 71u8, 61u8, 73u8,
                            233u8, 58u8, 162u8, 179u8, 249u8, 32u8, 212u8,
                            52u8, 10u8,
                        ],
                    )
                }
                #[doc = "Send a call through an indexed pseudonym of the sender."]
                #[doc = ""]
                #[doc = "Filter from origin are passed along. The call will be dispatched with an origin which"]
                #[doc = "use the same filter as the origin of this call."]
                #[doc = ""]
                #[doc = "NOTE: If you need to ensure that any account-based filtering is not honored (i.e."]
                #[doc = "because you expect `proxy` to have been used prior in the call stack and you do not want"]
                #[doc = "the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`"]
                #[doc = "in the Multisig pallet instead."]
                #[doc = ""]
                #[doc = "NOTE: Prior to version *12, this was called `as_limited_sub`."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                pub fn as_derivative(
                    &self,
                    index: ::core::primitive::u16,
                    call: runtime_types::webb_standalone_runtime::Call,
                ) -> ::subxt::tx::StaticTxPayload<AsDerivative>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Utility",
                        "as_derivative",
                        AsDerivative {
                            index,
                            call: ::std::boxed::Box::new(call),
                        },
                        [
                            210u8, 174u8, 52u8, 41u8, 255u8, 81u8, 197u8, 84u8,
                            79u8, 65u8, 34u8, 181u8, 225u8, 83u8, 110u8, 166u8,
                            237u8, 251u8, 224u8, 179u8, 150u8, 7u8, 250u8,
                            133u8, 248u8, 104u8, 80u8, 214u8, 229u8, 117u8,
                            187u8, 248u8,
                        ],
                    )
                }
                #[doc = "Send a batch of dispatch calls and atomically execute them."]
                #[doc = "The whole transaction will rollback and fail if any of the calls failed."]
                #[doc = ""]
                #[doc = "May be called from any origin."]
                #[doc = ""]
                #[doc = "- `calls`: The calls to be dispatched from the same origin. The number of call must not"]
                #[doc = "  exceed the constant: `batched_calls_limit` (available in constant metadata)."]
                #[doc = ""]
                #[doc = "If origin is root then call are dispatch without checking origin filter. (This includes"]
                #[doc = "bypassing `frame_system::Config::BaseCallFilter`)."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- Complexity: O(C) where C is the number of calls to be batched."]
                #[doc = "# </weight>"]
                pub fn batch_all(
                    &self,
                    calls: ::std::vec::Vec<
                        runtime_types::webb_standalone_runtime::Call,
                    >,
                ) -> ::subxt::tx::StaticTxPayload<BatchAll> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Utility",
                        "batch_all",
                        BatchAll { calls },
                        [
                            58u8, 168u8, 220u8, 205u8, 109u8, 129u8, 50u8,
                            241u8, 180u8, 105u8, 184u8, 104u8, 60u8, 214u8,
                            151u8, 23u8, 184u8, 182u8, 95u8, 136u8, 185u8,
                            35u8, 145u8, 38u8, 139u8, 221u8, 221u8, 80u8, 13u8,
                            22u8, 96u8, 30u8,
                        ],
                    )
                }
                #[doc = "Dispatches a function call with a provided origin."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Root_."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- O(1)."]
                #[doc = "- Limited storage reads."]
                #[doc = "- One DB write (event)."]
                #[doc = "- Weight of derivative `call` execution + T::WeightInfo::dispatch_as()."]
                #[doc = "# </weight>"]
                pub fn dispatch_as(
                    &self,
                    as_origin : runtime_types :: webb_standalone_runtime :: OriginCaller,
                    call: runtime_types::webb_standalone_runtime::Call,
                ) -> ::subxt::tx::StaticTxPayload<DispatchAs> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Utility",
                        "dispatch_as",
                        DispatchAs {
                            as_origin: ::std::boxed::Box::new(as_origin),
                            call: ::std::boxed::Box::new(call),
                        },
                        [
                            243u8, 39u8, 40u8, 163u8, 2u8, 49u8, 23u8, 4u8,
                            117u8, 89u8, 105u8, 62u8, 97u8, 19u8, 125u8, 103u8,
                            207u8, 104u8, 230u8, 26u8, 101u8, 144u8, 205u8,
                            109u8, 253u8, 246u8, 116u8, 103u8, 44u8, 24u8,
                            205u8, 212u8,
                        ],
                    )
                }
                #[doc = "Send a batch of dispatch calls."]
                #[doc = "Unlike `batch`, it allows errors and won't interrupt."]
                #[doc = ""]
                #[doc = "May be called from any origin."]
                #[doc = ""]
                #[doc = "- `calls`: The calls to be dispatched from the same origin. The number of call must not"]
                #[doc = "  exceed the constant: `batched_calls_limit` (available in constant metadata)."]
                #[doc = ""]
                #[doc = "If origin is root then call are dispatch without checking origin filter. (This includes"]
                #[doc = "bypassing `frame_system::Config::BaseCallFilter`)."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- Complexity: O(C) where C is the number of calls to be batched."]
                #[doc = "# </weight>"]
                pub fn force_batch(
                    &self,
                    calls: ::std::vec::Vec<
                        runtime_types::webb_standalone_runtime::Call,
                    >,
                ) -> ::subxt::tx::StaticTxPayload<ForceBatch> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Utility",
                        "force_batch",
                        ForceBatch { calls },
                        [
                            195u8, 31u8, 74u8, 220u8, 135u8, 153u8, 239u8,
                            34u8, 211u8, 166u8, 119u8, 205u8, 18u8, 182u8,
                            214u8, 3u8, 124u8, 250u8, 97u8, 45u8, 92u8, 43u8,
                            83u8, 121u8, 41u8, 6u8, 7u8, 90u8, 129u8, 249u8,
                            162u8, 4u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_utility::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "Batch of dispatches did not complete fully. Index of first failing dispatch given, as"]
            #[doc = "well as the error."]
            pub struct BatchInterrupted {
                pub index: ::core::primitive::u32,
                pub error: runtime_types::sp_runtime::DispatchError,
            }
            impl ::subxt::events::StaticEvent for BatchInterrupted {
                const PALLET: &'static str = "Utility";
                const EVENT: &'static str = "BatchInterrupted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "Batch of dispatches completed fully with no error."]
            pub struct BatchCompleted;
            impl ::subxt::events::StaticEvent for BatchCompleted {
                const PALLET: &'static str = "Utility";
                const EVENT: &'static str = "BatchCompleted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "Batch of dispatches completed but has errors."]
            pub struct BatchCompletedWithErrors;
            impl ::subxt::events::StaticEvent for BatchCompletedWithErrors {
                const PALLET: &'static str = "Utility";
                const EVENT: &'static str = "BatchCompletedWithErrors";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "A single item within a Batch of dispatches has completed with no error."]
            pub struct ItemCompleted;
            impl ::subxt::events::StaticEvent for ItemCompleted {
                const PALLET: &'static str = "Utility";
                const EVENT: &'static str = "ItemCompleted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "A single item within a Batch of dispatches has completed with error."]
            pub struct ItemFailed {
                pub error: runtime_types::sp_runtime::DispatchError,
            }
            impl ::subxt::events::StaticEvent for ItemFailed {
                const PALLET: &'static str = "Utility";
                const EVENT: &'static str = "ItemFailed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "A call was dispatched."]
            pub struct DispatchedAs {
                pub result: ::core::result::Result<
                    (),
                    runtime_types::sp_runtime::DispatchError,
                >,
            }
            impl ::subxt::events::StaticEvent for DispatchedAs {
                const PALLET: &'static str = "Utility";
                const EVENT: &'static str = "DispatchedAs";
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The limit on the number of batched calls."]
                pub fn batched_calls_limit(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "Utility",
                        "batched_calls_limit",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8,
                            200u8, 157u8, 125u8, 151u8, 53u8, 76u8, 168u8,
                            26u8, 10u8, 9u8, 98u8, 68u8, 9u8, 178u8, 197u8,
                            113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod multisig {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct AsMultiThreshold1 {
                pub other_signatories:
                    ::std::vec::Vec<::subxt::ext::sp_core::crypto::AccountId32>,
                pub call: ::std::boxed::Box<
                    runtime_types::webb_standalone_runtime::Call,
                >,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct AsMulti {
                pub threshold: ::core::primitive::u16,
                pub other_signatories:
                    ::std::vec::Vec<::subxt::ext::sp_core::crypto::AccountId32>,
                pub maybe_timepoint: ::core::option::Option<
                    runtime_types::pallet_multisig::Timepoint<
                        ::core::primitive::u64,
                    >,
                >,
                pub call: ::subxt::utils::WrapperKeepOpaque<
                    runtime_types::webb_standalone_runtime::Call,
                >,
                pub store_call: ::core::primitive::bool,
                pub max_weight:
                    runtime_types::frame_support::weights::weight_v2::Weight,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct ApproveAsMulti {
                pub threshold: ::core::primitive::u16,
                pub other_signatories:
                    ::std::vec::Vec<::subxt::ext::sp_core::crypto::AccountId32>,
                pub maybe_timepoint: ::core::option::Option<
                    runtime_types::pallet_multisig::Timepoint<
                        ::core::primitive::u64,
                    >,
                >,
                pub call_hash: [::core::primitive::u8; 32usize],
                pub max_weight:
                    runtime_types::frame_support::weights::weight_v2::Weight,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct CancelAsMulti {
                pub threshold: ::core::primitive::u16,
                pub other_signatories:
                    ::std::vec::Vec<::subxt::ext::sp_core::crypto::AccountId32>,
                pub timepoint: runtime_types::pallet_multisig::Timepoint<
                    ::core::primitive::u64,
                >,
                pub call_hash: [::core::primitive::u8; 32usize],
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Immediately dispatch a multi-signature call using a single approval from the caller."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `other_signatories`: The accounts (other than the sender) who are part of the"]
                #[doc = "multi-signature, but do not participate in the approval process."]
                #[doc = "- `call`: The call to be executed."]
                #[doc = ""]
                #[doc = "Result is equivalent to the dispatched result."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "O(Z + C) where Z is the length of the call and C its execution weight."]
                #[doc = "-------------------------------"]
                #[doc = "- DB Weight: None"]
                #[doc = "- Plus Call Weight"]
                #[doc = "# </weight>"]
                pub fn as_multi_threshold_1(
                    &self,
                    other_signatories: ::std::vec::Vec<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                    >,
                    call: runtime_types::webb_standalone_runtime::Call,
                ) -> ::subxt::tx::StaticTxPayload<AsMultiThreshold1>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Multisig",
                        "as_multi_threshold_1",
                        AsMultiThreshold1 {
                            other_signatories,
                            call: ::std::boxed::Box::new(call),
                        },
                        [
                            109u8, 182u8, 42u8, 52u8, 195u8, 154u8, 231u8,
                            55u8, 196u8, 81u8, 197u8, 246u8, 214u8, 27u8,
                            245u8, 25u8, 58u8, 111u8, 30u8, 175u8, 74u8, 206u8,
                            131u8, 219u8, 251u8, 91u8, 242u8, 22u8, 229u8,
                            78u8, 22u8, 17u8,
                        ],
                    )
                }
                #[doc = "Register approval for a dispatch to be made from a deterministic composite account if"]
                #[doc = "approved by a total of `threshold - 1` of `other_signatories`."]
                #[doc = ""]
                #[doc = "If there are enough, then dispatch the call."]
                #[doc = ""]
                #[doc = "Payment: `DepositBase` will be reserved if this is the first approval, plus"]
                #[doc = "`threshold` times `DepositFactor`. It is returned once this dispatch happens or"]
                #[doc = "is cancelled."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `threshold`: The total number of approvals for this dispatch before it is executed."]
                #[doc = "- `other_signatories`: The accounts (other than the sender) who can approve this"]
                #[doc = "dispatch. May not be empty."]
                #[doc = "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is"]
                #[doc = "not the first approval, then it must be `Some`, with the timepoint (block number and"]
                #[doc = "transaction index) of the first approval transaction."]
                #[doc = "- `call`: The call to be executed."]
                #[doc = ""]
                #[doc = "NOTE: Unless this is the final approval, you will generally want to use"]
                #[doc = "`approve_as_multi` instead, since it only requires a hash of the call."]
                #[doc = ""]
                #[doc = "Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise"]
                #[doc = "on success, result is `Ok` and the result from the interior call, if it was executed,"]
                #[doc = "may be found in the deposited `MultisigExecuted` event."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- `O(S + Z + Call)`."]
                #[doc = "- Up to one balance-reserve or unreserve operation."]
                #[doc = "- One passthrough operation, one insert, both `O(S)` where `S` is the number of"]
                #[doc = "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional."]
                #[doc = "- One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len."]
                #[doc = "- One encode & hash, both of complexity `O(S)`."]
                #[doc = "- Up to one binary search and insert (`O(logS + S)`)."]
                #[doc = "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove."]
                #[doc = "- One event."]
                #[doc = "- The weight of the `call`."]
                #[doc = "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit"]
                #[doc = "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."]
                #[doc = "-------------------------------"]
                #[doc = "- DB Weight:"]
                #[doc = "    - Reads: Multisig Storage, [Caller Account], Calls (if `store_call`)"]
                #[doc = "    - Writes: Multisig Storage, [Caller Account], Calls (if `store_call`)"]
                #[doc = "- Plus Call Weight"]
                #[doc = "# </weight>"]
                pub fn as_multi(
                    &self,
                    threshold: ::core::primitive::u16,
                    other_signatories: ::std::vec::Vec<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                    >,
                    maybe_timepoint: ::core::option::Option<
                        runtime_types::pallet_multisig::Timepoint<
                            ::core::primitive::u64,
                        >,
                    >,
                    call: ::subxt::utils::WrapperKeepOpaque<
                        runtime_types::webb_standalone_runtime::Call,
                    >,
                    store_call: ::core::primitive::bool,
                    max_weight : runtime_types :: frame_support :: weights :: weight_v2 :: Weight,
                ) -> ::subxt::tx::StaticTxPayload<AsMulti> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Multisig",
                        "as_multi",
                        AsMulti {
                            threshold,
                            other_signatories,
                            maybe_timepoint,
                            call,
                            store_call,
                            max_weight,
                        },
                        [
                            132u8, 45u8, 134u8, 86u8, 255u8, 185u8, 160u8,
                            210u8, 235u8, 20u8, 74u8, 212u8, 91u8, 217u8, 93u8,
                            49u8, 56u8, 75u8, 29u8, 35u8, 255u8, 66u8, 21u8,
                            236u8, 114u8, 131u8, 227u8, 25u8, 5u8, 251u8,
                            244u8, 233u8,
                        ],
                    )
                }
                #[doc = "Register approval for a dispatch to be made from a deterministic composite account if"]
                #[doc = "approved by a total of `threshold - 1` of `other_signatories`."]
                #[doc = ""]
                #[doc = "Payment: `DepositBase` will be reserved if this is the first approval, plus"]
                #[doc = "`threshold` times `DepositFactor`. It is returned once this dispatch happens or"]
                #[doc = "is cancelled."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `threshold`: The total number of approvals for this dispatch before it is executed."]
                #[doc = "- `other_signatories`: The accounts (other than the sender) who can approve this"]
                #[doc = "dispatch. May not be empty."]
                #[doc = "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is"]
                #[doc = "not the first approval, then it must be `Some`, with the timepoint (block number and"]
                #[doc = "transaction index) of the first approval transaction."]
                #[doc = "- `call_hash`: The hash of the call to be executed."]
                #[doc = ""]
                #[doc = "NOTE: If this is the final approval, you will want to use `as_multi` instead."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- `O(S)`."]
                #[doc = "- Up to one balance-reserve or unreserve operation."]
                #[doc = "- One passthrough operation, one insert, both `O(S)` where `S` is the number of"]
                #[doc = "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional."]
                #[doc = "- One encode & hash, both of complexity `O(S)`."]
                #[doc = "- Up to one binary search and insert (`O(logS + S)`)."]
                #[doc = "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove."]
                #[doc = "- One event."]
                #[doc = "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit"]
                #[doc = "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."]
                #[doc = "----------------------------------"]
                #[doc = "- DB Weight:"]
                #[doc = "    - Read: Multisig Storage, [Caller Account]"]
                #[doc = "    - Write: Multisig Storage, [Caller Account]"]
                #[doc = "# </weight>"]
                pub fn approve_as_multi(
                    &self,
                    threshold: ::core::primitive::u16,
                    other_signatories: ::std::vec::Vec<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                    >,
                    maybe_timepoint: ::core::option::Option<
                        runtime_types::pallet_multisig::Timepoint<
                            ::core::primitive::u64,
                        >,
                    >,
                    call_hash: [::core::primitive::u8; 32usize],
                    max_weight : runtime_types :: frame_support :: weights :: weight_v2 :: Weight,
                ) -> ::subxt::tx::StaticTxPayload<ApproveAsMulti>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Multisig",
                        "approve_as_multi",
                        ApproveAsMulti {
                            threshold,
                            other_signatories,
                            maybe_timepoint,
                            call_hash,
                            max_weight,
                        },
                        [
                            186u8, 40u8, 235u8, 191u8, 211u8, 182u8, 245u8,
                            230u8, 127u8, 247u8, 79u8, 249u8, 121u8, 197u8,
                            30u8, 188u8, 22u8, 16u8, 18u8, 154u8, 137u8, 12u8,
                            19u8, 222u8, 239u8, 137u8, 20u8, 128u8, 192u8,
                            232u8, 16u8, 97u8,
                        ],
                    )
                }
                #[doc = "Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously"]
                #[doc = "for this operation will be unreserved on success."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `threshold`: The total number of approvals for this dispatch before it is executed."]
                #[doc = "- `other_signatories`: The accounts (other than the sender) who can approve this"]
                #[doc = "dispatch. May not be empty."]
                #[doc = "- `timepoint`: The timepoint (block number and transaction index) of the first approval"]
                #[doc = "transaction for this dispatch."]
                #[doc = "- `call_hash`: The hash of the call to be executed."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- `O(S)`."]
                #[doc = "- Up to one balance-reserve or unreserve operation."]
                #[doc = "- One passthrough operation, one insert, both `O(S)` where `S` is the number of"]
                #[doc = "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional."]
                #[doc = "- One encode & hash, both of complexity `O(S)`."]
                #[doc = "- One event."]
                #[doc = "- I/O: 1 read `O(S)`, one remove."]
                #[doc = "- Storage: removes one item."]
                #[doc = "----------------------------------"]
                #[doc = "- DB Weight:"]
                #[doc = "    - Read: Multisig Storage, [Caller Account], Refund Account, Calls"]
                #[doc = "    - Write: Multisig Storage, [Caller Account], Refund Account, Calls"]
                #[doc = "# </weight>"]
                pub fn cancel_as_multi(
                    &self,
                    threshold: ::core::primitive::u16,
                    other_signatories: ::std::vec::Vec<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                    >,
                    timepoint: runtime_types::pallet_multisig::Timepoint<
                        ::core::primitive::u64,
                    >,
                    call_hash: [::core::primitive::u8; 32usize],
                ) -> ::subxt::tx::StaticTxPayload<CancelAsMulti>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Multisig",
                        "cancel_as_multi",
                        CancelAsMulti {
                            threshold,
                            other_signatories,
                            timepoint,
                            call_hash,
                        },
                        [
                            47u8, 30u8, 118u8, 58u8, 83u8, 19u8, 197u8, 197u8,
                            114u8, 180u8, 211u8, 205u8, 116u8, 85u8, 51u8,
                            164u8, 105u8, 250u8, 205u8, 194u8, 97u8, 184u8,
                            224u8, 68u8, 23u8, 239u8, 183u8, 200u8, 226u8,
                            146u8, 75u8, 189u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_multisig::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "A new multisig operation has begun."]
            pub struct NewMultisig {
                pub approving: ::subxt::ext::sp_core::crypto::AccountId32,
                pub multisig: ::subxt::ext::sp_core::crypto::AccountId32,
                pub call_hash: [::core::primitive::u8; 32usize],
            }
            impl ::subxt::events::StaticEvent for NewMultisig {
                const PALLET: &'static str = "Multisig";
                const EVENT: &'static str = "NewMultisig";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "A multisig operation has been approved by someone."]
            pub struct MultisigApproval {
                pub approving: ::subxt::ext::sp_core::crypto::AccountId32,
                pub timepoint: runtime_types::pallet_multisig::Timepoint<
                    ::core::primitive::u64,
                >,
                pub multisig: ::subxt::ext::sp_core::crypto::AccountId32,
                pub call_hash: [::core::primitive::u8; 32usize],
            }
            impl ::subxt::events::StaticEvent for MultisigApproval {
                const PALLET: &'static str = "Multisig";
                const EVENT: &'static str = "MultisigApproval";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "A multisig operation has been executed."]
            pub struct MultisigExecuted {
                pub approving: ::subxt::ext::sp_core::crypto::AccountId32,
                pub timepoint: runtime_types::pallet_multisig::Timepoint<
                    ::core::primitive::u64,
                >,
                pub multisig: ::subxt::ext::sp_core::crypto::AccountId32,
                pub call_hash: [::core::primitive::u8; 32usize],
                pub result: ::core::result::Result<
                    (),
                    runtime_types::sp_runtime::DispatchError,
                >,
            }
            impl ::subxt::events::StaticEvent for MultisigExecuted {
                const PALLET: &'static str = "Multisig";
                const EVENT: &'static str = "MultisigExecuted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "A multisig operation has been cancelled."]
            pub struct MultisigCancelled {
                pub cancelling: ::subxt::ext::sp_core::crypto::AccountId32,
                pub timepoint: runtime_types::pallet_multisig::Timepoint<
                    ::core::primitive::u64,
                >,
                pub multisig: ::subxt::ext::sp_core::crypto::AccountId32,
                pub call_hash: [::core::primitive::u8; 32usize],
            }
            impl ::subxt::events::StaticEvent for MultisigCancelled {
                const PALLET: &'static str = "Multisig";
                const EVENT: &'static str = "MultisigCancelled";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The set of open multisig operations."]                pub fn multisigs (& self , _0 : impl :: std :: borrow :: Borrow < :: subxt :: ext :: sp_core :: crypto :: AccountId32 > , _1 : impl :: std :: borrow :: Borrow < [:: core :: primitive :: u8 ; 32usize] > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_multisig :: Multisig < :: core :: primitive :: u64 , :: core :: primitive :: u128 , :: subxt :: ext :: sp_core :: crypto :: AccountId32 > > , :: subxt :: storage :: address :: Yes , () , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("Multisig" , "Multisigs" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Twox64Concat) , :: subxt :: storage :: address :: StorageMapKey :: new (_1 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Blake2_128Concat)] , [205u8 , 20u8 , 128u8 , 153u8 , 226u8 , 182u8 , 230u8 , 160u8 , 32u8 , 154u8 , 177u8 , 79u8 , 84u8 , 217u8 , 2u8 , 205u8 , 246u8 , 209u8 , 8u8 , 6u8 , 163u8 , 239u8 , 58u8 , 114u8 , 85u8 , 48u8 , 32u8 , 198u8 , 214u8 , 192u8 , 221u8 , 151u8 ,])
                }
                #[doc = " The set of open multisig operations."]                pub fn multisigs_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_multisig :: Multisig < :: core :: primitive :: u64 , :: core :: primitive :: u128 , :: subxt :: ext :: sp_core :: crypto :: AccountId32 > > , () , () , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Multisig",
                        "Multisigs",
                        Vec::new(),
                        [
                            205u8, 20u8, 128u8, 153u8, 226u8, 182u8, 230u8,
                            160u8, 32u8, 154u8, 177u8, 79u8, 84u8, 217u8, 2u8,
                            205u8, 246u8, 209u8, 8u8, 6u8, 163u8, 239u8, 58u8,
                            114u8, 85u8, 48u8, 32u8, 198u8, 214u8, 192u8,
                            221u8, 151u8,
                        ],
                    )
                }                pub fn calls (& self , _0 : impl :: std :: borrow :: Borrow < [:: core :: primitive :: u8 ; 32usize] > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < (:: subxt :: utils :: WrapperKeepOpaque < runtime_types :: webb_standalone_runtime :: Call > , :: subxt :: ext :: sp_core :: crypto :: AccountId32 , :: core :: primitive :: u128 ,) > , :: subxt :: storage :: address :: Yes , () , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Multisig",
                        "Calls",
                        vec![::subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            ::subxt::storage::address::StorageHasher::Identity,
                        )],
                        [
                            167u8, 180u8, 0u8, 142u8, 215u8, 17u8, 170u8,
                            233u8, 42u8, 175u8, 59u8, 148u8, 22u8, 123u8, 83u8,
                            100u8, 115u8, 102u8, 122u8, 156u8, 46u8, 222u8,
                            105u8, 63u8, 233u8, 175u8, 248u8, 187u8, 4u8,
                            204u8, 172u8, 154u8,
                        ],
                    )
                }                pub fn calls_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < (:: subxt :: utils :: WrapperKeepOpaque < runtime_types :: webb_standalone_runtime :: Call > , :: subxt :: ext :: sp_core :: crypto :: AccountId32 , :: core :: primitive :: u128 ,) > , () , () , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Multisig",
                        "Calls",
                        Vec::new(),
                        [
                            167u8, 180u8, 0u8, 142u8, 215u8, 17u8, 170u8,
                            233u8, 42u8, 175u8, 59u8, 148u8, 22u8, 123u8, 83u8,
                            100u8, 115u8, 102u8, 122u8, 156u8, 46u8, 222u8,
                            105u8, 63u8, 233u8, 175u8, 248u8, 187u8, 4u8,
                            204u8, 172u8, 154u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The base amount of currency needed to reserve for creating a multisig execution or to"]
                #[doc = " store a dispatch call for later."]
                #[doc = ""]
                #[doc = " This is held for an additional storage item whose value size is"]
                #[doc = " `4 + sizeof((BlockNumber, Balance, AccountId))` bytes and whose key size is"]
                #[doc = " `32 + sizeof(AccountId)` bytes."]
                pub fn deposit_base(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<
                        ::core::primitive::u128,
                    >,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "Multisig",
                        "DepositBase",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8,
                            105u8, 200u8, 214u8, 27u8, 144u8, 208u8, 218u8,
                            160u8, 130u8, 109u8, 101u8, 54u8, 210u8, 136u8,
                            71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8,
                            148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The amount of currency needed per unit threshold when creating a multisig execution."]
                #[doc = ""]
                #[doc = " This is held for adding 32 bytes more into a pre-existing storage value."]
                pub fn deposit_factor(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<
                        ::core::primitive::u128,
                    >,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "Multisig",
                        "DepositFactor",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8,
                            105u8, 200u8, 214u8, 27u8, 144u8, 208u8, 218u8,
                            160u8, 130u8, 109u8, 101u8, 54u8, 210u8, 136u8,
                            71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8,
                            148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The maximum amount of signatories allowed in the multisig."]
                pub fn max_signatories(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<::core::primitive::u16>,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "Multisig",
                        "MaxSignatories",
                        [
                            116u8, 33u8, 2u8, 170u8, 181u8, 147u8, 171u8,
                            169u8, 167u8, 227u8, 41u8, 144u8, 11u8, 236u8,
                            82u8, 100u8, 74u8, 60u8, 184u8, 72u8, 169u8, 90u8,
                            208u8, 135u8, 15u8, 117u8, 10u8, 123u8, 128u8,
                            193u8, 29u8, 70u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod scheduler {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Schedule {
                pub when: ::core::primitive::u64,
                pub maybe_periodic: ::core::option::Option<(
                    ::core::primitive::u64,
                    ::core::primitive::u32,
                )>,
                pub priority: ::core::primitive::u8,
                pub call: ::std::boxed::Box<
                    runtime_types::frame_support::traits::schedule::MaybeHashed<
                        runtime_types::webb_standalone_runtime::Call,
                        ::subxt::ext::sp_core::H256,
                    >,
                >,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Cancel {
                pub when: ::core::primitive::u64,
                pub index: ::core::primitive::u32,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct ScheduleNamed {
                pub id: ::std::vec::Vec<::core::primitive::u8>,
                pub when: ::core::primitive::u64,
                pub maybe_periodic: ::core::option::Option<(
                    ::core::primitive::u64,
                    ::core::primitive::u32,
                )>,
                pub priority: ::core::primitive::u8,
                pub call: ::std::boxed::Box<
                    runtime_types::frame_support::traits::schedule::MaybeHashed<
                        runtime_types::webb_standalone_runtime::Call,
                        ::subxt::ext::sp_core::H256,
                    >,
                >,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct CancelNamed {
                pub id: ::std::vec::Vec<::core::primitive::u8>,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct ScheduleAfter {
                pub after: ::core::primitive::u64,
                pub maybe_periodic: ::core::option::Option<(
                    ::core::primitive::u64,
                    ::core::primitive::u32,
                )>,
                pub priority: ::core::primitive::u8,
                pub call: ::std::boxed::Box<
                    runtime_types::frame_support::traits::schedule::MaybeHashed<
                        runtime_types::webb_standalone_runtime::Call,
                        ::subxt::ext::sp_core::H256,
                    >,
                >,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct ScheduleNamedAfter {
                pub id: ::std::vec::Vec<::core::primitive::u8>,
                pub after: ::core::primitive::u64,
                pub maybe_periodic: ::core::option::Option<(
                    ::core::primitive::u64,
                    ::core::primitive::u32,
                )>,
                pub priority: ::core::primitive::u8,
                pub call: ::std::boxed::Box<
                    runtime_types::frame_support::traits::schedule::MaybeHashed<
                        runtime_types::webb_standalone_runtime::Call,
                        ::subxt::ext::sp_core::H256,
                    >,
                >,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Anonymously schedule a task."]
                pub fn schedule(
                    &self,
                    when: ::core::primitive::u64,
                    maybe_periodic: ::core::option::Option<(
                        ::core::primitive::u64,
                        ::core::primitive::u32,
                    )>,
                    priority: ::core::primitive::u8,
                    call : runtime_types :: frame_support :: traits :: schedule :: MaybeHashed < runtime_types :: webb_standalone_runtime :: Call , :: subxt :: ext :: sp_core :: H256 >,
                ) -> ::subxt::tx::StaticTxPayload<Schedule> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Scheduler",
                        "schedule",
                        Schedule {
                            when,
                            maybe_periodic,
                            priority,
                            call: ::std::boxed::Box::new(call),
                        },
                        [
                            91u8, 60u8, 86u8, 204u8, 57u8, 240u8, 100u8, 130u8,
                            41u8, 212u8, 33u8, 104u8, 4u8, 5u8, 101u8, 46u8,
                            202u8, 98u8, 191u8, 213u8, 187u8, 114u8, 139u8,
                            112u8, 147u8, 174u8, 249u8, 191u8, 174u8, 114u8,
                            228u8, 42u8,
                        ],
                    )
                }
                #[doc = "Cancel an anonymously scheduled task."]
                pub fn cancel(
                    &self,
                    when: ::core::primitive::u64,
                    index: ::core::primitive::u32,
                ) -> ::subxt::tx::StaticTxPayload<Cancel> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Scheduler",
                        "cancel",
                        Cancel { when, index },
                        [
                            218u8, 92u8, 28u8, 181u8, 164u8, 107u8, 168u8,
                            165u8, 120u8, 66u8, 113u8, 244u8, 0u8, 127u8, 25u8,
                            207u8, 116u8, 223u8, 187u8, 162u8, 80u8, 234u8,
                            50u8, 254u8, 124u8, 103u8, 34u8, 90u8, 65u8, 19u8,
                            218u8, 173u8,
                        ],
                    )
                }
                #[doc = "Schedule a named task."]
                pub fn schedule_named(
                    &self,
                    id: ::std::vec::Vec<::core::primitive::u8>,
                    when: ::core::primitive::u64,
                    maybe_periodic: ::core::option::Option<(
                        ::core::primitive::u64,
                        ::core::primitive::u32,
                    )>,
                    priority: ::core::primitive::u8,
                    call : runtime_types :: frame_support :: traits :: schedule :: MaybeHashed < runtime_types :: webb_standalone_runtime :: Call , :: subxt :: ext :: sp_core :: H256 >,
                ) -> ::subxt::tx::StaticTxPayload<ScheduleNamed>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Scheduler",
                        "schedule_named",
                        ScheduleNamed {
                            id,
                            when,
                            maybe_periodic,
                            priority,
                            call: ::std::boxed::Box::new(call),
                        },
                        [
                            27u8, 16u8, 201u8, 83u8, 177u8, 187u8, 182u8,
                            111u8, 25u8, 127u8, 47u8, 8u8, 188u8, 223u8, 138u8,
                            28u8, 255u8, 85u8, 239u8, 130u8, 197u8, 86u8, 22u8,
                            33u8, 11u8, 219u8, 31u8, 74u8, 75u8, 115u8, 125u8,
                            179u8,
                        ],
                    )
                }
                #[doc = "Cancel a named scheduled task."]
                pub fn cancel_named(
                    &self,
                    id: ::std::vec::Vec<::core::primitive::u8>,
                ) -> ::subxt::tx::StaticTxPayload<CancelNamed> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Scheduler",
                        "cancel_named",
                        CancelNamed { id },
                        [
                            42u8, 232u8, 92u8, 167u8, 113u8, 136u8, 7u8, 215u8,
                            88u8, 117u8, 74u8, 26u8, 225u8, 230u8, 244u8,
                            106u8, 150u8, 112u8, 46u8, 228u8, 96u8, 252u8,
                            78u8, 126u8, 39u8, 207u8, 36u8, 110u8, 83u8, 62u8,
                            84u8, 241u8,
                        ],
                    )
                }
                #[doc = "Anonymously schedule a task after a delay."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "Same as [`schedule`]."]
                #[doc = "# </weight>"]
                pub fn schedule_after(
                    &self,
                    after: ::core::primitive::u64,
                    maybe_periodic: ::core::option::Option<(
                        ::core::primitive::u64,
                        ::core::primitive::u32,
                    )>,
                    priority: ::core::primitive::u8,
                    call : runtime_types :: frame_support :: traits :: schedule :: MaybeHashed < runtime_types :: webb_standalone_runtime :: Call , :: subxt :: ext :: sp_core :: H256 >,
                ) -> ::subxt::tx::StaticTxPayload<ScheduleAfter>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Scheduler",
                        "schedule_after",
                        ScheduleAfter {
                            after,
                            maybe_periodic,
                            priority,
                            call: ::std::boxed::Box::new(call),
                        },
                        [
                            13u8, 180u8, 233u8, 46u8, 54u8, 12u8, 75u8, 102u8,
                            30u8, 146u8, 92u8, 243u8, 15u8, 214u8, 103u8, 60u8,
                            14u8, 163u8, 91u8, 207u8, 221u8, 150u8, 187u8,
                            60u8, 124u8, 136u8, 198u8, 170u8, 165u8, 36u8,
                            253u8, 53u8,
                        ],
                    )
                }
                #[doc = "Schedule a named task after a delay."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "Same as [`schedule_named`](Self::schedule_named)."]
                #[doc = "# </weight>"]
                pub fn schedule_named_after(
                    &self,
                    id: ::std::vec::Vec<::core::primitive::u8>,
                    after: ::core::primitive::u64,
                    maybe_periodic: ::core::option::Option<(
                        ::core::primitive::u64,
                        ::core::primitive::u32,
                    )>,
                    priority: ::core::primitive::u8,
                    call : runtime_types :: frame_support :: traits :: schedule :: MaybeHashed < runtime_types :: webb_standalone_runtime :: Call , :: subxt :: ext :: sp_core :: H256 >,
                ) -> ::subxt::tx::StaticTxPayload<ScheduleNamedAfter>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Scheduler",
                        "schedule_named_after",
                        ScheduleNamedAfter {
                            id,
                            after,
                            maybe_periodic,
                            priority,
                            call: ::std::boxed::Box::new(call),
                        },
                        [
                            186u8, 52u8, 76u8, 23u8, 240u8, 60u8, 77u8, 67u8,
                            254u8, 1u8, 33u8, 31u8, 123u8, 32u8, 215u8, 19u8,
                            137u8, 58u8, 81u8, 35u8, 237u8, 143u8, 18u8, 211u8,
                            115u8, 112u8, 144u8, 198u8, 241u8, 14u8, 92u8,
                            119u8,
                        ],
                    )
                }
            }
        }
        #[doc = "Events type."]
        pub type Event = runtime_types::pallet_scheduler::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "Scheduled some task."]
            pub struct Scheduled {
                pub when: ::core::primitive::u64,
                pub index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Scheduled {
                const PALLET: &'static str = "Scheduler";
                const EVENT: &'static str = "Scheduled";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "Canceled some task."]
            pub struct Canceled {
                pub when: ::core::primitive::u64,
                pub index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Canceled {
                const PALLET: &'static str = "Scheduler";
                const EVENT: &'static str = "Canceled";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "Dispatched some task."]
            pub struct Dispatched {
                pub task: (::core::primitive::u64, ::core::primitive::u32),
                pub id: ::core::option::Option<
                    ::std::vec::Vec<::core::primitive::u8>,
                >,
                pub result: ::core::result::Result<
                    (),
                    runtime_types::sp_runtime::DispatchError,
                >,
            }
            impl ::subxt::events::StaticEvent for Dispatched {
                const PALLET: &'static str = "Scheduler";
                const EVENT: &'static str = "Dispatched";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "The call for the provided hash was not found so the task has been aborted."]
            pub struct CallLookupFailed {
                pub task: (::core::primitive::u64, ::core::primitive::u32),
                pub id: ::core::option::Option<
                    ::std::vec::Vec<::core::primitive::u8>,
                >,
                pub error:
                    runtime_types::frame_support::traits::schedule::LookupError,
            }
            impl ::subxt::events::StaticEvent for CallLookupFailed {
                const PALLET: &'static str = "Scheduler";
                const EVENT: &'static str = "CallLookupFailed";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Items to be executed, indexed by the block number that they should be executed on."]                pub fn agenda (& self , _0 : impl :: std :: borrow :: Borrow < :: core :: primitive :: u64 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: std :: vec :: Vec < :: core :: option :: Option < runtime_types :: pallet_scheduler :: ScheduledV3 < runtime_types :: frame_support :: traits :: schedule :: MaybeHashed < runtime_types :: webb_standalone_runtime :: Call , :: subxt :: ext :: sp_core :: H256 > , :: core :: primitive :: u64 , runtime_types :: webb_standalone_runtime :: OriginCaller , :: subxt :: ext :: sp_core :: crypto :: AccountId32 > > > > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("Scheduler" , "Agenda" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Twox64Concat)] , [163u8 , 177u8 , 96u8 , 249u8 , 204u8 , 15u8 , 245u8 , 148u8 , 226u8 , 127u8 , 170u8 , 236u8 , 253u8 , 240u8 , 23u8 , 117u8 , 186u8 , 85u8 , 215u8 , 106u8 , 223u8 , 70u8 , 65u8 , 194u8 , 233u8 , 94u8 , 174u8 , 34u8 , 37u8 , 116u8 , 103u8 , 186u8 ,])
                }
                #[doc = " Items to be executed, indexed by the block number that they should be executed on."]                pub fn agenda_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: std :: vec :: Vec < :: core :: option :: Option < runtime_types :: pallet_scheduler :: ScheduledV3 < runtime_types :: frame_support :: traits :: schedule :: MaybeHashed < runtime_types :: webb_standalone_runtime :: Call , :: subxt :: ext :: sp_core :: H256 > , :: core :: primitive :: u64 , runtime_types :: webb_standalone_runtime :: OriginCaller , :: subxt :: ext :: sp_core :: crypto :: AccountId32 > > > > , () , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Scheduler",
                        "Agenda",
                        Vec::new(),
                        [
                            163u8, 177u8, 96u8, 249u8, 204u8, 15u8, 245u8,
                            148u8, 226u8, 127u8, 170u8, 236u8, 253u8, 240u8,
                            23u8, 117u8, 186u8, 85u8, 215u8, 106u8, 223u8,
                            70u8, 65u8, 194u8, 233u8, 94u8, 174u8, 34u8, 37u8,
                            116u8, 103u8, 186u8,
                        ],
                    )
                }
                #[doc = " Lookup from identity to the block number and index of the task."]                pub fn lookup (& self , _0 : impl :: std :: borrow :: Borrow < [:: core :: primitive :: u8] > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < (:: core :: primitive :: u64 , :: core :: primitive :: u32 ,) > , :: subxt :: storage :: address :: Yes , () , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("Scheduler" , "Lookup" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Twox64Concat)] , [192u8 , 12u8 , 130u8 , 175u8 , 215u8 , 128u8 , 12u8 , 34u8 , 125u8 , 227u8 , 166u8 , 207u8 , 224u8 , 109u8 , 75u8 , 190u8 , 241u8 , 195u8 , 233u8 , 160u8 , 85u8 , 74u8 , 134u8 , 253u8 , 136u8 , 47u8 , 206u8 , 151u8 , 89u8 , 117u8 , 103u8 , 51u8 ,])
                }
                #[doc = " Lookup from identity to the block number and index of the task."]                pub fn lookup_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < (:: core :: primitive :: u64 , :: core :: primitive :: u32 ,) > , () , () , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Scheduler",
                        "Lookup",
                        Vec::new(),
                        [
                            192u8, 12u8, 130u8, 175u8, 215u8, 128u8, 12u8,
                            34u8, 125u8, 227u8, 166u8, 207u8, 224u8, 109u8,
                            75u8, 190u8, 241u8, 195u8, 233u8, 160u8, 85u8,
                            74u8, 134u8, 253u8, 136u8, 47u8, 206u8, 151u8,
                            89u8, 117u8, 103u8, 51u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The maximum weight that may be scheduled per block for any dispatchables of less"]
                #[doc = " priority than `schedule::HARD_DEADLINE`."]                pub fn maximum_weight (& self) -> :: subxt :: constants :: StaticConstantAddress < :: subxt :: metadata :: DecodeStaticType < runtime_types :: frame_support :: weights :: weight_v2 :: Weight >>{
                    ::subxt::constants::StaticConstantAddress::new(
                        "Scheduler",
                        "MaximumWeight",
                        [
                            67u8, 70u8, 203u8, 252u8, 102u8, 92u8, 175u8, 48u8,
                            35u8, 141u8, 85u8, 109u8, 102u8, 228u8, 244u8,
                            116u8, 6u8, 210u8, 54u8, 115u8, 86u8, 234u8, 159u8,
                            246u8, 251u8, 91u8, 202u8, 141u8, 32u8, 21u8, 97u8,
                            85u8,
                        ],
                    )
                }
                #[doc = " The maximum number of scheduled calls in the queue for a single block."]
                #[doc = " Not strictly enforced, but used for weight estimation."]
                pub fn max_scheduled_per_block(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "Scheduler",
                        "MaxScheduledPerBlock",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8,
                            200u8, 157u8, 125u8, 151u8, 53u8, 76u8, 168u8,
                            26u8, 10u8, 9u8, 98u8, 68u8, 9u8, 178u8, 197u8,
                            113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod preimage {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct NotePreimage {
                pub bytes: ::std::vec::Vec<::core::primitive::u8>,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct UnnotePreimage {
                pub hash: ::subxt::ext::sp_core::H256,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct RequestPreimage {
                pub hash: ::subxt::ext::sp_core::H256,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct UnrequestPreimage {
                pub hash: ::subxt::ext::sp_core::H256,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Register a preimage on-chain."]
                #[doc = ""]
                #[doc = "If the preimage was previously requested, no fees or deposits are taken for providing"]
                #[doc = "the preimage. Otherwise, a deposit is taken proportional to the size of the preimage."]
                pub fn note_preimage(
                    &self,
                    bytes: ::std::vec::Vec<::core::primitive::u8>,
                ) -> ::subxt::tx::StaticTxPayload<NotePreimage>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Preimage",
                        "note_preimage",
                        NotePreimage { bytes },
                        [
                            77u8, 48u8, 104u8, 3u8, 254u8, 65u8, 106u8, 95u8,
                            204u8, 89u8, 149u8, 29u8, 144u8, 188u8, 99u8, 23u8,
                            146u8, 142u8, 35u8, 17u8, 125u8, 130u8, 31u8,
                            206u8, 106u8, 83u8, 163u8, 192u8, 81u8, 23u8,
                            232u8, 230u8,
                        ],
                    )
                }
                #[doc = "Clear an unrequested preimage from the runtime storage."]
                pub fn unnote_preimage(
                    &self,
                    hash: ::subxt::ext::sp_core::H256,
                ) -> ::subxt::tx::StaticTxPayload<UnnotePreimage>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Preimage",
                        "unnote_preimage",
                        UnnotePreimage { hash },
                        [
                            211u8, 204u8, 205u8, 58u8, 33u8, 179u8, 68u8, 74u8,
                            149u8, 138u8, 213u8, 45u8, 140u8, 27u8, 106u8,
                            81u8, 68u8, 212u8, 147u8, 116u8, 27u8, 130u8, 84u8,
                            34u8, 231u8, 197u8, 135u8, 8u8, 19u8, 242u8, 207u8,
                            17u8,
                        ],
                    )
                }
                #[doc = "Request a preimage be uploaded to the chain without paying any fees or deposits."]
                #[doc = ""]
                #[doc = "If the preimage requests has already been provided on-chain, we unreserve any deposit"]
                #[doc = "a user may have paid, and take the control of the preimage out of their hands."]
                pub fn request_preimage(
                    &self,
                    hash: ::subxt::ext::sp_core::H256,
                ) -> ::subxt::tx::StaticTxPayload<RequestPreimage>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Preimage",
                        "request_preimage",
                        RequestPreimage { hash },
                        [
                            195u8, 26u8, 146u8, 255u8, 79u8, 43u8, 73u8, 60u8,
                            115u8, 78u8, 99u8, 197u8, 137u8, 95u8, 139u8,
                            141u8, 79u8, 213u8, 170u8, 169u8, 127u8, 30u8,
                            236u8, 65u8, 38u8, 16u8, 118u8, 228u8, 141u8, 83u8,
                            162u8, 233u8,
                        ],
                    )
                }
                #[doc = "Clear a previously made request for a preimage."]
                #[doc = ""]
                #[doc = "NOTE: THIS MUST NOT BE CALLED ON `hash` MORE TIMES THAN `request_preimage`."]
                pub fn unrequest_preimage(
                    &self,
                    hash: ::subxt::ext::sp_core::H256,
                ) -> ::subxt::tx::StaticTxPayload<UnrequestPreimage>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Preimage",
                        "unrequest_preimage",
                        UnrequestPreimage { hash },
                        [
                            143u8, 225u8, 239u8, 44u8, 237u8, 83u8, 18u8,
                            105u8, 101u8, 68u8, 111u8, 116u8, 66u8, 212u8,
                            63u8, 190u8, 38u8, 32u8, 105u8, 152u8, 69u8, 177u8,
                            193u8, 15u8, 60u8, 26u8, 95u8, 130u8, 11u8, 113u8,
                            187u8, 108u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_preimage::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "A preimage has been noted."]
            pub struct Noted {
                pub hash: ::subxt::ext::sp_core::H256,
            }
            impl ::subxt::events::StaticEvent for Noted {
                const PALLET: &'static str = "Preimage";
                const EVENT: &'static str = "Noted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "A preimage has been requested."]
            pub struct Requested {
                pub hash: ::subxt::ext::sp_core::H256,
            }
            impl ::subxt::events::StaticEvent for Requested {
                const PALLET: &'static str = "Preimage";
                const EVENT: &'static str = "Requested";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "A preimage has ben cleared."]
            pub struct Cleared {
                pub hash: ::subxt::ext::sp_core::H256,
            }
            impl ::subxt::events::StaticEvent for Cleared {
                const PALLET: &'static str = "Preimage";
                const EVENT: &'static str = "Cleared";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The request status of a given hash."]                pub fn status_for (& self , _0 : impl :: std :: borrow :: Borrow < :: subxt :: ext :: sp_core :: H256 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_preimage :: RequestStatus < :: subxt :: ext :: sp_core :: crypto :: AccountId32 , :: core :: primitive :: u128 > > , :: subxt :: storage :: address :: Yes , () , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Preimage",
                        "StatusFor",
                        vec![::subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            ::subxt::storage::address::StorageHasher::Identity,
                        )],
                        [
                            244u8, 6u8, 120u8, 75u8, 164u8, 32u8, 39u8, 15u8,
                            107u8, 127u8, 19u8, 242u8, 80u8, 121u8, 18u8,
                            219u8, 253u8, 174u8, 138u8, 9u8, 76u8, 219u8,
                            156u8, 229u8, 78u8, 155u8, 233u8, 162u8, 215u8,
                            237u8, 23u8, 123u8,
                        ],
                    )
                }
                #[doc = " The request status of a given hash."]                pub fn status_for_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_preimage :: RequestStatus < :: subxt :: ext :: sp_core :: crypto :: AccountId32 , :: core :: primitive :: u128 > > , () , () , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Preimage",
                        "StatusFor",
                        Vec::new(),
                        [
                            244u8, 6u8, 120u8, 75u8, 164u8, 32u8, 39u8, 15u8,
                            107u8, 127u8, 19u8, 242u8, 80u8, 121u8, 18u8,
                            219u8, 253u8, 174u8, 138u8, 9u8, 76u8, 219u8,
                            156u8, 229u8, 78u8, 155u8, 233u8, 162u8, 215u8,
                            237u8, 23u8, 123u8,
                        ],
                    )
                }
                #[doc = " The preimages stored by this pallet."]                pub fn preimage_for (& self , _0 : impl :: std :: borrow :: Borrow < :: subxt :: ext :: sp_core :: H256 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: sp_runtime :: bounded :: bounded_vec :: BoundedVec < :: core :: primitive :: u8 > > , :: subxt :: storage :: address :: Yes , () , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Preimage",
                        "PreimageFor",
                        vec![::subxt::storage::address::StorageMapKey::new(
                            _0.borrow(),
                            ::subxt::storage::address::StorageHasher::Identity,
                        )],
                        [
                            82u8, 216u8, 233u8, 5u8, 102u8, 206u8, 96u8, 64u8,
                            133u8, 179u8, 63u8, 45u8, 53u8, 42u8, 190u8, 95u8,
                            77u8, 197u8, 60u8, 11u8, 59u8, 231u8, 190u8, 219u8,
                            87u8, 149u8, 112u8, 196u8, 33u8, 238u8, 247u8,
                            117u8,
                        ],
                    )
                }
                #[doc = " The preimages stored by this pallet."]                pub fn preimage_for_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: sp_runtime :: bounded :: bounded_vec :: BoundedVec < :: core :: primitive :: u8 > > , () , () , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Preimage",
                        "PreimageFor",
                        Vec::new(),
                        [
                            82u8, 216u8, 233u8, 5u8, 102u8, 206u8, 96u8, 64u8,
                            133u8, 179u8, 63u8, 45u8, 53u8, 42u8, 190u8, 95u8,
                            77u8, 197u8, 60u8, 11u8, 59u8, 231u8, 190u8, 219u8,
                            87u8, 149u8, 112u8, 196u8, 33u8, 238u8, 247u8,
                            117u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod proxy {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Proxy {
                pub real: ::subxt::ext::sp_runtime::MultiAddress<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                pub force_proxy_type: ::core::option::Option<
                    runtime_types::webb_standalone_runtime::ProxyType,
                >,
                pub call: ::std::boxed::Box<
                    runtime_types::webb_standalone_runtime::Call,
                >,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct AddProxy {
                pub delegate: ::subxt::ext::sp_runtime::MultiAddress<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                pub proxy_type:
                    runtime_types::webb_standalone_runtime::ProxyType,
                pub delay: ::core::primitive::u64,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct RemoveProxy {
                pub delegate: ::subxt::ext::sp_runtime::MultiAddress<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                pub proxy_type:
                    runtime_types::webb_standalone_runtime::ProxyType,
                pub delay: ::core::primitive::u64,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct RemoveProxies;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Anonymous {
                pub proxy_type:
                    runtime_types::webb_standalone_runtime::ProxyType,
                pub delay: ::core::primitive::u64,
                pub index: ::core::primitive::u16,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct KillAnonymous {
                pub spawner: ::subxt::ext::sp_runtime::MultiAddress<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                pub proxy_type:
                    runtime_types::webb_standalone_runtime::ProxyType,
                pub index: ::core::primitive::u16,
                #[codec(compact)]
                pub height: ::core::primitive::u64,
                #[codec(compact)]
                pub ext_index: ::core::primitive::u32,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Announce {
                pub real: ::subxt::ext::sp_runtime::MultiAddress<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                pub call_hash: ::subxt::ext::sp_core::H256,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct RemoveAnnouncement {
                pub real: ::subxt::ext::sp_runtime::MultiAddress<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                pub call_hash: ::subxt::ext::sp_core::H256,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct RejectAnnouncement {
                pub delegate: ::subxt::ext::sp_runtime::MultiAddress<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                pub call_hash: ::subxt::ext::sp_core::H256,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct ProxyAnnounced {
                pub delegate: ::subxt::ext::sp_runtime::MultiAddress<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                pub real: ::subxt::ext::sp_runtime::MultiAddress<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                pub force_proxy_type: ::core::option::Option<
                    runtime_types::webb_standalone_runtime::ProxyType,
                >,
                pub call: ::std::boxed::Box<
                    runtime_types::webb_standalone_runtime::Call,
                >,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Dispatch the given `call` from an account that the sender is authorised for through"]
                #[doc = "`add_proxy`."]
                #[doc = ""]
                #[doc = "Removes any corresponding announcement(s)."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- `real`: The account that the proxy will make a call on behalf of."]
                #[doc = "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call."]
                #[doc = "- `call`: The call to be made by the `real` account."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "Weight is a function of the number of proxies the user has (P)."]
                #[doc = "# </weight>"]
                pub fn proxy(
                    &self,
                    real: ::subxt::ext::sp_runtime::MultiAddress<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    force_proxy_type: ::core::option::Option<
                        runtime_types::webb_standalone_runtime::ProxyType,
                    >,
                    call: runtime_types::webb_standalone_runtime::Call,
                ) -> ::subxt::tx::StaticTxPayload<Proxy> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Proxy",
                        "proxy",
                        Proxy {
                            real,
                            force_proxy_type,
                            call: ::std::boxed::Box::new(call),
                        },
                        [
                            186u8, 199u8, 244u8, 59u8, 98u8, 123u8, 151u8,
                            107u8, 62u8, 187u8, 175u8, 218u8, 61u8, 248u8,
                            241u8, 11u8, 115u8, 53u8, 246u8, 160u8, 213u8,
                            137u8, 82u8, 215u8, 253u8, 153u8, 78u8, 109u8,
                            194u8, 208u8, 207u8, 82u8,
                        ],
                    )
                }
                #[doc = "Register a proxy account for the sender that is able to make calls on its behalf."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- `proxy`: The account that the `caller` would like to make a proxy."]
                #[doc = "- `proxy_type`: The permissions allowed for this proxy account."]
                #[doc = "- `delay`: The announcement period required of the initial proxy. Will generally be"]
                #[doc = "zero."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "Weight is a function of the number of proxies the user has (P)."]
                #[doc = "# </weight>"]
                pub fn add_proxy(
                    &self,
                    delegate: ::subxt::ext::sp_runtime::MultiAddress<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    proxy_type : runtime_types :: webb_standalone_runtime :: ProxyType,
                    delay: ::core::primitive::u64,
                ) -> ::subxt::tx::StaticTxPayload<AddProxy> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Proxy",
                        "add_proxy",
                        AddProxy {
                            delegate,
                            proxy_type,
                            delay,
                        },
                        [
                            38u8, 26u8, 76u8, 131u8, 12u8, 56u8, 235u8, 201u8,
                            191u8, 224u8, 33u8, 99u8, 145u8, 43u8, 239u8,
                            205u8, 117u8, 217u8, 30u8, 187u8, 35u8, 28u8,
                            221u8, 4u8, 140u8, 22u8, 221u8, 83u8, 56u8, 190u8,
                            108u8, 19u8,
                        ],
                    )
                }
                #[doc = "Unregister a proxy account for the sender."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- `proxy`: The account that the `caller` would like to remove as a proxy."]
                #[doc = "- `proxy_type`: The permissions currently enabled for the removed proxy account."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "Weight is a function of the number of proxies the user has (P)."]
                #[doc = "# </weight>"]
                pub fn remove_proxy(
                    &self,
                    delegate: ::subxt::ext::sp_runtime::MultiAddress<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    proxy_type : runtime_types :: webb_standalone_runtime :: ProxyType,
                    delay: ::core::primitive::u64,
                ) -> ::subxt::tx::StaticTxPayload<RemoveProxy> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Proxy",
                        "remove_proxy",
                        RemoveProxy {
                            delegate,
                            proxy_type,
                            delay,
                        },
                        [
                            227u8, 235u8, 120u8, 150u8, 221u8, 155u8, 132u8,
                            125u8, 234u8, 133u8, 108u8, 137u8, 3u8, 14u8,
                            143u8, 170u8, 35u8, 178u8, 127u8, 246u8, 119u8,
                            21u8, 151u8, 89u8, 168u8, 18u8, 39u8, 229u8, 159u8,
                            50u8, 141u8, 225u8,
                        ],
                    )
                }
                #[doc = "Unregister all proxy accounts for the sender."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "WARNING: This may be called on accounts created by `anonymous`, however if done, then"]
                #[doc = "the unreserved fees will be inaccessible. **All access to this account will be lost.**"]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "Weight is a function of the number of proxies the user has (P)."]
                #[doc = "# </weight>"]
                pub fn remove_proxies(
                    &self,
                ) -> ::subxt::tx::StaticTxPayload<RemoveProxies>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Proxy",
                        "remove_proxies",
                        RemoveProxies {},
                        [
                            15u8, 237u8, 27u8, 166u8, 254u8, 218u8, 92u8, 5u8,
                            213u8, 239u8, 99u8, 59u8, 1u8, 26u8, 73u8, 252u8,
                            81u8, 94u8, 214u8, 227u8, 169u8, 58u8, 40u8, 253u8,
                            187u8, 225u8, 192u8, 26u8, 19u8, 23u8, 121u8,
                            129u8,
                        ],
                    )
                }
                #[doc = "Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and"]
                #[doc = "initialize it with a proxy of `proxy_type` for `origin` sender."]
                #[doc = ""]
                #[doc = "Requires a `Signed` origin."]
                #[doc = ""]
                #[doc = "- `proxy_type`: The type of the proxy that the sender will be registered as over the"]
                #[doc = "new account. This will almost always be the most permissive `ProxyType` possible to"]
                #[doc = "allow for maximum flexibility."]
                #[doc = "- `index`: A disambiguation index, in case this is called multiple times in the same"]
                #[doc = "transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just"]
                #[doc = "want to use `0`."]
                #[doc = "- `delay`: The announcement period required of the initial proxy. Will generally be"]
                #[doc = "zero."]
                #[doc = ""]
                #[doc = "Fails with `Duplicate` if this has already been called in this transaction, from the"]
                #[doc = "same sender, with the same parameters."]
                #[doc = ""]
                #[doc = "Fails if there are insufficient funds to pay for deposit."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "Weight is a function of the number of proxies the user has (P)."]
                #[doc = "# </weight>"]
                #[doc = "TODO: Might be over counting 1 read"]
                pub fn anonymous(
                    &self,
                    proxy_type : runtime_types :: webb_standalone_runtime :: ProxyType,
                    delay: ::core::primitive::u64,
                    index: ::core::primitive::u16,
                ) -> ::subxt::tx::StaticTxPayload<Anonymous> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Proxy",
                        "anonymous",
                        Anonymous {
                            proxy_type,
                            delay,
                            index,
                        },
                        [
                            247u8, 114u8, 164u8, 60u8, 218u8, 172u8, 79u8,
                            127u8, 199u8, 173u8, 3u8, 62u8, 70u8, 214u8, 37u8,
                            138u8, 169u8, 33u8, 70u8, 159u8, 212u8, 111u8,
                            122u8, 220u8, 205u8, 223u8, 207u8, 194u8, 195u8,
                            68u8, 69u8, 98u8,
                        ],
                    )
                }
                #[doc = "Removes a previously spawned anonymous proxy."]
                #[doc = ""]
                #[doc = "WARNING: **All access to this account will be lost.** Any funds held in it will be"]
                #[doc = "inaccessible."]
                #[doc = ""]
                #[doc = "Requires a `Signed` origin, and the sender account must have been created by a call to"]
                #[doc = "`anonymous` with corresponding parameters."]
                #[doc = ""]
                #[doc = "- `spawner`: The account that originally called `anonymous` to create this account."]
                #[doc = "- `index`: The disambiguation index originally passed to `anonymous`. Probably `0`."]
                #[doc = "- `proxy_type`: The proxy type originally passed to `anonymous`."]
                #[doc = "- `height`: The height of the chain when the call to `anonymous` was processed."]
                #[doc = "- `ext_index`: The extrinsic index in which the call to `anonymous` was processed."]
                #[doc = ""]
                #[doc = "Fails with `NoPermission` in case the caller is not a previously created anonymous"]
                #[doc = "account whose `anonymous` call has corresponding parameters."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "Weight is a function of the number of proxies the user has (P)."]
                #[doc = "# </weight>"]
                pub fn kill_anonymous(
                    &self,
                    spawner: ::subxt::ext::sp_runtime::MultiAddress<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    proxy_type : runtime_types :: webb_standalone_runtime :: ProxyType,
                    index: ::core::primitive::u16,
                    height: ::core::primitive::u64,
                    ext_index: ::core::primitive::u32,
                ) -> ::subxt::tx::StaticTxPayload<KillAnonymous>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Proxy",
                        "kill_anonymous",
                        KillAnonymous {
                            spawner,
                            proxy_type,
                            index,
                            height,
                            ext_index,
                        },
                        [
                            39u8, 105u8, 81u8, 155u8, 145u8, 135u8, 140u8,
                            210u8, 111u8, 166u8, 163u8, 20u8, 23u8, 249u8,
                            191u8, 44u8, 87u8, 172u8, 106u8, 65u8, 178u8,
                            219u8, 6u8, 247u8, 115u8, 217u8, 129u8, 92u8,
                            209u8, 227u8, 246u8, 200u8,
                        ],
                    )
                }
                #[doc = "Publish the hash of a proxy-call that will be made in the future."]
                #[doc = ""]
                #[doc = "This must be called some number of blocks before the corresponding `proxy` is attempted"]
                #[doc = "if the delay associated with the proxy relationship is greater than zero."]
                #[doc = ""]
                #[doc = "No more than `MaxPending` announcements may be made at any one time."]
                #[doc = ""]
                #[doc = "This will take a deposit of `AnnouncementDepositFactor` as well as"]
                #[doc = "`AnnouncementDepositBase` if there are no other pending announcements."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ and a proxy of `real`."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- `real`: The account that the proxy will make a call on behalf of."]
                #[doc = "- `call_hash`: The hash of the call to be made by the `real` account."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "Weight is a function of:"]
                #[doc = "- A: the number of announcements made."]
                #[doc = "- P: the number of proxies the user has."]
                #[doc = "# </weight>"]
                pub fn announce(
                    &self,
                    real: ::subxt::ext::sp_runtime::MultiAddress<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    call_hash: ::subxt::ext::sp_core::H256,
                ) -> ::subxt::tx::StaticTxPayload<Announce> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Proxy",
                        "announce",
                        Announce { real, call_hash },
                        [
                            226u8, 252u8, 69u8, 50u8, 248u8, 212u8, 209u8,
                            225u8, 201u8, 236u8, 51u8, 136u8, 56u8, 85u8, 36u8,
                            130u8, 233u8, 84u8, 44u8, 192u8, 174u8, 119u8,
                            245u8, 62u8, 150u8, 78u8, 217u8, 90u8, 167u8,
                            154u8, 228u8, 141u8,
                        ],
                    )
                }
                #[doc = "Remove a given announcement."]
                #[doc = ""]
                #[doc = "May be called by a proxy account to remove a call they previously announced and return"]
                #[doc = "the deposit."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- `real`: The account that the proxy will make a call on behalf of."]
                #[doc = "- `call_hash`: The hash of the call to be made by the `real` account."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "Weight is a function of:"]
                #[doc = "- A: the number of announcements made."]
                #[doc = "- P: the number of proxies the user has."]
                #[doc = "# </weight>"]
                pub fn remove_announcement(
                    &self,
                    real: ::subxt::ext::sp_runtime::MultiAddress<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    call_hash: ::subxt::ext::sp_core::H256,
                ) -> ::subxt::tx::StaticTxPayload<RemoveAnnouncement>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Proxy",
                        "remove_announcement",
                        RemoveAnnouncement { real, call_hash },
                        [
                            251u8, 236u8, 113u8, 182u8, 125u8, 244u8, 31u8,
                            144u8, 66u8, 28u8, 65u8, 97u8, 67u8, 94u8, 225u8,
                            210u8, 46u8, 143u8, 242u8, 124u8, 120u8, 93u8,
                            23u8, 165u8, 83u8, 177u8, 250u8, 171u8, 58u8, 66u8,
                            70u8, 64u8,
                        ],
                    )
                }
                #[doc = "Remove the given announcement of a delegate."]
                #[doc = ""]
                #[doc = "May be called by a target (proxied) account to remove a call that one of their delegates"]
                #[doc = "(`delegate`) has announced they want to execute. The deposit is returned."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- `delegate`: The account that previously announced the call."]
                #[doc = "- `call_hash`: The hash of the call to be made."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "Weight is a function of:"]
                #[doc = "- A: the number of announcements made."]
                #[doc = "- P: the number of proxies the user has."]
                #[doc = "# </weight>"]
                pub fn reject_announcement(
                    &self,
                    delegate: ::subxt::ext::sp_runtime::MultiAddress<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    call_hash: ::subxt::ext::sp_core::H256,
                ) -> ::subxt::tx::StaticTxPayload<RejectAnnouncement>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Proxy",
                        "reject_announcement",
                        RejectAnnouncement {
                            delegate,
                            call_hash,
                        },
                        [
                            122u8, 165u8, 114u8, 85u8, 209u8, 197u8, 11u8,
                            96u8, 211u8, 93u8, 201u8, 42u8, 1u8, 131u8, 254u8,
                            177u8, 191u8, 212u8, 229u8, 13u8, 28u8, 163u8,
                            133u8, 200u8, 113u8, 28u8, 132u8, 45u8, 105u8,
                            177u8, 82u8, 206u8,
                        ],
                    )
                }
                #[doc = "Dispatch the given `call` from an account that the sender is authorized for through"]
                #[doc = "`add_proxy`."]
                #[doc = ""]
                #[doc = "Removes any corresponding announcement(s)."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- `real`: The account that the proxy will make a call on behalf of."]
                #[doc = "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call."]
                #[doc = "- `call`: The call to be made by the `real` account."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "Weight is a function of:"]
                #[doc = "- A: the number of announcements made."]
                #[doc = "- P: the number of proxies the user has."]
                #[doc = "# </weight>"]
                pub fn proxy_announced(
                    &self,
                    delegate: ::subxt::ext::sp_runtime::MultiAddress<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    real: ::subxt::ext::sp_runtime::MultiAddress<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    force_proxy_type: ::core::option::Option<
                        runtime_types::webb_standalone_runtime::ProxyType,
                    >,
                    call: runtime_types::webb_standalone_runtime::Call,
                ) -> ::subxt::tx::StaticTxPayload<ProxyAnnounced>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Proxy",
                        "proxy_announced",
                        ProxyAnnounced {
                            delegate,
                            real,
                            force_proxy_type,
                            call: ::std::boxed::Box::new(call),
                        },
                        [
                            6u8, 104u8, 39u8, 212u8, 81u8, 21u8, 252u8, 74u8,
                            124u8, 250u8, 28u8, 0u8, 253u8, 62u8, 131u8, 216u8,
                            221u8, 38u8, 168u8, 15u8, 210u8, 113u8, 231u8,
                            189u8, 230u8, 37u8, 141u8, 237u8, 99u8, 164u8,
                            224u8, 162u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_proxy::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "A proxy was executed correctly, with the given."]
            pub struct ProxyExecuted {
                pub result: ::core::result::Result<
                    (),
                    runtime_types::sp_runtime::DispatchError,
                >,
            }
            impl ::subxt::events::StaticEvent for ProxyExecuted {
                const PALLET: &'static str = "Proxy";
                const EVENT: &'static str = "ProxyExecuted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "Anonymous account has been created by new proxy with given"]
            #[doc = "disambiguation index and proxy type."]
            pub struct AnonymousCreated {
                pub anonymous: ::subxt::ext::sp_core::crypto::AccountId32,
                pub who: ::subxt::ext::sp_core::crypto::AccountId32,
                pub proxy_type:
                    runtime_types::webb_standalone_runtime::ProxyType,
                pub disambiguation_index: ::core::primitive::u16,
            }
            impl ::subxt::events::StaticEvent for AnonymousCreated {
                const PALLET: &'static str = "Proxy";
                const EVENT: &'static str = "AnonymousCreated";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "An announcement was placed to make a call in the future."]
            pub struct Announced {
                pub real: ::subxt::ext::sp_core::crypto::AccountId32,
                pub proxy: ::subxt::ext::sp_core::crypto::AccountId32,
                pub call_hash: ::subxt::ext::sp_core::H256,
            }
            impl ::subxt::events::StaticEvent for Announced {
                const PALLET: &'static str = "Proxy";
                const EVENT: &'static str = "Announced";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "A proxy was added."]
            pub struct ProxyAdded {
                pub delegator: ::subxt::ext::sp_core::crypto::AccountId32,
                pub delegatee: ::subxt::ext::sp_core::crypto::AccountId32,
                pub proxy_type:
                    runtime_types::webb_standalone_runtime::ProxyType,
                pub delay: ::core::primitive::u64,
            }
            impl ::subxt::events::StaticEvent for ProxyAdded {
                const PALLET: &'static str = "Proxy";
                const EVENT: &'static str = "ProxyAdded";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "A proxy was removed."]
            pub struct ProxyRemoved {
                pub delegator: ::subxt::ext::sp_core::crypto::AccountId32,
                pub delegatee: ::subxt::ext::sp_core::crypto::AccountId32,
                pub proxy_type:
                    runtime_types::webb_standalone_runtime::ProxyType,
                pub delay: ::core::primitive::u64,
            }
            impl ::subxt::events::StaticEvent for ProxyRemoved {
                const PALLET: &'static str = "Proxy";
                const EVENT: &'static str = "ProxyRemoved";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The set of account proxies. Maps the account which has delegated to the accounts"]
                #[doc = " which are being delegated to, together with the amount held on deposit."]                pub fn proxies (& self , _0 : impl :: std :: borrow :: Borrow < :: subxt :: ext :: sp_core :: crypto :: AccountId32 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < (runtime_types :: sp_runtime :: bounded :: bounded_vec :: BoundedVec < runtime_types :: pallet_proxy :: ProxyDefinition < :: subxt :: ext :: sp_core :: crypto :: AccountId32 , runtime_types :: webb_standalone_runtime :: ProxyType , :: core :: primitive :: u64 > > , :: core :: primitive :: u128 ,) > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("Proxy" , "Proxies" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Twox64Concat)] , [29u8 , 196u8 , 62u8 , 237u8 , 202u8 , 233u8 , 119u8 , 198u8 , 157u8 , 71u8 , 212u8 , 171u8 , 83u8 , 157u8 , 157u8 , 69u8 , 181u8 , 0u8 , 136u8 , 157u8 , 166u8 , 119u8 , 27u8 , 157u8 , 208u8 , 194u8 , 151u8 , 3u8 , 58u8 , 48u8 , 184u8 , 39u8 ,])
                }
                #[doc = " The set of account proxies. Maps the account which has delegated to the accounts"]
                #[doc = " which are being delegated to, together with the amount held on deposit."]                pub fn proxies_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < (runtime_types :: sp_runtime :: bounded :: bounded_vec :: BoundedVec < runtime_types :: pallet_proxy :: ProxyDefinition < :: subxt :: ext :: sp_core :: crypto :: AccountId32 , runtime_types :: webb_standalone_runtime :: ProxyType , :: core :: primitive :: u64 > > , :: core :: primitive :: u128 ,) > , () , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Proxy",
                        "Proxies",
                        Vec::new(),
                        [
                            29u8, 196u8, 62u8, 237u8, 202u8, 233u8, 119u8,
                            198u8, 157u8, 71u8, 212u8, 171u8, 83u8, 157u8,
                            157u8, 69u8, 181u8, 0u8, 136u8, 157u8, 166u8,
                            119u8, 27u8, 157u8, 208u8, 194u8, 151u8, 3u8, 58u8,
                            48u8, 184u8, 39u8,
                        ],
                    )
                }
                #[doc = " The announcements made by the proxy (key)."]                pub fn announcements (& self , _0 : impl :: std :: borrow :: Borrow < :: subxt :: ext :: sp_core :: crypto :: AccountId32 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < (runtime_types :: sp_runtime :: bounded :: bounded_vec :: BoundedVec < runtime_types :: pallet_proxy :: Announcement < :: subxt :: ext :: sp_core :: crypto :: AccountId32 , :: subxt :: ext :: sp_core :: H256 , :: core :: primitive :: u64 > > , :: core :: primitive :: u128 ,) > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("Proxy" , "Announcements" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Twox64Concat)] , [171u8 , 196u8 , 179u8 , 148u8 , 64u8 , 151u8 , 66u8 , 184u8 , 102u8 , 220u8 , 132u8 , 79u8 , 92u8 , 119u8 , 217u8 , 116u8 , 229u8 , 208u8 , 241u8 , 36u8 , 51u8 , 101u8 , 170u8 , 110u8 , 15u8 , 48u8 , 3u8 , 123u8 , 94u8 , 45u8 , 49u8 , 120u8 ,])
                }
                #[doc = " The announcements made by the proxy (key)."]                pub fn announcements_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < (runtime_types :: sp_runtime :: bounded :: bounded_vec :: BoundedVec < runtime_types :: pallet_proxy :: Announcement < :: subxt :: ext :: sp_core :: crypto :: AccountId32 , :: subxt :: ext :: sp_core :: H256 , :: core :: primitive :: u64 > > , :: core :: primitive :: u128 ,) > , () , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Proxy",
                        "Announcements",
                        Vec::new(),
                        [
                            171u8, 196u8, 179u8, 148u8, 64u8, 151u8, 66u8,
                            184u8, 102u8, 220u8, 132u8, 79u8, 92u8, 119u8,
                            217u8, 116u8, 229u8, 208u8, 241u8, 36u8, 51u8,
                            101u8, 170u8, 110u8, 15u8, 48u8, 3u8, 123u8, 94u8,
                            45u8, 49u8, 120u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The base amount of currency needed to reserve for creating a proxy."]
                #[doc = ""]
                #[doc = " This is held for an additional storage item whose value size is"]
                #[doc = " `sizeof(Balance)` bytes and whose key size is `sizeof(AccountId)` bytes."]
                pub fn proxy_deposit_base(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<
                        ::core::primitive::u128,
                    >,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "Proxy",
                        "ProxyDepositBase",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8,
                            105u8, 200u8, 214u8, 27u8, 144u8, 208u8, 218u8,
                            160u8, 130u8, 109u8, 101u8, 54u8, 210u8, 136u8,
                            71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8,
                            148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The amount of currency needed per proxy added."]
                #[doc = ""]
                #[doc = " This is held for adding 32 bytes plus an instance of `ProxyType` more into a"]
                #[doc = " pre-existing storage value. Thus, when configuring `ProxyDepositFactor` one should take"]
                #[doc = " into account `32 + proxy_type.encode().len()` bytes of data."]
                pub fn proxy_deposit_factor(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<
                        ::core::primitive::u128,
                    >,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "Proxy",
                        "ProxyDepositFactor",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8,
                            105u8, 200u8, 214u8, 27u8, 144u8, 208u8, 218u8,
                            160u8, 130u8, 109u8, 101u8, 54u8, 210u8, 136u8,
                            71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8,
                            148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The maximum amount of proxies allowed for a single account."]
                pub fn max_proxies(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "Proxy",
                        "MaxProxies",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8,
                            200u8, 157u8, 125u8, 151u8, 53u8, 76u8, 168u8,
                            26u8, 10u8, 9u8, 98u8, 68u8, 9u8, 178u8, 197u8,
                            113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The maximum amount of time-delayed announcements that are allowed to be pending."]
                pub fn max_pending(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "Proxy",
                        "MaxPending",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8,
                            200u8, 157u8, 125u8, 151u8, 53u8, 76u8, 168u8,
                            26u8, 10u8, 9u8, 98u8, 68u8, 9u8, 178u8, 197u8,
                            113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The base amount of currency needed to reserve for creating an announcement."]
                #[doc = ""]
                #[doc = " This is held when a new storage item holding a `Balance` is created (typically 16"]
                #[doc = " bytes)."]
                pub fn announcement_deposit_base(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<
                        ::core::primitive::u128,
                    >,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "Proxy",
                        "AnnouncementDepositBase",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8,
                            105u8, 200u8, 214u8, 27u8, 144u8, 208u8, 218u8,
                            160u8, 130u8, 109u8, 101u8, 54u8, 210u8, 136u8,
                            71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8,
                            148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The amount of currency needed per announcement made."]
                #[doc = ""]
                #[doc = " This is held for adding an `AccountId`, `Hash` and `BlockNumber` (typically 68 bytes)"]
                #[doc = " into a pre-existing storage value."]
                pub fn announcement_deposit_factor(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<
                        ::core::primitive::u128,
                    >,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "Proxy",
                        "AnnouncementDepositFactor",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8,
                            105u8, 200u8, 214u8, 27u8, 144u8, 208u8, 218u8,
                            160u8, 130u8, 109u8, 101u8, 54u8, 210u8, 136u8,
                            71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8,
                            148u8, 156u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod assets {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Create {
                #[codec(compact)]
                pub id: ::core::primitive::u32,
                pub admin: ::subxt::ext::sp_runtime::MultiAddress<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                pub min_balance: ::core::primitive::u128,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct ForceCreate {
                #[codec(compact)]
                pub id: ::core::primitive::u32,
                pub owner: ::subxt::ext::sp_runtime::MultiAddress<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                pub is_sufficient: ::core::primitive::bool,
                #[codec(compact)]
                pub min_balance: ::core::primitive::u128,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Destroy {
                #[codec(compact)]
                pub id: ::core::primitive::u32,
                pub witness:
                    runtime_types::pallet_assets::types::DestroyWitness,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Mint {
                #[codec(compact)]
                pub id: ::core::primitive::u32,
                pub beneficiary: ::subxt::ext::sp_runtime::MultiAddress<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                #[codec(compact)]
                pub amount: ::core::primitive::u128,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Burn {
                #[codec(compact)]
                pub id: ::core::primitive::u32,
                pub who: ::subxt::ext::sp_runtime::MultiAddress<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                #[codec(compact)]
                pub amount: ::core::primitive::u128,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Transfer {
                #[codec(compact)]
                pub id: ::core::primitive::u32,
                pub target: ::subxt::ext::sp_runtime::MultiAddress<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                #[codec(compact)]
                pub amount: ::core::primitive::u128,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct TransferKeepAlive {
                #[codec(compact)]
                pub id: ::core::primitive::u32,
                pub target: ::subxt::ext::sp_runtime::MultiAddress<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                #[codec(compact)]
                pub amount: ::core::primitive::u128,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct ForceTransfer {
                #[codec(compact)]
                pub id: ::core::primitive::u32,
                pub source: ::subxt::ext::sp_runtime::MultiAddress<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                pub dest: ::subxt::ext::sp_runtime::MultiAddress<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                #[codec(compact)]
                pub amount: ::core::primitive::u128,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Freeze {
                #[codec(compact)]
                pub id: ::core::primitive::u32,
                pub who: ::subxt::ext::sp_runtime::MultiAddress<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Thaw {
                #[codec(compact)]
                pub id: ::core::primitive::u32,
                pub who: ::subxt::ext::sp_runtime::MultiAddress<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct FreezeAsset {
                #[codec(compact)]
                pub id: ::core::primitive::u32,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct ThawAsset {
                #[codec(compact)]
                pub id: ::core::primitive::u32,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct TransferOwnership {
                #[codec(compact)]
                pub id: ::core::primitive::u32,
                pub owner: ::subxt::ext::sp_runtime::MultiAddress<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct SetTeam {
                #[codec(compact)]
                pub id: ::core::primitive::u32,
                pub issuer: ::subxt::ext::sp_runtime::MultiAddress<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                pub admin: ::subxt::ext::sp_runtime::MultiAddress<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                pub freezer: ::subxt::ext::sp_runtime::MultiAddress<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct SetMetadata {
                #[codec(compact)]
                pub id: ::core::primitive::u32,
                pub name: ::std::vec::Vec<::core::primitive::u8>,
                pub symbol: ::std::vec::Vec<::core::primitive::u8>,
                pub decimals: ::core::primitive::u8,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct ClearMetadata {
                #[codec(compact)]
                pub id: ::core::primitive::u32,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct ForceSetMetadata {
                #[codec(compact)]
                pub id: ::core::primitive::u32,
                pub name: ::std::vec::Vec<::core::primitive::u8>,
                pub symbol: ::std::vec::Vec<::core::primitive::u8>,
                pub decimals: ::core::primitive::u8,
                pub is_frozen: ::core::primitive::bool,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct ForceClearMetadata {
                #[codec(compact)]
                pub id: ::core::primitive::u32,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct ForceAssetStatus {
                #[codec(compact)]
                pub id: ::core::primitive::u32,
                pub owner: ::subxt::ext::sp_runtime::MultiAddress<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                pub issuer: ::subxt::ext::sp_runtime::MultiAddress<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                pub admin: ::subxt::ext::sp_runtime::MultiAddress<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                pub freezer: ::subxt::ext::sp_runtime::MultiAddress<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                #[codec(compact)]
                pub min_balance: ::core::primitive::u128,
                pub is_sufficient: ::core::primitive::bool,
                pub is_frozen: ::core::primitive::bool,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct ApproveTransfer {
                #[codec(compact)]
                pub id: ::core::primitive::u32,
                pub delegate: ::subxt::ext::sp_runtime::MultiAddress<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                #[codec(compact)]
                pub amount: ::core::primitive::u128,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct CancelApproval {
                #[codec(compact)]
                pub id: ::core::primitive::u32,
                pub delegate: ::subxt::ext::sp_runtime::MultiAddress<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct ForceCancelApproval {
                #[codec(compact)]
                pub id: ::core::primitive::u32,
                pub owner: ::subxt::ext::sp_runtime::MultiAddress<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                pub delegate: ::subxt::ext::sp_runtime::MultiAddress<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct TransferApproved {
                #[codec(compact)]
                pub id: ::core::primitive::u32,
                pub owner: ::subxt::ext::sp_runtime::MultiAddress<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                pub destination: ::subxt::ext::sp_runtime::MultiAddress<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                #[codec(compact)]
                pub amount: ::core::primitive::u128,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Touch {
                #[codec(compact)]
                pub id: ::core::primitive::u32,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Refund {
                #[codec(compact)]
                pub id: ::core::primitive::u32,
                pub allow_burn: ::core::primitive::bool,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Issue a new class of fungible assets from a public origin."]
                #[doc = ""]
                #[doc = "This new asset class has no assets initially and its owner is the origin."]
                #[doc = ""]
                #[doc = "The origin must be Signed and the sender must have sufficient funds free."]
                #[doc = ""]
                #[doc = "Funds of sender are reserved by `AssetDeposit`."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- `id`: The identifier of the new asset. This must not be currently in use to identify"]
                #[doc = "an existing asset."]
                #[doc = "- `admin`: The admin of this class of assets. The admin is the initial address of each"]
                #[doc = "member of the asset class's admin team."]
                #[doc = "- `min_balance`: The minimum balance of this new asset that any single account must"]
                #[doc = "have. If an account's balance is reduced below this, then it collapses to zero."]
                #[doc = ""]
                #[doc = "Emits `Created` event when successful."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn create(
                    &self,
                    id: ::core::primitive::u32,
                    admin: ::subxt::ext::sp_runtime::MultiAddress<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    min_balance: ::core::primitive::u128,
                ) -> ::subxt::tx::StaticTxPayload<Create> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Assets",
                        "create",
                        Create {
                            id,
                            admin,
                            min_balance,
                        },
                        [
                            197u8, 86u8, 72u8, 4u8, 104u8, 55u8, 113u8, 73u8,
                            86u8, 21u8, 128u8, 40u8, 25u8, 91u8, 18u8, 246u8,
                            157u8, 168u8, 160u8, 65u8, 101u8, 193u8, 120u8,
                            217u8, 245u8, 26u8, 194u8, 186u8, 126u8, 231u8,
                            118u8, 176u8,
                        ],
                    )
                }
                #[doc = "Issue a new class of fungible assets from a privileged origin."]
                #[doc = ""]
                #[doc = "This new asset class has no assets initially."]
                #[doc = ""]
                #[doc = "The origin must conform to `ForceOrigin`."]
                #[doc = ""]
                #[doc = "Unlike `create`, no funds are reserved."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the new asset. This must not be currently in use to identify"]
                #[doc = "an existing asset."]
                #[doc = "- `owner`: The owner of this class of assets. The owner has full superuser permissions"]
                #[doc = "over this asset, but may later change and configure the permissions using"]
                #[doc = "`transfer_ownership` and `set_team`."]
                #[doc = "- `min_balance`: The minimum balance of this new asset that any single account must"]
                #[doc = "have. If an account's balance is reduced below this, then it collapses to zero."]
                #[doc = ""]
                #[doc = "Emits `ForceCreated` event when successful."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn force_create(
                    &self,
                    id: ::core::primitive::u32,
                    owner: ::subxt::ext::sp_runtime::MultiAddress<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    is_sufficient: ::core::primitive::bool,
                    min_balance: ::core::primitive::u128,
                ) -> ::subxt::tx::StaticTxPayload<ForceCreate> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Assets",
                        "force_create",
                        ForceCreate {
                            id,
                            owner,
                            is_sufficient,
                            min_balance,
                        },
                        [
                            152u8, 24u8, 39u8, 126u8, 101u8, 61u8, 147u8,
                            180u8, 121u8, 52u8, 45u8, 205u8, 87u8, 32u8, 87u8,
                            7u8, 134u8, 168u8, 1u8, 159u8, 191u8, 246u8, 90u8,
                            245u8, 80u8, 172u8, 185u8, 254u8, 59u8, 37u8,
                            204u8, 162u8,
                        ],
                    )
                }
                #[doc = "Destroy a class of fungible assets."]
                #[doc = ""]
                #[doc = "The origin must conform to `ForceOrigin` or must be Signed and the sender must be the"]
                #[doc = "owner of the asset `id`."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the asset to be destroyed. This must identify an existing"]
                #[doc = "asset."]
                #[doc = ""]
                #[doc = "Emits `Destroyed` event when successful."]
                #[doc = ""]
                #[doc = "NOTE: It can be helpful to first freeze an asset before destroying it so that you"]
                #[doc = "can provide accurate witness information and prevent users from manipulating state"]
                #[doc = "in a way that can make it harder to destroy."]
                #[doc = ""]
                #[doc = "Weight: `O(c + p + a)` where:"]
                #[doc = "- `c = (witness.accounts - witness.sufficients)`"]
                #[doc = "- `s = witness.sufficients`"]
                #[doc = "- `a = witness.approvals`"]
                pub fn destroy(
                    &self,
                    id: ::core::primitive::u32,
                    witness : runtime_types :: pallet_assets :: types :: DestroyWitness,
                ) -> ::subxt::tx::StaticTxPayload<Destroy> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Assets",
                        "destroy",
                        Destroy { id, witness },
                        [
                            243u8, 230u8, 96u8, 223u8, 56u8, 13u8, 69u8, 28u8,
                            165u8, 163u8, 192u8, 203u8, 100u8, 170u8, 10u8,
                            85u8, 85u8, 144u8, 108u8, 32u8, 64u8, 84u8, 149u8,
                            15u8, 75u8, 57u8, 24u8, 249u8, 146u8, 157u8, 52u8,
                            166u8,
                        ],
                    )
                }
                #[doc = "Mint assets of a particular class."]
                #[doc = ""]
                #[doc = "The origin must be Signed and the sender must be the Issuer of the asset `id`."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the asset to have some amount minted."]
                #[doc = "- `beneficiary`: The account to be credited with the minted assets."]
                #[doc = "- `amount`: The amount of the asset to be minted."]
                #[doc = ""]
                #[doc = "Emits `Issued` event when successful."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                #[doc = "Modes: Pre-existing balance of `beneficiary`; Account pre-existence of `beneficiary`."]
                pub fn mint(
                    &self,
                    id: ::core::primitive::u32,
                    beneficiary: ::subxt::ext::sp_runtime::MultiAddress<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    amount: ::core::primitive::u128,
                ) -> ::subxt::tx::StaticTxPayload<Mint> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Assets",
                        "mint",
                        Mint {
                            id,
                            beneficiary,
                            amount,
                        },
                        [
                            21u8, 30u8, 124u8, 32u8, 105u8, 231u8, 137u8,
                            139u8, 28u8, 252u8, 232u8, 138u8, 197u8, 0u8,
                            109u8, 156u8, 102u8, 83u8, 51u8, 128u8, 246u8,
                            186u8, 249u8, 144u8, 133u8, 127u8, 241u8, 152u8,
                            201u8, 50u8, 41u8, 105u8,
                        ],
                    )
                }
                #[doc = "Reduce the balance of `who` by as much as possible up to `amount` assets of `id`."]
                #[doc = ""]
                #[doc = "Origin must be Signed and the sender should be the Manager of the asset `id`."]
                #[doc = ""]
                #[doc = "Bails with `NoAccount` if the `who` is already dead."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the asset to have some amount burned."]
                #[doc = "- `who`: The account to be debited from."]
                #[doc = "- `amount`: The maximum amount by which `who`'s balance should be reduced."]
                #[doc = ""]
                #[doc = "Emits `Burned` with the actual amount burned. If this takes the balance to below the"]
                #[doc = "minimum for the asset, then the amount burned is increased to take it to zero."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                #[doc = "Modes: Post-existence of `who`; Pre & post Zombie-status of `who`."]
                pub fn burn(
                    &self,
                    id: ::core::primitive::u32,
                    who: ::subxt::ext::sp_runtime::MultiAddress<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    amount: ::core::primitive::u128,
                ) -> ::subxt::tx::StaticTxPayload<Burn> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Assets",
                        "burn",
                        Burn { id, who, amount },
                        [
                            104u8, 94u8, 68u8, 117u8, 145u8, 209u8, 149u8,
                            156u8, 131u8, 137u8, 137u8, 93u8, 114u8, 237u8,
                            75u8, 56u8, 77u8, 65u8, 18u8, 71u8, 19u8, 187u8,
                            76u8, 145u8, 24u8, 128u8, 62u8, 234u8, 200u8,
                            247u8, 196u8, 45u8,
                        ],
                    )
                }
                #[doc = "Move some assets from the sender account to another."]
                #[doc = ""]
                #[doc = "Origin must be Signed."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the asset to have some amount transferred."]
                #[doc = "- `target`: The account to be credited."]
                #[doc = "- `amount`: The amount by which the sender's balance of assets should be reduced and"]
                #[doc = "`target`'s balance increased. The amount actually transferred may be slightly greater in"]
                #[doc = "the case that the transfer would otherwise take the sender balance above zero but below"]
                #[doc = "the minimum balance. Must be greater than zero."]
                #[doc = ""]
                #[doc = "Emits `Transferred` with the actual amount transferred. If this takes the source balance"]
                #[doc = "to below the minimum for the asset, then the amount transferred is increased to take it"]
                #[doc = "to zero."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                #[doc = "Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of"]
                #[doc = "`target`."]
                pub fn transfer(
                    &self,
                    id: ::core::primitive::u32,
                    target: ::subxt::ext::sp_runtime::MultiAddress<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    amount: ::core::primitive::u128,
                ) -> ::subxt::tx::StaticTxPayload<Transfer> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Assets",
                        "transfer",
                        Transfer { id, target, amount },
                        [
                            132u8, 120u8, 134u8, 8u8, 238u8, 66u8, 45u8, 83u8,
                            151u8, 8u8, 118u8, 62u8, 2u8, 163u8, 213u8, 255u8,
                            42u8, 211u8, 125u8, 21u8, 150u8, 117u8, 177u8,
                            21u8, 105u8, 61u8, 3u8, 2u8, 30u8, 70u8, 65u8,
                            145u8,
                        ],
                    )
                }
                #[doc = "Move some assets from the sender account to another, keeping the sender account alive."]
                #[doc = ""]
                #[doc = "Origin must be Signed."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the asset to have some amount transferred."]
                #[doc = "- `target`: The account to be credited."]
                #[doc = "- `amount`: The amount by which the sender's balance of assets should be reduced and"]
                #[doc = "`target`'s balance increased. The amount actually transferred may be slightly greater in"]
                #[doc = "the case that the transfer would otherwise take the sender balance above zero but below"]
                #[doc = "the minimum balance. Must be greater than zero."]
                #[doc = ""]
                #[doc = "Emits `Transferred` with the actual amount transferred. If this takes the source balance"]
                #[doc = "to below the minimum for the asset, then the amount transferred is increased to take it"]
                #[doc = "to zero."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                #[doc = "Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of"]
                #[doc = "`target`."]
                pub fn transfer_keep_alive(
                    &self,
                    id: ::core::primitive::u32,
                    target: ::subxt::ext::sp_runtime::MultiAddress<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    amount: ::core::primitive::u128,
                ) -> ::subxt::tx::StaticTxPayload<TransferKeepAlive>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Assets",
                        "transfer_keep_alive",
                        TransferKeepAlive { id, target, amount },
                        [
                            9u8, 46u8, 251u8, 191u8, 91u8, 192u8, 119u8, 203u8,
                            147u8, 84u8, 76u8, 27u8, 237u8, 174u8, 67u8, 249u8,
                            185u8, 199u8, 240u8, 122u8, 160u8, 111u8, 245u8,
                            247u8, 241u8, 197u8, 238u8, 253u8, 75u8, 216u8,
                            41u8, 148u8,
                        ],
                    )
                }
                #[doc = "Move some assets from one account to another."]
                #[doc = ""]
                #[doc = "Origin must be Signed and the sender should be the Admin of the asset `id`."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the asset to have some amount transferred."]
                #[doc = "- `source`: The account to be debited."]
                #[doc = "- `dest`: The account to be credited."]
                #[doc = "- `amount`: The amount by which the `source`'s balance of assets should be reduced and"]
                #[doc = "`dest`'s balance increased. The amount actually transferred may be slightly greater in"]
                #[doc = "the case that the transfer would otherwise take the `source` balance above zero but"]
                #[doc = "below the minimum balance. Must be greater than zero."]
                #[doc = ""]
                #[doc = "Emits `Transferred` with the actual amount transferred. If this takes the source balance"]
                #[doc = "to below the minimum for the asset, then the amount transferred is increased to take it"]
                #[doc = "to zero."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                #[doc = "Modes: Pre-existence of `dest`; Post-existence of `source`; Account pre-existence of"]
                #[doc = "`dest`."]
                pub fn force_transfer(
                    &self,
                    id: ::core::primitive::u32,
                    source: ::subxt::ext::sp_runtime::MultiAddress<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    dest: ::subxt::ext::sp_runtime::MultiAddress<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    amount: ::core::primitive::u128,
                ) -> ::subxt::tx::StaticTxPayload<ForceTransfer>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Assets",
                        "force_transfer",
                        ForceTransfer {
                            id,
                            source,
                            dest,
                            amount,
                        },
                        [
                            253u8, 100u8, 109u8, 66u8, 153u8, 140u8, 39u8,
                            85u8, 19u8, 199u8, 68u8, 6u8, 124u8, 200u8, 250u8,
                            142u8, 104u8, 55u8, 190u8, 25u8, 117u8, 180u8,
                            201u8, 245u8, 153u8, 192u8, 240u8, 5u8, 176u8,
                            142u8, 106u8, 92u8,
                        ],
                    )
                }
                #[doc = "Disallow further unprivileged transfers from an account."]
                #[doc = ""]
                #[doc = "Origin must be Signed and the sender should be the Freezer of the asset `id`."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the asset to be frozen."]
                #[doc = "- `who`: The account to be frozen."]
                #[doc = ""]
                #[doc = "Emits `Frozen`."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn freeze(
                    &self,
                    id: ::core::primitive::u32,
                    who: ::subxt::ext::sp_runtime::MultiAddress<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::StaticTxPayload<Freeze> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Assets",
                        "freeze",
                        Freeze { id, who },
                        [
                            191u8, 155u8, 214u8, 95u8, 125u8, 58u8, 207u8,
                            76u8, 99u8, 15u8, 102u8, 189u8, 26u8, 232u8, 9u8,
                            73u8, 231u8, 114u8, 199u8, 129u8, 110u8, 84u8,
                            22u8, 114u8, 108u8, 57u8, 83u8, 246u8, 92u8, 0u8,
                            127u8, 53u8,
                        ],
                    )
                }
                #[doc = "Allow unprivileged transfers from an account again."]
                #[doc = ""]
                #[doc = "Origin must be Signed and the sender should be the Admin of the asset `id`."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the asset to be frozen."]
                #[doc = "- `who`: The account to be unfrozen."]
                #[doc = ""]
                #[doc = "Emits `Thawed`."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn thaw(
                    &self,
                    id: ::core::primitive::u32,
                    who: ::subxt::ext::sp_runtime::MultiAddress<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::StaticTxPayload<Thaw> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Assets",
                        "thaw",
                        Thaw { id, who },
                        [
                            52u8, 37u8, 227u8, 9u8, 177u8, 120u8, 93u8, 129u8,
                            81u8, 35u8, 107u8, 22u8, 80u8, 58u8, 3u8, 98u8,
                            211u8, 65u8, 49u8, 107u8, 184u8, 102u8, 185u8,
                            84u8, 160u8, 73u8, 12u8, 242u8, 203u8, 233u8, 79u8,
                            117u8,
                        ],
                    )
                }
                #[doc = "Disallow further unprivileged transfers for the asset class."]
                #[doc = ""]
                #[doc = "Origin must be Signed and the sender should be the Freezer of the asset `id`."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the asset to be frozen."]
                #[doc = ""]
                #[doc = "Emits `Frozen`."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn freeze_asset(
                    &self,
                    id: ::core::primitive::u32,
                ) -> ::subxt::tx::StaticTxPayload<FreezeAsset> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Assets",
                        "freeze_asset",
                        FreezeAsset { id },
                        [
                            208u8, 101u8, 0u8, 73u8, 41u8, 192u8, 227u8, 44u8,
                            189u8, 231u8, 40u8, 124u8, 189u8, 147u8, 136u8,
                            210u8, 76u8, 32u8, 249u8, 183u8, 68u8, 58u8, 150u8,
                            136u8, 192u8, 47u8, 173u8, 178u8, 225u8, 84u8,
                            110u8, 1u8,
                        ],
                    )
                }
                #[doc = "Allow unprivileged transfers for the asset again."]
                #[doc = ""]
                #[doc = "Origin must be Signed and the sender should be the Admin of the asset `id`."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the asset to be thawed."]
                #[doc = ""]
                #[doc = "Emits `Thawed`."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn thaw_asset(
                    &self,
                    id: ::core::primitive::u32,
                ) -> ::subxt::tx::StaticTxPayload<ThawAsset> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Assets",
                        "thaw_asset",
                        ThawAsset { id },
                        [
                            18u8, 198u8, 141u8, 158u8, 182u8, 167u8, 160u8,
                            227u8, 20u8, 74u8, 80u8, 164u8, 89u8, 46u8, 168u8,
                            139u8, 251u8, 83u8, 155u8, 91u8, 91u8, 46u8, 205u8,
                            55u8, 171u8, 175u8, 167u8, 188u8, 116u8, 155u8,
                            79u8, 117u8,
                        ],
                    )
                }
                #[doc = "Change the Owner of an asset."]
                #[doc = ""]
                #[doc = "Origin must be Signed and the sender should be the Owner of the asset `id`."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the asset."]
                #[doc = "- `owner`: The new Owner of this asset."]
                #[doc = ""]
                #[doc = "Emits `OwnerChanged`."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn transfer_ownership(
                    &self,
                    id: ::core::primitive::u32,
                    owner: ::subxt::ext::sp_runtime::MultiAddress<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::StaticTxPayload<TransferOwnership>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Assets",
                        "transfer_ownership",
                        TransferOwnership { id, owner },
                        [
                            170u8, 94u8, 202u8, 42u8, 41u8, 156u8, 250u8, 63u8,
                            113u8, 110u8, 166u8, 129u8, 90u8, 233u8, 35u8,
                            87u8, 123u8, 172u8, 65u8, 108u8, 170u8, 237u8,
                            252u8, 70u8, 186u8, 12u8, 58u8, 6u8, 173u8, 87u8,
                            161u8, 211u8,
                        ],
                    )
                }
                #[doc = "Change the Issuer, Admin and Freezer of an asset."]
                #[doc = ""]
                #[doc = "Origin must be Signed and the sender should be the Owner of the asset `id`."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the asset to be frozen."]
                #[doc = "- `issuer`: The new Issuer of this asset."]
                #[doc = "- `admin`: The new Admin of this asset."]
                #[doc = "- `freezer`: The new Freezer of this asset."]
                #[doc = ""]
                #[doc = "Emits `TeamChanged`."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn set_team(
                    &self,
                    id: ::core::primitive::u32,
                    issuer: ::subxt::ext::sp_runtime::MultiAddress<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    admin: ::subxt::ext::sp_runtime::MultiAddress<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    freezer: ::subxt::ext::sp_runtime::MultiAddress<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::StaticTxPayload<SetTeam> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Assets",
                        "set_team",
                        SetTeam {
                            id,
                            issuer,
                            admin,
                            freezer,
                        },
                        [
                            30u8, 60u8, 182u8, 252u8, 64u8, 97u8, 6u8, 80u8,
                            159u8, 204u8, 14u8, 227u8, 54u8, 20u8, 172u8,
                            100u8, 77u8, 59u8, 164u8, 247u8, 122u8, 39u8,
                            129u8, 106u8, 87u8, 82u8, 77u8, 165u8, 215u8,
                            232u8, 159u8, 29u8,
                        ],
                    )
                }
                #[doc = "Set the metadata for an asset."]
                #[doc = ""]
                #[doc = "Origin must be Signed and the sender should be the Owner of the asset `id`."]
                #[doc = ""]
                #[doc = "Funds of sender are reserved according to the formula:"]
                #[doc = "`MetadataDepositBase + MetadataDepositPerByte * (name.len + symbol.len)` taking into"]
                #[doc = "account any already reserved funds."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the asset to update."]
                #[doc = "- `name`: The user friendly name of this asset. Limited in length by `StringLimit`."]
                #[doc = "- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`."]
                #[doc = "- `decimals`: The number of decimals this asset uses to represent one unit."]
                #[doc = ""]
                #[doc = "Emits `MetadataSet`."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn set_metadata(
                    &self,
                    id: ::core::primitive::u32,
                    name: ::std::vec::Vec<::core::primitive::u8>,
                    symbol: ::std::vec::Vec<::core::primitive::u8>,
                    decimals: ::core::primitive::u8,
                ) -> ::subxt::tx::StaticTxPayload<SetMetadata> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Assets",
                        "set_metadata",
                        SetMetadata {
                            id,
                            name,
                            symbol,
                            decimals,
                        },
                        [
                            15u8, 184u8, 50u8, 46u8, 164u8, 27u8, 105u8, 186u8,
                            35u8, 115u8, 194u8, 247u8, 74u8, 252u8, 139u8,
                            242u8, 108u8, 221u8, 122u8, 15u8, 139u8, 74u8,
                            123u8, 17u8, 192u8, 138u8, 182u8, 163u8, 77u8, 7u8,
                            124u8, 18u8,
                        ],
                    )
                }
                #[doc = "Clear the metadata for an asset."]
                #[doc = ""]
                #[doc = "Origin must be Signed and the sender should be the Owner of the asset `id`."]
                #[doc = ""]
                #[doc = "Any deposit is freed for the asset owner."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the asset to clear."]
                #[doc = ""]
                #[doc = "Emits `MetadataCleared`."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn clear_metadata(
                    &self,
                    id: ::core::primitive::u32,
                ) -> ::subxt::tx::StaticTxPayload<ClearMetadata>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Assets",
                        "clear_metadata",
                        ClearMetadata { id },
                        [
                            192u8, 41u8, 71u8, 183u8, 13u8, 128u8, 244u8,
                            255u8, 175u8, 36u8, 99u8, 175u8, 15u8, 129u8,
                            228u8, 76u8, 107u8, 214u8, 166u8, 116u8, 244u8,
                            139u8, 60u8, 31u8, 123u8, 61u8, 203u8, 59u8, 213u8,
                            146u8, 116u8, 126u8,
                        ],
                    )
                }
                #[doc = "Force the metadata for an asset to some value."]
                #[doc = ""]
                #[doc = "Origin must be ForceOrigin."]
                #[doc = ""]
                #[doc = "Any deposit is left alone."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the asset to update."]
                #[doc = "- `name`: The user friendly name of this asset. Limited in length by `StringLimit`."]
                #[doc = "- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`."]
                #[doc = "- `decimals`: The number of decimals this asset uses to represent one unit."]
                #[doc = ""]
                #[doc = "Emits `MetadataSet`."]
                #[doc = ""]
                #[doc = "Weight: `O(N + S)` where N and S are the length of the name and symbol respectively."]
                pub fn force_set_metadata(
                    &self,
                    id: ::core::primitive::u32,
                    name: ::std::vec::Vec<::core::primitive::u8>,
                    symbol: ::std::vec::Vec<::core::primitive::u8>,
                    decimals: ::core::primitive::u8,
                    is_frozen: ::core::primitive::bool,
                ) -> ::subxt::tx::StaticTxPayload<ForceSetMetadata>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Assets",
                        "force_set_metadata",
                        ForceSetMetadata {
                            id,
                            name,
                            symbol,
                            decimals,
                            is_frozen,
                        },
                        [
                            7u8, 30u8, 55u8, 233u8, 217u8, 113u8, 196u8, 21u8,
                            29u8, 122u8, 168u8, 225u8, 63u8, 104u8, 57u8, 78u8,
                            76u8, 145u8, 121u8, 118u8, 91u8, 149u8, 87u8, 26u8,
                            26u8, 125u8, 44u8, 241u8, 143u8, 138u8, 144u8, 8u8,
                        ],
                    )
                }
                #[doc = "Clear the metadata for an asset."]
                #[doc = ""]
                #[doc = "Origin must be ForceOrigin."]
                #[doc = ""]
                #[doc = "Any deposit is returned."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the asset to clear."]
                #[doc = ""]
                #[doc = "Emits `MetadataCleared`."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn force_clear_metadata(
                    &self,
                    id: ::core::primitive::u32,
                ) -> ::subxt::tx::StaticTxPayload<ForceClearMetadata>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Assets",
                        "force_clear_metadata",
                        ForceClearMetadata { id },
                        [
                            71u8, 191u8, 101u8, 72u8, 188u8, 223u8, 215u8,
                            187u8, 200u8, 206u8, 3u8, 42u8, 4u8, 62u8, 117u8,
                            106u8, 26u8, 2u8, 68u8, 202u8, 162u8, 142u8, 172u8,
                            123u8, 48u8, 196u8, 247u8, 89u8, 147u8, 75u8, 84u8,
                            109u8,
                        ],
                    )
                }
                #[doc = "Alter the attributes of a given asset."]
                #[doc = ""]
                #[doc = "Origin must be `ForceOrigin`."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the asset."]
                #[doc = "- `owner`: The new Owner of this asset."]
                #[doc = "- `issuer`: The new Issuer of this asset."]
                #[doc = "- `admin`: The new Admin of this asset."]
                #[doc = "- `freezer`: The new Freezer of this asset."]
                #[doc = "- `min_balance`: The minimum balance of this new asset that any single account must"]
                #[doc = "have. If an account's balance is reduced below this, then it collapses to zero."]
                #[doc = "- `is_sufficient`: Whether a non-zero balance of this asset is deposit of sufficient"]
                #[doc = "value to account for the state bloat associated with its balance storage. If set to"]
                #[doc = "`true`, then non-zero balances may be stored without a `consumer` reference (and thus"]
                #[doc = "an ED in the Balances pallet or whatever else is used to control user-account state"]
                #[doc = "growth)."]
                #[doc = "- `is_frozen`: Whether this asset class is frozen except for permissioned/admin"]
                #[doc = "instructions."]
                #[doc = ""]
                #[doc = "Emits `AssetStatusChanged` with the identity of the asset."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn force_asset_status(
                    &self,
                    id: ::core::primitive::u32,
                    owner: ::subxt::ext::sp_runtime::MultiAddress<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    issuer: ::subxt::ext::sp_runtime::MultiAddress<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    admin: ::subxt::ext::sp_runtime::MultiAddress<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    freezer: ::subxt::ext::sp_runtime::MultiAddress<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    min_balance: ::core::primitive::u128,
                    is_sufficient: ::core::primitive::bool,
                    is_frozen: ::core::primitive::bool,
                ) -> ::subxt::tx::StaticTxPayload<ForceAssetStatus>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Assets",
                        "force_asset_status",
                        ForceAssetStatus {
                            id,
                            owner,
                            issuer,
                            admin,
                            freezer,
                            min_balance,
                            is_sufficient,
                            is_frozen,
                        },
                        [
                            46u8, 229u8, 189u8, 83u8, 196u8, 180u8, 79u8, 77u8,
                            71u8, 147u8, 77u8, 243u8, 99u8, 3u8, 205u8, 171u8,
                            129u8, 25u8, 60u8, 10u8, 162u8, 50u8, 205u8, 231u8,
                            184u8, 75u8, 42u8, 230u8, 48u8, 194u8, 236u8, 71u8,
                        ],
                    )
                }
                #[doc = "Approve an amount of asset for transfer by a delegated third-party account."]
                #[doc = ""]
                #[doc = "Origin must be Signed."]
                #[doc = ""]
                #[doc = "Ensures that `ApprovalDeposit` worth of `Currency` is reserved from signing account"]
                #[doc = "for the purpose of holding the approval. If some non-zero amount of assets is already"]
                #[doc = "approved from signing account to `delegate`, then it is topped up or unreserved to"]
                #[doc = "meet the right value."]
                #[doc = ""]
                #[doc = "NOTE: The signing account does not need to own `amount` of assets at the point of"]
                #[doc = "making this call."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the asset."]
                #[doc = "- `delegate`: The account to delegate permission to transfer asset."]
                #[doc = "- `amount`: The amount of asset that may be transferred by `delegate`. If there is"]
                #[doc = "already an approval in place, then this acts additively."]
                #[doc = ""]
                #[doc = "Emits `ApprovedTransfer` on success."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn approve_transfer(
                    &self,
                    id: ::core::primitive::u32,
                    delegate: ::subxt::ext::sp_runtime::MultiAddress<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    amount: ::core::primitive::u128,
                ) -> ::subxt::tx::StaticTxPayload<ApproveTransfer>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Assets",
                        "approve_transfer",
                        ApproveTransfer {
                            id,
                            delegate,
                            amount,
                        },
                        [
                            85u8, 79u8, 216u8, 233u8, 163u8, 169u8, 226u8,
                            111u8, 10u8, 110u8, 33u8, 239u8, 248u8, 222u8,
                            84u8, 160u8, 80u8, 164u8, 29u8, 88u8, 164u8, 252u8,
                            238u8, 212u8, 9u8, 230u8, 201u8, 166u8, 192u8,
                            225u8, 94u8, 13u8,
                        ],
                    )
                }
                #[doc = "Cancel all of some asset approved for delegated transfer by a third-party account."]
                #[doc = ""]
                #[doc = "Origin must be Signed and there must be an approval in place between signer and"]
                #[doc = "`delegate`."]
                #[doc = ""]
                #[doc = "Unreserves any deposit previously reserved by `approve_transfer` for the approval."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the asset."]
                #[doc = "- `delegate`: The account delegated permission to transfer asset."]
                #[doc = ""]
                #[doc = "Emits `ApprovalCancelled` on success."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn cancel_approval(
                    &self,
                    id: ::core::primitive::u32,
                    delegate: ::subxt::ext::sp_runtime::MultiAddress<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::StaticTxPayload<CancelApproval>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Assets",
                        "cancel_approval",
                        CancelApproval { id, delegate },
                        [
                            120u8, 10u8, 77u8, 128u8, 1u8, 232u8, 42u8, 2u8,
                            87u8, 7u8, 217u8, 51u8, 172u8, 13u8, 136u8, 176u8,
                            153u8, 128u8, 196u8, 3u8, 190u8, 139u8, 219u8,
                            24u8, 35u8, 51u8, 241u8, 87u8, 67u8, 49u8, 181u8,
                            203u8,
                        ],
                    )
                }
                #[doc = "Cancel all of some asset approved for delegated transfer by a third-party account."]
                #[doc = ""]
                #[doc = "Origin must be either ForceOrigin or Signed origin with the signer being the Admin"]
                #[doc = "account of the asset `id`."]
                #[doc = ""]
                #[doc = "Unreserves any deposit previously reserved by `approve_transfer` for the approval."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the asset."]
                #[doc = "- `delegate`: The account delegated permission to transfer asset."]
                #[doc = ""]
                #[doc = "Emits `ApprovalCancelled` on success."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn force_cancel_approval(
                    &self,
                    id: ::core::primitive::u32,
                    owner: ::subxt::ext::sp_runtime::MultiAddress<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    delegate: ::subxt::ext::sp_runtime::MultiAddress<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::StaticTxPayload<ForceCancelApproval>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Assets",
                        "force_cancel_approval",
                        ForceCancelApproval {
                            id,
                            owner,
                            delegate,
                        },
                        [
                            192u8, 196u8, 91u8, 219u8, 20u8, 150u8, 220u8,
                            79u8, 81u8, 151u8, 104u8, 109u8, 21u8, 87u8, 158u8,
                            169u8, 208u8, 4u8, 241u8, 109u8, 230u8, 166u8,
                            237u8, 164u8, 90u8, 54u8, 14u8, 51u8, 84u8, 239u8,
                            178u8, 202u8,
                        ],
                    )
                }
                #[doc = "Transfer some asset balance from a previously delegated account to some third-party"]
                #[doc = "account."]
                #[doc = ""]
                #[doc = "Origin must be Signed and there must be an approval in place by the `owner` to the"]
                #[doc = "signer."]
                #[doc = ""]
                #[doc = "If the entire amount approved for transfer is transferred, then any deposit previously"]
                #[doc = "reserved by `approve_transfer` is unreserved."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the asset."]
                #[doc = "- `owner`: The account which previously approved for a transfer of at least `amount` and"]
                #[doc = "from which the asset balance will be withdrawn."]
                #[doc = "- `destination`: The account to which the asset balance of `amount` will be transferred."]
                #[doc = "- `amount`: The amount of assets to transfer."]
                #[doc = ""]
                #[doc = "Emits `TransferredApproved` on success."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn transfer_approved(
                    &self,
                    id: ::core::primitive::u32,
                    owner: ::subxt::ext::sp_runtime::MultiAddress<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    destination: ::subxt::ext::sp_runtime::MultiAddress<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    amount: ::core::primitive::u128,
                ) -> ::subxt::tx::StaticTxPayload<TransferApproved>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Assets",
                        "transfer_approved",
                        TransferApproved {
                            id,
                            owner,
                            destination,
                            amount,
                        },
                        [
                            151u8, 228u8, 207u8, 182u8, 179u8, 212u8, 208u8,
                            3u8, 207u8, 181u8, 193u8, 164u8, 74u8, 160u8, 81u8,
                            191u8, 42u8, 227u8, 56u8, 238u8, 50u8, 75u8, 8u8,
                            50u8, 131u8, 83u8, 152u8, 20u8, 141u8, 39u8, 29u8,
                            205u8,
                        ],
                    )
                }
                #[doc = "Create an asset account for non-provider assets."]
                #[doc = ""]
                #[doc = "A deposit will be taken from the signer account."]
                #[doc = ""]
                #[doc = "- `origin`: Must be Signed; the signer account must have sufficient funds for a deposit"]
                #[doc = "  to be taken."]
                #[doc = "- `id`: The identifier of the asset for the account to be created."]
                #[doc = ""]
                #[doc = "Emits `Touched` event when successful."]
                pub fn touch(
                    &self,
                    id: ::core::primitive::u32,
                ) -> ::subxt::tx::StaticTxPayload<Touch> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Assets",
                        "touch",
                        Touch { id },
                        [
                            114u8, 149u8, 179u8, 168u8, 115u8, 117u8, 32u8,
                            50u8, 39u8, 77u8, 148u8, 238u8, 123u8, 96u8, 193u8,
                            174u8, 113u8, 141u8, 34u8, 228u8, 228u8, 214u8,
                            71u8, 111u8, 55u8, 126u8, 103u8, 181u8, 133u8,
                            77u8, 116u8, 105u8,
                        ],
                    )
                }
                #[doc = "Return the deposit (if any) of an asset account."]
                #[doc = ""]
                #[doc = "The origin must be Signed."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the asset for the account to be created."]
                #[doc = "- `allow_burn`: If `true` then assets may be destroyed in order to complete the refund."]
                #[doc = ""]
                #[doc = "Emits `Refunded` event when successful."]
                pub fn refund(
                    &self,
                    id: ::core::primitive::u32,
                    allow_burn: ::core::primitive::bool,
                ) -> ::subxt::tx::StaticTxPayload<Refund> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Assets",
                        "refund",
                        Refund { id, allow_burn },
                        [
                            20u8, 139u8, 248u8, 67u8, 123u8, 221u8, 7u8, 106u8,
                            239u8, 156u8, 68u8, 59u8, 81u8, 184u8, 47u8, 188u8,
                            195u8, 227u8, 75u8, 168u8, 126u8, 176u8, 91u8,
                            187u8, 30u8, 34u8, 24u8, 223u8, 108u8, 101u8, 88u8,
                            83u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_assets::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "Some asset class was created."]
            pub struct Created {
                pub asset_id: ::core::primitive::u32,
                pub creator: ::subxt::ext::sp_core::crypto::AccountId32,
                pub owner: ::subxt::ext::sp_core::crypto::AccountId32,
            }
            impl ::subxt::events::StaticEvent for Created {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "Created";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "Some assets were issued."]
            pub struct Issued {
                pub asset_id: ::core::primitive::u32,
                pub owner: ::subxt::ext::sp_core::crypto::AccountId32,
                pub total_supply: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Issued {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "Issued";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "Some assets were transferred."]
            pub struct Transferred {
                pub asset_id: ::core::primitive::u32,
                pub from: ::subxt::ext::sp_core::crypto::AccountId32,
                pub to: ::subxt::ext::sp_core::crypto::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Transferred {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "Transferred";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "Some assets were destroyed."]
            pub struct Burned {
                pub asset_id: ::core::primitive::u32,
                pub owner: ::subxt::ext::sp_core::crypto::AccountId32,
                pub balance: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Burned {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "Burned";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "The management team changed."]
            pub struct TeamChanged {
                pub asset_id: ::core::primitive::u32,
                pub issuer: ::subxt::ext::sp_core::crypto::AccountId32,
                pub admin: ::subxt::ext::sp_core::crypto::AccountId32,
                pub freezer: ::subxt::ext::sp_core::crypto::AccountId32,
            }
            impl ::subxt::events::StaticEvent for TeamChanged {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "TeamChanged";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "The owner changed."]
            pub struct OwnerChanged {
                pub asset_id: ::core::primitive::u32,
                pub owner: ::subxt::ext::sp_core::crypto::AccountId32,
            }
            impl ::subxt::events::StaticEvent for OwnerChanged {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "OwnerChanged";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "Some account `who` was frozen."]
            pub struct Frozen {
                pub asset_id: ::core::primitive::u32,
                pub who: ::subxt::ext::sp_core::crypto::AccountId32,
            }
            impl ::subxt::events::StaticEvent for Frozen {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "Frozen";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "Some account `who` was thawed."]
            pub struct Thawed {
                pub asset_id: ::core::primitive::u32,
                pub who: ::subxt::ext::sp_core::crypto::AccountId32,
            }
            impl ::subxt::events::StaticEvent for Thawed {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "Thawed";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "Some asset `asset_id` was frozen."]
            pub struct AssetFrozen {
                pub asset_id: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for AssetFrozen {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "AssetFrozen";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "Some asset `asset_id` was thawed."]
            pub struct AssetThawed {
                pub asset_id: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for AssetThawed {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "AssetThawed";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "An asset class was destroyed."]
            pub struct Destroyed {
                pub asset_id: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Destroyed {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "Destroyed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "Some asset class was force-created."]
            pub struct ForceCreated {
                pub asset_id: ::core::primitive::u32,
                pub owner: ::subxt::ext::sp_core::crypto::AccountId32,
            }
            impl ::subxt::events::StaticEvent for ForceCreated {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "ForceCreated";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "New metadata has been set for an asset."]
            pub struct MetadataSet {
                pub asset_id: ::core::primitive::u32,
                pub name: ::std::vec::Vec<::core::primitive::u8>,
                pub symbol: ::std::vec::Vec<::core::primitive::u8>,
                pub decimals: ::core::primitive::u8,
                pub is_frozen: ::core::primitive::bool,
            }
            impl ::subxt::events::StaticEvent for MetadataSet {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "MetadataSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "Metadata has been cleared for an asset."]
            pub struct MetadataCleared {
                pub asset_id: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for MetadataCleared {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "MetadataCleared";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "(Additional) funds have been approved for transfer to a destination account."]
            pub struct ApprovedTransfer {
                pub asset_id: ::core::primitive::u32,
                pub source: ::subxt::ext::sp_core::crypto::AccountId32,
                pub delegate: ::subxt::ext::sp_core::crypto::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for ApprovedTransfer {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "ApprovedTransfer";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "An approval for account `delegate` was cancelled by `owner`."]
            pub struct ApprovalCancelled {
                pub asset_id: ::core::primitive::u32,
                pub owner: ::subxt::ext::sp_core::crypto::AccountId32,
                pub delegate: ::subxt::ext::sp_core::crypto::AccountId32,
            }
            impl ::subxt::events::StaticEvent for ApprovalCancelled {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "ApprovalCancelled";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "An `amount` was transferred in its entirety from `owner` to `destination` by"]
            #[doc = "the approved `delegate`."]
            pub struct TransferredApproved {
                pub asset_id: ::core::primitive::u32,
                pub owner: ::subxt::ext::sp_core::crypto::AccountId32,
                pub delegate: ::subxt::ext::sp_core::crypto::AccountId32,
                pub destination: ::subxt::ext::sp_core::crypto::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for TransferredApproved {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "TransferredApproved";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "An asset has had its attributes changed by the `Force` origin."]
            pub struct AssetStatusChanged {
                pub asset_id: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for AssetStatusChanged {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "AssetStatusChanged";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Details of an asset."]                pub fn asset (& self , _0 : impl :: std :: borrow :: Borrow < :: core :: primitive :: u32 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_assets :: types :: AssetDetails < :: core :: primitive :: u128 , :: subxt :: ext :: sp_core :: crypto :: AccountId32 , :: core :: primitive :: u128 > > , :: subxt :: storage :: address :: Yes , () , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("Assets" , "Asset" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Blake2_128Concat)] , [65u8 , 19u8 , 120u8 , 233u8 , 154u8 , 59u8 , 71u8 , 35u8 , 10u8 , 35u8 , 125u8 , 99u8 , 186u8 , 18u8 , 239u8 , 118u8 , 169u8 , 104u8 , 80u8 , 204u8 , 85u8 , 193u8 , 145u8 , 83u8 , 132u8 , 19u8 , 117u8 , 227u8 , 67u8 , 62u8 , 123u8 , 109u8 ,])
                }
                #[doc = " Details of an asset."]                pub fn asset_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_assets :: types :: AssetDetails < :: core :: primitive :: u128 , :: subxt :: ext :: sp_core :: crypto :: AccountId32 , :: core :: primitive :: u128 > > , () , () , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Assets",
                        "Asset",
                        Vec::new(),
                        [
                            65u8, 19u8, 120u8, 233u8, 154u8, 59u8, 71u8, 35u8,
                            10u8, 35u8, 125u8, 99u8, 186u8, 18u8, 239u8, 118u8,
                            169u8, 104u8, 80u8, 204u8, 85u8, 193u8, 145u8,
                            83u8, 132u8, 19u8, 117u8, 227u8, 67u8, 62u8, 123u8,
                            109u8,
                        ],
                    )
                }
                #[doc = " The holdings of a specific account for a specific asset."]                pub fn account (& self , _0 : impl :: std :: borrow :: Borrow < :: core :: primitive :: u32 > , _1 : impl :: std :: borrow :: Borrow < :: subxt :: ext :: sp_core :: crypto :: AccountId32 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_assets :: types :: AssetAccount < :: core :: primitive :: u128 , :: core :: primitive :: u128 , () > > , :: subxt :: storage :: address :: Yes , () , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("Assets" , "Account" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Blake2_128Concat) , :: subxt :: storage :: address :: StorageMapKey :: new (_1 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Blake2_128Concat)] , [109u8 , 245u8 , 93u8 , 133u8 , 206u8 , 68u8 , 94u8 , 233u8 , 29u8 , 113u8 , 245u8 , 201u8 , 241u8 , 2u8 , 200u8 , 179u8 , 37u8 , 199u8 , 128u8 , 243u8 , 49u8 , 50u8 , 122u8 , 139u8 , 135u8 , 48u8 , 201u8 , 109u8 , 195u8 , 38u8 , 205u8 , 32u8 ,])
                }
                #[doc = " The holdings of a specific account for a specific asset."]                pub fn account_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_assets :: types :: AssetAccount < :: core :: primitive :: u128 , :: core :: primitive :: u128 , () > > , () , () , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Assets",
                        "Account",
                        Vec::new(),
                        [
                            109u8, 245u8, 93u8, 133u8, 206u8, 68u8, 94u8,
                            233u8, 29u8, 113u8, 245u8, 201u8, 241u8, 2u8,
                            200u8, 179u8, 37u8, 199u8, 128u8, 243u8, 49u8,
                            50u8, 122u8, 139u8, 135u8, 48u8, 201u8, 109u8,
                            195u8, 38u8, 205u8, 32u8,
                        ],
                    )
                }
                #[doc = " Approved balance transfers. First balance is the amount approved for transfer. Second"]
                #[doc = " is the amount of `T::Currency` reserved for storing this."]
                #[doc = " First key is the asset ID, second key is the owner and third key is the delegate."]                pub fn approvals (& self , _0 : impl :: std :: borrow :: Borrow < :: core :: primitive :: u32 > , _1 : impl :: std :: borrow :: Borrow < :: subxt :: ext :: sp_core :: crypto :: AccountId32 > , _2 : impl :: std :: borrow :: Borrow < :: subxt :: ext :: sp_core :: crypto :: AccountId32 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_assets :: types :: Approval < :: core :: primitive :: u128 , :: core :: primitive :: u128 > > , :: subxt :: storage :: address :: Yes , () , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("Assets" , "Approvals" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Blake2_128Concat) , :: subxt :: storage :: address :: StorageMapKey :: new (_1 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Blake2_128Concat) , :: subxt :: storage :: address :: StorageMapKey :: new (_2 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Blake2_128Concat)] , [210u8 , 147u8 , 203u8 , 49u8 , 232u8 , 215u8 , 116u8 , 154u8 , 43u8 , 154u8 , 69u8 , 159u8 , 241u8 , 28u8 , 238u8 , 101u8 , 108u8 , 162u8 , 242u8 , 121u8 , 138u8 , 164u8 , 217u8 , 243u8 , 72u8 , 173u8 , 75u8 , 109u8 , 194u8 , 9u8 , 196u8 , 163u8 ,])
                }
                #[doc = " Approved balance transfers. First balance is the amount approved for transfer. Second"]
                #[doc = " is the amount of `T::Currency` reserved for storing this."]
                #[doc = " First key is the asset ID, second key is the owner and third key is the delegate."]                pub fn approvals_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_assets :: types :: Approval < :: core :: primitive :: u128 , :: core :: primitive :: u128 > > , () , () , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Assets",
                        "Approvals",
                        Vec::new(),
                        [
                            210u8, 147u8, 203u8, 49u8, 232u8, 215u8, 116u8,
                            154u8, 43u8, 154u8, 69u8, 159u8, 241u8, 28u8,
                            238u8, 101u8, 108u8, 162u8, 242u8, 121u8, 138u8,
                            164u8, 217u8, 243u8, 72u8, 173u8, 75u8, 109u8,
                            194u8, 9u8, 196u8, 163u8,
                        ],
                    )
                }
                #[doc = " Metadata of an asset."]                pub fn metadata (& self , _0 : impl :: std :: borrow :: Borrow < :: core :: primitive :: u32 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_assets :: types :: AssetMetadata < :: core :: primitive :: u128 , runtime_types :: sp_runtime :: bounded :: bounded_vec :: BoundedVec < :: core :: primitive :: u8 > > > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("Assets" , "Metadata" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Blake2_128Concat)] , [80u8 , 115u8 , 155u8 , 115u8 , 136u8 , 108u8 , 82u8 , 93u8 , 65u8 , 130u8 , 143u8 , 228u8 , 170u8 , 234u8 , 182u8 , 170u8 , 229u8 , 217u8 , 168u8 , 71u8 , 81u8 , 80u8 , 16u8 , 112u8 , 209u8 , 82u8 , 8u8 , 165u8 , 80u8 , 137u8 , 58u8 , 170u8 ,])
                }
                #[doc = " Metadata of an asset."]                pub fn metadata_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_assets :: types :: AssetMetadata < :: core :: primitive :: u128 , runtime_types :: sp_runtime :: bounded :: bounded_vec :: BoundedVec < :: core :: primitive :: u8 > > > , () , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Assets",
                        "Metadata",
                        Vec::new(),
                        [
                            80u8, 115u8, 155u8, 115u8, 136u8, 108u8, 82u8,
                            93u8, 65u8, 130u8, 143u8, 228u8, 170u8, 234u8,
                            182u8, 170u8, 229u8, 217u8, 168u8, 71u8, 81u8,
                            80u8, 16u8, 112u8, 209u8, 82u8, 8u8, 165u8, 80u8,
                            137u8, 58u8, 170u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The basic amount of funds that must be reserved for an asset."]
                pub fn asset_deposit(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<
                        ::core::primitive::u128,
                    >,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "Assets",
                        "AssetDeposit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8,
                            105u8, 200u8, 214u8, 27u8, 144u8, 208u8, 218u8,
                            160u8, 130u8, 109u8, 101u8, 54u8, 210u8, 136u8,
                            71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8,
                            148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The amount of funds that must be reserved for a non-provider asset account to be"]
                #[doc = " maintained."]
                pub fn asset_account_deposit(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<
                        ::core::primitive::u128,
                    >,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "Assets",
                        "AssetAccountDeposit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8,
                            105u8, 200u8, 214u8, 27u8, 144u8, 208u8, 218u8,
                            160u8, 130u8, 109u8, 101u8, 54u8, 210u8, 136u8,
                            71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8,
                            148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The basic amount of funds that must be reserved when adding metadata to your asset."]
                pub fn metadata_deposit_base(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<
                        ::core::primitive::u128,
                    >,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "Assets",
                        "MetadataDepositBase",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8,
                            105u8, 200u8, 214u8, 27u8, 144u8, 208u8, 218u8,
                            160u8, 130u8, 109u8, 101u8, 54u8, 210u8, 136u8,
                            71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8,
                            148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The additional funds that must be reserved for the number of bytes you store in your"]
                #[doc = " metadata."]
                pub fn metadata_deposit_per_byte(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<
                        ::core::primitive::u128,
                    >,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "Assets",
                        "MetadataDepositPerByte",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8,
                            105u8, 200u8, 214u8, 27u8, 144u8, 208u8, 218u8,
                            160u8, 130u8, 109u8, 101u8, 54u8, 210u8, 136u8,
                            71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8,
                            148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The amount of funds that must be reserved when creating a new approval."]
                pub fn approval_deposit(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<
                        ::core::primitive::u128,
                    >,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "Assets",
                        "ApprovalDeposit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8,
                            105u8, 200u8, 214u8, 27u8, 144u8, 208u8, 218u8,
                            160u8, 130u8, 109u8, 101u8, 54u8, 210u8, 136u8,
                            71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8,
                            148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The maximum length of a name or symbol stored on-chain."]
                pub fn string_limit(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "Assets",
                        "StringLimit",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8,
                            200u8, 157u8, 125u8, 151u8, 53u8, 76u8, 168u8,
                            26u8, 10u8, 9u8, 98u8, 68u8, 9u8, 178u8, 197u8,
                            113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod sudo {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Sudo {
                pub call: ::std::boxed::Box<
                    runtime_types::webb_standalone_runtime::Call,
                >,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct SudoUncheckedWeight {
                pub call: ::std::boxed::Box<
                    runtime_types::webb_standalone_runtime::Call,
                >,
                pub weight:
                    runtime_types::frame_support::weights::weight_v2::Weight,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct SetKey {
                pub new: ::subxt::ext::sp_runtime::MultiAddress<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct SudoAs {
                pub who: ::subxt::ext::sp_runtime::MultiAddress<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                pub call: ::std::boxed::Box<
                    runtime_types::webb_standalone_runtime::Call,
                >,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Authenticates the sudo key and dispatches a function call with `Root` origin."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- O(1)."]
                #[doc = "- Limited storage reads."]
                #[doc = "- One DB write (event)."]
                #[doc = "- Weight of derivative `call` execution + 10,000."]
                #[doc = "# </weight>"]
                pub fn sudo(
                    &self,
                    call: runtime_types::webb_standalone_runtime::Call,
                ) -> ::subxt::tx::StaticTxPayload<Sudo> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Sudo",
                        "sudo",
                        Sudo {
                            call: ::std::boxed::Box::new(call),
                        },
                        [
                            235u8, 177u8, 5u8, 220u8, 140u8, 72u8, 93u8, 1u8,
                            0u8, 87u8, 174u8, 239u8, 243u8, 56u8, 172u8, 68u8,
                            243u8, 88u8, 118u8, 57u8, 204u8, 114u8, 30u8,
                            154u8, 183u8, 191u8, 248u8, 198u8, 232u8, 95u8,
                            201u8, 95u8,
                        ],
                    )
                }
                #[doc = "Authenticates the sudo key and dispatches a function call with `Root` origin."]
                #[doc = "This function does not check the weight of the call, and instead allows the"]
                #[doc = "Sudo user to specify the weight of the call."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- O(1)."]
                #[doc = "- The weight of this call is defined by the caller."]
                #[doc = "# </weight>"]
                pub fn sudo_unchecked_weight(
                    &self,
                    call: runtime_types::webb_standalone_runtime::Call,
                    weight : runtime_types :: frame_support :: weights :: weight_v2 :: Weight,
                ) -> ::subxt::tx::StaticTxPayload<SudoUncheckedWeight>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Sudo",
                        "sudo_unchecked_weight",
                        SudoUncheckedWeight {
                            call: ::std::boxed::Box::new(call),
                            weight,
                        },
                        [
                            246u8, 170u8, 119u8, 91u8, 242u8, 246u8, 176u8,
                            197u8, 253u8, 21u8, 151u8, 12u8, 179u8, 133u8,
                            156u8, 196u8, 36u8, 115u8, 55u8, 111u8, 50u8,
                            233u8, 60u8, 207u8, 216u8, 232u8, 181u8, 8u8,
                            154u8, 161u8, 104u8, 39u8,
                        ],
                    )
                }
                #[doc = "Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo"]
                #[doc = "key."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- O(1)."]
                #[doc = "- Limited storage reads."]
                #[doc = "- One DB change."]
                #[doc = "# </weight>"]
                pub fn set_key(
                    &self,
                    new: ::subxt::ext::sp_runtime::MultiAddress<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::StaticTxPayload<SetKey> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Sudo",
                        "set_key",
                        SetKey { new },
                        [
                            34u8, 116u8, 170u8, 18u8, 106u8, 17u8, 231u8,
                            159u8, 110u8, 246u8, 2u8, 27u8, 161u8, 155u8,
                            163u8, 41u8, 138u8, 7u8, 81u8, 98u8, 230u8, 182u8,
                            23u8, 222u8, 240u8, 117u8, 173u8, 232u8, 192u8,
                            55u8, 92u8, 208u8,
                        ],
                    )
                }
                #[doc = "Authenticates the sudo key and dispatches a function call with `Signed` origin from"]
                #[doc = "a given account."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- O(1)."]
                #[doc = "- Limited storage reads."]
                #[doc = "- One DB write (event)."]
                #[doc = "- Weight of derivative `call` execution + 10,000."]
                #[doc = "# </weight>"]
                pub fn sudo_as(
                    &self,
                    who: ::subxt::ext::sp_runtime::MultiAddress<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    call: runtime_types::webb_standalone_runtime::Call,
                ) -> ::subxt::tx::StaticTxPayload<SudoAs> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Sudo",
                        "sudo_as",
                        SudoAs {
                            who,
                            call: ::std::boxed::Box::new(call),
                        },
                        [
                            218u8, 58u8, 96u8, 72u8, 41u8, 237u8, 149u8, 66u8,
                            183u8, 186u8, 2u8, 74u8, 40u8, 122u8, 175u8, 62u8,
                            160u8, 216u8, 96u8, 37u8, 185u8, 170u8, 249u8,
                            37u8, 87u8, 18u8, 191u8, 58u8, 181u8, 217u8, 142u8,
                            235u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_sudo::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "A sudo just took place. \\[result\\]"]
            pub struct Sudid {
                pub sudo_result: ::core::result::Result<
                    (),
                    runtime_types::sp_runtime::DispatchError,
                >,
            }
            impl ::subxt::events::StaticEvent for Sudid {
                const PALLET: &'static str = "Sudo";
                const EVENT: &'static str = "Sudid";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "The \\[sudoer\\] just switched identity; the old key is supplied if one existed."]
            pub struct KeyChanged {
                pub old_sudoer: ::core::option::Option<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                >,
            }
            impl ::subxt::events::StaticEvent for KeyChanged {
                const PALLET: &'static str = "Sudo";
                const EVENT: &'static str = "KeyChanged";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "A sudo just took place. \\[result\\]"]
            pub struct SudoAsDone {
                pub sudo_result: ::core::result::Result<
                    (),
                    runtime_types::sp_runtime::DispatchError,
                >,
            }
            impl ::subxt::events::StaticEvent for SudoAsDone {
                const PALLET: &'static str = "Sudo";
                const EVENT: &'static str = "SudoAsDone";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The `AccountId` of the sudo key."]                pub fn key (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: subxt :: ext :: sp_core :: crypto :: AccountId32 > , :: subxt :: storage :: address :: Yes , () , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Sudo",
                        "Key",
                        vec![],
                        [
                            244u8, 73u8, 188u8, 136u8, 218u8, 163u8, 68u8,
                            179u8, 122u8, 173u8, 34u8, 108u8, 137u8, 28u8,
                            182u8, 16u8, 196u8, 92u8, 138u8, 34u8, 102u8, 80u8,
                            199u8, 88u8, 107u8, 207u8, 36u8, 22u8, 168u8,
                            167u8, 20u8, 142u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod im_online {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Heartbeat { pub heartbeat : runtime_types :: pallet_im_online :: Heartbeat < :: core :: primitive :: u64 > , pub signature : runtime_types :: pallet_im_online :: sr25519 :: app_sr25519 :: Signature , }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "# <weight>"]
                #[doc = "- Complexity: `O(K + E)` where K is length of `Keys` (heartbeat.validators_len) and E is"]
                #[doc = "  length of `heartbeat.network_state.external_address`"]
                #[doc = "  - `O(K)`: decoding of length `K`"]
                #[doc = "  - `O(E)`: decoding/encoding of length `E`"]
                #[doc = "- DbReads: pallet_session `Validators`, pallet_session `CurrentIndex`, `Keys`,"]
                #[doc = "  `ReceivedHeartbeats`"]
                #[doc = "- DbWrites: `ReceivedHeartbeats`"]
                #[doc = "# </weight>"]
                pub fn heartbeat(
                    &self,
                    heartbeat: runtime_types::pallet_im_online::Heartbeat<
                        ::core::primitive::u64,
                    >,
                    signature : runtime_types :: pallet_im_online :: sr25519 :: app_sr25519 :: Signature,
                ) -> ::subxt::tx::StaticTxPayload<Heartbeat> {
                    ::subxt::tx::StaticTxPayload::new(
                        "ImOnline",
                        "heartbeat",
                        Heartbeat {
                            heartbeat,
                            signature,
                        },
                        [
                            107u8, 222u8, 114u8, 147u8, 99u8, 249u8, 235u8,
                            13u8, 39u8, 31u8, 163u8, 178u8, 109u8, 127u8,
                            249u8, 33u8, 45u8, 253u8, 184u8, 171u8, 213u8,
                            120u8, 249u8, 231u8, 128u8, 254u8, 63u8, 123u8,
                            192u8, 175u8, 242u8, 171u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_im_online::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "A new heartbeat was received from `AuthorityId`."]
            pub struct HeartbeatReceived { pub authority_id : runtime_types :: pallet_im_online :: sr25519 :: app_sr25519 :: Public , }
            impl ::subxt::events::StaticEvent for HeartbeatReceived {
                const PALLET: &'static str = "ImOnline";
                const EVENT: &'static str = "HeartbeatReceived";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "At the end of the session, no offence was committed."]
            pub struct AllGood;
            impl ::subxt::events::StaticEvent for AllGood {
                const PALLET: &'static str = "ImOnline";
                const EVENT: &'static str = "AllGood";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "At the end of the session, at least one validator was found to be offline."]
            pub struct SomeOffline {
                pub offline: ::std::vec::Vec<(
                    ::subxt::ext::sp_core::crypto::AccountId32,
                    runtime_types::pallet_staking::Exposure<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u128,
                    >,
                )>,
            }
            impl ::subxt::events::StaticEvent for SomeOffline {
                const PALLET: &'static str = "ImOnline";
                const EVENT: &'static str = "SomeOffline";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The block number after which it's ok to send heartbeats in the current"]
                #[doc = " session."]
                #[doc = ""]
                #[doc = " At the beginning of each session we set this to a value that should fall"]
                #[doc = " roughly in the middle of the session duration. The idea is to first wait for"]
                #[doc = " the validators to produce a block in the current session, so that the"]
                #[doc = " heartbeat later on will not be necessary."]
                #[doc = ""]
                #[doc = " This value will only be used as a fallback if we fail to get a proper session"]
                #[doc = " progress estimate from `NextSessionRotation`, as those estimates should be"]
                #[doc = " more accurate then the value we calculate for `HeartbeatAfter`."]                pub fn heartbeat_after (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u64 > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "ImOnline",
                        "HeartbeatAfter",
                        vec![],
                        [
                            129u8, 139u8, 197u8, 234u8, 125u8, 140u8, 229u8,
                            91u8, 216u8, 174u8, 65u8, 69u8, 79u8, 76u8, 0u8,
                            46u8, 38u8, 2u8, 229u8, 237u8, 36u8, 195u8, 24u8,
                            94u8, 27u8, 36u8, 159u8, 24u8, 166u8, 105u8, 184u8,
                            148u8,
                        ],
                    )
                }
                #[doc = " The current set of keys that may issue a heartbeat."]                pub fn keys (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: sp_runtime :: bounded :: weak_bounded_vec :: WeakBoundedVec < runtime_types :: pallet_im_online :: sr25519 :: app_sr25519 :: Public > > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "ImOnline",
                        "Keys",
                        vec![],
                        [
                            6u8, 198u8, 221u8, 58u8, 14u8, 166u8, 245u8, 103u8,
                            191u8, 20u8, 69u8, 233u8, 147u8, 245u8, 24u8, 64u8,
                            207u8, 180u8, 39u8, 208u8, 252u8, 236u8, 247u8,
                            112u8, 187u8, 97u8, 70u8, 11u8, 248u8, 148u8,
                            208u8, 106u8,
                        ],
                    )
                }
                #[doc = " For each session index, we keep a mapping of `SessionIndex` and `AuthIndex` to"]
                #[doc = " `WrapperOpaque<BoundedOpaqueNetworkState>`."]                pub fn received_heartbeats (& self , _0 : impl :: std :: borrow :: Borrow < :: core :: primitive :: u32 > , _1 : impl :: std :: borrow :: Borrow < :: core :: primitive :: u32 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: frame_support :: traits :: misc :: WrapperOpaque < runtime_types :: pallet_im_online :: BoundedOpaqueNetworkState > > , :: subxt :: storage :: address :: Yes , () , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("ImOnline" , "ReceivedHeartbeats" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Twox64Concat) , :: subxt :: storage :: address :: StorageMapKey :: new (_1 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Twox64Concat)] , [233u8 , 128u8 , 140u8 , 233u8 , 55u8 , 146u8 , 172u8 , 54u8 , 54u8 , 57u8 , 141u8 , 106u8 , 168u8 , 59u8 , 147u8 , 253u8 , 119u8 , 48u8 , 50u8 , 251u8 , 242u8 , 109u8 , 251u8 , 2u8 , 136u8 , 80u8 , 146u8 , 121u8 , 180u8 , 219u8 , 245u8 , 37u8 ,])
                }
                #[doc = " For each session index, we keep a mapping of `SessionIndex` and `AuthIndex` to"]
                #[doc = " `WrapperOpaque<BoundedOpaqueNetworkState>`."]                pub fn received_heartbeats_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: frame_support :: traits :: misc :: WrapperOpaque < runtime_types :: pallet_im_online :: BoundedOpaqueNetworkState > > , () , () , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "ImOnline",
                        "ReceivedHeartbeats",
                        Vec::new(),
                        [
                            233u8, 128u8, 140u8, 233u8, 55u8, 146u8, 172u8,
                            54u8, 54u8, 57u8, 141u8, 106u8, 168u8, 59u8, 147u8,
                            253u8, 119u8, 48u8, 50u8, 251u8, 242u8, 109u8,
                            251u8, 2u8, 136u8, 80u8, 146u8, 121u8, 180u8,
                            219u8, 245u8, 37u8,
                        ],
                    )
                }
                #[doc = " For each session index, we keep a mapping of `ValidatorId<T>` to the"]
                #[doc = " number of blocks authored by the given authority."]                pub fn authored_blocks (& self , _0 : impl :: std :: borrow :: Borrow < :: core :: primitive :: u32 > , _1 : impl :: std :: borrow :: Borrow < :: subxt :: ext :: sp_core :: crypto :: AccountId32 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u32 > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("ImOnline" , "AuthoredBlocks" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Twox64Concat) , :: subxt :: storage :: address :: StorageMapKey :: new (_1 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Twox64Concat)] , [50u8 , 4u8 , 242u8 , 240u8 , 247u8 , 184u8 , 114u8 , 245u8 , 233u8 , 170u8 , 24u8 , 197u8 , 18u8 , 245u8 , 8u8 , 28u8 , 33u8 , 115u8 , 166u8 , 245u8 , 221u8 , 223u8 , 56u8 , 144u8 , 33u8 , 139u8 , 10u8 , 227u8 , 228u8 , 223u8 , 103u8 , 151u8 ,])
                }
                #[doc = " For each session index, we keep a mapping of `ValidatorId<T>` to the"]
                #[doc = " number of blocks authored by the given authority."]                pub fn authored_blocks_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u32 > , () , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "ImOnline",
                        "AuthoredBlocks",
                        Vec::new(),
                        [
                            50u8, 4u8, 242u8, 240u8, 247u8, 184u8, 114u8,
                            245u8, 233u8, 170u8, 24u8, 197u8, 18u8, 245u8, 8u8,
                            28u8, 33u8, 115u8, 166u8, 245u8, 221u8, 223u8,
                            56u8, 144u8, 33u8, 139u8, 10u8, 227u8, 228u8,
                            223u8, 103u8, 151u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " A configuration for base priority of unsigned transactions."]
                #[doc = ""]
                #[doc = " This is exposed so that it can be tuned for particular runtime, when"]
                #[doc = " multiple pallets send unsigned transactions."]
                pub fn unsigned_priority(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<::core::primitive::u64>,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "ImOnline",
                        "UnsignedPriority",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8,
                            231u8, 190u8, 146u8, 59u8, 226u8, 157u8, 101u8,
                            103u8, 117u8, 249u8, 65u8, 18u8, 191u8, 103u8,
                            119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8,
                            239u8, 42u8, 246u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod authority_discovery {
        use super::root_mod;
        use super::runtime_types;
    }
    pub mod offences {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Events type."]
        pub type Event = runtime_types::pallet_offences::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "There is an offence reported of the given `kind` happened at the `session_index` and"]
            #[doc = "(kind-specific) time slot. This event is not deposited for duplicate slashes."]
            #[doc = "\\[kind, timeslot\\]."]
            pub struct Offence {
                pub kind: [::core::primitive::u8; 16usize],
                pub timeslot: ::std::vec::Vec<::core::primitive::u8>,
            }
            impl ::subxt::events::StaticEvent for Offence {
                const PALLET: &'static str = "Offences";
                const EVENT: &'static str = "Offence";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The primary structure that holds all offence records keyed by report identifiers."]                pub fn reports (& self , _0 : impl :: std :: borrow :: Borrow < :: subxt :: ext :: sp_core :: H256 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: sp_staking :: offence :: OffenceDetails < :: subxt :: ext :: sp_core :: crypto :: AccountId32 , (:: subxt :: ext :: sp_core :: crypto :: AccountId32 , runtime_types :: pallet_staking :: Exposure < :: subxt :: ext :: sp_core :: crypto :: AccountId32 , :: core :: primitive :: u128 > ,) > > , :: subxt :: storage :: address :: Yes , () , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("Offences" , "Reports" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Twox64Concat)] , [144u8 , 30u8 , 66u8 , 199u8 , 102u8 , 236u8 , 175u8 , 201u8 , 206u8 , 170u8 , 55u8 , 162u8 , 137u8 , 120u8 , 220u8 , 213u8 , 57u8 , 252u8 , 0u8 , 88u8 , 210u8 , 68u8 , 5u8 , 25u8 , 77u8 , 114u8 , 204u8 , 23u8 , 190u8 , 32u8 , 211u8 , 30u8 ,])
                }
                #[doc = " The primary structure that holds all offence records keyed by report identifiers."]                pub fn reports_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: sp_staking :: offence :: OffenceDetails < :: subxt :: ext :: sp_core :: crypto :: AccountId32 , (:: subxt :: ext :: sp_core :: crypto :: AccountId32 , runtime_types :: pallet_staking :: Exposure < :: subxt :: ext :: sp_core :: crypto :: AccountId32 , :: core :: primitive :: u128 > ,) > > , () , () , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Offences",
                        "Reports",
                        Vec::new(),
                        [
                            144u8, 30u8, 66u8, 199u8, 102u8, 236u8, 175u8,
                            201u8, 206u8, 170u8, 55u8, 162u8, 137u8, 120u8,
                            220u8, 213u8, 57u8, 252u8, 0u8, 88u8, 210u8, 68u8,
                            5u8, 25u8, 77u8, 114u8, 204u8, 23u8, 190u8, 32u8,
                            211u8, 30u8,
                        ],
                    )
                }
                #[doc = " A vector of reports of the same kind that happened at the same time slot."]                pub fn concurrent_reports_index (& self , _0 : impl :: std :: borrow :: Borrow < [:: core :: primitive :: u8 ; 16usize] > , _1 : impl :: std :: borrow :: Borrow < [:: core :: primitive :: u8] > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: std :: vec :: Vec < :: subxt :: ext :: sp_core :: H256 > > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("Offences" , "ConcurrentReportsIndex" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Twox64Concat) , :: subxt :: storage :: address :: StorageMapKey :: new (_1 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Twox64Concat)] , [106u8 , 21u8 , 104u8 , 5u8 , 4u8 , 66u8 , 28u8 , 70u8 , 161u8 , 195u8 , 238u8 , 28u8 , 69u8 , 241u8 , 221u8 , 113u8 , 140u8 , 103u8 , 181u8 , 143u8 , 60u8 , 177u8 , 13u8 , 129u8 , 224u8 , 149u8 , 77u8 , 32u8 , 75u8 , 74u8 , 101u8 , 65u8 ,])
                }
                #[doc = " A vector of reports of the same kind that happened at the same time slot."]                pub fn concurrent_reports_index_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: std :: vec :: Vec < :: subxt :: ext :: sp_core :: H256 > > , () , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Offences",
                        "ConcurrentReportsIndex",
                        Vec::new(),
                        [
                            106u8, 21u8, 104u8, 5u8, 4u8, 66u8, 28u8, 70u8,
                            161u8, 195u8, 238u8, 28u8, 69u8, 241u8, 221u8,
                            113u8, 140u8, 103u8, 181u8, 143u8, 60u8, 177u8,
                            13u8, 129u8, 224u8, 149u8, 77u8, 32u8, 75u8, 74u8,
                            101u8, 65u8,
                        ],
                    )
                }
                #[doc = " Enumerates all reports of a kind along with the time they happened."]
                #[doc = ""]
                #[doc = " All reports are sorted by the time of offence."]
                #[doc = ""]
                #[doc = " Note that the actual type of this mapping is `Vec<u8>`, this is because values of"]
                #[doc = " different types are not supported at the moment so we are doing the manual serialization."]                pub fn reports_by_kind_index (& self , _0 : impl :: std :: borrow :: Borrow < [:: core :: primitive :: u8 ; 16usize] > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: std :: vec :: Vec < :: core :: primitive :: u8 > > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("Offences" , "ReportsByKindIndex" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Twox64Concat)] , [162u8 , 66u8 , 131u8 , 48u8 , 250u8 , 237u8 , 179u8 , 214u8 , 36u8 , 137u8 , 226u8 , 136u8 , 120u8 , 61u8 , 215u8 , 43u8 , 164u8 , 50u8 , 91u8 , 164u8 , 20u8 , 96u8 , 189u8 , 100u8 , 242u8 , 106u8 , 21u8 , 136u8 , 98u8 , 215u8 , 180u8 , 145u8 ,])
                }
                #[doc = " Enumerates all reports of a kind along with the time they happened."]
                #[doc = ""]
                #[doc = " All reports are sorted by the time of offence."]
                #[doc = ""]
                #[doc = " Note that the actual type of this mapping is `Vec<u8>`, this is because values of"]
                #[doc = " different types are not supported at the moment so we are doing the manual serialization."]                pub fn reports_by_kind_index_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: std :: vec :: Vec < :: core :: primitive :: u8 > > , () , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Offences",
                        "ReportsByKindIndex",
                        Vec::new(),
                        [
                            162u8, 66u8, 131u8, 48u8, 250u8, 237u8, 179u8,
                            214u8, 36u8, 137u8, 226u8, 136u8, 120u8, 61u8,
                            215u8, 43u8, 164u8, 50u8, 91u8, 164u8, 20u8, 96u8,
                            189u8, 100u8, 242u8, 106u8, 21u8, 136u8, 98u8,
                            215u8, 180u8, 145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod historical {
        use super::root_mod;
        use super::runtime_types;
    }
    pub mod bounties {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct ProposeBounty {
                #[codec(compact)]
                pub value: ::core::primitive::u128,
                pub description: ::std::vec::Vec<::core::primitive::u8>,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct ApproveBounty {
                #[codec(compact)]
                pub bounty_id: ::core::primitive::u32,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct ProposeCurator {
                #[codec(compact)]
                pub bounty_id: ::core::primitive::u32,
                pub curator: ::subxt::ext::sp_runtime::MultiAddress<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                #[codec(compact)]
                pub fee: ::core::primitive::u128,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct UnassignCurator {
                #[codec(compact)]
                pub bounty_id: ::core::primitive::u32,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct AcceptCurator {
                #[codec(compact)]
                pub bounty_id: ::core::primitive::u32,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct AwardBounty {
                #[codec(compact)]
                pub bounty_id: ::core::primitive::u32,
                pub beneficiary: ::subxt::ext::sp_runtime::MultiAddress<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct ClaimBounty {
                #[codec(compact)]
                pub bounty_id: ::core::primitive::u32,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct CloseBounty {
                #[codec(compact)]
                pub bounty_id: ::core::primitive::u32,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct ExtendBountyExpiry {
                #[codec(compact)]
                pub bounty_id: ::core::primitive::u32,
                pub remark: ::std::vec::Vec<::core::primitive::u8>,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Propose a new bounty."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "Payment: `TipReportDepositBase` will be reserved from the origin account, as well as"]
                #[doc = "`DataDepositPerByte` for each byte in `reason`. It will be unreserved upon approval,"]
                #[doc = "or slashed when rejected."]
                #[doc = ""]
                #[doc = "- `curator`: The curator account whom will manage this bounty."]
                #[doc = "- `fee`: The curator fee."]
                #[doc = "- `value`: The total payment amount of this bounty, curator fee included."]
                #[doc = "- `description`: The description of this bounty."]
                pub fn propose_bounty(
                    &self,
                    value: ::core::primitive::u128,
                    description: ::std::vec::Vec<::core::primitive::u8>,
                ) -> ::subxt::tx::StaticTxPayload<ProposeBounty>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Bounties",
                        "propose_bounty",
                        ProposeBounty { value, description },
                        [
                            99u8, 160u8, 94u8, 74u8, 105u8, 161u8, 123u8,
                            239u8, 241u8, 117u8, 97u8, 99u8, 84u8, 101u8, 87u8,
                            3u8, 88u8, 175u8, 75u8, 59u8, 114u8, 87u8, 18u8,
                            113u8, 126u8, 26u8, 42u8, 104u8, 201u8, 128u8,
                            102u8, 219u8,
                        ],
                    )
                }
                #[doc = "Approve a bounty proposal. At a later time, the bounty will be funded and become active"]
                #[doc = "and the original deposit will be returned."]
                #[doc = ""]
                #[doc = "May only be called from `T::ApproveOrigin`."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- O(1)."]
                #[doc = "# </weight>"]
                pub fn approve_bounty(
                    &self,
                    bounty_id: ::core::primitive::u32,
                ) -> ::subxt::tx::StaticTxPayload<ApproveBounty>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Bounties",
                        "approve_bounty",
                        ApproveBounty { bounty_id },
                        [
                            82u8, 228u8, 232u8, 103u8, 198u8, 173u8, 190u8,
                            148u8, 159u8, 86u8, 48u8, 4u8, 32u8, 169u8, 1u8,
                            129u8, 96u8, 145u8, 235u8, 68u8, 48u8, 34u8, 5u8,
                            1u8, 76u8, 26u8, 100u8, 228u8, 92u8, 198u8, 183u8,
                            173u8,
                        ],
                    )
                }
                #[doc = "Assign a curator to a funded bounty."]
                #[doc = ""]
                #[doc = "May only be called from `T::ApproveOrigin`."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- O(1)."]
                #[doc = "# </weight>"]
                pub fn propose_curator(
                    &self,
                    bounty_id: ::core::primitive::u32,
                    curator: ::subxt::ext::sp_runtime::MultiAddress<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    fee: ::core::primitive::u128,
                ) -> ::subxt::tx::StaticTxPayload<ProposeCurator>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Bounties",
                        "propose_curator",
                        ProposeCurator {
                            bounty_id,
                            curator,
                            fee,
                        },
                        [
                            85u8, 186u8, 206u8, 137u8, 98u8, 87u8, 202u8, 71u8,
                            89u8, 241u8, 56u8, 212u8, 89u8, 215u8, 65u8, 97u8,
                            202u8, 139u8, 78u8, 66u8, 92u8, 177u8, 163u8,
                            111u8, 212u8, 244u8, 41u8, 153u8, 104u8, 129u8,
                            112u8, 237u8,
                        ],
                    )
                }
                #[doc = "Unassign curator from a bounty."]
                #[doc = ""]
                #[doc = "This function can only be called by the `RejectOrigin` a signed origin."]
                #[doc = ""]
                #[doc = "If this function is called by the `RejectOrigin`, we assume that the curator is"]
                #[doc = "malicious or inactive. As a result, we will slash the curator when possible."]
                #[doc = ""]
                #[doc = "If the origin is the curator, we take this as a sign they are unable to do their job and"]
                #[doc = "they willingly give up. We could slash them, but for now we allow them to recover their"]
                #[doc = "deposit and exit without issue. (We may want to change this if it is abused.)"]
                #[doc = ""]
                #[doc = "Finally, the origin can be anyone if and only if the curator is \"inactive\". This allows"]
                #[doc = "anyone in the community to call out that a curator is not doing their due diligence, and"]
                #[doc = "we should pick a new curator. In this case the curator should also be slashed."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- O(1)."]
                #[doc = "# </weight>"]
                pub fn unassign_curator(
                    &self,
                    bounty_id: ::core::primitive::u32,
                ) -> ::subxt::tx::StaticTxPayload<UnassignCurator>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Bounties",
                        "unassign_curator",
                        UnassignCurator { bounty_id },
                        [
                            218u8, 241u8, 247u8, 89u8, 95u8, 120u8, 93u8, 18u8,
                            85u8, 114u8, 158u8, 254u8, 68u8, 77u8, 230u8,
                            186u8, 230u8, 201u8, 63u8, 223u8, 28u8, 173u8,
                            244u8, 82u8, 113u8, 177u8, 99u8, 27u8, 207u8,
                            247u8, 207u8, 213u8,
                        ],
                    )
                }
                #[doc = "Accept the curator role for a bounty."]
                #[doc = "A deposit will be reserved from curator and refund upon successful payout."]
                #[doc = ""]
                #[doc = "May only be called from the curator."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- O(1)."]
                #[doc = "# </weight>"]
                pub fn accept_curator(
                    &self,
                    bounty_id: ::core::primitive::u32,
                ) -> ::subxt::tx::StaticTxPayload<AcceptCurator>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Bounties",
                        "accept_curator",
                        AcceptCurator { bounty_id },
                        [
                            106u8, 96u8, 22u8, 67u8, 52u8, 109u8, 180u8, 225u8,
                            122u8, 253u8, 209u8, 214u8, 132u8, 131u8, 247u8,
                            131u8, 162u8, 51u8, 144u8, 30u8, 12u8, 126u8, 50u8,
                            152u8, 229u8, 119u8, 54u8, 116u8, 112u8, 235u8,
                            34u8, 166u8,
                        ],
                    )
                }
                #[doc = "Award bounty to a beneficiary account. The beneficiary will be able to claim the funds"]
                #[doc = "after a delay."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be the curator of this bounty."]
                #[doc = ""]
                #[doc = "- `bounty_id`: Bounty ID to award."]
                #[doc = "- `beneficiary`: The beneficiary account whom will receive the payout."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- O(1)."]
                #[doc = "# </weight>"]
                pub fn award_bounty(
                    &self,
                    bounty_id: ::core::primitive::u32,
                    beneficiary: ::subxt::ext::sp_runtime::MultiAddress<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::StaticTxPayload<AwardBounty> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Bounties",
                        "award_bounty",
                        AwardBounty {
                            bounty_id,
                            beneficiary,
                        },
                        [
                            7u8, 205u8, 73u8, 45u8, 57u8, 8u8, 24u8, 135u8,
                            89u8, 157u8, 35u8, 176u8, 224u8, 106u8, 167u8,
                            232u8, 230u8, 153u8, 239u8, 45u8, 210u8, 61u8,
                            17u8, 106u8, 220u8, 131u8, 105u8, 136u8, 232u8,
                            194u8, 243u8, 48u8,
                        ],
                    )
                }
                #[doc = "Claim the payout from an awarded bounty after payout delay."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be the beneficiary of this bounty."]
                #[doc = ""]
                #[doc = "- `bounty_id`: Bounty ID to claim."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- O(1)."]
                #[doc = "# </weight>"]
                pub fn claim_bounty(
                    &self,
                    bounty_id: ::core::primitive::u32,
                ) -> ::subxt::tx::StaticTxPayload<ClaimBounty> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Bounties",
                        "claim_bounty",
                        ClaimBounty { bounty_id },
                        [
                            102u8, 95u8, 8u8, 89u8, 4u8, 126u8, 189u8, 28u8,
                            241u8, 16u8, 125u8, 218u8, 42u8, 92u8, 177u8, 91u8,
                            8u8, 235u8, 33u8, 48u8, 64u8, 115u8, 177u8, 95u8,
                            242u8, 97u8, 181u8, 50u8, 68u8, 37u8, 59u8, 85u8,
                        ],
                    )
                }
                #[doc = "Cancel a proposed or active bounty. All the funds will be sent to treasury and"]
                #[doc = "the curator deposit will be unreserved if possible."]
                #[doc = ""]
                #[doc = "Only `T::RejectOrigin` is able to cancel a bounty."]
                #[doc = ""]
                #[doc = "- `bounty_id`: Bounty ID to cancel."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- O(1)."]
                #[doc = "# </weight>"]
                pub fn close_bounty(
                    &self,
                    bounty_id: ::core::primitive::u32,
                ) -> ::subxt::tx::StaticTxPayload<CloseBounty> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Bounties",
                        "close_bounty",
                        CloseBounty { bounty_id },
                        [
                            64u8, 113u8, 151u8, 228u8, 90u8, 55u8, 251u8, 63u8,
                            27u8, 211u8, 119u8, 229u8, 137u8, 137u8, 183u8,
                            240u8, 241u8, 146u8, 69u8, 169u8, 124u8, 220u8,
                            236u8, 111u8, 98u8, 188u8, 100u8, 52u8, 127u8,
                            245u8, 244u8, 92u8,
                        ],
                    )
                }
                #[doc = "Extend the expiry time of an active bounty."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be the curator of this bounty."]
                #[doc = ""]
                #[doc = "- `bounty_id`: Bounty ID to extend."]
                #[doc = "- `remark`: additional information."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- O(1)."]
                #[doc = "# </weight>"]
                pub fn extend_bounty_expiry(
                    &self,
                    bounty_id: ::core::primitive::u32,
                    remark: ::std::vec::Vec<::core::primitive::u8>,
                ) -> ::subxt::tx::StaticTxPayload<ExtendBountyExpiry>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Bounties",
                        "extend_bounty_expiry",
                        ExtendBountyExpiry { bounty_id, remark },
                        [
                            97u8, 69u8, 157u8, 39u8, 59u8, 72u8, 79u8, 88u8,
                            104u8, 119u8, 91u8, 26u8, 73u8, 216u8, 174u8, 95u8,
                            254u8, 214u8, 63u8, 138u8, 100u8, 112u8, 185u8,
                            81u8, 159u8, 247u8, 221u8, 60u8, 87u8, 40u8, 80u8,
                            202u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_bounties::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "New bounty proposal."]
            pub struct BountyProposed {
                pub index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for BountyProposed {
                const PALLET: &'static str = "Bounties";
                const EVENT: &'static str = "BountyProposed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "A bounty proposal was rejected; funds were slashed."]
            pub struct BountyRejected {
                pub index: ::core::primitive::u32,
                pub bond: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for BountyRejected {
                const PALLET: &'static str = "Bounties";
                const EVENT: &'static str = "BountyRejected";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "A bounty proposal is funded and became active."]
            pub struct BountyBecameActive {
                pub index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for BountyBecameActive {
                const PALLET: &'static str = "Bounties";
                const EVENT: &'static str = "BountyBecameActive";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "A bounty is awarded to a beneficiary."]
            pub struct BountyAwarded {
                pub index: ::core::primitive::u32,
                pub beneficiary: ::subxt::ext::sp_core::crypto::AccountId32,
            }
            impl ::subxt::events::StaticEvent for BountyAwarded {
                const PALLET: &'static str = "Bounties";
                const EVENT: &'static str = "BountyAwarded";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "A bounty is claimed by beneficiary."]
            pub struct BountyClaimed {
                pub index: ::core::primitive::u32,
                pub payout: ::core::primitive::u128,
                pub beneficiary: ::subxt::ext::sp_core::crypto::AccountId32,
            }
            impl ::subxt::events::StaticEvent for BountyClaimed {
                const PALLET: &'static str = "Bounties";
                const EVENT: &'static str = "BountyClaimed";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "A bounty is cancelled."]
            pub struct BountyCanceled {
                pub index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for BountyCanceled {
                const PALLET: &'static str = "Bounties";
                const EVENT: &'static str = "BountyCanceled";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "A bounty expiry is extended."]
            pub struct BountyExtended {
                pub index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for BountyExtended {
                const PALLET: &'static str = "Bounties";
                const EVENT: &'static str = "BountyExtended";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Number of bounty proposals that have been made."]                pub fn bounty_count (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u32 > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Bounties",
                        "BountyCount",
                        vec![],
                        [
                            5u8, 188u8, 134u8, 220u8, 64u8, 49u8, 188u8, 98u8,
                            185u8, 186u8, 230u8, 65u8, 247u8, 199u8, 28u8,
                            178u8, 202u8, 193u8, 41u8, 83u8, 115u8, 253u8,
                            182u8, 123u8, 92u8, 138u8, 12u8, 31u8, 31u8, 213u8,
                            23u8, 118u8,
                        ],
                    )
                }
                #[doc = " Bounties that have been made."]                pub fn bounties (& self , _0 : impl :: std :: borrow :: Borrow < :: core :: primitive :: u32 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_bounties :: Bounty < :: subxt :: ext :: sp_core :: crypto :: AccountId32 , :: core :: primitive :: u128 , :: core :: primitive :: u64 > > , :: subxt :: storage :: address :: Yes , () , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("Bounties" , "Bounties" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Twox64Concat)] , [252u8 , 32u8 , 63u8 , 115u8 , 137u8 , 66u8 , 138u8 , 21u8 , 35u8 , 169u8 , 4u8 , 0u8 , 35u8 , 110u8 , 154u8 , 43u8 , 155u8 , 63u8 , 61u8 , 194u8 , 149u8 , 151u8 , 83u8 , 35u8 , 207u8 , 147u8 , 80u8 , 49u8 , 111u8 , 197u8 , 172u8 , 188u8 ,])
                }
                #[doc = " Bounties that have been made."]                pub fn bounties_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_bounties :: Bounty < :: subxt :: ext :: sp_core :: crypto :: AccountId32 , :: core :: primitive :: u128 , :: core :: primitive :: u64 > > , () , () , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Bounties",
                        "Bounties",
                        Vec::new(),
                        [
                            252u8, 32u8, 63u8, 115u8, 137u8, 66u8, 138u8, 21u8,
                            35u8, 169u8, 4u8, 0u8, 35u8, 110u8, 154u8, 43u8,
                            155u8, 63u8, 61u8, 194u8, 149u8, 151u8, 83u8, 35u8,
                            207u8, 147u8, 80u8, 49u8, 111u8, 197u8, 172u8,
                            188u8,
                        ],
                    )
                }
                #[doc = " The description of each bounty."]                pub fn bounty_descriptions (& self , _0 : impl :: std :: borrow :: Borrow < :: core :: primitive :: u32 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: sp_runtime :: bounded :: bounded_vec :: BoundedVec < :: core :: primitive :: u8 > > , :: subxt :: storage :: address :: Yes , () , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("Bounties" , "BountyDescriptions" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Twox64Concat)] , [252u8 , 0u8 , 9u8 , 225u8 , 13u8 , 135u8 , 7u8 , 121u8 , 154u8 , 155u8 , 116u8 , 83u8 , 160u8 , 37u8 , 72u8 , 11u8 , 72u8 , 0u8 , 248u8 , 73u8 , 158u8 , 84u8 , 125u8 , 221u8 , 176u8 , 231u8 , 100u8 , 239u8 , 111u8 , 22u8 , 29u8 , 13u8 ,])
                }
                #[doc = " The description of each bounty."]                pub fn bounty_descriptions_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: sp_runtime :: bounded :: bounded_vec :: BoundedVec < :: core :: primitive :: u8 > > , () , () , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Bounties",
                        "BountyDescriptions",
                        Vec::new(),
                        [
                            252u8, 0u8, 9u8, 225u8, 13u8, 135u8, 7u8, 121u8,
                            154u8, 155u8, 116u8, 83u8, 160u8, 37u8, 72u8, 11u8,
                            72u8, 0u8, 248u8, 73u8, 158u8, 84u8, 125u8, 221u8,
                            176u8, 231u8, 100u8, 239u8, 111u8, 22u8, 29u8,
                            13u8,
                        ],
                    )
                }
                #[doc = " Bounty indices that have been approved but not yet funded."]                pub fn bounty_approvals (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: sp_runtime :: bounded :: bounded_vec :: BoundedVec < :: core :: primitive :: u32 > > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Bounties",
                        "BountyApprovals",
                        vec![],
                        [
                            64u8, 93u8, 54u8, 94u8, 122u8, 9u8, 246u8, 86u8,
                            234u8, 30u8, 125u8, 132u8, 49u8, 128u8, 1u8, 219u8,
                            241u8, 13u8, 217u8, 186u8, 48u8, 21u8, 5u8, 227u8,
                            71u8, 157u8, 128u8, 226u8, 214u8, 49u8, 249u8,
                            183u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The amount held on deposit for placing a bounty proposal."]
                pub fn bounty_deposit_base(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<
                        ::core::primitive::u128,
                    >,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "Bounties",
                        "BountyDepositBase",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8,
                            105u8, 200u8, 214u8, 27u8, 144u8, 208u8, 218u8,
                            160u8, 130u8, 109u8, 101u8, 54u8, 210u8, 136u8,
                            71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8,
                            148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The delay period for which a bounty beneficiary need to wait before claim the payout."]
                pub fn bounty_deposit_payout_delay(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<::core::primitive::u64>,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "Bounties",
                        "BountyDepositPayoutDelay",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8,
                            231u8, 190u8, 146u8, 59u8, 226u8, 157u8, 101u8,
                            103u8, 117u8, 249u8, 65u8, 18u8, 191u8, 103u8,
                            119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8,
                            239u8, 42u8, 246u8,
                        ],
                    )
                }
                #[doc = " Bounty duration in blocks."]
                pub fn bounty_update_period(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<::core::primitive::u64>,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "Bounties",
                        "BountyUpdatePeriod",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8,
                            231u8, 190u8, 146u8, 59u8, 226u8, 157u8, 101u8,
                            103u8, 117u8, 249u8, 65u8, 18u8, 191u8, 103u8,
                            119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8,
                            239u8, 42u8, 246u8,
                        ],
                    )
                }
                #[doc = " The curator deposit is calculated as a percentage of the curator fee."]
                #[doc = ""]
                #[doc = " This deposit has optional upper and lower bounds with `CuratorDepositMax` and"]
                #[doc = " `CuratorDepositMin`."]
                pub fn curator_deposit_multiplier(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<
                        runtime_types::sp_arithmetic::per_things::Permill,
                    >,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "Bounties",
                        "CuratorDepositMultiplier",
                        [
                            225u8, 236u8, 95u8, 157u8, 90u8, 94u8, 106u8,
                            192u8, 254u8, 19u8, 87u8, 80u8, 16u8, 62u8, 42u8,
                            204u8, 136u8, 106u8, 225u8, 53u8, 212u8, 52u8,
                            177u8, 79u8, 4u8, 116u8, 201u8, 104u8, 222u8, 75u8,
                            86u8, 227u8,
                        ],
                    )
                }
                #[doc = " Maximum amount of funds that should be placed in a deposit for making a proposal."]
                pub fn curator_deposit_max(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<
                        ::core::option::Option<::core::primitive::u128>,
                    >,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "Bounties",
                        "CuratorDepositMax",
                        [
                            84u8, 154u8, 218u8, 83u8, 84u8, 189u8, 32u8, 20u8,
                            120u8, 194u8, 88u8, 205u8, 109u8, 216u8, 114u8,
                            193u8, 120u8, 198u8, 154u8, 237u8, 134u8, 204u8,
                            102u8, 247u8, 52u8, 103u8, 231u8, 43u8, 243u8,
                            122u8, 60u8, 216u8,
                        ],
                    )
                }
                #[doc = " Minimum amount of funds that should be placed in a deposit for making a proposal."]
                pub fn curator_deposit_min(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<
                        ::core::option::Option<::core::primitive::u128>,
                    >,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "Bounties",
                        "CuratorDepositMin",
                        [
                            84u8, 154u8, 218u8, 83u8, 84u8, 189u8, 32u8, 20u8,
                            120u8, 194u8, 88u8, 205u8, 109u8, 216u8, 114u8,
                            193u8, 120u8, 198u8, 154u8, 237u8, 134u8, 204u8,
                            102u8, 247u8, 52u8, 103u8, 231u8, 43u8, 243u8,
                            122u8, 60u8, 216u8,
                        ],
                    )
                }
                #[doc = " Minimum value for a bounty."]
                pub fn bounty_value_minimum(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<
                        ::core::primitive::u128,
                    >,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "Bounties",
                        "BountyValueMinimum",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8,
                            105u8, 200u8, 214u8, 27u8, 144u8, 208u8, 218u8,
                            160u8, 130u8, 109u8, 101u8, 54u8, 210u8, 136u8,
                            71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8,
                            148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The amount held on deposit per byte within the tip report reason or bounty description."]
                pub fn data_deposit_per_byte(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<
                        ::core::primitive::u128,
                    >,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "Bounties",
                        "DataDepositPerByte",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8,
                            105u8, 200u8, 214u8, 27u8, 144u8, 208u8, 218u8,
                            160u8, 130u8, 109u8, 101u8, 54u8, 210u8, 136u8,
                            71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8,
                            148u8, 156u8,
                        ],
                    )
                }
                #[doc = " Maximum acceptable reason length."]
                #[doc = ""]
                #[doc = " Benchmarks depend on this value, be sure to update weights file when changing this value"]
                pub fn maximum_reason_length(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "Bounties",
                        "MaximumReasonLength",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8,
                            200u8, 157u8, 125u8, 151u8, 53u8, 76u8, 168u8,
                            26u8, 10u8, 9u8, 98u8, 68u8, 9u8, 178u8, 197u8,
                            113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod child_bounties {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct AddChildBounty {
                #[codec(compact)]
                pub parent_bounty_id: ::core::primitive::u32,
                #[codec(compact)]
                pub value: ::core::primitive::u128,
                pub description: ::std::vec::Vec<::core::primitive::u8>,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct ProposeCurator {
                #[codec(compact)]
                pub parent_bounty_id: ::core::primitive::u32,
                #[codec(compact)]
                pub child_bounty_id: ::core::primitive::u32,
                pub curator: ::subxt::ext::sp_runtime::MultiAddress<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                #[codec(compact)]
                pub fee: ::core::primitive::u128,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct AcceptCurator {
                #[codec(compact)]
                pub parent_bounty_id: ::core::primitive::u32,
                #[codec(compact)]
                pub child_bounty_id: ::core::primitive::u32,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct UnassignCurator {
                #[codec(compact)]
                pub parent_bounty_id: ::core::primitive::u32,
                #[codec(compact)]
                pub child_bounty_id: ::core::primitive::u32,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct AwardChildBounty {
                #[codec(compact)]
                pub parent_bounty_id: ::core::primitive::u32,
                #[codec(compact)]
                pub child_bounty_id: ::core::primitive::u32,
                pub beneficiary: ::subxt::ext::sp_runtime::MultiAddress<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct ClaimChildBounty {
                #[codec(compact)]
                pub parent_bounty_id: ::core::primitive::u32,
                #[codec(compact)]
                pub child_bounty_id: ::core::primitive::u32,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct CloseChildBounty {
                #[codec(compact)]
                pub parent_bounty_id: ::core::primitive::u32,
                #[codec(compact)]
                pub child_bounty_id: ::core::primitive::u32,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Add a new child-bounty."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be the curator of parent"]
                #[doc = "bounty and the parent bounty must be in \"active\" state."]
                #[doc = ""]
                #[doc = "Child-bounty gets added successfully & fund gets transferred from"]
                #[doc = "parent bounty to child-bounty account, if parent bounty has enough"]
                #[doc = "funds, else the call fails."]
                #[doc = ""]
                #[doc = "Upper bound to maximum number of active  child bounties that can be"]
                #[doc = "added are managed via runtime trait config"]
                #[doc = "[`Config::MaxActiveChildBountyCount`]."]
                #[doc = ""]
                #[doc = "If the call is success, the status of child-bounty is updated to"]
                #[doc = "\"Added\"."]
                #[doc = ""]
                #[doc = "- `parent_bounty_id`: Index of parent bounty for which child-bounty is being added."]
                #[doc = "- `value`: Value for executing the proposal."]
                #[doc = "- `description`: Text description for the child-bounty."]
                pub fn add_child_bounty(
                    &self,
                    parent_bounty_id: ::core::primitive::u32,
                    value: ::core::primitive::u128,
                    description: ::std::vec::Vec<::core::primitive::u8>,
                ) -> ::subxt::tx::StaticTxPayload<AddChildBounty>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "ChildBounties",
                        "add_child_bounty",
                        AddChildBounty {
                            parent_bounty_id,
                            value,
                            description,
                        },
                        [
                            210u8, 156u8, 242u8, 121u8, 28u8, 214u8, 212u8,
                            203u8, 46u8, 45u8, 110u8, 25u8, 33u8, 138u8, 136u8,
                            71u8, 23u8, 102u8, 203u8, 122u8, 77u8, 162u8,
                            112u8, 133u8, 43u8, 73u8, 201u8, 176u8, 102u8,
                            68u8, 188u8, 8u8,
                        ],
                    )
                }
                #[doc = "Propose curator for funded child-bounty."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be curator of parent bounty."]
                #[doc = ""]
                #[doc = "Parent bounty must be in active state, for this child-bounty call to"]
                #[doc = "work."]
                #[doc = ""]
                #[doc = "Child-bounty must be in \"Added\" state, for processing the call. And"]
                #[doc = "state of child-bounty is moved to \"CuratorProposed\" on successful"]
                #[doc = "call completion."]
                #[doc = ""]
                #[doc = "- `parent_bounty_id`: Index of parent bounty."]
                #[doc = "- `child_bounty_id`: Index of child bounty."]
                #[doc = "- `curator`: Address of child-bounty curator."]
                #[doc = "- `fee`: payment fee to child-bounty curator for execution."]
                pub fn propose_curator(
                    &self,
                    parent_bounty_id: ::core::primitive::u32,
                    child_bounty_id: ::core::primitive::u32,
                    curator: ::subxt::ext::sp_runtime::MultiAddress<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    fee: ::core::primitive::u128,
                ) -> ::subxt::tx::StaticTxPayload<ProposeCurator>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "ChildBounties",
                        "propose_curator",
                        ProposeCurator {
                            parent_bounty_id,
                            child_bounty_id,
                            curator,
                            fee,
                        },
                        [
                            147u8, 32u8, 161u8, 72u8, 92u8, 246u8, 250u8,
                            138u8, 98u8, 84u8, 229u8, 228u8, 217u8, 128u8,
                            168u8, 20u8, 73u8, 113u8, 55u8, 207u8, 117u8, 52u8,
                            9u8, 139u8, 223u8, 149u8, 48u8, 1u8, 8u8, 82u8,
                            133u8, 112u8,
                        ],
                    )
                }
                #[doc = "Accept the curator role for the child-bounty."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be the curator of this"]
                #[doc = "child-bounty."]
                #[doc = ""]
                #[doc = "A deposit will be reserved from the curator and refund upon"]
                #[doc = "successful payout or cancellation."]
                #[doc = ""]
                #[doc = "Fee for curator is deducted from curator fee of parent bounty."]
                #[doc = ""]
                #[doc = "Parent bounty must be in active state, for this child-bounty call to"]
                #[doc = "work."]
                #[doc = ""]
                #[doc = "Child-bounty must be in \"CuratorProposed\" state, for processing the"]
                #[doc = "call. And state of child-bounty is moved to \"Active\" on successful"]
                #[doc = "call completion."]
                #[doc = ""]
                #[doc = "- `parent_bounty_id`: Index of parent bounty."]
                #[doc = "- `child_bounty_id`: Index of child bounty."]
                pub fn accept_curator(
                    &self,
                    parent_bounty_id: ::core::primitive::u32,
                    child_bounty_id: ::core::primitive::u32,
                ) -> ::subxt::tx::StaticTxPayload<AcceptCurator>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "ChildBounties",
                        "accept_curator",
                        AcceptCurator {
                            parent_bounty_id,
                            child_bounty_id,
                        },
                        [
                            112u8, 175u8, 238u8, 54u8, 132u8, 20u8, 206u8,
                            59u8, 220u8, 228u8, 207u8, 222u8, 132u8, 240u8,
                            188u8, 0u8, 210u8, 225u8, 234u8, 142u8, 232u8,
                            53u8, 64u8, 89u8, 220u8, 29u8, 28u8, 123u8, 125u8,
                            207u8, 10u8, 52u8,
                        ],
                    )
                }
                #[doc = "Unassign curator from a child-bounty."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call can be either `RejectOrigin`, or"]
                #[doc = "the curator of the parent bounty, or any signed origin."]
                #[doc = ""]
                #[doc = "For the origin other than T::RejectOrigin and the child-bounty"]
                #[doc = "curator, parent bounty must be in active state, for this call to"]
                #[doc = "work. We allow child-bounty curator and T::RejectOrigin to execute"]
                #[doc = "this call irrespective of the parent bounty state."]
                #[doc = ""]
                #[doc = "If this function is called by the `RejectOrigin` or the"]
                #[doc = "parent bounty curator, we assume that the child-bounty curator is"]
                #[doc = "malicious or inactive. As a result, child-bounty curator deposit is"]
                #[doc = "slashed."]
                #[doc = ""]
                #[doc = "If the origin is the child-bounty curator, we take this as a sign"]
                #[doc = "that they are unable to do their job, and are willingly giving up."]
                #[doc = "We could slash the deposit, but for now we allow them to unreserve"]
                #[doc = "their deposit and exit without issue. (We may want to change this if"]
                #[doc = "it is abused.)"]
                #[doc = ""]
                #[doc = "Finally, the origin can be anyone iff the child-bounty curator is"]
                #[doc = "\"inactive\". Expiry update due of parent bounty is used to estimate"]
                #[doc = "inactive state of child-bounty curator."]
                #[doc = ""]
                #[doc = "This allows anyone in the community to call out that a child-bounty"]
                #[doc = "curator is not doing their due diligence, and we should pick a new"]
                #[doc = "one. In this case the child-bounty curator deposit is slashed."]
                #[doc = ""]
                #[doc = "State of child-bounty is moved to Added state on successful call"]
                #[doc = "completion."]
                #[doc = ""]
                #[doc = "- `parent_bounty_id`: Index of parent bounty."]
                #[doc = "- `child_bounty_id`: Index of child bounty."]
                pub fn unassign_curator(
                    &self,
                    parent_bounty_id: ::core::primitive::u32,
                    child_bounty_id: ::core::primitive::u32,
                ) -> ::subxt::tx::StaticTxPayload<UnassignCurator>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "ChildBounties",
                        "unassign_curator",
                        UnassignCurator {
                            parent_bounty_id,
                            child_bounty_id,
                        },
                        [
                            228u8, 189u8, 46u8, 75u8, 121u8, 161u8, 150u8,
                            87u8, 207u8, 86u8, 192u8, 50u8, 52u8, 61u8, 49u8,
                            88u8, 178u8, 182u8, 89u8, 72u8, 203u8, 45u8, 41u8,
                            26u8, 149u8, 114u8, 154u8, 169u8, 118u8, 128u8,
                            13u8, 211u8,
                        ],
                    )
                }
                #[doc = "Award child-bounty to a beneficiary."]
                #[doc = ""]
                #[doc = "The beneficiary will be able to claim the funds after a delay."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be the parent curator or"]
                #[doc = "curator of this child-bounty."]
                #[doc = ""]
                #[doc = "Parent bounty must be in active state, for this child-bounty call to"]
                #[doc = "work."]
                #[doc = ""]
                #[doc = "Child-bounty must be in active state, for processing the call. And"]
                #[doc = "state of child-bounty is moved to \"PendingPayout\" on successful call"]
                #[doc = "completion."]
                #[doc = ""]
                #[doc = "- `parent_bounty_id`: Index of parent bounty."]
                #[doc = "- `child_bounty_id`: Index of child bounty."]
                #[doc = "- `beneficiary`: Beneficiary account."]
                pub fn award_child_bounty(
                    &self,
                    parent_bounty_id: ::core::primitive::u32,
                    child_bounty_id: ::core::primitive::u32,
                    beneficiary: ::subxt::ext::sp_runtime::MultiAddress<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::StaticTxPayload<AwardChildBounty>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "ChildBounties",
                        "award_child_bounty",
                        AwardChildBounty {
                            parent_bounty_id,
                            child_bounty_id,
                            beneficiary,
                        },
                        [
                            214u8, 25u8, 53u8, 19u8, 146u8, 11u8, 223u8, 173u8,
                            22u8, 235u8, 27u8, 57u8, 90u8, 171u8, 161u8, 45u8,
                            102u8, 37u8, 171u8, 110u8, 215u8, 151u8, 46u8,
                            136u8, 93u8, 7u8, 254u8, 112u8, 47u8, 42u8, 144u8,
                            140u8,
                        ],
                    )
                }
                #[doc = "Claim the payout from an awarded child-bounty after payout delay."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call may be any signed origin."]
                #[doc = ""]
                #[doc = "Call works independent of parent bounty state, No need for parent"]
                #[doc = "bounty to be in active state."]
                #[doc = ""]
                #[doc = "The Beneficiary is paid out with agreed bounty value. Curator fee is"]
                #[doc = "paid & curator deposit is unreserved."]
                #[doc = ""]
                #[doc = "Child-bounty must be in \"PendingPayout\" state, for processing the"]
                #[doc = "call. And instance of child-bounty is removed from the state on"]
                #[doc = "successful call completion."]
                #[doc = ""]
                #[doc = "- `parent_bounty_id`: Index of parent bounty."]
                #[doc = "- `child_bounty_id`: Index of child bounty."]
                pub fn claim_child_bounty(
                    &self,
                    parent_bounty_id: ::core::primitive::u32,
                    child_bounty_id: ::core::primitive::u32,
                ) -> ::subxt::tx::StaticTxPayload<ClaimChildBounty>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "ChildBounties",
                        "claim_child_bounty",
                        ClaimChildBounty {
                            parent_bounty_id,
                            child_bounty_id,
                        },
                        [
                            134u8, 243u8, 151u8, 228u8, 38u8, 174u8, 96u8,
                            140u8, 104u8, 124u8, 166u8, 206u8, 126u8, 211u8,
                            17u8, 100u8, 172u8, 5u8, 234u8, 171u8, 125u8, 2u8,
                            191u8, 163u8, 72u8, 29u8, 163u8, 107u8, 65u8, 92u8,
                            41u8, 45u8,
                        ],
                    )
                }
                #[doc = "Cancel a proposed or active child-bounty. Child-bounty account funds"]
                #[doc = "are transferred to parent bounty account. The child-bounty curator"]
                #[doc = "deposit may be unreserved if possible."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be either parent curator or"]
                #[doc = "`T::RejectOrigin`."]
                #[doc = ""]
                #[doc = "If the state of child-bounty is `Active`, curator deposit is"]
                #[doc = "unreserved."]
                #[doc = ""]
                #[doc = "If the state of child-bounty is `PendingPayout`, call fails &"]
                #[doc = "returns `PendingPayout` error."]
                #[doc = ""]
                #[doc = "For the origin other than T::RejectOrigin, parent bounty must be in"]
                #[doc = "active state, for this child-bounty call to work. For origin"]
                #[doc = "T::RejectOrigin execution is forced."]
                #[doc = ""]
                #[doc = "Instance of child-bounty is removed from the state on successful"]
                #[doc = "call completion."]
                #[doc = ""]
                #[doc = "- `parent_bounty_id`: Index of parent bounty."]
                #[doc = "- `child_bounty_id`: Index of child bounty."]
                pub fn close_child_bounty(
                    &self,
                    parent_bounty_id: ::core::primitive::u32,
                    child_bounty_id: ::core::primitive::u32,
                ) -> ::subxt::tx::StaticTxPayload<CloseChildBounty>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "ChildBounties",
                        "close_child_bounty",
                        CloseChildBounty {
                            parent_bounty_id,
                            child_bounty_id,
                        },
                        [
                            40u8, 0u8, 235u8, 75u8, 36u8, 196u8, 29u8, 26u8,
                            30u8, 172u8, 240u8, 44u8, 129u8, 243u8, 55u8,
                            211u8, 96u8, 159u8, 72u8, 96u8, 142u8, 68u8, 41u8,
                            238u8, 157u8, 167u8, 90u8, 141u8, 213u8, 249u8,
                            222u8, 22u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_child_bounties::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "A child-bounty is added."]
            pub struct Added {
                pub index: ::core::primitive::u32,
                pub child_index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Added {
                const PALLET: &'static str = "ChildBounties";
                const EVENT: &'static str = "Added";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "A child-bounty is awarded to a beneficiary."]
            pub struct Awarded {
                pub index: ::core::primitive::u32,
                pub child_index: ::core::primitive::u32,
                pub beneficiary: ::subxt::ext::sp_core::crypto::AccountId32,
            }
            impl ::subxt::events::StaticEvent for Awarded {
                const PALLET: &'static str = "ChildBounties";
                const EVENT: &'static str = "Awarded";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "A child-bounty is claimed by beneficiary."]
            pub struct Claimed {
                pub index: ::core::primitive::u32,
                pub child_index: ::core::primitive::u32,
                pub payout: ::core::primitive::u128,
                pub beneficiary: ::subxt::ext::sp_core::crypto::AccountId32,
            }
            impl ::subxt::events::StaticEvent for Claimed {
                const PALLET: &'static str = "ChildBounties";
                const EVENT: &'static str = "Claimed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "A child-bounty is cancelled."]
            pub struct Canceled {
                pub index: ::core::primitive::u32,
                pub child_index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Canceled {
                const PALLET: &'static str = "ChildBounties";
                const EVENT: &'static str = "Canceled";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Number of total child bounties."]                pub fn child_bounty_count (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u32 > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "ChildBounties",
                        "ChildBountyCount",
                        vec![],
                        [
                            46u8, 10u8, 183u8, 160u8, 98u8, 215u8, 39u8, 253u8,
                            81u8, 94u8, 114u8, 147u8, 115u8, 162u8, 33u8,
                            117u8, 160u8, 214u8, 167u8, 7u8, 109u8, 143u8,
                            158u8, 1u8, 200u8, 205u8, 17u8, 93u8, 89u8, 26u8,
                            30u8, 95u8,
                        ],
                    )
                }
                #[doc = " Number of child bounties per parent bounty."]
                #[doc = " Map of parent bounty index to number of child bounties."]                pub fn parent_child_bounties (& self , _0 : impl :: std :: borrow :: Borrow < :: core :: primitive :: u32 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u32 > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("ChildBounties" , "ParentChildBounties" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Twox64Concat)] , [127u8 , 161u8 , 181u8 , 79u8 , 235u8 , 196u8 , 252u8 , 162u8 , 39u8 , 15u8 , 251u8 , 49u8 , 125u8 , 80u8 , 101u8 , 24u8 , 234u8 , 88u8 , 212u8 , 126u8 , 63u8 , 63u8 , 19u8 , 75u8 , 137u8 , 125u8 , 38u8 , 250u8 , 77u8 , 49u8 , 76u8 , 188u8 ,])
                }
                #[doc = " Number of child bounties per parent bounty."]
                #[doc = " Map of parent bounty index to number of child bounties."]                pub fn parent_child_bounties_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u32 > , () , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "ChildBounties",
                        "ParentChildBounties",
                        Vec::new(),
                        [
                            127u8, 161u8, 181u8, 79u8, 235u8, 196u8, 252u8,
                            162u8, 39u8, 15u8, 251u8, 49u8, 125u8, 80u8, 101u8,
                            24u8, 234u8, 88u8, 212u8, 126u8, 63u8, 63u8, 19u8,
                            75u8, 137u8, 125u8, 38u8, 250u8, 77u8, 49u8, 76u8,
                            188u8,
                        ],
                    )
                }
                #[doc = " Child bounties that have been added."]                pub fn child_bounties (& self , _0 : impl :: std :: borrow :: Borrow < :: core :: primitive :: u32 > , _1 : impl :: std :: borrow :: Borrow < :: core :: primitive :: u32 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_child_bounties :: ChildBounty < :: subxt :: ext :: sp_core :: crypto :: AccountId32 , :: core :: primitive :: u128 , :: core :: primitive :: u64 > > , :: subxt :: storage :: address :: Yes , () , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("ChildBounties" , "ChildBounties" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Twox64Concat) , :: subxt :: storage :: address :: StorageMapKey :: new (_1 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Twox64Concat)] , [99u8 , 216u8 , 128u8 , 63u8 , 135u8 , 176u8 , 227u8 , 200u8 , 21u8 , 159u8 , 149u8 , 70u8 , 203u8 , 203u8 , 115u8 , 26u8 , 1u8 , 104u8 , 239u8 , 89u8 , 204u8 , 40u8 , 87u8 , 147u8 , 58u8 , 223u8 , 89u8 , 187u8 , 125u8 , 237u8 , 104u8 , 197u8 ,])
                }
                #[doc = " Child bounties that have been added."]                pub fn child_bounties_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_child_bounties :: ChildBounty < :: subxt :: ext :: sp_core :: crypto :: AccountId32 , :: core :: primitive :: u128 , :: core :: primitive :: u64 > > , () , () , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "ChildBounties",
                        "ChildBounties",
                        Vec::new(),
                        [
                            99u8, 216u8, 128u8, 63u8, 135u8, 176u8, 227u8,
                            200u8, 21u8, 159u8, 149u8, 70u8, 203u8, 203u8,
                            115u8, 26u8, 1u8, 104u8, 239u8, 89u8, 204u8, 40u8,
                            87u8, 147u8, 58u8, 223u8, 89u8, 187u8, 125u8,
                            237u8, 104u8, 197u8,
                        ],
                    )
                }
                #[doc = " The description of each child-bounty."]                pub fn child_bounty_descriptions (& self , _0 : impl :: std :: borrow :: Borrow < :: core :: primitive :: u32 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: sp_runtime :: bounded :: bounded_vec :: BoundedVec < :: core :: primitive :: u8 > > , :: subxt :: storage :: address :: Yes , () , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("ChildBounties" , "ChildBountyDescriptions" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Twox64Concat)] , [193u8 , 200u8 , 40u8 , 30u8 , 14u8 , 71u8 , 90u8 , 42u8 , 58u8 , 253u8 , 225u8 , 158u8 , 172u8 , 10u8 , 45u8 , 238u8 , 36u8 , 144u8 , 184u8 , 153u8 , 11u8 , 157u8 , 125u8 , 220u8 , 175u8 , 31u8 , 28u8 , 93u8 , 207u8 , 212u8 , 141u8 , 74u8 ,])
                }
                #[doc = " The description of each child-bounty."]                pub fn child_bounty_descriptions_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: sp_runtime :: bounded :: bounded_vec :: BoundedVec < :: core :: primitive :: u8 > > , () , () , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "ChildBounties",
                        "ChildBountyDescriptions",
                        Vec::new(),
                        [
                            193u8, 200u8, 40u8, 30u8, 14u8, 71u8, 90u8, 42u8,
                            58u8, 253u8, 225u8, 158u8, 172u8, 10u8, 45u8,
                            238u8, 36u8, 144u8, 184u8, 153u8, 11u8, 157u8,
                            125u8, 220u8, 175u8, 31u8, 28u8, 93u8, 207u8,
                            212u8, 141u8, 74u8,
                        ],
                    )
                }
                #[doc = " The cumulative child-bounty curator fee for each parent bounty."]                pub fn children_curator_fees (& self , _0 : impl :: std :: borrow :: Borrow < :: core :: primitive :: u32 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u128 > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("ChildBounties" , "ChildrenCuratorFees" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Twox64Concat)] , [174u8 , 128u8 , 86u8 , 179u8 , 133u8 , 76u8 , 98u8 , 169u8 , 234u8 , 166u8 , 249u8 , 214u8 , 172u8 , 171u8 , 8u8 , 161u8 , 105u8 , 69u8 , 148u8 , 151u8 , 35u8 , 174u8 , 118u8 , 139u8 , 101u8 , 56u8 , 85u8 , 211u8 , 121u8 , 168u8 , 0u8 , 216u8 ,])
                }
                #[doc = " The cumulative child-bounty curator fee for each parent bounty."]                pub fn children_curator_fees_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u128 > , () , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "ChildBounties",
                        "ChildrenCuratorFees",
                        Vec::new(),
                        [
                            174u8, 128u8, 86u8, 179u8, 133u8, 76u8, 98u8,
                            169u8, 234u8, 166u8, 249u8, 214u8, 172u8, 171u8,
                            8u8, 161u8, 105u8, 69u8, 148u8, 151u8, 35u8, 174u8,
                            118u8, 139u8, 101u8, 56u8, 85u8, 211u8, 121u8,
                            168u8, 0u8, 216u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " Maximum number of child bounties that can be added to a parent bounty."]
                pub fn max_active_child_bounty_count(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "ChildBounties",
                        "MaxActiveChildBountyCount",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8,
                            200u8, 157u8, 125u8, 151u8, 53u8, 76u8, 168u8,
                            26u8, 10u8, 9u8, 98u8, 68u8, 9u8, 178u8, 197u8,
                            113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Minimum value for a child-bounty."]
                pub fn child_bounty_value_minimum(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<
                        ::core::primitive::u128,
                    >,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "ChildBounties",
                        "ChildBountyValueMinimum",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8,
                            105u8, 200u8, 214u8, 27u8, 144u8, 208u8, 218u8,
                            160u8, 130u8, 109u8, 101u8, 54u8, 210u8, 136u8,
                            71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8,
                            148u8, 156u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod bags_list {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Rebag {
                pub dislocated: ::subxt::ext::sp_runtime::MultiAddress<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct PutInFrontOf {
                pub lighter: ::subxt::ext::sp_runtime::MultiAddress<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Declare that some `dislocated` account has, through rewards or penalties, sufficiently"]
                #[doc = "changed its score that it should properly fall into a different bag than its current"]
                #[doc = "one."]
                #[doc = ""]
                #[doc = "Anyone can call this function about any potentially dislocated account."]
                #[doc = ""]
                #[doc = "Will always update the stored score of `dislocated` to the correct score, based on"]
                #[doc = "`ScoreProvider`."]
                #[doc = ""]
                #[doc = "If `dislocated` does not exists, it returns an error."]
                pub fn rebag(
                    &self,
                    dislocated: ::subxt::ext::sp_runtime::MultiAddress<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::StaticTxPayload<Rebag> {
                    ::subxt::tx::StaticTxPayload::new(
                        "BagsList",
                        "rebag",
                        Rebag { dislocated },
                        [
                            0u8, 168u8, 218u8, 188u8, 236u8, 124u8, 250u8,
                            201u8, 237u8, 20u8, 97u8, 150u8, 117u8, 232u8,
                            116u8, 237u8, 55u8, 151u8, 71u8, 119u8, 42u8, 48u8,
                            10u8, 66u8, 167u8, 208u8, 184u8, 228u8, 146u8,
                            181u8, 84u8, 70u8,
                        ],
                    )
                }
                #[doc = "Move the caller's Id directly in front of `lighter`."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ and can only be called by the Id of"]
                #[doc = "the account going in front of `lighter`."]
                #[doc = ""]
                #[doc = "Only works if"]
                #[doc = "- both nodes are within the same bag,"]
                #[doc = "- and `origin` has a greater `Score` than `lighter`."]
                pub fn put_in_front_of(
                    &self,
                    lighter: ::subxt::ext::sp_runtime::MultiAddress<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::StaticTxPayload<PutInFrontOf>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "BagsList",
                        "put_in_front_of",
                        PutInFrontOf { lighter },
                        [
                            104u8, 36u8, 96u8, 80u8, 236u8, 75u8, 203u8, 232u8,
                            136u8, 167u8, 205u8, 143u8, 200u8, 53u8, 124u8,
                            148u8, 76u8, 246u8, 71u8, 246u8, 205u8, 82u8, 32u8,
                            186u8, 33u8, 5u8, 183u8, 127u8, 153u8, 232u8, 80u8,
                            164u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_bags_list::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "Moved an account from one bag to another."]
            pub struct Rebagged {
                pub who: ::subxt::ext::sp_core::crypto::AccountId32,
                pub from: ::core::primitive::u64,
                pub to: ::core::primitive::u64,
            }
            impl ::subxt::events::StaticEvent for Rebagged {
                const PALLET: &'static str = "BagsList";
                const EVENT: &'static str = "Rebagged";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "Updated the score of some account to the given amount."]
            pub struct ScoreUpdated {
                pub who: ::subxt::ext::sp_core::crypto::AccountId32,
                pub new_score: ::core::primitive::u64,
            }
            impl ::subxt::events::StaticEvent for ScoreUpdated {
                const PALLET: &'static str = "BagsList";
                const EVENT: &'static str = "ScoreUpdated";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " A single node, within some bag."]
                #[doc = ""]
                #[doc = " Nodes store links forward and back within their respective bags."]                pub fn list_nodes (& self , _0 : impl :: std :: borrow :: Borrow < :: subxt :: ext :: sp_core :: crypto :: AccountId32 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_bags_list :: list :: Node > , :: subxt :: storage :: address :: Yes , () , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("BagsList" , "ListNodes" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Twox64Concat)] , [176u8 , 186u8 , 93u8 , 51u8 , 100u8 , 184u8 , 240u8 , 29u8 , 70u8 , 3u8 , 117u8 , 47u8 , 23u8 , 66u8 , 231u8 , 234u8 , 53u8 , 8u8 , 234u8 , 175u8 , 181u8 , 8u8 , 161u8 , 154u8 , 48u8 , 178u8 , 147u8 , 227u8 , 122u8 , 115u8 , 57u8 , 97u8 ,])
                }
                #[doc = " A single node, within some bag."]
                #[doc = ""]
                #[doc = " Nodes store links forward and back within their respective bags."]                pub fn list_nodes_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_bags_list :: list :: Node > , () , () , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "BagsList",
                        "ListNodes",
                        Vec::new(),
                        [
                            176u8, 186u8, 93u8, 51u8, 100u8, 184u8, 240u8,
                            29u8, 70u8, 3u8, 117u8, 47u8, 23u8, 66u8, 231u8,
                            234u8, 53u8, 8u8, 234u8, 175u8, 181u8, 8u8, 161u8,
                            154u8, 48u8, 178u8, 147u8, 227u8, 122u8, 115u8,
                            57u8, 97u8,
                        ],
                    )
                }
                #[doc = "Counter for the related counted storage map"]                pub fn counter_for_list_nodes (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u32 > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "BagsList",
                        "CounterForListNodes",
                        vec![],
                        [
                            156u8, 168u8, 97u8, 33u8, 84u8, 117u8, 220u8, 89u8,
                            62u8, 182u8, 24u8, 88u8, 231u8, 244u8, 41u8, 19u8,
                            210u8, 131u8, 87u8, 0u8, 241u8, 230u8, 160u8,
                            142u8, 128u8, 153u8, 83u8, 36u8, 88u8, 247u8, 70u8,
                            130u8,
                        ],
                    )
                }
                #[doc = " A bag stored in storage."]
                #[doc = ""]
                #[doc = " Stores a `Bag` struct, which stores head and tail pointers to itself."]                pub fn list_bags (& self , _0 : impl :: std :: borrow :: Borrow < :: core :: primitive :: u64 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_bags_list :: list :: Bag > , :: subxt :: storage :: address :: Yes , () , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("BagsList" , "ListBags" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Twox64Concat)] , [38u8 , 86u8 , 63u8 , 92u8 , 85u8 , 59u8 , 225u8 , 244u8 , 14u8 , 155u8 , 76u8 , 249u8 , 153u8 , 140u8 , 179u8 , 7u8 , 96u8 , 170u8 , 236u8 , 179u8 , 4u8 , 18u8 , 232u8 , 146u8 , 216u8 , 51u8 , 135u8 , 116u8 , 196u8 , 117u8 , 143u8 , 153u8 ,])
                }
                #[doc = " A bag stored in storage."]
                #[doc = ""]
                #[doc = " Stores a `Bag` struct, which stores head and tail pointers to itself."]                pub fn list_bags_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_bags_list :: list :: Bag > , () , () , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "BagsList",
                        "ListBags",
                        Vec::new(),
                        [
                            38u8, 86u8, 63u8, 92u8, 85u8, 59u8, 225u8, 244u8,
                            14u8, 155u8, 76u8, 249u8, 153u8, 140u8, 179u8, 7u8,
                            96u8, 170u8, 236u8, 179u8, 4u8, 18u8, 232u8, 146u8,
                            216u8, 51u8, 135u8, 116u8, 196u8, 117u8, 143u8,
                            153u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The list of thresholds separating the various bags."]
                #[doc = ""]
                #[doc = " Ids are separated into unsorted bags according to their score. This specifies the"]
                #[doc = " thresholds separating the bags. An id's bag is the largest bag for which the id's score"]
                #[doc = " is less than or equal to its upper threshold."]
                #[doc = ""]
                #[doc = " When ids are iterated, higher bags are iterated completely before lower bags. This means"]
                #[doc = " that iteration is _semi-sorted_: ids of higher score tend to come before ids of lower"]
                #[doc = " score, but peer ids within a particular bag are sorted in insertion order."]
                #[doc = ""]
                #[doc = " # Expressing the constant"]
                #[doc = ""]
                #[doc = " This constant must be sorted in strictly increasing order. Duplicate items are not"]
                #[doc = " permitted."]
                #[doc = ""]
                #[doc = " There is an implied upper limit of `Score::MAX`; that value does not need to be"]
                #[doc = " specified within the bag. For any two threshold lists, if one ends with"]
                #[doc = " `Score::MAX`, the other one does not, and they are otherwise equal, the two"]
                #[doc = " lists will behave identically."]
                #[doc = ""]
                #[doc = " # Calculation"]
                #[doc = ""]
                #[doc = " It is recommended to generate the set of thresholds in a geometric series, such that"]
                #[doc = " there exists some constant ratio such that `threshold[k + 1] == (threshold[k] *"]
                #[doc = " constant_ratio).max(threshold[k] + 1)` for all `k`."]
                #[doc = ""]
                #[doc = " The helpers in the `/utils/frame/generate-bags` module can simplify this calculation."]
                #[doc = ""]
                #[doc = " # Examples"]
                #[doc = ""]
                #[doc = " - If `BagThresholds::get().is_empty()`, then all ids are put into the same bag, and"]
                #[doc = "   iteration is strictly in insertion order."]
                #[doc = " - If `BagThresholds::get().len() == 64`, and the thresholds are determined according to"]
                #[doc = "   the procedure given above, then the constant ratio is equal to 2."]
                #[doc = " - If `BagThresholds::get().len() == 200`, and the thresholds are determined according to"]
                #[doc = "   the procedure given above, then the constant ratio is approximately equal to 1.248."]
                #[doc = " - If the threshold list begins `[1, 2, 3, ...]`, then an id with score 0 or 1 will fall"]
                #[doc = "   into bag 0, an id with score 2 will fall into bag 1, etc."]
                #[doc = ""]
                #[doc = " # Migration"]
                #[doc = ""]
                #[doc = " In the event that this list ever changes, a copy of the old bags list must be retained."]
                #[doc = " With that `List::migrate` can be called, which will perform the appropriate migration."]
                pub fn bag_thresholds(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<
                        ::std::vec::Vec<::core::primitive::u64>,
                    >,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "BagsList",
                        "BagThresholds",
                        [
                            103u8, 102u8, 255u8, 165u8, 124u8, 54u8, 5u8,
                            172u8, 112u8, 234u8, 25u8, 175u8, 178u8, 19u8,
                            251u8, 73u8, 91u8, 192u8, 227u8, 81u8, 249u8, 45u8,
                            126u8, 116u8, 7u8, 37u8, 9u8, 200u8, 167u8, 182u8,
                            12u8, 131u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod nomination_pools {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Join {
                #[codec(compact)]
                pub amount: ::core::primitive::u128,
                pub pool_id: ::core::primitive::u32,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct BondExtra {
                pub extra: runtime_types::pallet_nomination_pools::BondExtra<
                    ::core::primitive::u128,
                >,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct ClaimPayout;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Unbond {
                pub member_account: ::subxt::ext::sp_runtime::MultiAddress<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                #[codec(compact)]
                pub unbonding_points: ::core::primitive::u128,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct PoolWithdrawUnbonded {
                pub pool_id: ::core::primitive::u32,
                pub num_slashing_spans: ::core::primitive::u32,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct WithdrawUnbonded {
                pub member_account: ::subxt::ext::sp_runtime::MultiAddress<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                pub num_slashing_spans: ::core::primitive::u32,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Create {
                #[codec(compact)]
                pub amount: ::core::primitive::u128,
                pub root: ::subxt::ext::sp_runtime::MultiAddress<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                pub nominator: ::subxt::ext::sp_runtime::MultiAddress<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                pub state_toggler: ::subxt::ext::sp_runtime::MultiAddress<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Nominate {
                pub pool_id: ::core::primitive::u32,
                pub validators:
                    ::std::vec::Vec<::subxt::ext::sp_core::crypto::AccountId32>,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct SetState {
                pub pool_id: ::core::primitive::u32,
                pub state: runtime_types::pallet_nomination_pools::PoolState,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct SetMetadata {
                pub pool_id: ::core::primitive::u32,
                pub metadata: ::std::vec::Vec<::core::primitive::u8>,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct SetConfigs {
                pub min_join_bond:
                    runtime_types::pallet_nomination_pools::ConfigOp<
                        ::core::primitive::u128,
                    >,
                pub min_create_bond:
                    runtime_types::pallet_nomination_pools::ConfigOp<
                        ::core::primitive::u128,
                    >,
                pub max_pools: runtime_types::pallet_nomination_pools::ConfigOp<
                    ::core::primitive::u32,
                >,
                pub max_members:
                    runtime_types::pallet_nomination_pools::ConfigOp<
                        ::core::primitive::u32,
                    >,
                pub max_members_per_pool:
                    runtime_types::pallet_nomination_pools::ConfigOp<
                        ::core::primitive::u32,
                    >,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct UpdateRoles {
                pub pool_id: ::core::primitive::u32,
                pub new_root: runtime_types::pallet_nomination_pools::ConfigOp<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                >,
                pub new_nominator:
                    runtime_types::pallet_nomination_pools::ConfigOp<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                    >,
                pub new_state_toggler:
                    runtime_types::pallet_nomination_pools::ConfigOp<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                    >,
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Chill {
                pub pool_id: ::core::primitive::u32,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Stake funds with a pool. The amount to bond is transferred from the member to the"]
                #[doc = "pools account and immediately increases the pools bond."]
                #[doc = ""]
                #[doc = "# Note"]
                #[doc = ""]
                #[doc = "* An account can only be a member of a single pool."]
                #[doc = "* An account cannot join the same pool multiple times."]
                #[doc = "* This call will *not* dust the member account, so the member must have at least"]
                #[doc = "  `existential deposit + amount` in their account."]
                #[doc = "* Only a pool with [`PoolState::Open`] can be joined"]
                pub fn join(
                    &self,
                    amount: ::core::primitive::u128,
                    pool_id: ::core::primitive::u32,
                ) -> ::subxt::tx::StaticTxPayload<Join> {
                    ::subxt::tx::StaticTxPayload::new(
                        "NominationPools",
                        "join",
                        Join { amount, pool_id },
                        [
                            205u8, 66u8, 42u8, 72u8, 146u8, 148u8, 119u8,
                            162u8, 101u8, 183u8, 46u8, 176u8, 221u8, 204u8,
                            197u8, 20u8, 75u8, 226u8, 29u8, 118u8, 208u8, 60u8,
                            192u8, 247u8, 222u8, 100u8, 69u8, 80u8, 172u8,
                            13u8, 69u8, 250u8,
                        ],
                    )
                }
                #[doc = "Bond `extra` more funds from `origin` into the pool to which they already belong."]
                #[doc = ""]
                #[doc = "Additional funds can come from either the free balance of the account, of from the"]
                #[doc = "accumulated rewards, see [`BondExtra`]."]
                #[doc = ""]
                #[doc = "Bonding extra funds implies an automatic payout of all pending rewards as well."]
                pub fn bond_extra(
                    &self,
                    extra: runtime_types::pallet_nomination_pools::BondExtra<
                        ::core::primitive::u128,
                    >,
                ) -> ::subxt::tx::StaticTxPayload<BondExtra> {
                    ::subxt::tx::StaticTxPayload::new(
                        "NominationPools",
                        "bond_extra",
                        BondExtra { extra },
                        [
                            50u8, 72u8, 181u8, 216u8, 249u8, 27u8, 250u8,
                            177u8, 253u8, 22u8, 240u8, 100u8, 184u8, 202u8,
                            197u8, 34u8, 21u8, 188u8, 248u8, 191u8, 11u8, 10u8,
                            236u8, 161u8, 168u8, 37u8, 38u8, 238u8, 61u8,
                            183u8, 86u8, 55u8,
                        ],
                    )
                }
                #[doc = "A bonded member can use this to claim their payout based on the rewards that the pool"]
                #[doc = "has accumulated since their last claimed payout (OR since joining if this is there first"]
                #[doc = "time claiming rewards). The payout will be transferred to the member's account."]
                #[doc = ""]
                #[doc = "The member will earn rewards pro rata based on the members stake vs the sum of the"]
                #[doc = "members in the pools stake. Rewards do not \"expire\"."]
                pub fn claim_payout(
                    &self,
                ) -> ::subxt::tx::StaticTxPayload<ClaimPayout> {
                    ::subxt::tx::StaticTxPayload::new(
                        "NominationPools",
                        "claim_payout",
                        ClaimPayout {},
                        [
                            128u8, 58u8, 138u8, 55u8, 64u8, 16u8, 129u8, 25u8,
                            211u8, 229u8, 193u8, 115u8, 47u8, 45u8, 155u8,
                            221u8, 218u8, 1u8, 222u8, 5u8, 236u8, 32u8, 88u8,
                            0u8, 198u8, 72u8, 196u8, 181u8, 104u8, 16u8, 212u8,
                            29u8,
                        ],
                    )
                }
                #[doc = "Unbond up to `unbonding_points` of the `member_account`'s funds from the pool. It"]
                #[doc = "implicitly collects the rewards one last time, since not doing so would mean some"]
                #[doc = "rewards would be forfeited."]
                #[doc = ""]
                #[doc = "Under certain conditions, this call can be dispatched permissionlessly (i.e. by any"]
                #[doc = "account)."]
                #[doc = ""]
                #[doc = "# Conditions for a permissionless dispatch."]
                #[doc = ""]
                #[doc = "* The pool is blocked and the caller is either the root or state-toggler. This is"]
                #[doc = "  refereed to as a kick."]
                #[doc = "* The pool is destroying and the member is not the depositor."]
                #[doc = "* The pool is destroying, the member is the depositor and no other members are in the"]
                #[doc = "  pool."]
                #[doc = ""]
                #[doc = "## Conditions for permissioned dispatch (i.e. the caller is also the"]
                #[doc = "`member_account`):"]
                #[doc = ""]
                #[doc = "* The caller is not the depositor."]
                #[doc = "* The caller is the depositor, the pool is destroying and no other members are in the"]
                #[doc = "  pool."]
                #[doc = ""]
                #[doc = "# Note"]
                #[doc = ""]
                #[doc = "If there are too many unlocking chunks to unbond with the pool account,"]
                #[doc = "[`Call::pool_withdraw_unbonded`] can be called to try and minimize unlocking chunks. If"]
                #[doc = "there are too many unlocking chunks, the result of this call will likely be the"]
                #[doc = "`NoMoreChunks` error from the staking system."]
                pub fn unbond(
                    &self,
                    member_account: ::subxt::ext::sp_runtime::MultiAddress<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    unbonding_points: ::core::primitive::u128,
                ) -> ::subxt::tx::StaticTxPayload<Unbond> {
                    ::subxt::tx::StaticTxPayload::new(
                        "NominationPools",
                        "unbond",
                        Unbond {
                            member_account,
                            unbonding_points,
                        },
                        [
                            139u8, 71u8, 78u8, 184u8, 141u8, 89u8, 179u8,
                            123u8, 153u8, 30u8, 116u8, 186u8, 148u8, 49u8,
                            48u8, 98u8, 33u8, 21u8, 29u8, 106u8, 180u8, 212u8,
                            37u8, 251u8, 237u8, 21u8, 255u8, 13u8, 236u8, 73u8,
                            250u8, 57u8,
                        ],
                    )
                }
                #[doc = "Call `withdraw_unbonded` for the pools account. This call can be made by any account."]
                #[doc = ""]
                #[doc = "This is useful if their are too many unlocking chunks to call `unbond`, and some"]
                #[doc = "can be cleared by withdrawing. In the case there are too many unlocking chunks, the user"]
                #[doc = "would probably see an error like `NoMoreChunks` emitted from the staking system when"]
                #[doc = "they attempt to unbond."]
                pub fn pool_withdraw_unbonded(
                    &self,
                    pool_id: ::core::primitive::u32,
                    num_slashing_spans: ::core::primitive::u32,
                ) -> ::subxt::tx::StaticTxPayload<PoolWithdrawUnbonded>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "NominationPools",
                        "pool_withdraw_unbonded",
                        PoolWithdrawUnbonded {
                            pool_id,
                            num_slashing_spans,
                        },
                        [
                            152u8, 245u8, 131u8, 247u8, 106u8, 214u8, 154u8,
                            8u8, 7u8, 210u8, 149u8, 218u8, 118u8, 46u8, 242u8,
                            182u8, 191u8, 119u8, 28u8, 199u8, 36u8, 49u8,
                            219u8, 123u8, 58u8, 203u8, 211u8, 226u8, 217u8,
                            36u8, 56u8, 0u8,
                        ],
                    )
                }
                #[doc = "Withdraw unbonded funds from `member_account`. If no bonded funds can be unbonded, an"]
                #[doc = "error is returned."]
                #[doc = ""]
                #[doc = "Under certain conditions, this call can be dispatched permissionlessly (i.e. by any"]
                #[doc = "account)."]
                #[doc = ""]
                #[doc = "# Conditions for a permissionless dispatch"]
                #[doc = ""]
                #[doc = "* The pool is in destroy mode and the target is not the depositor."]
                #[doc = "* The target is the depositor and they are the only member in the sub pools."]
                #[doc = "* The pool is blocked and the caller is either the root or state-toggler."]
                #[doc = ""]
                #[doc = "# Conditions for permissioned dispatch"]
                #[doc = ""]
                #[doc = "* The caller is the target and they are not the depositor."]
                #[doc = ""]
                #[doc = "# Note"]
                #[doc = ""]
                #[doc = "If the target is the depositor, the pool will be destroyed."]
                pub fn withdraw_unbonded(
                    &self,
                    member_account: ::subxt::ext::sp_runtime::MultiAddress<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    num_slashing_spans: ::core::primitive::u32,
                ) -> ::subxt::tx::StaticTxPayload<WithdrawUnbonded>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "NominationPools",
                        "withdraw_unbonded",
                        WithdrawUnbonded {
                            member_account,
                            num_slashing_spans,
                        },
                        [
                            192u8, 183u8, 121u8, 87u8, 176u8, 70u8, 91u8,
                            226u8, 156u8, 79u8, 87u8, 34u8, 227u8, 84u8, 22u8,
                            235u8, 3u8, 181u8, 166u8, 194u8, 147u8, 72u8, 27u8,
                            221u8, 57u8, 14u8, 44u8, 70u8, 253u8, 236u8, 44u8,
                            84u8,
                        ],
                    )
                }
                #[doc = "Create a new delegation pool."]
                #[doc = ""]
                #[doc = "# Arguments"]
                #[doc = ""]
                #[doc = "* `amount` - The amount of funds to delegate to the pool. This also acts of a sort of"]
                #[doc = "  deposit since the pools creator cannot fully unbond funds until the pool is being"]
                #[doc = "  destroyed."]
                #[doc = "* `index` - A disambiguation index for creating the account. Likely only useful when"]
                #[doc = "  creating multiple pools in the same extrinsic."]
                #[doc = "* `root` - The account to set as [`PoolRoles::root`]."]
                #[doc = "* `nominator` - The account to set as the [`PoolRoles::nominator`]."]
                #[doc = "* `state_toggler` - The account to set as the [`PoolRoles::state_toggler`]."]
                #[doc = ""]
                #[doc = "# Note"]
                #[doc = ""]
                #[doc = "In addition to `amount`, the caller will transfer the existential deposit; so the caller"]
                #[doc = "needs at have at least `amount + existential_deposit` transferrable."]
                pub fn create(
                    &self,
                    amount: ::core::primitive::u128,
                    root: ::subxt::ext::sp_runtime::MultiAddress<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    nominator: ::subxt::ext::sp_runtime::MultiAddress<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    state_toggler: ::subxt::ext::sp_runtime::MultiAddress<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::StaticTxPayload<Create> {
                    ::subxt::tx::StaticTxPayload::new(
                        "NominationPools",
                        "create",
                        Create {
                            amount,
                            root,
                            nominator,
                            state_toggler,
                        },
                        [
                            73u8, 99u8, 205u8, 59u8, 21u8, 182u8, 163u8, 158u8,
                            99u8, 182u8, 182u8, 63u8, 212u8, 84u8, 48u8, 244u8,
                            95u8, 153u8, 86u8, 104u8, 92u8, 93u8, 191u8, 79u8,
                            163u8, 123u8, 20u8, 121u8, 241u8, 194u8, 79u8,
                            112u8,
                        ],
                    )
                }
                #[doc = "Nominate on behalf of the pool."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be signed by the pool nominator or the pool"]
                #[doc = "root role."]
                #[doc = ""]
                #[doc = "This directly forward the call to the staking pallet, on behalf of the pool bonded"]
                #[doc = "account."]
                pub fn nominate(
                    &self,
                    pool_id: ::core::primitive::u32,
                    validators: ::std::vec::Vec<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                    >,
                ) -> ::subxt::tx::StaticTxPayload<Nominate> {
                    ::subxt::tx::StaticTxPayload::new(
                        "NominationPools",
                        "nominate",
                        Nominate {
                            pool_id,
                            validators,
                        },
                        [
                            10u8, 235u8, 64u8, 157u8, 36u8, 249u8, 186u8, 27u8,
                            79u8, 172u8, 25u8, 3u8, 203u8, 19u8, 192u8, 182u8,
                            36u8, 103u8, 13u8, 20u8, 89u8, 140u8, 159u8, 4u8,
                            132u8, 242u8, 192u8, 146u8, 55u8, 251u8, 216u8,
                            255u8,
                        ],
                    )
                }
                #[doc = "Set a new state for the pool."]
                #[doc = ""]
                #[doc = "If a pool is already in the `Destroying` state, then under no condition can its state"]
                #[doc = "change again."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be either:"]
                #[doc = ""]
                #[doc = "1. signed by the state toggler, or the root role of the pool,"]
                #[doc = "2. if the pool conditions to be open are NOT met (as described by `ok_to_be_open`), and"]
                #[doc = "   then the state of the pool can be permissionlessly changed to `Destroying`."]
                pub fn set_state(
                    &self,
                    pool_id: ::core::primitive::u32,
                    state: runtime_types::pallet_nomination_pools::PoolState,
                ) -> ::subxt::tx::StaticTxPayload<SetState> {
                    ::subxt::tx::StaticTxPayload::new(
                        "NominationPools",
                        "set_state",
                        SetState { pool_id, state },
                        [
                            104u8, 40u8, 213u8, 88u8, 159u8, 115u8, 35u8,
                            249u8, 78u8, 180u8, 99u8, 1u8, 225u8, 218u8, 192u8,
                            151u8, 25u8, 194u8, 192u8, 187u8, 39u8, 170u8,
                            212u8, 125u8, 75u8, 250u8, 248u8, 175u8, 159u8,
                            161u8, 151u8, 162u8,
                        ],
                    )
                }
                #[doc = "Set a new metadata for the pool."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be signed by the state toggler, or the root role"]
                #[doc = "of the pool."]
                pub fn set_metadata(
                    &self,
                    pool_id: ::core::primitive::u32,
                    metadata: ::std::vec::Vec<::core::primitive::u8>,
                ) -> ::subxt::tx::StaticTxPayload<SetMetadata> {
                    ::subxt::tx::StaticTxPayload::new(
                        "NominationPools",
                        "set_metadata",
                        SetMetadata { pool_id, metadata },
                        [
                            156u8, 81u8, 170u8, 161u8, 34u8, 100u8, 183u8,
                            174u8, 5u8, 81u8, 31u8, 76u8, 12u8, 42u8, 77u8,
                            1u8, 6u8, 26u8, 168u8, 7u8, 8u8, 115u8, 158u8,
                            151u8, 30u8, 211u8, 52u8, 177u8, 234u8, 87u8,
                            125u8, 127u8,
                        ],
                    )
                }
                #[doc = "Update configurations for the nomination pools. The origin for this call must be"]
                #[doc = "Root."]
                #[doc = ""]
                #[doc = "# Arguments"]
                #[doc = ""]
                #[doc = "* `min_join_bond` - Set [`MinJoinBond`]."]
                #[doc = "* `min_create_bond` - Set [`MinCreateBond`]."]
                #[doc = "* `max_pools` - Set [`MaxPools`]."]
                #[doc = "* `max_members` - Set [`MaxPoolMembers`]."]
                #[doc = "* `max_members_per_pool` - Set [`MaxPoolMembersPerPool`]."]
                pub fn set_configs(
                    &self,
                    min_join_bond : runtime_types :: pallet_nomination_pools :: ConfigOp < :: core :: primitive :: u128 >,
                    min_create_bond : runtime_types :: pallet_nomination_pools :: ConfigOp < :: core :: primitive :: u128 >,
                    max_pools: runtime_types::pallet_nomination_pools::ConfigOp<
                        ::core::primitive::u32,
                    >,
                    max_members : runtime_types :: pallet_nomination_pools :: ConfigOp < :: core :: primitive :: u32 >,
                    max_members_per_pool : runtime_types :: pallet_nomination_pools :: ConfigOp < :: core :: primitive :: u32 >,
                ) -> ::subxt::tx::StaticTxPayload<SetConfigs> {
                    ::subxt::tx::StaticTxPayload::new(
                        "NominationPools",
                        "set_configs",
                        SetConfigs {
                            min_join_bond,
                            min_create_bond,
                            max_pools,
                            max_members,
                            max_members_per_pool,
                        },
                        [
                            143u8, 196u8, 211u8, 30u8, 71u8, 15u8, 150u8,
                            243u8, 7u8, 178u8, 179u8, 168u8, 40u8, 116u8,
                            220u8, 140u8, 18u8, 206u8, 6u8, 189u8, 190u8, 37u8,
                            68u8, 41u8, 45u8, 233u8, 247u8, 172u8, 185u8, 34u8,
                            243u8, 187u8,
                        ],
                    )
                }
                #[doc = "Update the roles of the pool."]
                #[doc = ""]
                #[doc = "The root is the only entity that can change any of the roles, including itself,"]
                #[doc = "excluding the depositor, who can never change."]
                #[doc = ""]
                #[doc = "It emits an event, notifying UIs of the role change. This event is quite relevant to"]
                #[doc = "most pool members and they should be informed of changes to pool roles."]
                pub fn update_roles(
                    &self,
                    pool_id: ::core::primitive::u32,
                    new_root: runtime_types::pallet_nomination_pools::ConfigOp<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                    >,
                    new_nominator : runtime_types :: pallet_nomination_pools :: ConfigOp < :: subxt :: ext :: sp_core :: crypto :: AccountId32 >,
                    new_state_toggler : runtime_types :: pallet_nomination_pools :: ConfigOp < :: subxt :: ext :: sp_core :: crypto :: AccountId32 >,
                ) -> ::subxt::tx::StaticTxPayload<UpdateRoles> {
                    ::subxt::tx::StaticTxPayload::new(
                        "NominationPools",
                        "update_roles",
                        UpdateRoles {
                            pool_id,
                            new_root,
                            new_nominator,
                            new_state_toggler,
                        },
                        [
                            247u8, 95u8, 234u8, 56u8, 181u8, 229u8, 158u8,
                            97u8, 69u8, 165u8, 38u8, 17u8, 27u8, 209u8, 204u8,
                            250u8, 91u8, 193u8, 35u8, 93u8, 215u8, 131u8,
                            148u8, 73u8, 67u8, 188u8, 92u8, 32u8, 34u8, 37u8,
                            113u8, 93u8,
                        ],
                    )
                }
                #[doc = "Chill on behalf of the pool."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be signed by the pool nominator or the pool"]
                #[doc = "root role, same as [`Pallet::nominate`]."]
                #[doc = ""]
                #[doc = "This directly forward the call to the staking pallet, on behalf of the pool bonded"]
                #[doc = "account."]
                pub fn chill(
                    &self,
                    pool_id: ::core::primitive::u32,
                ) -> ::subxt::tx::StaticTxPayload<Chill> {
                    ::subxt::tx::StaticTxPayload::new(
                        "NominationPools",
                        "chill",
                        Chill { pool_id },
                        [
                            41u8, 114u8, 128u8, 121u8, 244u8, 15u8, 15u8, 52u8,
                            129u8, 88u8, 239u8, 167u8, 216u8, 38u8, 123u8,
                            240u8, 172u8, 229u8, 132u8, 64u8, 175u8, 87u8,
                            217u8, 27u8, 11u8, 124u8, 1u8, 140u8, 40u8, 191u8,
                            187u8, 36u8,
                        ],
                    )
                }
            }
        }
        #[doc = "Events of this pallet."]
        pub type Event = runtime_types::pallet_nomination_pools::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "A pool has been created."]
            pub struct Created {
                pub depositor: ::subxt::ext::sp_core::crypto::AccountId32,
                pub pool_id: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Created {
                const PALLET: &'static str = "NominationPools";
                const EVENT: &'static str = "Created";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "A member has became bonded in a pool."]
            pub struct Bonded {
                pub member: ::subxt::ext::sp_core::crypto::AccountId32,
                pub pool_id: ::core::primitive::u32,
                pub bonded: ::core::primitive::u128,
                pub joined: ::core::primitive::bool,
            }
            impl ::subxt::events::StaticEvent for Bonded {
                const PALLET: &'static str = "NominationPools";
                const EVENT: &'static str = "Bonded";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "A payout has been made to a member."]
            pub struct PaidOut {
                pub member: ::subxt::ext::sp_core::crypto::AccountId32,
                pub pool_id: ::core::primitive::u32,
                pub payout: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for PaidOut {
                const PALLET: &'static str = "NominationPools";
                const EVENT: &'static str = "PaidOut";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "A member has unbonded from their pool."]
            #[doc = ""]
            #[doc = "- `balance` is the corresponding balance of the number of points that has been"]
            #[doc = "  requested to be unbonded (the argument of the `unbond` transaction) from the bonded"]
            #[doc = "  pool."]
            #[doc = "- `points` is the number of points that are issued as a result of `balance` being"]
            #[doc = "dissolved into the corresponding unbonding pool."]
            #[doc = "- `era` is the era in which the balance will be unbonded."]
            #[doc = "In the absence of slashing, these values will match. In the presence of slashing, the"]
            #[doc = "number of points that are issued in the unbonding pool will be less than the amount"]
            #[doc = "requested to be unbonded."]
            pub struct Unbonded {
                pub member: ::subxt::ext::sp_core::crypto::AccountId32,
                pub pool_id: ::core::primitive::u32,
                pub balance: ::core::primitive::u128,
                pub points: ::core::primitive::u128,
                pub era: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Unbonded {
                const PALLET: &'static str = "NominationPools";
                const EVENT: &'static str = "Unbonded";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "A member has withdrawn from their pool."]
            #[doc = ""]
            #[doc = "The given number of `points` have been dissolved in return of `balance`."]
            #[doc = ""]
            #[doc = "Similar to `Unbonded` event, in the absence of slashing, the ratio of point to balance"]
            #[doc = "will be 1."]
            pub struct Withdrawn {
                pub member: ::subxt::ext::sp_core::crypto::AccountId32,
                pub pool_id: ::core::primitive::u32,
                pub balance: ::core::primitive::u128,
                pub points: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Withdrawn {
                const PALLET: &'static str = "NominationPools";
                const EVENT: &'static str = "Withdrawn";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "A pool has been destroyed."]
            pub struct Destroyed {
                pub pool_id: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Destroyed {
                const PALLET: &'static str = "NominationPools";
                const EVENT: &'static str = "Destroyed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "The state of a pool has changed"]
            pub struct StateChanged {
                pub pool_id: ::core::primitive::u32,
                pub new_state:
                    runtime_types::pallet_nomination_pools::PoolState,
            }
            impl ::subxt::events::StaticEvent for StateChanged {
                const PALLET: &'static str = "NominationPools";
                const EVENT: &'static str = "StateChanged";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "A member has been removed from a pool."]
            #[doc = ""]
            #[doc = "The removal can be voluntary (withdrawn all unbonded funds) or involuntary (kicked)."]
            pub struct MemberRemoved {
                pub pool_id: ::core::primitive::u32,
                pub member: ::subxt::ext::sp_core::crypto::AccountId32,
            }
            impl ::subxt::events::StaticEvent for MemberRemoved {
                const PALLET: &'static str = "NominationPools";
                const EVENT: &'static str = "MemberRemoved";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "The roles of a pool have been updated to the given new roles. Note that the depositor"]
            #[doc = "can never change."]
            pub struct RolesUpdated {
                pub root: ::core::option::Option<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                >,
                pub state_toggler: ::core::option::Option<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                >,
                pub nominator: ::core::option::Option<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                >,
            }
            impl ::subxt::events::StaticEvent for RolesUpdated {
                const PALLET: &'static str = "NominationPools";
                const EVENT: &'static str = "RolesUpdated";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "The active balance of pool `pool_id` has been slashed to `balance`."]
            pub struct PoolSlashed {
                pub pool_id: ::core::primitive::u32,
                pub balance: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for PoolSlashed {
                const PALLET: &'static str = "NominationPools";
                const EVENT: &'static str = "PoolSlashed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "The unbond pool at `era` of pool `pool_id` has been slashed to `balance`."]
            pub struct UnbondingPoolSlashed {
                pub pool_id: ::core::primitive::u32,
                pub era: ::core::primitive::u32,
                pub balance: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for UnbondingPoolSlashed {
                const PALLET: &'static str = "NominationPools";
                const EVENT: &'static str = "UnbondingPoolSlashed";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Minimum amount to bond to join a pool."]                pub fn min_join_bond (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u128 > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "NominationPools",
                        "MinJoinBond",
                        vec![],
                        [
                            125u8, 239u8, 45u8, 225u8, 74u8, 129u8, 247u8,
                            184u8, 205u8, 58u8, 45u8, 186u8, 126u8, 170u8,
                            112u8, 120u8, 23u8, 190u8, 247u8, 97u8, 131u8,
                            126u8, 215u8, 44u8, 147u8, 122u8, 132u8, 212u8,
                            217u8, 84u8, 240u8, 91u8,
                        ],
                    )
                }
                #[doc = " Minimum bond required to create a pool."]
                #[doc = ""]
                #[doc = " This is the amount that the depositor must put as their initial stake in the pool, as an"]
                #[doc = " indication of \"skin in the game\"."]
                #[doc = ""]
                #[doc = " This is the value that will always exist in the staking ledger of the pool bonded account"]
                #[doc = " while all other accounts leave."]                pub fn min_create_bond (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u128 > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "NominationPools",
                        "MinCreateBond",
                        vec![],
                        [
                            31u8, 208u8, 240u8, 158u8, 23u8, 218u8, 212u8,
                            138u8, 92u8, 210u8, 207u8, 170u8, 32u8, 60u8, 5u8,
                            21u8, 84u8, 162u8, 1u8, 111u8, 181u8, 243u8, 24u8,
                            148u8, 193u8, 253u8, 248u8, 190u8, 16u8, 222u8,
                            219u8, 67u8,
                        ],
                    )
                }
                #[doc = " Maximum number of nomination pools that can exist. If `None`, then an unbounded number of"]
                #[doc = " pools can exist."]                pub fn max_pools (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u32 > , :: subxt :: storage :: address :: Yes , () , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "NominationPools",
                        "MaxPools",
                        vec![],
                        [
                            216u8, 111u8, 68u8, 103u8, 33u8, 50u8, 109u8, 3u8,
                            176u8, 195u8, 23u8, 73u8, 112u8, 138u8, 9u8, 194u8,
                            233u8, 73u8, 68u8, 215u8, 162u8, 255u8, 217u8,
                            173u8, 141u8, 27u8, 72u8, 199u8, 7u8, 240u8, 25u8,
                            34u8,
                        ],
                    )
                }
                #[doc = " Maximum number of members that can exist in the system. If `None`, then the count"]
                #[doc = " members are not bound on a system wide basis."]                pub fn max_pool_members (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u32 > , :: subxt :: storage :: address :: Yes , () , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "NominationPools",
                        "MaxPoolMembers",
                        vec![],
                        [
                            82u8, 217u8, 26u8, 234u8, 223u8, 241u8, 66u8,
                            182u8, 43u8, 233u8, 59u8, 242u8, 202u8, 254u8,
                            69u8, 50u8, 254u8, 196u8, 166u8, 89u8, 120u8, 87u8,
                            76u8, 148u8, 31u8, 197u8, 49u8, 88u8, 206u8, 41u8,
                            242u8, 62u8,
                        ],
                    )
                }
                #[doc = " Maximum number of members that may belong to pool. If `None`, then the count of"]
                #[doc = " members is not bound on a per pool basis."]                pub fn max_pool_members_per_pool (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u32 > , :: subxt :: storage :: address :: Yes , () , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "NominationPools",
                        "MaxPoolMembersPerPool",
                        vec![],
                        [
                            93u8, 241u8, 16u8, 169u8, 138u8, 199u8, 128u8,
                            149u8, 65u8, 30u8, 55u8, 11u8, 41u8, 252u8, 83u8,
                            250u8, 9u8, 33u8, 152u8, 239u8, 195u8, 147u8, 16u8,
                            248u8, 180u8, 153u8, 88u8, 231u8, 248u8, 169u8,
                            186u8, 48u8,
                        ],
                    )
                }
                #[doc = " Active members."]                pub fn pool_members (& self , _0 : impl :: std :: borrow :: Borrow < :: subxt :: ext :: sp_core :: crypto :: AccountId32 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_nomination_pools :: PoolMember > , :: subxt :: storage :: address :: Yes , () , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("NominationPools" , "PoolMembers" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Twox64Concat)] , [252u8 , 236u8 , 201u8 , 127u8 , 219u8 , 1u8 , 19u8 , 144u8 , 5u8 , 108u8 , 70u8 , 30u8 , 177u8 , 232u8 , 253u8 , 237u8 , 211u8 , 91u8 , 63u8 , 62u8 , 155u8 , 151u8 , 153u8 , 165u8 , 206u8 , 53u8 , 111u8 , 31u8 , 60u8 , 120u8 , 100u8 , 249u8 ,])
                }
                #[doc = " Active members."]                pub fn pool_members_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_nomination_pools :: PoolMember > , () , () , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "NominationPools",
                        "PoolMembers",
                        Vec::new(),
                        [
                            252u8, 236u8, 201u8, 127u8, 219u8, 1u8, 19u8,
                            144u8, 5u8, 108u8, 70u8, 30u8, 177u8, 232u8, 253u8,
                            237u8, 211u8, 91u8, 63u8, 62u8, 155u8, 151u8,
                            153u8, 165u8, 206u8, 53u8, 111u8, 31u8, 60u8,
                            120u8, 100u8, 249u8,
                        ],
                    )
                }
                #[doc = "Counter for the related counted storage map"]                pub fn counter_for_pool_members (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u32 > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "NominationPools",
                        "CounterForPoolMembers",
                        vec![],
                        [
                            114u8, 126u8, 27u8, 138u8, 119u8, 44u8, 45u8,
                            129u8, 84u8, 107u8, 171u8, 206u8, 117u8, 141u8,
                            20u8, 75u8, 229u8, 237u8, 31u8, 229u8, 124u8,
                            190u8, 27u8, 124u8, 63u8, 59u8, 167u8, 42u8, 62u8,
                            212u8, 160u8, 2u8,
                        ],
                    )
                }
                #[doc = " Storage for bonded pools."]                pub fn bonded_pools (& self , _0 : impl :: std :: borrow :: Borrow < :: core :: primitive :: u32 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_nomination_pools :: BondedPoolInner > , :: subxt :: storage :: address :: Yes , () , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("NominationPools" , "BondedPools" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Twox64Concat)] , [34u8 , 51u8 , 86u8 , 95u8 , 237u8 , 118u8 , 40u8 , 212u8 , 128u8 , 227u8 , 113u8 , 6u8 , 116u8 , 28u8 , 96u8 , 223u8 , 63u8 , 249u8 , 33u8 , 152u8 , 61u8 , 7u8 , 205u8 , 220u8 , 221u8 , 174u8 , 207u8 , 39u8 , 53u8 , 176u8 , 13u8 , 74u8 ,])
                }
                #[doc = " Storage for bonded pools."]                pub fn bonded_pools_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_nomination_pools :: BondedPoolInner > , () , () , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "NominationPools",
                        "BondedPools",
                        Vec::new(),
                        [
                            34u8, 51u8, 86u8, 95u8, 237u8, 118u8, 40u8, 212u8,
                            128u8, 227u8, 113u8, 6u8, 116u8, 28u8, 96u8, 223u8,
                            63u8, 249u8, 33u8, 152u8, 61u8, 7u8, 205u8, 220u8,
                            221u8, 174u8, 207u8, 39u8, 53u8, 176u8, 13u8, 74u8,
                        ],
                    )
                }
                #[doc = "Counter for the related counted storage map"]                pub fn counter_for_bonded_pools (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u32 > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "NominationPools",
                        "CounterForBondedPools",
                        vec![],
                        [
                            134u8, 94u8, 199u8, 73u8, 174u8, 253u8, 66u8,
                            242u8, 233u8, 244u8, 140u8, 170u8, 242u8, 40u8,
                            41u8, 185u8, 183u8, 151u8, 58u8, 111u8, 221u8,
                            225u8, 81u8, 71u8, 169u8, 219u8, 223u8, 135u8, 8u8,
                            171u8, 180u8, 236u8,
                        ],
                    )
                }
                #[doc = " Reward pools. This is where there rewards for each pool accumulate. When a members payout"]
                #[doc = " is claimed, the balance comes out fo the reward pool. Keyed by the bonded pools account."]                pub fn reward_pools (& self , _0 : impl :: std :: borrow :: Borrow < :: core :: primitive :: u32 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_nomination_pools :: RewardPool > , :: subxt :: storage :: address :: Yes , () , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("NominationPools" , "RewardPools" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Twox64Concat)] , [139u8 , 123u8 , 46u8 , 107u8 , 9u8 , 83u8 , 141u8 , 12u8 , 188u8 , 225u8 , 170u8 , 215u8 , 154u8 , 21u8 , 100u8 , 95u8 , 237u8 , 245u8 , 46u8 , 216u8 , 199u8 , 184u8 , 187u8 , 155u8 , 8u8 , 16u8 , 34u8 , 177u8 , 153u8 , 65u8 , 109u8 , 198u8 ,])
                }
                #[doc = " Reward pools. This is where there rewards for each pool accumulate. When a members payout"]
                #[doc = " is claimed, the balance comes out fo the reward pool. Keyed by the bonded pools account."]                pub fn reward_pools_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_nomination_pools :: RewardPool > , () , () , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "NominationPools",
                        "RewardPools",
                        Vec::new(),
                        [
                            139u8, 123u8, 46u8, 107u8, 9u8, 83u8, 141u8, 12u8,
                            188u8, 225u8, 170u8, 215u8, 154u8, 21u8, 100u8,
                            95u8, 237u8, 245u8, 46u8, 216u8, 199u8, 184u8,
                            187u8, 155u8, 8u8, 16u8, 34u8, 177u8, 153u8, 65u8,
                            109u8, 198u8,
                        ],
                    )
                }
                #[doc = "Counter for the related counted storage map"]                pub fn counter_for_reward_pools (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u32 > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "NominationPools",
                        "CounterForRewardPools",
                        vec![],
                        [
                            209u8, 139u8, 212u8, 116u8, 210u8, 178u8, 213u8,
                            38u8, 75u8, 23u8, 188u8, 57u8, 253u8, 213u8, 95u8,
                            118u8, 182u8, 250u8, 45u8, 205u8, 17u8, 175u8,
                            17u8, 201u8, 234u8, 14u8, 98u8, 49u8, 143u8, 135u8,
                            201u8, 81u8,
                        ],
                    )
                }
                #[doc = " Groups of unbonding pools. Each group of unbonding pools belongs to a bonded pool,"]
                #[doc = " hence the name sub-pools. Keyed by the bonded pools account."]                pub fn sub_pools_storage (& self , _0 : impl :: std :: borrow :: Borrow < :: core :: primitive :: u32 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_nomination_pools :: SubPools > , :: subxt :: storage :: address :: Yes , () , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("NominationPools" , "SubPoolsStorage" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Twox64Concat)] , [231u8 , 13u8 , 111u8 , 248u8 , 1u8 , 208u8 , 179u8 , 134u8 , 224u8 , 196u8 , 94u8 , 201u8 , 229u8 , 29u8 , 155u8 , 211u8 , 163u8 , 150u8 , 157u8 , 34u8 , 68u8 , 238u8 , 55u8 , 4u8 , 222u8 , 96u8 , 186u8 , 29u8 , 205u8 , 237u8 , 80u8 , 42u8 ,])
                }
                #[doc = " Groups of unbonding pools. Each group of unbonding pools belongs to a bonded pool,"]
                #[doc = " hence the name sub-pools. Keyed by the bonded pools account."]                pub fn sub_pools_storage_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_nomination_pools :: SubPools > , () , () , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "NominationPools",
                        "SubPoolsStorage",
                        Vec::new(),
                        [
                            231u8, 13u8, 111u8, 248u8, 1u8, 208u8, 179u8,
                            134u8, 224u8, 196u8, 94u8, 201u8, 229u8, 29u8,
                            155u8, 211u8, 163u8, 150u8, 157u8, 34u8, 68u8,
                            238u8, 55u8, 4u8, 222u8, 96u8, 186u8, 29u8, 205u8,
                            237u8, 80u8, 42u8,
                        ],
                    )
                }
                #[doc = "Counter for the related counted storage map"]                pub fn counter_for_sub_pools_storage (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u32 > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "NominationPools",
                        "CounterForSubPoolsStorage",
                        vec![],
                        [
                            212u8, 145u8, 212u8, 226u8, 234u8, 31u8, 26u8,
                            240u8, 107u8, 91u8, 171u8, 120u8, 41u8, 195u8,
                            16u8, 86u8, 55u8, 127u8, 103u8, 93u8, 128u8, 48u8,
                            69u8, 104u8, 168u8, 236u8, 81u8, 54u8, 2u8, 184u8,
                            215u8, 51u8,
                        ],
                    )
                }
                #[doc = " Metadata for the pool."]                pub fn metadata (& self , _0 : impl :: std :: borrow :: Borrow < :: core :: primitive :: u32 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: sp_runtime :: bounded :: bounded_vec :: BoundedVec < :: core :: primitive :: u8 > > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("NominationPools" , "Metadata" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Twox64Concat)] , [108u8 , 250u8 , 163u8 , 54u8 , 192u8 , 143u8 , 239u8 , 62u8 , 97u8 , 163u8 , 161u8 , 215u8 , 171u8 , 225u8 , 49u8 , 18u8 , 37u8 , 200u8 , 143u8 , 254u8 , 136u8 , 26u8 , 54u8 , 187u8 , 39u8 , 3u8 , 216u8 , 24u8 , 188u8 , 25u8 , 243u8 , 251u8 ,])
                }
                #[doc = " Metadata for the pool."]                pub fn metadata_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: sp_runtime :: bounded :: bounded_vec :: BoundedVec < :: core :: primitive :: u8 > > , () , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "NominationPools",
                        "Metadata",
                        Vec::new(),
                        [
                            108u8, 250u8, 163u8, 54u8, 192u8, 143u8, 239u8,
                            62u8, 97u8, 163u8, 161u8, 215u8, 171u8, 225u8,
                            49u8, 18u8, 37u8, 200u8, 143u8, 254u8, 136u8, 26u8,
                            54u8, 187u8, 39u8, 3u8, 216u8, 24u8, 188u8, 25u8,
                            243u8, 251u8,
                        ],
                    )
                }
                #[doc = "Counter for the related counted storage map"]                pub fn counter_for_metadata (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u32 > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "NominationPools",
                        "CounterForMetadata",
                        vec![],
                        [
                            190u8, 232u8, 77u8, 134u8, 245u8, 89u8, 160u8,
                            187u8, 163u8, 68u8, 188u8, 204u8, 31u8, 145u8,
                            219u8, 165u8, 213u8, 1u8, 167u8, 90u8, 175u8,
                            218u8, 147u8, 144u8, 158u8, 226u8, 23u8, 233u8,
                            55u8, 168u8, 161u8, 237u8,
                        ],
                    )
                }
                #[doc = " Ever increasing number of all pools created so far."]                pub fn last_pool_id (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u32 > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "NominationPools",
                        "LastPoolId",
                        vec![],
                        [
                            50u8, 254u8, 218u8, 41u8, 213u8, 184u8, 170u8,
                            166u8, 31u8, 29u8, 196u8, 57u8, 215u8, 20u8, 40u8,
                            40u8, 19u8, 22u8, 9u8, 184u8, 11u8, 21u8, 21u8,
                            125u8, 97u8, 38u8, 219u8, 209u8, 2u8, 238u8, 247u8,
                            51u8,
                        ],
                    )
                }
                #[doc = " A reverse lookup from the pool's account id to its id."]
                #[doc = ""]
                #[doc = " This is only used for slashing. In all other instances, the pool id is used, and the"]
                #[doc = " accounts are deterministically derived from it."]                pub fn reverse_pool_id_lookup (& self , _0 : impl :: std :: borrow :: Borrow < :: subxt :: ext :: sp_core :: crypto :: AccountId32 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u32 > , :: subxt :: storage :: address :: Yes , () , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("NominationPools" , "ReversePoolIdLookup" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Twox64Concat)] , [178u8 , 161u8 , 51u8 , 220u8 , 128u8 , 1u8 , 135u8 , 83u8 , 236u8 , 159u8 , 36u8 , 237u8 , 120u8 , 128u8 , 6u8 , 191u8 , 41u8 , 159u8 , 94u8 , 178u8 , 174u8 , 235u8 , 221u8 , 173u8 , 44u8 , 81u8 , 211u8 , 255u8 , 231u8 , 81u8 , 16u8 , 87u8 ,])
                }
                #[doc = " A reverse lookup from the pool's account id to its id."]
                #[doc = ""]
                #[doc = " This is only used for slashing. In all other instances, the pool id is used, and the"]
                #[doc = " accounts are deterministically derived from it."]                pub fn reverse_pool_id_lookup_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u32 > , () , () , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "NominationPools",
                        "ReversePoolIdLookup",
                        Vec::new(),
                        [
                            178u8, 161u8, 51u8, 220u8, 128u8, 1u8, 135u8, 83u8,
                            236u8, 159u8, 36u8, 237u8, 120u8, 128u8, 6u8,
                            191u8, 41u8, 159u8, 94u8, 178u8, 174u8, 235u8,
                            221u8, 173u8, 44u8, 81u8, 211u8, 255u8, 231u8,
                            81u8, 16u8, 87u8,
                        ],
                    )
                }
                #[doc = "Counter for the related counted storage map"]                pub fn counter_for_reverse_pool_id_lookup (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u32 > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "NominationPools",
                        "CounterForReversePoolIdLookup",
                        vec![],
                        [
                            148u8, 83u8, 81u8, 33u8, 188u8, 72u8, 148u8, 208u8,
                            245u8, 178u8, 52u8, 245u8, 229u8, 140u8, 100u8,
                            152u8, 8u8, 217u8, 161u8, 80u8, 226u8, 42u8, 15u8,
                            252u8, 90u8, 197u8, 120u8, 114u8, 144u8, 90u8,
                            199u8, 123u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The nomination pool's pallet id."]
                pub fn pallet_id(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<
                        runtime_types::frame_support::PalletId,
                    >,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "NominationPools",
                        "PalletId",
                        [
                            139u8, 109u8, 228u8, 151u8, 252u8, 32u8, 130u8,
                            69u8, 112u8, 154u8, 174u8, 45u8, 83u8, 245u8, 51u8,
                            132u8, 173u8, 5u8, 186u8, 24u8, 243u8, 9u8, 12u8,
                            214u8, 80u8, 74u8, 69u8, 189u8, 30u8, 94u8, 22u8,
                            39u8,
                        ],
                    )
                }
                #[doc = " The maximum pool points-to-balance ratio that an `open` pool can have."]
                #[doc = ""]
                #[doc = " This is important in the event slashing takes place and the pool's points-to-balance"]
                #[doc = " ratio becomes disproportional."]
                #[doc = ""]
                #[doc = " Moreover, this relates to the `RewardCounter` type as well, as the arithmetic operations"]
                #[doc = " are a function of number of points, and by setting this value to e.g. 10, you ensure"]
                #[doc = " that the total number of points in the system are at most 10 times the total_issuance of"]
                #[doc = " the chain, in the absolute worse case."]
                #[doc = ""]
                #[doc = " For a value of 10, the threshold would be a pool points-to-balance ratio of 10:1."]
                #[doc = " Such a scenario would also be the equivalent of the pool being 90% slashed."]
                pub fn max_points_to_balance(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<::core::primitive::u8>,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "NominationPools",
                        "MaxPointsToBalance",
                        [
                            141u8, 130u8, 11u8, 35u8, 226u8, 114u8, 92u8,
                            179u8, 168u8, 110u8, 28u8, 91u8, 221u8, 64u8, 4u8,
                            148u8, 201u8, 193u8, 185u8, 66u8, 226u8, 114u8,
                            97u8, 79u8, 62u8, 212u8, 202u8, 114u8, 237u8,
                            228u8, 183u8, 165u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod hasher_bn254 {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct ForceSetParameters {
                pub parameters: ::std::vec::Vec<::core::primitive::u8>,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                pub fn force_set_parameters(
                    &self,
                    parameters: ::std::vec::Vec<::core::primitive::u8>,
                ) -> ::subxt::tx::StaticTxPayload<ForceSetParameters>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "HasherBn254",
                        "force_set_parameters",
                        ForceSetParameters { parameters },
                        [
                            222u8, 9u8, 141u8, 146u8, 90u8, 18u8, 166u8, 249u8,
                            58u8, 69u8, 99u8, 70u8, 108u8, 161u8, 21u8, 165u8,
                            171u8, 84u8, 6u8, 254u8, 12u8, 209u8, 214u8, 246u8,
                            84u8, 191u8, 18u8, 248u8, 103u8, 107u8, 33u8,
                            202u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_hasher::pallet::Event;
        pub mod events {
            use super::runtime_types;
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Details of the module's parameters"]                pub fn parameters (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: std :: vec :: Vec < :: core :: primitive :: u8 > > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "HasherBn254",
                        "Parameters",
                        vec![],
                        [
                            244u8, 201u8, 192u8, 254u8, 217u8, 76u8, 12u8,
                            84u8, 71u8, 96u8, 64u8, 115u8, 66u8, 74u8, 252u8,
                            59u8, 193u8, 35u8, 136u8, 67u8, 55u8, 96u8, 185u8,
                            129u8, 130u8, 120u8, 224u8, 100u8, 199u8, 83u8,
                            107u8, 187u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod asset_registry {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Register {
                pub name: ::std::vec::Vec<::core::primitive::u8>,
                pub asset_type:
                    runtime_types::pallet_asset_registry::types::AssetType<
                        ::core::primitive::u32,
                    >,
                pub existential_deposit: ::core::primitive::u128,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Update {
                pub asset_id: ::core::primitive::u32,
                pub name: ::std::vec::Vec<::core::primitive::u8>,
                pub asset_type:
                    runtime_types::pallet_asset_registry::types::AssetType<
                        ::core::primitive::u32,
                    >,
                pub existential_deposit:
                    ::core::option::Option<::core::primitive::u128>,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct SetMetadata {
                pub asset_id: ::core::primitive::u32,
                pub symbol: ::std::vec::Vec<::core::primitive::u8>,
                pub decimals: ::core::primitive::u8,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct SetLocation {
                pub asset_id: ::core::primitive::u32,
                pub location: ::core::primitive::u32,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct AddAssetToPool {
                pub pool: ::std::vec::Vec<::core::primitive::u8>,
                pub asset_id: ::core::primitive::u32,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct DeleteAssetFromPool {
                pub pool: ::std::vec::Vec<::core::primitive::u8>,
                pub asset_id: ::core::primitive::u32,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Register a new asset."]
                #[doc = ""]
                #[doc = "Asset is identified by `name` and the name must not be used to"]
                #[doc = "register another asset."]
                #[doc = ""]
                #[doc = "New asset is given `NextAssetId` - sequential asset id"]
                #[doc = ""]
                #[doc = "Adds mapping between `name` and assigned `asset_id` so asset id can"]
                #[doc = "be retrieved by name too (Note: this approach is used in AMM"]
                #[doc = "implementation (xyk))"]
                #[doc = ""]
                #[doc = "Emits 'Registered` event when successful."]
                pub fn register(
                    &self,
                    name: ::std::vec::Vec<::core::primitive::u8>,
                    asset_type : runtime_types :: pallet_asset_registry :: types :: AssetType < :: core :: primitive :: u32 >,
                    existential_deposit: ::core::primitive::u128,
                ) -> ::subxt::tx::StaticTxPayload<Register> {
                    ::subxt::tx::StaticTxPayload::new(
                        "AssetRegistry",
                        "register",
                        Register {
                            name,
                            asset_type,
                            existential_deposit,
                        },
                        [
                            243u8, 200u8, 80u8, 206u8, 95u8, 75u8, 168u8, 74u8,
                            9u8, 182u8, 68u8, 171u8, 207u8, 108u8, 182u8, 74u8,
                            239u8, 105u8, 229u8, 240u8, 110u8, 126u8, 50u8,
                            35u8, 221u8, 2u8, 103u8, 217u8, 186u8, 30u8, 194u8,
                            138u8,
                        ],
                    )
                }
                #[doc = "Update registered asset."]
                #[doc = ""]
                #[doc = "Updates also mapping between name and asset id if provided name is"]
                #[doc = "different than currently registered."]
                #[doc = ""]
                #[doc = "Emits `Updated` event when successful."]
                pub fn update(
                    &self,
                    asset_id: ::core::primitive::u32,
                    name: ::std::vec::Vec<::core::primitive::u8>,
                    asset_type : runtime_types :: pallet_asset_registry :: types :: AssetType < :: core :: primitive :: u32 >,
                    existential_deposit: ::core::option::Option<
                        ::core::primitive::u128,
                    >,
                ) -> ::subxt::tx::StaticTxPayload<Update> {
                    ::subxt::tx::StaticTxPayload::new(
                        "AssetRegistry",
                        "update",
                        Update {
                            asset_id,
                            name,
                            asset_type,
                            existential_deposit,
                        },
                        [
                            172u8, 5u8, 251u8, 203u8, 60u8, 77u8, 37u8, 126u8,
                            120u8, 252u8, 203u8, 90u8, 204u8, 97u8, 1u8, 253u8,
                            217u8, 29u8, 158u8, 47u8, 72u8, 227u8, 77u8, 37u8,
                            254u8, 240u8, 83u8, 110u8, 100u8, 50u8, 158u8,
                            186u8,
                        ],
                    )
                }
                #[doc = "Set metadata for an asset."]
                #[doc = ""]
                #[doc = "- `asset_id`: Asset identifier."]
                #[doc = "- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`."]
                #[doc = "- `decimals`: The number of decimals this asset uses to represent one unit."]
                #[doc = ""]
                #[doc = "Emits `MetadataSet` event when successful."]
                pub fn set_metadata(
                    &self,
                    asset_id: ::core::primitive::u32,
                    symbol: ::std::vec::Vec<::core::primitive::u8>,
                    decimals: ::core::primitive::u8,
                ) -> ::subxt::tx::StaticTxPayload<SetMetadata> {
                    ::subxt::tx::StaticTxPayload::new(
                        "AssetRegistry",
                        "set_metadata",
                        SetMetadata {
                            asset_id,
                            symbol,
                            decimals,
                        },
                        [
                            197u8, 132u8, 123u8, 170u8, 210u8, 29u8, 26u8,
                            200u8, 128u8, 97u8, 77u8, 177u8, 140u8, 1u8, 6u8,
                            1u8, 223u8, 172u8, 196u8, 113u8, 235u8, 137u8,
                            223u8, 143u8, 222u8, 139u8, 174u8, 235u8, 10u8,
                            123u8, 161u8, 179u8,
                        ],
                    )
                }
                #[doc = "Set asset native location."]
                #[doc = ""]
                #[doc = "Adds mapping between native location and local asset id and vice"]
                #[doc = "versa."]
                #[doc = ""]
                #[doc = "Mainly used in XCM."]
                #[doc = ""]
                #[doc = "Emits `LocationSet` event when successful."]
                pub fn set_location(
                    &self,
                    asset_id: ::core::primitive::u32,
                    location: ::core::primitive::u32,
                ) -> ::subxt::tx::StaticTxPayload<SetLocation> {
                    ::subxt::tx::StaticTxPayload::new(
                        "AssetRegistry",
                        "set_location",
                        SetLocation { asset_id, location },
                        [
                            235u8, 57u8, 17u8, 193u8, 114u8, 60u8, 211u8,
                            237u8, 163u8, 80u8, 178u8, 91u8, 195u8, 168u8,
                            220u8, 77u8, 64u8, 129u8, 242u8, 37u8, 36u8, 166u8,
                            28u8, 157u8, 222u8, 9u8, 197u8, 128u8, 175u8,
                            118u8, 131u8, 237u8,
                        ],
                    )
                }
                #[doc = "Add an asset to an existing pool."]
                pub fn add_asset_to_pool(
                    &self,
                    pool: ::std::vec::Vec<::core::primitive::u8>,
                    asset_id: ::core::primitive::u32,
                ) -> ::subxt::tx::StaticTxPayload<AddAssetToPool>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "AssetRegistry",
                        "add_asset_to_pool",
                        AddAssetToPool { pool, asset_id },
                        [
                            4u8, 167u8, 159u8, 194u8, 139u8, 30u8, 133u8,
                            229u8, 46u8, 144u8, 172u8, 74u8, 199u8, 205u8,
                            156u8, 186u8, 223u8, 190u8, 96u8, 131u8, 214u8,
                            67u8, 186u8, 146u8, 227u8, 170u8, 208u8, 10u8,
                            77u8, 105u8, 124u8, 211u8,
                        ],
                    )
                }
                #[doc = "Remove an asset from an existing pool."]
                pub fn delete_asset_from_pool(
                    &self,
                    pool: ::std::vec::Vec<::core::primitive::u8>,
                    asset_id: ::core::primitive::u32,
                ) -> ::subxt::tx::StaticTxPayload<DeleteAssetFromPool>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "AssetRegistry",
                        "delete_asset_from_pool",
                        DeleteAssetFromPool { pool, asset_id },
                        [
                            135u8, 123u8, 170u8, 45u8, 204u8, 187u8, 126u8,
                            222u8, 238u8, 83u8, 0u8, 183u8, 127u8, 214u8,
                            119u8, 22u8, 193u8, 55u8, 49u8, 224u8, 87u8, 172u8,
                            114u8, 229u8, 76u8, 179u8, 190u8, 15u8, 16u8,
                            214u8, 55u8, 13u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_asset_registry::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "Asset was registered."]
            pub struct Registered {
                pub asset_id: ::core::primitive::u32,
                pub name:
                    runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                pub asset_type:
                    runtime_types::pallet_asset_registry::types::AssetType<
                        ::core::primitive::u32,
                    >,
            }
            impl ::subxt::events::StaticEvent for Registered {
                const PALLET: &'static str = "AssetRegistry";
                const EVENT: &'static str = "Registered";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "Asset was updated."]
            pub struct Updated {
                pub asset_id: ::core::primitive::u32,
                pub name:
                    runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                pub asset_type:
                    runtime_types::pallet_asset_registry::types::AssetType<
                        ::core::primitive::u32,
                    >,
            }
            impl ::subxt::events::StaticEvent for Updated {
                const PALLET: &'static str = "AssetRegistry";
                const EVENT: &'static str = "Updated";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "Metadata set for an asset."]
            pub struct MetadataSet {
                pub asset_id: ::core::primitive::u32,
                pub symbol:
                    runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                pub decimals: ::core::primitive::u8,
            }
            impl ::subxt::events::StaticEvent for MetadataSet {
                const PALLET: &'static str = "AssetRegistry";
                const EVENT: &'static str = "MetadataSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "Native location set for an asset."]
            pub struct LocationSet {
                pub asset_id: ::core::primitive::u32,
                pub location: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for LocationSet {
                const PALLET: &'static str = "AssetRegistry";
                const EVENT: &'static str = "LocationSet";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Details of an asset."]                pub fn assets (& self , _0 : impl :: std :: borrow :: Borrow < :: core :: primitive :: u32 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_asset_registry :: types :: AssetDetails < :: core :: primitive :: u32 , :: core :: primitive :: u128 , runtime_types :: sp_runtime :: bounded :: bounded_vec :: BoundedVec < :: core :: primitive :: u8 > > > , :: subxt :: storage :: address :: Yes , () , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("AssetRegistry" , "Assets" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Twox64Concat)] , [20u8 , 8u8 , 211u8 , 152u8 , 230u8 , 135u8 , 222u8 , 67u8 , 65u8 , 178u8 , 11u8 , 115u8 , 0u8 , 115u8 , 54u8 , 219u8 , 75u8 , 181u8 , 20u8 , 177u8 , 68u8 , 117u8 , 143u8 , 246u8 , 7u8 , 170u8 , 96u8 , 137u8 , 65u8 , 73u8 , 111u8 , 132u8 ,])
                }
                #[doc = " Details of an asset."]                pub fn assets_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_asset_registry :: types :: AssetDetails < :: core :: primitive :: u32 , :: core :: primitive :: u128 , runtime_types :: sp_runtime :: bounded :: bounded_vec :: BoundedVec < :: core :: primitive :: u8 > > > , () , () , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "AssetRegistry",
                        "Assets",
                        Vec::new(),
                        [
                            20u8, 8u8, 211u8, 152u8, 230u8, 135u8, 222u8, 67u8,
                            65u8, 178u8, 11u8, 115u8, 0u8, 115u8, 54u8, 219u8,
                            75u8, 181u8, 20u8, 177u8, 68u8, 117u8, 143u8,
                            246u8, 7u8, 170u8, 96u8, 137u8, 65u8, 73u8, 111u8,
                            132u8,
                        ],
                    )
                }
                #[doc = " Next available asset id. This is sequential id assigned for each new"]
                #[doc = " registered asset."]                pub fn next_asset_id (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u32 > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "AssetRegistry",
                        "NextAssetId",
                        vec![],
                        [
                            130u8, 214u8, 178u8, 195u8, 222u8, 57u8, 89u8,
                            143u8, 138u8, 218u8, 234u8, 251u8, 36u8, 221u8,
                            51u8, 213u8, 130u8, 249u8, 153u8, 24u8, 245u8,
                            51u8, 126u8, 71u8, 51u8, 148u8, 167u8, 143u8, 33u8,
                            15u8, 44u8, 115u8,
                        ],
                    )
                }
                #[doc = " Mapping between asset name and asset id."]                pub fn asset_ids (& self , _0 : impl :: std :: borrow :: Borrow < runtime_types :: sp_runtime :: bounded :: bounded_vec :: BoundedVec < :: core :: primitive :: u8 > > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u32 > , :: subxt :: storage :: address :: Yes , () , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("AssetRegistry" , "AssetIds" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Blake2_128Concat)] , [142u8 , 138u8 , 84u8 , 162u8 , 209u8 , 97u8 , 173u8 , 83u8 , 185u8 , 226u8 , 233u8 , 40u8 , 74u8 , 97u8 , 166u8 , 13u8 , 199u8 , 229u8 , 235u8 , 15u8 , 6u8 , 196u8 , 7u8 , 35u8 , 87u8 , 202u8 , 4u8 , 101u8 , 212u8 , 84u8 , 250u8 , 251u8 ,])
                }
                #[doc = " Mapping between asset name and asset id."]                pub fn asset_ids_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u32 > , () , () , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "AssetRegistry",
                        "AssetIds",
                        Vec::new(),
                        [
                            142u8, 138u8, 84u8, 162u8, 209u8, 97u8, 173u8,
                            83u8, 185u8, 226u8, 233u8, 40u8, 74u8, 97u8, 166u8,
                            13u8, 199u8, 229u8, 235u8, 15u8, 6u8, 196u8, 7u8,
                            35u8, 87u8, 202u8, 4u8, 101u8, 212u8, 84u8, 250u8,
                            251u8,
                        ],
                    )
                }
                #[doc = " Native location of an asset."]                pub fn asset_locations (& self , _0 : impl :: std :: borrow :: Borrow < :: core :: primitive :: u32 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u32 > , :: subxt :: storage :: address :: Yes , () , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("AssetRegistry" , "AssetLocations" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Twox64Concat)] , [146u8 , 222u8 , 59u8 , 210u8 , 64u8 , 240u8 , 139u8 , 32u8 , 171u8 , 75u8 , 247u8 , 43u8 , 179u8 , 108u8 , 20u8 , 64u8 , 24u8 , 154u8 , 133u8 , 154u8 , 208u8 , 98u8 , 241u8 , 62u8 , 158u8 , 126u8 , 19u8 , 188u8 , 237u8 , 70u8 , 178u8 , 197u8 ,])
                }
                #[doc = " Native location of an asset."]                pub fn asset_locations_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u32 > , () , () , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "AssetRegistry",
                        "AssetLocations",
                        Vec::new(),
                        [
                            146u8, 222u8, 59u8, 210u8, 64u8, 240u8, 139u8,
                            32u8, 171u8, 75u8, 247u8, 43u8, 179u8, 108u8, 20u8,
                            64u8, 24u8, 154u8, 133u8, 154u8, 208u8, 98u8,
                            241u8, 62u8, 158u8, 126u8, 19u8, 188u8, 237u8,
                            70u8, 178u8, 197u8,
                        ],
                    )
                }
                #[doc = " Local asset for native location."]                pub fn location_assets (& self , _0 : impl :: std :: borrow :: Borrow < :: core :: primitive :: u32 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u32 > , :: subxt :: storage :: address :: Yes , () , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("AssetRegistry" , "LocationAssets" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Blake2_128Concat)] , [82u8 , 140u8 , 248u8 , 178u8 , 200u8 , 49u8 , 11u8 , 121u8 , 43u8 , 2u8 , 125u8 , 44u8 , 253u8 , 10u8 , 29u8 , 242u8 , 56u8 , 45u8 , 249u8 , 223u8 , 136u8 , 40u8 , 155u8 , 201u8 , 99u8 , 166u8 , 243u8 , 79u8 , 47u8 , 93u8 , 211u8 , 241u8 ,])
                }
                #[doc = " Local asset for native location."]                pub fn location_assets_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u32 > , () , () , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "AssetRegistry",
                        "LocationAssets",
                        Vec::new(),
                        [
                            82u8, 140u8, 248u8, 178u8, 200u8, 49u8, 11u8,
                            121u8, 43u8, 2u8, 125u8, 44u8, 253u8, 10u8, 29u8,
                            242u8, 56u8, 45u8, 249u8, 223u8, 136u8, 40u8,
                            155u8, 201u8, 99u8, 166u8, 243u8, 79u8, 47u8, 93u8,
                            211u8, 241u8,
                        ],
                    )
                }
                #[doc = " Metadata of an asset."]                pub fn asset_metadata_map (& self , _0 : impl :: std :: borrow :: Borrow < :: core :: primitive :: u32 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_asset_registry :: types :: AssetMetadata < runtime_types :: sp_runtime :: bounded :: bounded_vec :: BoundedVec < :: core :: primitive :: u8 > > > , :: subxt :: storage :: address :: Yes , () , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("AssetRegistry" , "AssetMetadataMap" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Twox64Concat)] , [44u8 , 143u8 , 207u8 , 24u8 , 27u8 , 113u8 , 207u8 , 155u8 , 211u8 , 232u8 , 91u8 , 255u8 , 153u8 , 141u8 , 196u8 , 195u8 , 124u8 , 164u8 , 72u8 , 41u8 , 185u8 , 232u8 , 190u8 , 195u8 , 205u8 , 146u8 , 56u8 , 154u8 , 1u8 , 113u8 , 54u8 , 86u8 ,])
                }
                #[doc = " Metadata of an asset."]                pub fn asset_metadata_map_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_asset_registry :: types :: AssetMetadata < runtime_types :: sp_runtime :: bounded :: bounded_vec :: BoundedVec < :: core :: primitive :: u8 > > > , () , () , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "AssetRegistry",
                        "AssetMetadataMap",
                        Vec::new(),
                        [
                            44u8, 143u8, 207u8, 24u8, 27u8, 113u8, 207u8,
                            155u8, 211u8, 232u8, 91u8, 255u8, 153u8, 141u8,
                            196u8, 195u8, 124u8, 164u8, 72u8, 41u8, 185u8,
                            232u8, 190u8, 195u8, 205u8, 146u8, 56u8, 154u8,
                            1u8, 113u8, 54u8, 86u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " Native Asset Id"]
                pub fn native_asset_id(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "AssetRegistry",
                        "NativeAssetId",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8,
                            200u8, 157u8, 125u8, 151u8, 53u8, 76u8, 168u8,
                            26u8, 10u8, 9u8, 98u8, 68u8, 9u8, 178u8, 197u8,
                            113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod currencies {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Transfer {
                pub dest: ::subxt::ext::sp_runtime::MultiAddress<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                pub currency_id: ::core::primitive::u32,
                #[codec(compact)]
                pub amount: ::core::primitive::u128,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct TransferNativeCurrency {
                pub dest: ::subxt::ext::sp_runtime::MultiAddress<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                #[codec(compact)]
                pub amount: ::core::primitive::u128,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct UpdateBalance {
                pub who: ::subxt::ext::sp_runtime::MultiAddress<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                pub currency_id: ::core::primitive::u32,
                pub amount: ::core::primitive::i128,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Transfer some balance to another account under `currency_id`."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be `Signed` by the"]
                #[doc = "transactor."]
                pub fn transfer(
                    &self,
                    dest: ::subxt::ext::sp_runtime::MultiAddress<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    currency_id: ::core::primitive::u32,
                    amount: ::core::primitive::u128,
                ) -> ::subxt::tx::StaticTxPayload<Transfer> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Currencies",
                        "transfer",
                        Transfer {
                            dest,
                            currency_id,
                            amount,
                        },
                        [
                            168u8, 138u8, 194u8, 235u8, 60u8, 53u8, 247u8,
                            34u8, 181u8, 92u8, 83u8, 184u8, 75u8, 29u8, 9u8,
                            21u8, 99u8, 159u8, 142u8, 244u8, 49u8, 45u8, 21u8,
                            206u8, 172u8, 222u8, 92u8, 48u8, 185u8, 234u8,
                            176u8, 62u8,
                        ],
                    )
                }
                #[doc = "Transfer some native currency to another account."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be `Signed` by the"]
                #[doc = "transactor."]
                pub fn transfer_native_currency(
                    &self,
                    dest: ::subxt::ext::sp_runtime::MultiAddress<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    amount: ::core::primitive::u128,
                ) -> ::subxt::tx::StaticTxPayload<TransferNativeCurrency>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Currencies",
                        "transfer_native_currency",
                        TransferNativeCurrency { dest, amount },
                        [
                            212u8, 113u8, 64u8, 214u8, 137u8, 16u8, 101u8,
                            17u8, 123u8, 43u8, 143u8, 69u8, 53u8, 22u8, 227u8,
                            62u8, 117u8, 160u8, 162u8, 73u8, 195u8, 177u8,
                            99u8, 75u8, 48u8, 237u8, 145u8, 164u8, 72u8, 47u8,
                            215u8, 117u8,
                        ],
                    )
                }
                #[doc = "update amount of account `who` under `currency_id`."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be _Root_."]
                pub fn update_balance(
                    &self,
                    who: ::subxt::ext::sp_runtime::MultiAddress<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    currency_id: ::core::primitive::u32,
                    amount: ::core::primitive::i128,
                ) -> ::subxt::tx::StaticTxPayload<UpdateBalance>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Currencies",
                        "update_balance",
                        UpdateBalance {
                            who,
                            currency_id,
                            amount,
                        },
                        [
                            10u8, 79u8, 233u8, 250u8, 126u8, 190u8, 236u8,
                            106u8, 73u8, 243u8, 163u8, 187u8, 206u8, 132u8,
                            241u8, 254u8, 76u8, 0u8, 38u8, 159u8, 147u8, 102u8,
                            126u8, 6u8, 36u8, 129u8, 235u8, 240u8, 233u8,
                            100u8, 81u8, 8u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                pub fn get_native_currency_id(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "Currencies",
                        "GetNativeCurrencyId",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8,
                            200u8, 157u8, 125u8, 151u8, 53u8, 76u8, 168u8,
                            26u8, 10u8, 9u8, 98u8, 68u8, 9u8, 178u8, 197u8,
                            113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod tokens {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Transfer {
                pub dest: ::subxt::ext::sp_runtime::MultiAddress<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                pub currency_id: ::core::primitive::u32,
                #[codec(compact)]
                pub amount: ::core::primitive::u128,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct TransferAll {
                pub dest: ::subxt::ext::sp_runtime::MultiAddress<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                pub currency_id: ::core::primitive::u32,
                pub keep_alive: ::core::primitive::bool,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct TransferKeepAlive {
                pub dest: ::subxt::ext::sp_runtime::MultiAddress<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                pub currency_id: ::core::primitive::u32,
                #[codec(compact)]
                pub amount: ::core::primitive::u128,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct ForceTransfer {
                pub source: ::subxt::ext::sp_runtime::MultiAddress<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                pub dest: ::subxt::ext::sp_runtime::MultiAddress<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                pub currency_id: ::core::primitive::u32,
                #[codec(compact)]
                pub amount: ::core::primitive::u128,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct SetBalance {
                pub who: ::subxt::ext::sp_runtime::MultiAddress<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u32,
                >,
                pub currency_id: ::core::primitive::u32,
                #[codec(compact)]
                pub new_free: ::core::primitive::u128,
                #[codec(compact)]
                pub new_reserved: ::core::primitive::u128,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Transfer some liquid free balance to another account."]
                #[doc = ""]
                #[doc = "`transfer` will set the `FreeBalance` of the sender and receiver."]
                #[doc = "It will decrease the total issuance of the system by the"]
                #[doc = "`TransferFee`. If the sender's account is below the existential"]
                #[doc = "deposit as a result of the transfer, the account will be reaped."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be `Signed` by the"]
                #[doc = "transactor."]
                #[doc = ""]
                #[doc = "- `dest`: The recipient of the transfer."]
                #[doc = "- `currency_id`: currency type."]
                #[doc = "- `amount`: free balance amount to tranfer."]
                pub fn transfer(
                    &self,
                    dest: ::subxt::ext::sp_runtime::MultiAddress<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    currency_id: ::core::primitive::u32,
                    amount: ::core::primitive::u128,
                ) -> ::subxt::tx::StaticTxPayload<Transfer> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Tokens",
                        "transfer",
                        Transfer {
                            dest,
                            currency_id,
                            amount,
                        },
                        [
                            168u8, 138u8, 194u8, 235u8, 60u8, 53u8, 247u8,
                            34u8, 181u8, 92u8, 83u8, 184u8, 75u8, 29u8, 9u8,
                            21u8, 99u8, 159u8, 142u8, 244u8, 49u8, 45u8, 21u8,
                            206u8, 172u8, 222u8, 92u8, 48u8, 185u8, 234u8,
                            176u8, 62u8,
                        ],
                    )
                }
                #[doc = "Transfer all remaining balance to the given account."]
                #[doc = ""]
                #[doc = "NOTE: This function only attempts to transfer _transferable_"]
                #[doc = "balances. This means that any locked, reserved, or existential"]
                #[doc = "deposits (when `keep_alive` is `true`), will not be transferred by"]
                #[doc = "this function. To ensure that this function results in a killed"]
                #[doc = "account, you might need to prepare the account by removing any"]
                #[doc = "reference counters, storage deposits, etc..."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be `Signed` by the"]
                #[doc = "transactor."]
                #[doc = ""]
                #[doc = "- `dest`: The recipient of the transfer."]
                #[doc = "- `currency_id`: currency type."]
                #[doc = "- `keep_alive`: A boolean to determine if the `transfer_all`"]
                #[doc = "  operation should send all of the funds the account has, causing"]
                #[doc = "  the sender account to be killed (false), or transfer everything"]
                #[doc = "  except at least the existential deposit, which will guarantee to"]
                #[doc = "  keep the sender account alive (true)."]
                pub fn transfer_all(
                    &self,
                    dest: ::subxt::ext::sp_runtime::MultiAddress<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    currency_id: ::core::primitive::u32,
                    keep_alive: ::core::primitive::bool,
                ) -> ::subxt::tx::StaticTxPayload<TransferAll> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Tokens",
                        "transfer_all",
                        TransferAll {
                            dest,
                            currency_id,
                            keep_alive,
                        },
                        [
                            83u8, 119u8, 29u8, 13u8, 126u8, 23u8, 51u8, 229u8,
                            26u8, 65u8, 104u8, 86u8, 68u8, 42u8, 83u8, 171u8,
                            177u8, 241u8, 88u8, 235u8, 122u8, 180u8, 216u8,
                            118u8, 52u8, 210u8, 95u8, 234u8, 9u8, 188u8, 122u8,
                            34u8,
                        ],
                    )
                }
                #[doc = "Same as the [`transfer`] call, but with a check that the transfer"]
                #[doc = "will not kill the origin account."]
                #[doc = ""]
                #[doc = "99% of the time you want [`transfer`] instead."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be `Signed` by the"]
                #[doc = "transactor."]
                #[doc = ""]
                #[doc = "- `dest`: The recipient of the transfer."]
                #[doc = "- `currency_id`: currency type."]
                #[doc = "- `amount`: free balance amount to tranfer."]
                pub fn transfer_keep_alive(
                    &self,
                    dest: ::subxt::ext::sp_runtime::MultiAddress<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    currency_id: ::core::primitive::u32,
                    amount: ::core::primitive::u128,
                ) -> ::subxt::tx::StaticTxPayload<TransferKeepAlive>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Tokens",
                        "transfer_keep_alive",
                        TransferKeepAlive {
                            dest,
                            currency_id,
                            amount,
                        },
                        [
                            76u8, 132u8, 171u8, 42u8, 174u8, 55u8, 166u8,
                            171u8, 22u8, 191u8, 234u8, 185u8, 156u8, 22u8,
                            210u8, 10u8, 104u8, 253u8, 183u8, 231u8, 42u8,
                            95u8, 204u8, 28u8, 177u8, 5u8, 147u8, 51u8, 160u8,
                            132u8, 194u8, 74u8,
                        ],
                    )
                }
                #[doc = "Exactly as `transfer`, except the origin must be root and the source"]
                #[doc = "account may be specified."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Root_."]
                #[doc = ""]
                #[doc = "- `source`: The sender of the transfer."]
                #[doc = "- `dest`: The recipient of the transfer."]
                #[doc = "- `currency_id`: currency type."]
                #[doc = "- `amount`: free balance amount to tranfer."]
                pub fn force_transfer(
                    &self,
                    source: ::subxt::ext::sp_runtime::MultiAddress<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    dest: ::subxt::ext::sp_runtime::MultiAddress<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    currency_id: ::core::primitive::u32,
                    amount: ::core::primitive::u128,
                ) -> ::subxt::tx::StaticTxPayload<ForceTransfer>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "Tokens",
                        "force_transfer",
                        ForceTransfer {
                            source,
                            dest,
                            currency_id,
                            amount,
                        },
                        [
                            196u8, 35u8, 25u8, 247u8, 46u8, 2u8, 11u8, 188u8,
                            120u8, 147u8, 123u8, 147u8, 174u8, 111u8, 237u8,
                            23u8, 25u8, 50u8, 34u8, 69u8, 189u8, 211u8, 235u8,
                            61u8, 183u8, 42u8, 110u8, 62u8, 44u8, 20u8, 43u8,
                            214u8,
                        ],
                    )
                }
                #[doc = "Set the balances of a given account."]
                #[doc = ""]
                #[doc = "This will alter `FreeBalance` and `ReservedBalance` in storage. it"]
                #[doc = "will also decrease the total issuance of the system"]
                #[doc = "(`TotalIssuance`). If the new free or reserved balance is below the"]
                #[doc = "existential deposit, it will reap the `AccountInfo`."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call is `root`."]
                pub fn set_balance(
                    &self,
                    who: ::subxt::ext::sp_runtime::MultiAddress<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::u32,
                    >,
                    currency_id: ::core::primitive::u32,
                    new_free: ::core::primitive::u128,
                    new_reserved: ::core::primitive::u128,
                ) -> ::subxt::tx::StaticTxPayload<SetBalance> {
                    ::subxt::tx::StaticTxPayload::new(
                        "Tokens",
                        "set_balance",
                        SetBalance {
                            who,
                            currency_id,
                            new_free,
                            new_reserved,
                        },
                        [
                            155u8, 189u8, 114u8, 37u8, 193u8, 38u8, 48u8, 39u8,
                            149u8, 224u8, 232u8, 189u8, 205u8, 248u8, 215u8,
                            97u8, 50u8, 171u8, 118u8, 214u8, 47u8, 13u8, 104u8,
                            3u8, 77u8, 34u8, 37u8, 135u8, 56u8, 94u8, 17u8,
                            213u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::orml_tokens::module::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "An account was created with some free balance."]
            pub struct Endowed {
                pub currency_id: ::core::primitive::u32,
                pub who: ::subxt::ext::sp_core::crypto::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Endowed {
                const PALLET: &'static str = "Tokens";
                const EVENT: &'static str = "Endowed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "An account was removed whose balance was non-zero but below"]
            #[doc = "ExistentialDeposit, resulting in an outright loss."]
            pub struct DustLost {
                pub currency_id: ::core::primitive::u32,
                pub who: ::subxt::ext::sp_core::crypto::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for DustLost {
                const PALLET: &'static str = "Tokens";
                const EVENT: &'static str = "DustLost";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "Transfer succeeded."]
            pub struct Transfer {
                pub currency_id: ::core::primitive::u32,
                pub from: ::subxt::ext::sp_core::crypto::AccountId32,
                pub to: ::subxt::ext::sp_core::crypto::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Transfer {
                const PALLET: &'static str = "Tokens";
                const EVENT: &'static str = "Transfer";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "Some balance was reserved (moved from free to reserved)."]
            pub struct Reserved {
                pub currency_id: ::core::primitive::u32,
                pub who: ::subxt::ext::sp_core::crypto::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Reserved {
                const PALLET: &'static str = "Tokens";
                const EVENT: &'static str = "Reserved";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "Some balance was unreserved (moved from reserved to free)."]
            pub struct Unreserved {
                pub currency_id: ::core::primitive::u32,
                pub who: ::subxt::ext::sp_core::crypto::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Unreserved {
                const PALLET: &'static str = "Tokens";
                const EVENT: &'static str = "Unreserved";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "Some reserved balance was repatriated (moved from reserved to"]
            #[doc = "another account)."]
            pub struct ReserveRepatriated { pub currency_id : :: core :: primitive :: u32 , pub from : :: subxt :: ext :: sp_core :: crypto :: AccountId32 , pub to : :: subxt :: ext :: sp_core :: crypto :: AccountId32 , pub amount : :: core :: primitive :: u128 , pub status : runtime_types :: frame_support :: traits :: tokens :: misc :: BalanceStatus , }
            impl ::subxt::events::StaticEvent for ReserveRepatriated {
                const PALLET: &'static str = "Tokens";
                const EVENT: &'static str = "ReserveRepatriated";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "A balance was set by root."]
            pub struct BalanceSet {
                pub currency_id: ::core::primitive::u32,
                pub who: ::subxt::ext::sp_core::crypto::AccountId32,
                pub free: ::core::primitive::u128,
                pub reserved: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for BalanceSet {
                const PALLET: &'static str = "Tokens";
                const EVENT: &'static str = "BalanceSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "The total issuance of an currency has been set"]
            pub struct TotalIssuanceSet {
                pub currency_id: ::core::primitive::u32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for TotalIssuanceSet {
                const PALLET: &'static str = "Tokens";
                const EVENT: &'static str = "TotalIssuanceSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "Some balances were withdrawn (e.g. pay for transaction fee)"]
            pub struct Withdrawn {
                pub currency_id: ::core::primitive::u32,
                pub who: ::subxt::ext::sp_core::crypto::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Withdrawn {
                const PALLET: &'static str = "Tokens";
                const EVENT: &'static str = "Withdrawn";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "Some balances were slashed (e.g. due to mis-behavior)"]
            pub struct Slashed {
                pub currency_id: ::core::primitive::u32,
                pub who: ::subxt::ext::sp_core::crypto::AccountId32,
                pub free_amount: ::core::primitive::u128,
                pub reserved_amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Slashed {
                const PALLET: &'static str = "Tokens";
                const EVENT: &'static str = "Slashed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "Deposited some balance into an account"]
            pub struct Deposited {
                pub currency_id: ::core::primitive::u32,
                pub who: ::subxt::ext::sp_core::crypto::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Deposited {
                const PALLET: &'static str = "Tokens";
                const EVENT: &'static str = "Deposited";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "Some funds are locked"]
            pub struct LockSet {
                pub lock_id: [::core::primitive::u8; 8usize],
                pub currency_id: ::core::primitive::u32,
                pub who: ::subxt::ext::sp_core::crypto::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for LockSet {
                const PALLET: &'static str = "Tokens";
                const EVENT: &'static str = "LockSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "Some locked funds were unlocked"]
            pub struct LockRemoved {
                pub lock_id: [::core::primitive::u8; 8usize],
                pub currency_id: ::core::primitive::u32,
                pub who: ::subxt::ext::sp_core::crypto::AccountId32,
            }
            impl ::subxt::events::StaticEvent for LockRemoved {
                const PALLET: &'static str = "Tokens";
                const EVENT: &'static str = "LockRemoved";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The total issuance of a token type."]                pub fn total_issuance (& self , _0 : impl :: std :: borrow :: Borrow < :: core :: primitive :: u32 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u128 > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("Tokens" , "TotalIssuance" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Twox64Concat)] , [98u8 , 233u8 , 210u8 , 150u8 , 87u8 , 41u8 , 162u8 , 54u8 , 32u8 , 221u8 , 211u8 , 10u8 , 170u8 , 237u8 , 65u8 , 73u8 , 46u8 , 4u8 , 5u8 , 209u8 , 170u8 , 13u8 , 231u8 , 113u8 , 196u8 , 133u8 , 38u8 , 213u8 , 225u8 , 160u8 , 31u8 , 122u8 ,])
                }
                #[doc = " The total issuance of a token type."]                pub fn total_issuance_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u128 > , () , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Tokens",
                        "TotalIssuance",
                        Vec::new(),
                        [
                            98u8, 233u8, 210u8, 150u8, 87u8, 41u8, 162u8, 54u8,
                            32u8, 221u8, 211u8, 10u8, 170u8, 237u8, 65u8, 73u8,
                            46u8, 4u8, 5u8, 209u8, 170u8, 13u8, 231u8, 113u8,
                            196u8, 133u8, 38u8, 213u8, 225u8, 160u8, 31u8,
                            122u8,
                        ],
                    )
                }
                #[doc = " Any liquidity locks of a token type under an account."]
                #[doc = " NOTE: Should only be accessed when setting, changing and freeing a lock."]                pub fn locks (& self , _0 : impl :: std :: borrow :: Borrow < :: subxt :: ext :: sp_core :: crypto :: AccountId32 > , _1 : impl :: std :: borrow :: Borrow < :: core :: primitive :: u32 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: sp_runtime :: bounded :: bounded_vec :: BoundedVec < runtime_types :: orml_tokens :: BalanceLock < :: core :: primitive :: u128 > > > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("Tokens" , "Locks" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Blake2_128Concat) , :: subxt :: storage :: address :: StorageMapKey :: new (_1 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Twox64Concat)] , [69u8 , 159u8 , 129u8 , 252u8 , 160u8 , 61u8 , 216u8 , 240u8 , 79u8 , 172u8 , 194u8 , 168u8 , 1u8 , 214u8 , 69u8 , 208u8 , 56u8 , 220u8 , 176u8 , 5u8 , 196u8 , 19u8 , 70u8 , 60u8 , 229u8 , 79u8 , 223u8 , 11u8 , 253u8 , 150u8 , 5u8 , 99u8 ,])
                }
                #[doc = " Any liquidity locks of a token type under an account."]
                #[doc = " NOTE: Should only be accessed when setting, changing and freeing a lock."]                pub fn locks_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: sp_runtime :: bounded :: bounded_vec :: BoundedVec < runtime_types :: orml_tokens :: BalanceLock < :: core :: primitive :: u128 > > > , () , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Tokens",
                        "Locks",
                        Vec::new(),
                        [
                            69u8, 159u8, 129u8, 252u8, 160u8, 61u8, 216u8,
                            240u8, 79u8, 172u8, 194u8, 168u8, 1u8, 214u8, 69u8,
                            208u8, 56u8, 220u8, 176u8, 5u8, 196u8, 19u8, 70u8,
                            60u8, 229u8, 79u8, 223u8, 11u8, 253u8, 150u8, 5u8,
                            99u8,
                        ],
                    )
                }
                #[doc = " The balance of a token type under an account."]
                #[doc = ""]
                #[doc = " NOTE: If the total is ever zero, decrease account ref account."]
                #[doc = ""]
                #[doc = " NOTE: This is only used in the case that this module is used to store"]
                #[doc = " balances."]                pub fn accounts (& self , _0 : impl :: std :: borrow :: Borrow < :: subxt :: ext :: sp_core :: crypto :: AccountId32 > , _1 : impl :: std :: borrow :: Borrow < :: core :: primitive :: u32 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: orml_tokens :: AccountData < :: core :: primitive :: u128 > > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("Tokens" , "Accounts" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Blake2_128Concat) , :: subxt :: storage :: address :: StorageMapKey :: new (_1 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Twox64Concat)] , [136u8 , 147u8 , 98u8 , 221u8 , 153u8 , 10u8 , 206u8 , 218u8 , 153u8 , 159u8 , 62u8 , 152u8 , 110u8 , 198u8 , 125u8 , 15u8 , 127u8 , 21u8 , 31u8 , 191u8 , 241u8 , 167u8 , 124u8 , 77u8 , 138u8 , 133u8 , 204u8 , 30u8 , 180u8 , 253u8 , 126u8 , 214u8 ,])
                }
                #[doc = " The balance of a token type under an account."]
                #[doc = ""]
                #[doc = " NOTE: If the total is ever zero, decrease account ref account."]
                #[doc = ""]
                #[doc = " NOTE: This is only used in the case that this module is used to store"]
                #[doc = " balances."]                pub fn accounts_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: orml_tokens :: AccountData < :: core :: primitive :: u128 > > , () , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Tokens",
                        "Accounts",
                        Vec::new(),
                        [
                            136u8, 147u8, 98u8, 221u8, 153u8, 10u8, 206u8,
                            218u8, 153u8, 159u8, 62u8, 152u8, 110u8, 198u8,
                            125u8, 15u8, 127u8, 21u8, 31u8, 191u8, 241u8,
                            167u8, 124u8, 77u8, 138u8, 133u8, 204u8, 30u8,
                            180u8, 253u8, 126u8, 214u8,
                        ],
                    )
                }
                #[doc = " Named reserves on some account balances."]                pub fn reserves (& self , _0 : impl :: std :: borrow :: Borrow < :: subxt :: ext :: sp_core :: crypto :: AccountId32 > , _1 : impl :: std :: borrow :: Borrow < :: core :: primitive :: u32 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: sp_runtime :: bounded :: bounded_vec :: BoundedVec < runtime_types :: orml_tokens :: ReserveData < [:: core :: primitive :: u8 ; 8usize] , :: core :: primitive :: u128 > > > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("Tokens" , "Reserves" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Blake2_128Concat) , :: subxt :: storage :: address :: StorageMapKey :: new (_1 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Twox64Concat)] , [103u8 , 137u8 , 30u8 , 231u8 , 144u8 , 86u8 , 36u8 , 246u8 , 38u8 , 138u8 , 76u8 , 9u8 , 82u8 , 232u8 , 100u8 , 7u8 , 48u8 , 111u8 , 249u8 , 59u8 , 57u8 , 60u8 , 5u8 , 70u8 , 144u8 , 190u8 , 122u8 , 205u8 , 36u8 , 237u8 , 57u8 , 254u8 ,])
                }
                #[doc = " Named reserves on some account balances."]                pub fn reserves_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: sp_runtime :: bounded :: bounded_vec :: BoundedVec < runtime_types :: orml_tokens :: ReserveData < [:: core :: primitive :: u8 ; 8usize] , :: core :: primitive :: u128 > > > , () , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "Tokens",
                        "Reserves",
                        Vec::new(),
                        [
                            103u8, 137u8, 30u8, 231u8, 144u8, 86u8, 36u8,
                            246u8, 38u8, 138u8, 76u8, 9u8, 82u8, 232u8, 100u8,
                            7u8, 48u8, 111u8, 249u8, 59u8, 57u8, 60u8, 5u8,
                            70u8, 144u8, 190u8, 122u8, 205u8, 36u8, 237u8,
                            57u8, 254u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                pub fn max_locks(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "Tokens",
                        "MaxLocks",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8,
                            200u8, 157u8, 125u8, 151u8, 53u8, 76u8, 168u8,
                            26u8, 10u8, 9u8, 98u8, 68u8, 9u8, 178u8, 197u8,
                            113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The maximum number of named reserves that can exist on an account."]
                pub fn max_reserves(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "Tokens",
                        "MaxReserves",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8,
                            200u8, 157u8, 125u8, 151u8, 53u8, 76u8, 168u8,
                            26u8, 10u8, 9u8, 98u8, 68u8, 9u8, 178u8, 197u8,
                            113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod token_wrapper {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct SetWrappingFee {
                pub fee: ::core::primitive::u128,
                pub into_pool_share_id: ::core::primitive::u32,
                pub nonce: ::core::primitive::u32,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Wrap {
                pub from_asset_id: ::core::primitive::u32,
                pub into_pool_share_id: ::core::primitive::u32,
                pub amount: ::core::primitive::u128,
                pub recipient: ::subxt::ext::sp_core::crypto::AccountId32,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Unwrap {
                pub from_pool_share_id: ::core::primitive::u32,
                pub into_asset_id: ::core::primitive::u32,
                pub amount: ::core::primitive::u128,
                pub recipient: ::subxt::ext::sp_core::crypto::AccountId32,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                pub fn set_wrapping_fee(
                    &self,
                    fee: ::core::primitive::u128,
                    into_pool_share_id: ::core::primitive::u32,
                    nonce: ::core::primitive::u32,
                ) -> ::subxt::tx::StaticTxPayload<SetWrappingFee>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "TokenWrapper",
                        "set_wrapping_fee",
                        SetWrappingFee {
                            fee,
                            into_pool_share_id,
                            nonce,
                        },
                        [
                            60u8, 135u8, 246u8, 184u8, 70u8, 22u8, 245u8, 60u8,
                            190u8, 224u8, 114u8, 168u8, 238u8, 146u8, 49u8,
                            213u8, 85u8, 107u8, 221u8, 241u8, 218u8, 121u8,
                            170u8, 227u8, 254u8, 146u8, 84u8, 21u8, 249u8,
                            65u8, 1u8, 73u8,
                        ],
                    )
                }
                pub fn wrap(
                    &self,
                    from_asset_id: ::core::primitive::u32,
                    into_pool_share_id: ::core::primitive::u32,
                    amount: ::core::primitive::u128,
                    recipient: ::subxt::ext::sp_core::crypto::AccountId32,
                ) -> ::subxt::tx::StaticTxPayload<Wrap> {
                    ::subxt::tx::StaticTxPayload::new(
                        "TokenWrapper",
                        "wrap",
                        Wrap {
                            from_asset_id,
                            into_pool_share_id,
                            amount,
                            recipient,
                        },
                        [
                            151u8, 42u8, 129u8, 19u8, 51u8, 10u8, 96u8, 207u8,
                            223u8, 91u8, 43u8, 25u8, 221u8, 146u8, 64u8, 244u8,
                            239u8, 74u8, 177u8, 62u8, 28u8, 41u8, 125u8, 63u8,
                            191u8, 218u8, 188u8, 23u8, 196u8, 98u8, 201u8,
                            82u8,
                        ],
                    )
                }
                pub fn unwrap(
                    &self,
                    from_pool_share_id: ::core::primitive::u32,
                    into_asset_id: ::core::primitive::u32,
                    amount: ::core::primitive::u128,
                    recipient: ::subxt::ext::sp_core::crypto::AccountId32,
                ) -> ::subxt::tx::StaticTxPayload<Unwrap> {
                    ::subxt::tx::StaticTxPayload::new(
                        "TokenWrapper",
                        "unwrap",
                        Unwrap {
                            from_pool_share_id,
                            into_asset_id,
                            amount,
                            recipient,
                        },
                        [
                            3u8, 113u8, 42u8, 230u8, 32u8, 79u8, 31u8, 174u8,
                            5u8, 72u8, 213u8, 19u8, 44u8, 117u8, 75u8, 170u8,
                            14u8, 1u8, 18u8, 30u8, 32u8, 142u8, 2u8, 3u8,
                            218u8, 244u8, 201u8, 16u8, 192u8, 142u8, 194u8,
                            6u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_token_wrapper::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct WrappedToken {
                pub pool_share_asset: ::core::primitive::u32,
                pub asset_id: ::core::primitive::u32,
                pub amount: ::core::primitive::u128,
                pub recipient: ::subxt::ext::sp_core::crypto::AccountId32,
            }
            impl ::subxt::events::StaticEvent for WrappedToken {
                const PALLET: &'static str = "TokenWrapper";
                const EVENT: &'static str = "WrappedToken";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct UnwrappedToken {
                pub pool_share_asset: ::core::primitive::u32,
                pub asset_id: ::core::primitive::u32,
                pub amount: ::core::primitive::u128,
                pub recipient: ::subxt::ext::sp_core::crypto::AccountId32,
            }
            impl ::subxt::events::StaticEvent for UnwrappedToken {
                const PALLET: &'static str = "TokenWrapper";
                const EVENT: &'static str = "UnwrappedToken";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct UpdatedWrappingFeePercent {
                pub into_pool_share_id: ::core::primitive::u32,
                pub wrapping_fee_percent: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for UpdatedWrappingFeePercent {
                const PALLET: &'static str = "TokenWrapper";
                const EVENT: &'static str = "UpdatedWrappingFeePercent";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Percentage of amount to be used as wrapping fee"]                pub fn wrapping_fee_percent (& self , _0 : impl :: std :: borrow :: Borrow < :: core :: primitive :: u32 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u128 > , :: subxt :: storage :: address :: Yes , () , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("TokenWrapper" , "WrappingFeePercent" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Blake2_128Concat)] , [31u8 , 126u8 , 185u8 , 195u8 , 250u8 , 224u8 , 247u8 , 225u8 , 251u8 , 232u8 , 118u8 , 36u8 , 104u8 , 42u8 , 118u8 , 184u8 , 232u8 , 148u8 , 238u8 , 142u8 , 123u8 , 71u8 , 37u8 , 218u8 , 200u8 , 216u8 , 84u8 , 184u8 , 4u8 , 56u8 , 13u8 , 94u8 ,])
                }
                #[doc = " Percentage of amount to be used as wrapping fee"]                pub fn wrapping_fee_percent_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u128 > , () , () , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "TokenWrapper",
                        "WrappingFeePercent",
                        Vec::new(),
                        [
                            31u8, 126u8, 185u8, 195u8, 250u8, 224u8, 247u8,
                            225u8, 251u8, 232u8, 118u8, 36u8, 104u8, 42u8,
                            118u8, 184u8, 232u8, 148u8, 238u8, 142u8, 123u8,
                            71u8, 37u8, 218u8, 200u8, 216u8, 84u8, 184u8, 4u8,
                            56u8, 13u8, 94u8,
                        ],
                    )
                }
                #[doc = " The proposal nonce used to prevent replay attacks on execute_proposal"]                pub fn proposal_nonce (& self , _0 : impl :: std :: borrow :: Borrow < [:: core :: primitive :: u8] > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u32 > , :: subxt :: storage :: address :: Yes , () , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("TokenWrapper" , "ProposalNonce" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Blake2_128Concat)] , [120u8 , 245u8 , 212u8 , 126u8 , 147u8 , 115u8 , 41u8 , 125u8 , 210u8 , 155u8 , 157u8 , 0u8 , 223u8 , 150u8 , 105u8 , 195u8 , 207u8 , 227u8 , 216u8 , 93u8 , 45u8 , 137u8 , 90u8 , 174u8 , 115u8 , 208u8 , 108u8 , 66u8 , 143u8 , 158u8 , 78u8 , 159u8 ,])
                }
                #[doc = " The proposal nonce used to prevent replay attacks on execute_proposal"]                pub fn proposal_nonce_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u32 > , () , () , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "TokenWrapper",
                        "ProposalNonce",
                        Vec::new(),
                        [
                            120u8, 245u8, 212u8, 126u8, 147u8, 115u8, 41u8,
                            125u8, 210u8, 155u8, 157u8, 0u8, 223u8, 150u8,
                            105u8, 195u8, 207u8, 227u8, 216u8, 93u8, 45u8,
                            137u8, 90u8, 174u8, 115u8, 208u8, 108u8, 66u8,
                            143u8, 158u8, 78u8, 159u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                pub fn pallet_id(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<
                        runtime_types::frame_support::PalletId,
                    >,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "TokenWrapper",
                        "PalletId",
                        [
                            139u8, 109u8, 228u8, 151u8, 252u8, 32u8, 130u8,
                            69u8, 112u8, 154u8, 174u8, 45u8, 83u8, 245u8, 51u8,
                            132u8, 173u8, 5u8, 186u8, 24u8, 243u8, 9u8, 12u8,
                            214u8, 80u8, 74u8, 69u8, 189u8, 30u8, 94u8, 22u8,
                            39u8,
                        ],
                    )
                }
                pub fn treasury_id(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<
                        runtime_types::frame_support::PalletId,
                    >,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "TokenWrapper",
                        "TreasuryId",
                        [
                            139u8, 109u8, 228u8, 151u8, 252u8, 32u8, 130u8,
                            69u8, 112u8, 154u8, 174u8, 45u8, 83u8, 245u8, 51u8,
                            132u8, 173u8, 5u8, 186u8, 24u8, 243u8, 9u8, 12u8,
                            214u8, 80u8, 74u8, 69u8, 189u8, 30u8, 94u8, 22u8,
                            39u8,
                        ],
                    )
                }
                pub fn wrapping_fee_divider(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<
                        ::core::primitive::u128,
                    >,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "TokenWrapper",
                        "WrappingFeeDivider",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8,
                            105u8, 200u8, 214u8, 27u8, 144u8, 208u8, 218u8,
                            160u8, 130u8, 109u8, 101u8, 54u8, 210u8, 136u8,
                            71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8,
                            148u8, 156u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod token_wrapper_handler {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct ExecuteWrappingFeeProposal {
                pub wrapping_fee_percent: ::core::primitive::u128,
                pub into_pool_share_id: ::core::primitive::u32,
                pub nonce: ::core::primitive::u32,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct ExecuteAddTokenToPoolShare {
                pub name: ::std::vec::Vec<::core::primitive::u8>,
                pub asset_id: ::core::primitive::u32,
                pub nonce: ::core::primitive::u32,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct ExecuteRemoveTokenFromPoolShare {
                pub name: ::std::vec::Vec<::core::primitive::u8>,
                pub asset_id: ::core::primitive::u32,
                pub nonce: ::core::primitive::u32,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Execute the wrapping fee proposal by calling the update_wrapping_fee"]
                #[doc = "method. Ensures that only the bridge can call this function."]
                pub fn execute_wrapping_fee_proposal(
                    &self,
                    wrapping_fee_percent: ::core::primitive::u128,
                    into_pool_share_id: ::core::primitive::u32,
                    nonce: ::core::primitive::u32,
                ) -> ::subxt::tx::StaticTxPayload<ExecuteWrappingFeeProposal>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "TokenWrapperHandler",
                        "execute_wrapping_fee_proposal",
                        ExecuteWrappingFeeProposal {
                            wrapping_fee_percent,
                            into_pool_share_id,
                            nonce,
                        },
                        [
                            151u8, 198u8, 139u8, 120u8, 128u8, 232u8, 69u8,
                            120u8, 115u8, 47u8, 107u8, 79u8, 227u8, 240u8,
                            115u8, 75u8, 93u8, 122u8, 216u8, 5u8, 163u8, 45u8,
                            124u8, 42u8, 108u8, 171u8, 164u8, 75u8, 81u8,
                            105u8, 156u8, 63u8,
                        ],
                    )
                }
                pub fn execute_add_token_to_pool_share(
                    &self,
                    name: ::std::vec::Vec<::core::primitive::u8>,
                    asset_id: ::core::primitive::u32,
                    nonce: ::core::primitive::u32,
                ) -> ::subxt::tx::StaticTxPayload<ExecuteAddTokenToPoolShare>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "TokenWrapperHandler",
                        "execute_add_token_to_pool_share",
                        ExecuteAddTokenToPoolShare {
                            name,
                            asset_id,
                            nonce,
                        },
                        [
                            100u8, 68u8, 240u8, 86u8, 44u8, 153u8, 29u8, 25u8,
                            97u8, 95u8, 237u8, 202u8, 172u8, 150u8, 40u8,
                            206u8, 67u8, 115u8, 11u8, 48u8, 2u8, 97u8, 41u8,
                            2u8, 22u8, 172u8, 6u8, 11u8, 251u8, 248u8, 193u8,
                            11u8,
                        ],
                    )
                }
                pub fn execute_remove_token_from_pool_share(
                    &self,
                    name: ::std::vec::Vec<::core::primitive::u8>,
                    asset_id: ::core::primitive::u32,
                    nonce: ::core::primitive::u32,
                ) -> ::subxt::tx::StaticTxPayload<ExecuteRemoveTokenFromPoolShare>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "TokenWrapperHandler",
                        "execute_remove_token_from_pool_share",
                        ExecuteRemoveTokenFromPoolShare {
                            name,
                            asset_id,
                            nonce,
                        },
                        [
                            174u8, 253u8, 31u8, 62u8, 240u8, 34u8, 230u8,
                            165u8, 169u8, 90u8, 189u8, 44u8, 12u8, 169u8,
                            136u8, 98u8, 192u8, 79u8, 223u8, 153u8, 239u8,
                            84u8, 71u8, 108u8, 178u8, 143u8, 61u8, 148u8, 6u8,
                            204u8, 105u8, 144u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event =
            runtime_types::pallet_token_wrapper_handler::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct UpdatedWrappingFeePercent {
                pub wrapping_fee_percent: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for UpdatedWrappingFeePercent {
                const PALLET: &'static str = "TokenWrapperHandler";
                const EVENT: &'static str = "UpdatedWrappingFeePercent";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {}
        }
    }
    pub mod mixer_verifier_bn254 {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct ForceSetParameters {
                pub parameters: ::std::vec::Vec<::core::primitive::u8>,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                pub fn force_set_parameters(
                    &self,
                    parameters: ::std::vec::Vec<::core::primitive::u8>,
                ) -> ::subxt::tx::StaticTxPayload<ForceSetParameters>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "MixerVerifierBn254",
                        "force_set_parameters",
                        ForceSetParameters { parameters },
                        [
                            222u8, 9u8, 141u8, 146u8, 90u8, 18u8, 166u8, 249u8,
                            58u8, 69u8, 99u8, 70u8, 108u8, 161u8, 21u8, 165u8,
                            171u8, 84u8, 6u8, 254u8, 12u8, 209u8, 214u8, 246u8,
                            84u8, 191u8, 18u8, 248u8, 103u8, 107u8, 33u8,
                            202u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_verifier::pallet::Event;
        pub mod events {
            use super::runtime_types;
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Details of the module's parameters"]                pub fn parameters (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: std :: vec :: Vec < :: core :: primitive :: u8 > > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "MixerVerifierBn254",
                        "Parameters",
                        vec![],
                        [
                            244u8, 201u8, 192u8, 254u8, 217u8, 76u8, 12u8,
                            84u8, 71u8, 96u8, 64u8, 115u8, 66u8, 74u8, 252u8,
                            59u8, 193u8, 35u8, 136u8, 67u8, 55u8, 96u8, 185u8,
                            129u8, 130u8, 120u8, 224u8, 100u8, 199u8, 83u8,
                            107u8, 187u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod v_anchor_verifier {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct ForceSetParameters {
                pub configuration:
                    (::core::primitive::u8, ::core::primitive::u8),
                pub parameters: ::std::vec::Vec<::core::primitive::u8>,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                pub fn force_set_parameters(
                    &self,
                    configuration: (
                        ::core::primitive::u8,
                        ::core::primitive::u8,
                    ),
                    parameters: ::std::vec::Vec<::core::primitive::u8>,
                ) -> ::subxt::tx::StaticTxPayload<ForceSetParameters>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "VAnchorVerifier",
                        "force_set_parameters",
                        ForceSetParameters {
                            configuration,
                            parameters,
                        },
                        [
                            69u8, 227u8, 127u8, 13u8, 157u8, 151u8, 37u8,
                            168u8, 205u8, 33u8, 196u8, 25u8, 114u8, 51u8,
                            175u8, 216u8, 88u8, 89u8, 236u8, 65u8, 248u8, 93u8,
                            44u8, 159u8, 126u8, 1u8, 117u8, 219u8, 39u8, 41u8,
                            196u8, 200u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_vanchor_verifier::pallet::Event;
        pub mod events {
            use super::runtime_types;
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Details of the module's parameters for different vanchor configurations"]                pub fn parameters (& self , _0 : impl :: std :: borrow :: Borrow < :: core :: primitive :: u8 > , _1 : impl :: std :: borrow :: Borrow < :: core :: primitive :: u8 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: std :: vec :: Vec < :: core :: primitive :: u8 > > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("VAnchorVerifier" , "Parameters" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (& (_0 . borrow () , _1 . borrow ()) , :: subxt :: storage :: address :: StorageHasher :: Blake2_128Concat)] , [63u8 , 217u8 , 139u8 , 226u8 , 58u8 , 237u8 , 223u8 , 238u8 , 4u8 , 115u8 , 168u8 , 212u8 , 221u8 , 111u8 , 154u8 , 18u8 , 194u8 , 118u8 , 184u8 , 6u8 , 240u8 , 89u8 , 89u8 , 193u8 , 242u8 , 45u8 , 254u8 , 64u8 , 40u8 , 215u8 , 240u8 , 33u8 ,])
                }
                #[doc = " Details of the module's parameters for different vanchor configurations"]                pub fn parameters_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: std :: vec :: Vec < :: core :: primitive :: u8 > > , () , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "VAnchorVerifier",
                        "Parameters",
                        Vec::new(),
                        [
                            63u8, 217u8, 139u8, 226u8, 58u8, 237u8, 223u8,
                            238u8, 4u8, 115u8, 168u8, 212u8, 221u8, 111u8,
                            154u8, 18u8, 194u8, 118u8, 184u8, 6u8, 240u8, 89u8,
                            89u8, 193u8, 242u8, 45u8, 254u8, 64u8, 40u8, 215u8,
                            240u8, 33u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod merkle_tree_bn254 {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Create {
                pub depth: ::core::primitive::u8,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Insert {
                pub tree_id: ::core::primitive::u32,
                pub leaf: runtime_types::webb_primitives::runtime::Element,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct ForceSetDefaultHashes {
                pub default_hashes: ::std::vec::Vec<
                    runtime_types::webb_primitives::runtime::Element,
                >,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                pub fn create(
                    &self,
                    depth: ::core::primitive::u8,
                ) -> ::subxt::tx::StaticTxPayload<Create> {
                    ::subxt::tx::StaticTxPayload::new(
                        "MerkleTreeBn254",
                        "create",
                        Create { depth },
                        [
                            101u8, 141u8, 101u8, 131u8, 97u8, 194u8, 160u8,
                            159u8, 181u8, 29u8, 158u8, 167u8, 174u8, 21u8, 2u8,
                            191u8, 254u8, 131u8, 228u8, 162u8, 70u8, 187u8,
                            140u8, 95u8, 113u8, 138u8, 81u8, 219u8, 109u8,
                            176u8, 131u8, 58u8,
                        ],
                    )
                }
                pub fn insert(
                    &self,
                    tree_id: ::core::primitive::u32,
                    leaf: runtime_types::webb_primitives::runtime::Element,
                ) -> ::subxt::tx::StaticTxPayload<Insert> {
                    ::subxt::tx::StaticTxPayload::new(
                        "MerkleTreeBn254",
                        "insert",
                        Insert { tree_id, leaf },
                        [
                            151u8, 86u8, 79u8, 4u8, 158u8, 170u8, 235u8, 236u8,
                            161u8, 51u8, 108u8, 207u8, 113u8, 70u8, 64u8, 5u8,
                            94u8, 5u8, 147u8, 87u8, 250u8, 27u8, 111u8, 46u8,
                            141u8, 67u8, 223u8, 254u8, 177u8, 171u8, 111u8,
                            103u8,
                        ],
                    )
                }
                pub fn force_set_default_hashes(
                    &self,
                    default_hashes: ::std::vec::Vec<
                        runtime_types::webb_primitives::runtime::Element,
                    >,
                ) -> ::subxt::tx::StaticTxPayload<ForceSetDefaultHashes>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "MerkleTreeBn254",
                        "force_set_default_hashes",
                        ForceSetDefaultHashes { default_hashes },
                        [
                            23u8, 193u8, 189u8, 221u8, 235u8, 68u8, 123u8,
                            187u8, 49u8, 67u8, 4u8, 170u8, 101u8, 149u8, 231u8,
                            22u8, 192u8, 179u8, 184u8, 190u8, 66u8, 177u8,
                            248u8, 12u8, 109u8, 109u8, 22u8, 198u8, 36u8,
                            144u8, 89u8, 41u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_mt::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "New tree created"]
            pub struct TreeCreation {
                pub tree_id: ::core::primitive::u32,
                pub who: ::subxt::ext::sp_core::crypto::AccountId32,
            }
            impl ::subxt::events::StaticEvent for TreeCreation {
                const PALLET: &'static str = "MerkleTreeBn254";
                const EVENT: &'static str = "TreeCreation";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "New leaf inserted"]
            pub struct LeafInsertion {
                pub tree_id: ::core::primitive::u32,
                pub leaf_index: ::core::primitive::u32,
                pub leaf: runtime_types::webb_primitives::runtime::Element,
            }
            impl ::subxt::events::StaticEvent for LeafInsertion {
                const PALLET: &'static str = "MerkleTreeBn254";
                const EVENT: &'static str = "LeafInsertion";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Details of the module's parameters"]                pub fn deposit (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: webb_primitives :: types :: DepositDetails < :: subxt :: ext :: sp_core :: crypto :: AccountId32 , :: core :: primitive :: u128 > > , :: subxt :: storage :: address :: Yes , () , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "MerkleTreeBn254",
                        "Deposit",
                        vec![],
                        [
                            175u8, 238u8, 72u8, 65u8, 101u8, 152u8, 252u8,
                            101u8, 127u8, 181u8, 93u8, 29u8, 16u8, 241u8,
                            243u8, 226u8, 128u8, 149u8, 202u8, 94u8, 15u8,
                            35u8, 11u8, 240u8, 16u8, 177u8, 120u8, 193u8,
                            213u8, 236u8, 151u8, 36u8,
                        ],
                    )
                }
                #[doc = " The next tree identifier up for grabs"]                pub fn next_tree_id (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u32 > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "MerkleTreeBn254",
                        "NextTreeId",
                        vec![],
                        [
                            173u8, 89u8, 80u8, 58u8, 200u8, 64u8, 201u8, 3u8,
                            169u8, 139u8, 75u8, 117u8, 56u8, 52u8, 163u8, 25u8,
                            83u8, 189u8, 66u8, 245u8, 249u8, 30u8, 211u8,
                            225u8, 16u8, 47u8, 232u8, 148u8, 75u8, 156u8,
                            233u8, 74u8,
                        ],
                    )
                }
                #[doc = " The map of trees to their metadata"]                pub fn trees (& self , _0 : impl :: std :: borrow :: Borrow < :: core :: primitive :: u32 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_mt :: types :: TreeMetadata < :: subxt :: ext :: sp_core :: crypto :: AccountId32 , :: core :: primitive :: u32 , runtime_types :: webb_primitives :: runtime :: Element > > , :: subxt :: storage :: address :: Yes , () , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("MerkleTreeBn254" , "Trees" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Blake2_128Concat)] , [66u8 , 194u8 , 53u8 , 103u8 , 220u8 , 46u8 , 224u8 , 62u8 , 1u8 , 135u8 , 73u8 , 181u8 , 141u8 , 146u8 , 42u8 , 90u8 , 191u8 , 121u8 , 47u8 , 167u8 , 226u8 , 5u8 , 222u8 , 107u8 , 146u8 , 255u8 , 28u8 , 3u8 , 163u8 , 223u8 , 230u8 , 42u8 ,])
                }
                #[doc = " The map of trees to their metadata"]                pub fn trees_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_mt :: types :: TreeMetadata < :: subxt :: ext :: sp_core :: crypto :: AccountId32 , :: core :: primitive :: u32 , runtime_types :: webb_primitives :: runtime :: Element > > , () , () , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "MerkleTreeBn254",
                        "Trees",
                        Vec::new(),
                        [
                            66u8, 194u8, 53u8, 103u8, 220u8, 46u8, 224u8, 62u8,
                            1u8, 135u8, 73u8, 181u8, 141u8, 146u8, 42u8, 90u8,
                            191u8, 121u8, 47u8, 167u8, 226u8, 5u8, 222u8,
                            107u8, 146u8, 255u8, 28u8, 3u8, 163u8, 223u8,
                            230u8, 42u8,
                        ],
                    )
                }
                #[doc = " The default hashes for this tree pallet"]                pub fn default_hashes (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: std :: vec :: Vec < runtime_types :: webb_primitives :: runtime :: Element > > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "MerkleTreeBn254",
                        "DefaultHashes",
                        vec![],
                        [
                            159u8, 215u8, 153u8, 84u8, 134u8, 29u8, 29u8,
                            230u8, 151u8, 29u8, 160u8, 77u8, 32u8, 163u8,
                            224u8, 55u8, 155u8, 29u8, 28u8, 133u8, 44u8, 49u8,
                            231u8, 87u8, 249u8, 44u8, 207u8, 252u8, 127u8,
                            90u8, 58u8, 151u8,
                        ],
                    )
                }
                #[doc = " The map of (tree_id, index) to the leaf commitment"]                pub fn leaves (& self , _0 : impl :: std :: borrow :: Borrow < :: core :: primitive :: u32 > , _1 : impl :: std :: borrow :: Borrow < :: core :: primitive :: u32 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: webb_primitives :: runtime :: Element > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("MerkleTreeBn254" , "Leaves" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Blake2_128Concat) , :: subxt :: storage :: address :: StorageMapKey :: new (_1 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Blake2_128Concat)] , [254u8 , 175u8 , 119u8 , 127u8 , 20u8 , 24u8 , 100u8 , 16u8 , 25u8 , 49u8 , 82u8 , 151u8 , 73u8 , 145u8 , 127u8 , 130u8 , 154u8 , 198u8 , 137u8 , 37u8 , 202u8 , 114u8 , 151u8 , 31u8 , 246u8 , 162u8 , 210u8 , 127u8 , 139u8 , 44u8 , 35u8 , 13u8 ,])
                }
                #[doc = " The map of (tree_id, index) to the leaf commitment"]                pub fn leaves_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: webb_primitives :: runtime :: Element > , () , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "MerkleTreeBn254",
                        "Leaves",
                        Vec::new(),
                        [
                            254u8, 175u8, 119u8, 127u8, 20u8, 24u8, 100u8,
                            16u8, 25u8, 49u8, 82u8, 151u8, 73u8, 145u8, 127u8,
                            130u8, 154u8, 198u8, 137u8, 37u8, 202u8, 114u8,
                            151u8, 31u8, 246u8, 162u8, 210u8, 127u8, 139u8,
                            44u8, 35u8, 13u8,
                        ],
                    )
                }
                #[doc = " The next tree identifier up for grabs"]                pub fn next_root_index (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u32 > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "MerkleTreeBn254",
                        "NextRootIndex",
                        vec![],
                        [
                            175u8, 70u8, 212u8, 119u8, 231u8, 181u8, 88u8,
                            15u8, 186u8, 22u8, 1u8, 117u8, 56u8, 178u8, 191u8,
                            154u8, 150u8, 203u8, 131u8, 128u8, 22u8, 141u8,
                            171u8, 148u8, 160u8, 177u8, 38u8, 48u8, 76u8,
                            198u8, 224u8, 126u8,
                        ],
                    )
                }
                #[doc = " The next tree identifier up for grabs"]                pub fn next_leaf_index (& self , _0 : impl :: std :: borrow :: Borrow < :: core :: primitive :: u32 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u32 > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("MerkleTreeBn254" , "NextLeafIndex" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Blake2_128Concat)] , [50u8 , 243u8 , 135u8 , 181u8 , 149u8 , 69u8 , 42u8 , 31u8 , 72u8 , 206u8 , 86u8 , 230u8 , 207u8 , 247u8 , 60u8 , 27u8 , 91u8 , 95u8 , 103u8 , 48u8 , 101u8 , 252u8 , 136u8 , 220u8 , 56u8 , 246u8 , 184u8 , 208u8 , 140u8 , 82u8 , 250u8 , 22u8 ,])
                }
                #[doc = " The next tree identifier up for grabs"]                pub fn next_leaf_index_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u32 > , () , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "MerkleTreeBn254",
                        "NextLeafIndex",
                        Vec::new(),
                        [
                            50u8, 243u8, 135u8, 181u8, 149u8, 69u8, 42u8, 31u8,
                            72u8, 206u8, 86u8, 230u8, 207u8, 247u8, 60u8, 27u8,
                            91u8, 95u8, 103u8, 48u8, 101u8, 252u8, 136u8,
                            220u8, 56u8, 246u8, 184u8, 208u8, 140u8, 82u8,
                            250u8, 22u8,
                        ],
                    )
                }
                #[doc = " Map of root history from tree id to root index to root values"]                pub fn cached_roots (& self , _0 : impl :: std :: borrow :: Borrow < :: core :: primitive :: u32 > , _1 : impl :: std :: borrow :: Borrow < :: core :: primitive :: u32 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: webb_primitives :: runtime :: Element > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("MerkleTreeBn254" , "CachedRoots" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Blake2_128Concat) , :: subxt :: storage :: address :: StorageMapKey :: new (_1 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Blake2_128Concat)] , [60u8 , 183u8 , 112u8 , 98u8 , 129u8 , 52u8 , 122u8 , 187u8 , 82u8 , 235u8 , 222u8 , 75u8 , 72u8 , 150u8 , 53u8 , 69u8 , 76u8 , 144u8 , 11u8 , 131u8 , 140u8 , 152u8 , 243u8 , 122u8 , 168u8 , 92u8 , 219u8 , 42u8 , 229u8 , 208u8 , 78u8 , 105u8 ,])
                }
                #[doc = " Map of root history from tree id to root index to root values"]                pub fn cached_roots_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: webb_primitives :: runtime :: Element > , () , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "MerkleTreeBn254",
                        "CachedRoots",
                        Vec::new(),
                        [
                            60u8, 183u8, 112u8, 98u8, 129u8, 52u8, 122u8,
                            187u8, 82u8, 235u8, 222u8, 75u8, 72u8, 150u8, 53u8,
                            69u8, 76u8, 144u8, 11u8, 131u8, 140u8, 152u8,
                            243u8, 122u8, 168u8, 92u8, 219u8, 42u8, 229u8,
                            208u8, 78u8, 105u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod linkable_tree_bn254 {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Create {
                pub max_edges: ::core::primitive::u32,
                pub depth: ::core::primitive::u8,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                pub fn create(
                    &self,
                    max_edges: ::core::primitive::u32,
                    depth: ::core::primitive::u8,
                ) -> ::subxt::tx::StaticTxPayload<Create> {
                    ::subxt::tx::StaticTxPayload::new(
                        "LinkableTreeBn254",
                        "create",
                        Create { max_edges, depth },
                        [
                            95u8, 217u8, 213u8, 178u8, 133u8, 233u8, 101u8,
                            67u8, 62u8, 233u8, 188u8, 150u8, 111u8, 88u8, 0u8,
                            241u8, 215u8, 208u8, 245u8, 191u8, 52u8, 162u8,
                            79u8, 231u8, 228u8, 232u8, 49u8, 103u8, 178u8,
                            96u8, 176u8, 206u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_linkable_tree::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "New tree created"]
            pub struct LinkableTreeCreation {
                pub tree_id: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for LinkableTreeCreation {
                const PALLET: &'static str = "LinkableTreeBn254";
                const EVENT: &'static str = "LinkableTreeCreation";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The map of trees to the maximum number of anchor edges they can have"]                pub fn max_edges (& self , _0 : impl :: std :: borrow :: Borrow < :: core :: primitive :: u32 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u32 > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("LinkableTreeBn254" , "MaxEdges" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Blake2_128Concat)] , [198u8 , 254u8 , 155u8 , 234u8 , 177u8 , 109u8 , 109u8 , 57u8 , 207u8 , 37u8 , 12u8 , 234u8 , 187u8 , 187u8 , 77u8 , 227u8 , 100u8 , 135u8 , 111u8 , 195u8 , 194u8 , 104u8 , 52u8 , 186u8 , 10u8 , 128u8 , 248u8 , 88u8 , 87u8 , 154u8 , 229u8 , 90u8 ,])
                }
                #[doc = " The map of trees to the maximum number of anchor edges they can have"]                pub fn max_edges_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u32 > , () , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "LinkableTreeBn254",
                        "MaxEdges",
                        Vec::new(),
                        [
                            198u8, 254u8, 155u8, 234u8, 177u8, 109u8, 109u8,
                            57u8, 207u8, 37u8, 12u8, 234u8, 187u8, 187u8, 77u8,
                            227u8, 100u8, 135u8, 111u8, 195u8, 194u8, 104u8,
                            52u8, 186u8, 10u8, 128u8, 248u8, 88u8, 87u8, 154u8,
                            229u8, 90u8,
                        ],
                    )
                }
                #[doc = " The map of trees and chain ids to their edge metadata"]                pub fn edge_list (& self , _0 : impl :: std :: borrow :: Borrow < :: core :: primitive :: u32 > , _1 : impl :: std :: borrow :: Borrow < :: core :: primitive :: u64 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_linkable_tree :: types :: EdgeMetadata < :: core :: primitive :: u64 , runtime_types :: webb_primitives :: runtime :: Element , :: core :: primitive :: u32 > > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("LinkableTreeBn254" , "EdgeList" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Blake2_128Concat) , :: subxt :: storage :: address :: StorageMapKey :: new (_1 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Blake2_128Concat)] , [129u8 , 93u8 , 177u8 , 204u8 , 167u8 , 37u8 , 32u8 , 189u8 , 47u8 , 99u8 , 19u8 , 161u8 , 55u8 , 2u8 , 224u8 , 1u8 , 223u8 , 145u8 , 51u8 , 138u8 , 243u8 , 185u8 , 255u8 , 32u8 , 6u8 , 123u8 , 244u8 , 248u8 , 133u8 , 189u8 , 97u8 , 159u8 ,])
                }
                #[doc = " The map of trees and chain ids to their edge metadata"]                pub fn edge_list_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_linkable_tree :: types :: EdgeMetadata < :: core :: primitive :: u64 , runtime_types :: webb_primitives :: runtime :: Element , :: core :: primitive :: u32 > > , () , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "LinkableTreeBn254",
                        "EdgeList",
                        Vec::new(),
                        [
                            129u8, 93u8, 177u8, 204u8, 167u8, 37u8, 32u8,
                            189u8, 47u8, 99u8, 19u8, 161u8, 55u8, 2u8, 224u8,
                            1u8, 223u8, 145u8, 51u8, 138u8, 243u8, 185u8,
                            255u8, 32u8, 6u8, 123u8, 244u8, 248u8, 133u8,
                            189u8, 97u8, 159u8,
                        ],
                    )
                }
                #[doc = " A helper map for denoting whether an tree is bridged to given chain"]                pub fn linkable_tree_has_edge (& self , _0 : impl :: std :: borrow :: Borrow < :: core :: primitive :: u32 > , _1 : impl :: std :: borrow :: Borrow < :: core :: primitive :: u64 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: bool > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("LinkableTreeBn254" , "LinkableTreeHasEdge" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (& (_0 . borrow () , _1 . borrow ()) , :: subxt :: storage :: address :: StorageHasher :: Blake2_128Concat)] , [159u8 , 137u8 , 120u8 , 239u8 , 119u8 , 134u8 , 14u8 , 74u8 , 253u8 , 30u8 , 22u8 , 29u8 , 177u8 , 255u8 , 4u8 , 81u8 , 86u8 , 20u8 , 141u8 , 192u8 , 23u8 , 16u8 , 200u8 , 87u8 , 93u8 , 252u8 , 91u8 , 240u8 , 162u8 , 163u8 , 146u8 , 163u8 ,])
                }
                #[doc = " A helper map for denoting whether an tree is bridged to given chain"]                pub fn linkable_tree_has_edge_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: bool > , () , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "LinkableTreeBn254",
                        "LinkableTreeHasEdge",
                        Vec::new(),
                        [
                            159u8, 137u8, 120u8, 239u8, 119u8, 134u8, 14u8,
                            74u8, 253u8, 30u8, 22u8, 29u8, 177u8, 255u8, 4u8,
                            81u8, 86u8, 20u8, 141u8, 192u8, 23u8, 16u8, 200u8,
                            87u8, 93u8, 252u8, 91u8, 240u8, 162u8, 163u8,
                            146u8, 163u8,
                        ],
                    )
                }
                #[doc = " The map of (tree, chain id) pairs to their latest recorded merkle root"]                pub fn neighbor_roots (& self , _0 : impl :: std :: borrow :: Borrow < (:: core :: primitive :: u32 , :: core :: primitive :: u64 ,) > , _1 : impl :: std :: borrow :: Borrow < :: core :: primitive :: u32 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: webb_primitives :: runtime :: Element > , :: subxt :: storage :: address :: Yes , () , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("LinkableTreeBn254" , "NeighborRoots" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Blake2_128Concat) , :: subxt :: storage :: address :: StorageMapKey :: new (_1 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Blake2_128Concat)] , [240u8 , 198u8 , 38u8 , 115u8 , 71u8 , 53u8 , 46u8 , 249u8 , 243u8 , 197u8 , 50u8 , 11u8 , 181u8 , 11u8 , 183u8 , 61u8 , 213u8 , 66u8 , 191u8 , 220u8 , 225u8 , 203u8 , 3u8 , 190u8 , 131u8 , 47u8 , 66u8 , 12u8 , 68u8 , 201u8 , 181u8 , 99u8 ,])
                }
                #[doc = " The map of (tree, chain id) pairs to their latest recorded merkle root"]                pub fn neighbor_roots_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: webb_primitives :: runtime :: Element > , () , () , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "LinkableTreeBn254",
                        "NeighborRoots",
                        Vec::new(),
                        [
                            240u8, 198u8, 38u8, 115u8, 71u8, 53u8, 46u8, 249u8,
                            243u8, 197u8, 50u8, 11u8, 181u8, 11u8, 183u8, 61u8,
                            213u8, 66u8, 191u8, 220u8, 225u8, 203u8, 3u8,
                            190u8, 131u8, 47u8, 66u8, 12u8, 68u8, 201u8, 181u8,
                            99u8,
                        ],
                    )
                }
                #[doc = " The next neighbor root index to store the merkle root update record"]                pub fn current_neighbor_root_index (& self , _0 : impl :: std :: borrow :: Borrow < :: core :: primitive :: u32 > , _1 : impl :: std :: borrow :: Borrow < :: core :: primitive :: u64 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u32 > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("LinkableTreeBn254" , "CurrentNeighborRootIndex" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (& (_0 . borrow () , _1 . borrow ()) , :: subxt :: storage :: address :: StorageHasher :: Blake2_128Concat)] , [114u8 , 40u8 , 99u8 , 72u8 , 241u8 , 89u8 , 253u8 , 122u8 , 226u8 , 181u8 , 168u8 , 58u8 , 70u8 , 0u8 , 110u8 , 141u8 , 58u8 , 12u8 , 177u8 , 129u8 , 103u8 , 45u8 , 160u8 , 139u8 , 99u8 , 198u8 , 181u8 , 154u8 , 78u8 , 62u8 , 201u8 , 227u8 ,])
                }
                #[doc = " The next neighbor root index to store the merkle root update record"]                pub fn current_neighbor_root_index_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u32 > , () , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "LinkableTreeBn254",
                        "CurrentNeighborRootIndex",
                        Vec::new(),
                        [
                            114u8, 40u8, 99u8, 72u8, 241u8, 89u8, 253u8, 122u8,
                            226u8, 181u8, 168u8, 58u8, 70u8, 0u8, 110u8, 141u8,
                            58u8, 12u8, 177u8, 129u8, 103u8, 45u8, 160u8,
                            139u8, 99u8, 198u8, 181u8, 154u8, 78u8, 62u8,
                            201u8, 227u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " ChainID type for this chain"]
                pub fn chain_type(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<
                        [::core::primitive::u8; 2usize],
                    >,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "LinkableTreeBn254",
                        "ChainType",
                        [
                            163u8, 171u8, 193u8, 121u8, 113u8, 71u8, 193u8,
                            113u8, 218u8, 13u8, 107u8, 113u8, 90u8, 90u8, 0u8,
                            52u8, 37u8, 41u8, 230u8, 189u8, 210u8, 64u8, 128u8,
                            75u8, 183u8, 21u8, 157u8, 145u8, 53u8, 100u8,
                            240u8, 86u8,
                        ],
                    )
                }
                pub fn chain_identifier(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<::core::primitive::u64>,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "LinkableTreeBn254",
                        "ChainIdentifier",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8,
                            231u8, 190u8, 146u8, 59u8, 226u8, 157u8, 101u8,
                            103u8, 117u8, 249u8, 65u8, 18u8, 191u8, 103u8,
                            119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8,
                            239u8, 42u8, 246u8,
                        ],
                    )
                }
                #[doc = " The pruning length for neighbor root histories"]
                pub fn history_length(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "LinkableTreeBn254",
                        "HistoryLength",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8,
                            200u8, 157u8, 125u8, 151u8, 53u8, 76u8, 168u8,
                            26u8, 10u8, 9u8, 98u8, 68u8, 9u8, 178u8, 197u8,
                            113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod mixer_bn254 {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Create {
                pub deposit_size: ::core::primitive::u128,
                pub depth: ::core::primitive::u8,
                pub asset: ::core::primitive::u32,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Deposit {
                pub tree_id: ::core::primitive::u32,
                pub leaf: runtime_types::webb_primitives::runtime::Element,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Withdraw {
                pub id: ::core::primitive::u32,
                pub proof_bytes: ::std::vec::Vec<::core::primitive::u8>,
                pub root: runtime_types::webb_primitives::runtime::Element,
                pub nullifier_hash:
                    runtime_types::webb_primitives::runtime::Element,
                pub recipient: ::subxt::ext::sp_core::crypto::AccountId32,
                pub relayer: ::subxt::ext::sp_core::crypto::AccountId32,
                pub fee: ::core::primitive::u128,
                pub refund: ::core::primitive::u128,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                pub fn create(
                    &self,
                    deposit_size: ::core::primitive::u128,
                    depth: ::core::primitive::u8,
                    asset: ::core::primitive::u32,
                ) -> ::subxt::tx::StaticTxPayload<Create> {
                    ::subxt::tx::StaticTxPayload::new(
                        "MixerBn254",
                        "create",
                        Create {
                            deposit_size,
                            depth,
                            asset,
                        },
                        [
                            53u8, 217u8, 41u8, 250u8, 195u8, 125u8, 121u8,
                            239u8, 62u8, 136u8, 254u8, 202u8, 250u8, 97u8,
                            183u8, 23u8, 85u8, 249u8, 212u8, 217u8, 218u8,
                            162u8, 212u8, 89u8, 76u8, 95u8, 239u8, 34u8, 76u8,
                            231u8, 27u8, 151u8,
                        ],
                    )
                }
                pub fn deposit(
                    &self,
                    tree_id: ::core::primitive::u32,
                    leaf: runtime_types::webb_primitives::runtime::Element,
                ) -> ::subxt::tx::StaticTxPayload<Deposit> {
                    ::subxt::tx::StaticTxPayload::new(
                        "MixerBn254",
                        "deposit",
                        Deposit { tree_id, leaf },
                        [
                            104u8, 199u8, 158u8, 83u8, 100u8, 27u8, 207u8,
                            32u8, 124u8, 162u8, 5u8, 227u8, 125u8, 197u8,
                            251u8, 180u8, 199u8, 250u8, 95u8, 69u8, 174u8,
                            124u8, 66u8, 95u8, 122u8, 84u8, 231u8, 8u8, 205u8,
                            71u8, 23u8, 224u8,
                        ],
                    )
                }
                pub fn withdraw(
                    &self,
                    id: ::core::primitive::u32,
                    proof_bytes: ::std::vec::Vec<::core::primitive::u8>,
                    root: runtime_types::webb_primitives::runtime::Element,
                    nullifier_hash : runtime_types :: webb_primitives :: runtime :: Element,
                    recipient: ::subxt::ext::sp_core::crypto::AccountId32,
                    relayer: ::subxt::ext::sp_core::crypto::AccountId32,
                    fee: ::core::primitive::u128,
                    refund: ::core::primitive::u128,
                ) -> ::subxt::tx::StaticTxPayload<Withdraw> {
                    ::subxt::tx::StaticTxPayload::new(
                        "MixerBn254",
                        "withdraw",
                        Withdraw {
                            id,
                            proof_bytes,
                            root,
                            nullifier_hash,
                            recipient,
                            relayer,
                            fee,
                            refund,
                        },
                        [
                            30u8, 228u8, 205u8, 113u8, 251u8, 11u8, 150u8,
                            32u8, 63u8, 227u8, 217u8, 126u8, 154u8, 250u8,
                            95u8, 192u8, 203u8, 107u8, 241u8, 221u8, 251u8,
                            83u8, 70u8, 84u8, 69u8, 190u8, 222u8, 57u8, 29u8,
                            183u8, 17u8, 68u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_mixer::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "New tree created"]
            pub struct MixerCreation {
                pub tree_id: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for MixerCreation {
                const PALLET: &'static str = "MixerBn254";
                const EVENT: &'static str = "MixerCreation";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Deposit {
                pub tree_id: ::core::primitive::u32,
                pub leaf: runtime_types::webb_primitives::runtime::Element,
            }
            impl ::subxt::events::StaticEvent for Deposit {
                const PALLET: &'static str = "MixerBn254";
                const EVENT: &'static str = "Deposit";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Withdraw {
                pub tree_id: ::core::primitive::u32,
                pub recipient: ::subxt::ext::sp_core::crypto::AccountId32,
            }
            impl ::subxt::events::StaticEvent for Withdraw {
                const PALLET: &'static str = "MixerBn254";
                const EVENT: &'static str = "Withdraw";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The map of trees to their mixer metadata"]                pub fn mixers (& self , _0 : impl :: std :: borrow :: Borrow < :: core :: primitive :: u32 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_mixer :: types :: MixerMetadata < :: core :: primitive :: u128 , :: core :: primitive :: u32 > > , :: subxt :: storage :: address :: Yes , () , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("MixerBn254" , "Mixers" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Blake2_128Concat)] , [30u8 , 216u8 , 0u8 , 53u8 , 203u8 , 108u8 , 202u8 , 45u8 , 173u8 , 173u8 , 108u8 , 254u8 , 29u8 , 23u8 , 97u8 , 163u8 , 102u8 , 196u8 , 204u8 , 14u8 , 30u8 , 68u8 , 217u8 , 162u8 , 175u8 , 88u8 , 138u8 , 153u8 , 228u8 , 74u8 , 125u8 , 11u8 ,])
                }
                #[doc = " The map of trees to their mixer metadata"]                pub fn mixers_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_mixer :: types :: MixerMetadata < :: core :: primitive :: u128 , :: core :: primitive :: u32 > > , () , () , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "MixerBn254",
                        "Mixers",
                        Vec::new(),
                        [
                            30u8, 216u8, 0u8, 53u8, 203u8, 108u8, 202u8, 45u8,
                            173u8, 173u8, 108u8, 254u8, 29u8, 23u8, 97u8,
                            163u8, 102u8, 196u8, 204u8, 14u8, 30u8, 68u8,
                            217u8, 162u8, 175u8, 88u8, 138u8, 153u8, 228u8,
                            74u8, 125u8, 11u8,
                        ],
                    )
                }
                #[doc = " The map of trees to their spent nullifier hashes"]                pub fn nullifier_hashes (& self , _0 : impl :: std :: borrow :: Borrow < :: core :: primitive :: u32 > , _1 : impl :: std :: borrow :: Borrow < runtime_types :: webb_primitives :: runtime :: Element > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: bool > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("MixerBn254" , "NullifierHashes" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Blake2_128Concat) , :: subxt :: storage :: address :: StorageMapKey :: new (_1 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Blake2_128Concat)] , [118u8 , 48u8 , 191u8 , 59u8 , 166u8 , 221u8 , 49u8 , 193u8 , 0u8 , 50u8 , 25u8 , 33u8 , 205u8 , 227u8 , 229u8 , 11u8 , 33u8 , 170u8 , 184u8 , 241u8 , 205u8 , 14u8 , 84u8 , 58u8 , 107u8 , 60u8 , 32u8 , 0u8 , 192u8 , 106u8 , 143u8 , 185u8 ,])
                }
                #[doc = " The map of trees to their spent nullifier hashes"]                pub fn nullifier_hashes_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: bool > , () , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "MixerBn254",
                        "NullifierHashes",
                        Vec::new(),
                        [
                            118u8, 48u8, 191u8, 59u8, 166u8, 221u8, 49u8,
                            193u8, 0u8, 50u8, 25u8, 33u8, 205u8, 227u8, 229u8,
                            11u8, 33u8, 170u8, 184u8, 241u8, 205u8, 14u8, 84u8,
                            58u8, 107u8, 60u8, 32u8, 0u8, 192u8, 106u8, 143u8,
                            185u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                pub fn pallet_id(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<
                        runtime_types::frame_support::PalletId,
                    >,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "MixerBn254",
                        "PalletId",
                        [
                            139u8, 109u8, 228u8, 151u8, 252u8, 32u8, 130u8,
                            69u8, 112u8, 154u8, 174u8, 45u8, 83u8, 245u8, 51u8,
                            132u8, 173u8, 5u8, 186u8, 24u8, 243u8, 9u8, 12u8,
                            214u8, 80u8, 74u8, 69u8, 189u8, 30u8, 94u8, 22u8,
                            39u8,
                        ],
                    )
                }
                #[doc = " Native currency id"]
                pub fn native_currency_id(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "MixerBn254",
                        "NativeCurrencyId",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8,
                            200u8, 157u8, 125u8, 151u8, 53u8, 76u8, 168u8,
                            26u8, 10u8, 9u8, 98u8, 68u8, 9u8, 178u8, 197u8,
                            113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod v_anchor_bn254 {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Create {
                pub max_edges: ::core::primitive::u32,
                pub depth: ::core::primitive::u8,
                pub asset: ::core::primitive::u32,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Transact {
                pub id: ::core::primitive::u32,
                pub proof_data:
                    runtime_types::webb_primitives::types::vanchor::ProofData<
                        runtime_types::webb_primitives::runtime::Element,
                    >,
                pub ext_data:
                    runtime_types::webb_primitives::types::vanchor::ExtData<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::i128,
                        ::core::primitive::u128,
                        ::core::primitive::u32,
                    >,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct RegisterAndTransact {
                pub owner: ::subxt::ext::sp_core::crypto::AccountId32,
                pub public_key: ::std::vec::Vec<::core::primitive::u8>,
                pub id: ::core::primitive::u32,
                pub proof_data:
                    runtime_types::webb_primitives::types::vanchor::ProofData<
                        runtime_types::webb_primitives::runtime::Element,
                    >,
                pub ext_data:
                    runtime_types::webb_primitives::types::vanchor::ExtData<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                        ::core::primitive::i128,
                        ::core::primitive::u128,
                        ::core::primitive::u32,
                    >,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct SetMaxDepositAmount {
                pub max_deposit_amount: ::core::primitive::u128,
                pub nonce: ::core::primitive::u32,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct SetMinWithdrawAmount {
                pub min_withdraw_amount: ::core::primitive::u128,
                pub nonce: ::core::primitive::u32,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                pub fn create(
                    &self,
                    max_edges: ::core::primitive::u32,
                    depth: ::core::primitive::u8,
                    asset: ::core::primitive::u32,
                ) -> ::subxt::tx::StaticTxPayload<Create> {
                    ::subxt::tx::StaticTxPayload::new(
                        "VAnchorBn254",
                        "create",
                        Create {
                            max_edges,
                            depth,
                            asset,
                        },
                        [
                            179u8, 67u8, 213u8, 88u8, 4u8, 208u8, 165u8, 229u8,
                            106u8, 59u8, 181u8, 181u8, 67u8, 139u8, 48u8,
                            227u8, 237u8, 190u8, 95u8, 118u8, 70u8, 177u8,
                            106u8, 67u8, 253u8, 70u8, 125u8, 78u8, 22u8, 142u8,
                            161u8, 100u8,
                        ],
                    )
                }
                pub fn transact(
                    &self,
                    id: ::core::primitive::u32,
                    proof_data : runtime_types :: webb_primitives :: types :: vanchor :: ProofData < runtime_types :: webb_primitives :: runtime :: Element >,
                    ext_data : runtime_types :: webb_primitives :: types :: vanchor :: ExtData < :: subxt :: ext :: sp_core :: crypto :: AccountId32 , :: core :: primitive :: i128 , :: core :: primitive :: u128 , :: core :: primitive :: u32 >,
                ) -> ::subxt::tx::StaticTxPayload<Transact> {
                    ::subxt::tx::StaticTxPayload::new(
                        "VAnchorBn254",
                        "transact",
                        Transact {
                            id,
                            proof_data,
                            ext_data,
                        },
                        [
                            157u8, 31u8, 193u8, 175u8, 45u8, 95u8, 117u8,
                            197u8, 158u8, 109u8, 20u8, 9u8, 148u8, 218u8,
                            112u8, 129u8, 151u8, 106u8, 221u8, 47u8, 172u8,
                            114u8, 172u8, 173u8, 2u8, 7u8, 145u8, 32u8, 157u8,
                            61u8, 215u8, 176u8,
                        ],
                    )
                }
                pub fn register_and_transact(
                    &self,
                    owner: ::subxt::ext::sp_core::crypto::AccountId32,
                    public_key: ::std::vec::Vec<::core::primitive::u8>,
                    id: ::core::primitive::u32,
                    proof_data : runtime_types :: webb_primitives :: types :: vanchor :: ProofData < runtime_types :: webb_primitives :: runtime :: Element >,
                    ext_data : runtime_types :: webb_primitives :: types :: vanchor :: ExtData < :: subxt :: ext :: sp_core :: crypto :: AccountId32 , :: core :: primitive :: i128 , :: core :: primitive :: u128 , :: core :: primitive :: u32 >,
                ) -> ::subxt::tx::StaticTxPayload<RegisterAndTransact>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "VAnchorBn254",
                        "register_and_transact",
                        RegisterAndTransact {
                            owner,
                            public_key,
                            id,
                            proof_data,
                            ext_data,
                        },
                        [
                            21u8, 243u8, 134u8, 214u8, 148u8, 56u8, 53u8, 92u8,
                            137u8, 39u8, 119u8, 189u8, 110u8, 72u8, 76u8, 84u8,
                            233u8, 62u8, 147u8, 247u8, 172u8, 9u8, 69u8, 49u8,
                            141u8, 145u8, 161u8, 32u8, 86u8, 13u8, 74u8, 119u8,
                        ],
                    )
                }
                pub fn set_max_deposit_amount(
                    &self,
                    max_deposit_amount: ::core::primitive::u128,
                    nonce: ::core::primitive::u32,
                ) -> ::subxt::tx::StaticTxPayload<SetMaxDepositAmount>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "VAnchorBn254",
                        "set_max_deposit_amount",
                        SetMaxDepositAmount {
                            max_deposit_amount,
                            nonce,
                        },
                        [
                            176u8, 129u8, 140u8, 194u8, 38u8, 99u8, 96u8,
                            123u8, 223u8, 127u8, 142u8, 201u8, 168u8, 229u8,
                            117u8, 84u8, 88u8, 187u8, 141u8, 17u8, 227u8,
                            250u8, 61u8, 213u8, 138u8, 191u8, 79u8, 233u8,
                            219u8, 157u8, 162u8, 131u8,
                        ],
                    )
                }
                pub fn set_min_withdraw_amount(
                    &self,
                    min_withdraw_amount: ::core::primitive::u128,
                    nonce: ::core::primitive::u32,
                ) -> ::subxt::tx::StaticTxPayload<SetMinWithdrawAmount>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "VAnchorBn254",
                        "set_min_withdraw_amount",
                        SetMinWithdrawAmount {
                            min_withdraw_amount,
                            nonce,
                        },
                        [
                            57u8, 249u8, 24u8, 174u8, 12u8, 147u8, 47u8, 89u8,
                            196u8, 217u8, 27u8, 19u8, 74u8, 241u8, 51u8, 27u8,
                            209u8, 252u8, 129u8, 50u8, 7u8, 162u8, 115u8, 60u8,
                            92u8, 168u8, 238u8, 168u8, 139u8, 240u8, 58u8,
                            16u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_vanchor::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "New tree created"]
            pub struct VAnchorCreation {
                pub tree_id: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for VAnchorCreation {
                const PALLET: &'static str = "VAnchorBn254";
                const EVENT: &'static str = "VAnchorCreation";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "Transaction has been made"]
            pub struct Transaction {
                pub transactor: ::subxt::ext::sp_core::crypto::AccountId32,
                pub tree_id: ::core::primitive::u32,
                pub leafs: ::std::vec::Vec<
                    runtime_types::webb_primitives::runtime::Element,
                >,
                pub encrypted_output1: ::std::vec::Vec<::core::primitive::u8>,
                pub encrypted_output2: ::std::vec::Vec<::core::primitive::u8>,
                pub amount: ::core::primitive::i128,
            }
            impl ::subxt::events::StaticEvent for Transaction {
                const PALLET: &'static str = "VAnchorBn254";
                const EVENT: &'static str = "Transaction";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "Deposit hook has executed successfully"]
            pub struct Deposit {
                pub depositor: ::subxt::ext::sp_core::crypto::AccountId32,
                pub tree_id: ::core::primitive::u32,
                pub leaf: runtime_types::webb_primitives::runtime::Element,
            }
            impl ::subxt::events::StaticEvent for Deposit {
                const PALLET: &'static str = "VAnchorBn254";
                const EVENT: &'static str = "Deposit";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct MaxDepositAmountChanged {
                pub max_deposit_amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for MaxDepositAmountChanged {
                const PALLET: &'static str = "VAnchorBn254";
                const EVENT: &'static str = "MaxDepositAmountChanged";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct MinWithdrawAmountChanged {
                pub min_withdraw_amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for MinWithdrawAmountChanged {
                const PALLET: &'static str = "VAnchorBn254";
                const EVENT: &'static str = "MinWithdrawAmountChanged";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                pub fn max_deposit_amount (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u128 > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "VAnchorBn254",
                        "MaxDepositAmount",
                        vec![],
                        [
                            103u8, 143u8, 218u8, 145u8, 13u8, 227u8, 200u8,
                            72u8, 147u8, 151u8, 21u8, 63u8, 38u8, 101u8, 23u8,
                            45u8, 67u8, 250u8, 184u8, 206u8, 10u8, 184u8, 98u8,
                            179u8, 120u8, 62u8, 92u8, 199u8, 30u8, 255u8, 26u8,
                            84u8,
                        ],
                    )
                }                pub fn min_withdraw_amount (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u128 > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "VAnchorBn254",
                        "MinWithdrawAmount",
                        vec![],
                        [
                            217u8, 143u8, 57u8, 19u8, 253u8, 60u8, 103u8,
                            182u8, 70u8, 55u8, 27u8, 66u8, 117u8, 86u8, 196u8,
                            163u8, 41u8, 18u8, 117u8, 125u8, 232u8, 109u8,
                            197u8, 177u8, 54u8, 157u8, 165u8, 251u8, 16u8,
                            49u8, 113u8, 240u8,
                        ],
                    )
                }
                #[doc = " The map of trees to their anchor metadata"]                pub fn v_anchors (& self , _0 : impl :: std :: borrow :: Borrow < :: core :: primitive :: u32 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: webb_primitives :: types :: vanchor :: VAnchorMetadata < :: subxt :: ext :: sp_core :: crypto :: AccountId32 , :: core :: primitive :: u32 > > , :: subxt :: storage :: address :: Yes , () , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("VAnchorBn254" , "VAnchors" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Blake2_128Concat)] , [36u8 , 134u8 , 67u8 , 39u8 , 166u8 , 66u8 , 25u8 , 61u8 , 47u8 , 227u8 , 59u8 , 137u8 , 206u8 , 140u8 , 252u8 , 38u8 , 69u8 , 243u8 , 65u8 , 15u8 , 127u8 , 65u8 , 200u8 , 12u8 , 60u8 , 140u8 , 19u8 , 168u8 , 135u8 , 135u8 , 38u8 , 219u8 ,])
                }
                #[doc = " The map of trees to their anchor metadata"]                pub fn v_anchors_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: webb_primitives :: types :: vanchor :: VAnchorMetadata < :: subxt :: ext :: sp_core :: crypto :: AccountId32 , :: core :: primitive :: u32 > > , () , () , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "VAnchorBn254",
                        "VAnchors",
                        Vec::new(),
                        [
                            36u8, 134u8, 67u8, 39u8, 166u8, 66u8, 25u8, 61u8,
                            47u8, 227u8, 59u8, 137u8, 206u8, 140u8, 252u8,
                            38u8, 69u8, 243u8, 65u8, 15u8, 127u8, 65u8, 200u8,
                            12u8, 60u8, 140u8, 19u8, 168u8, 135u8, 135u8, 38u8,
                            219u8,
                        ],
                    )
                }
                #[doc = " The map of trees to their spent nullifier hashes"]                pub fn nullifier_hashes (& self , _0 : impl :: std :: borrow :: Borrow < :: core :: primitive :: u32 > , _1 : impl :: std :: borrow :: Borrow < runtime_types :: webb_primitives :: runtime :: Element > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: bool > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("VAnchorBn254" , "NullifierHashes" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Blake2_128Concat) , :: subxt :: storage :: address :: StorageMapKey :: new (_1 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Blake2_128Concat)] , [118u8 , 48u8 , 191u8 , 59u8 , 166u8 , 221u8 , 49u8 , 193u8 , 0u8 , 50u8 , 25u8 , 33u8 , 205u8 , 227u8 , 229u8 , 11u8 , 33u8 , 170u8 , 184u8 , 241u8 , 205u8 , 14u8 , 84u8 , 58u8 , 107u8 , 60u8 , 32u8 , 0u8 , 192u8 , 106u8 , 143u8 , 185u8 ,])
                }
                #[doc = " The map of trees to their spent nullifier hashes"]                pub fn nullifier_hashes_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: bool > , () , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "VAnchorBn254",
                        "NullifierHashes",
                        Vec::new(),
                        [
                            118u8, 48u8, 191u8, 59u8, 166u8, 221u8, 49u8,
                            193u8, 0u8, 50u8, 25u8, 33u8, 205u8, 227u8, 229u8,
                            11u8, 33u8, 170u8, 184u8, 241u8, 205u8, 14u8, 84u8,
                            58u8, 107u8, 60u8, 32u8, 0u8, 192u8, 106u8, 143u8,
                            185u8,
                        ],
                    )
                }
                #[doc = " The proposal nonce used to prevent replay attacks on execute_proposal"]                pub fn proposal_nonce (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u32 > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "VAnchorBn254",
                        "ProposalNonce",
                        vec![],
                        [
                            154u8, 253u8, 37u8, 31u8, 8u8, 75u8, 192u8, 196u8,
                            188u8, 21u8, 59u8, 170u8, 99u8, 150u8, 145u8, 96u8,
                            22u8, 161u8, 68u8, 112u8, 214u8, 239u8, 240u8, 5u8,
                            99u8, 141u8, 14u8, 94u8, 183u8, 202u8, 78u8, 42u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                pub fn pallet_id(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<
                        runtime_types::frame_support::PalletId,
                    >,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "VAnchorBn254",
                        "PalletId",
                        [
                            139u8, 109u8, 228u8, 151u8, 252u8, 32u8, 130u8,
                            69u8, 112u8, 154u8, 174u8, 45u8, 83u8, 245u8, 51u8,
                            132u8, 173u8, 5u8, 186u8, 24u8, 243u8, 9u8, 12u8,
                            214u8, 80u8, 74u8, 69u8, 189u8, 30u8, 94u8, 22u8,
                            39u8,
                        ],
                    )
                }
                #[doc = " Native currency id"]
                pub fn native_currency_id(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "VAnchorBn254",
                        "NativeCurrencyId",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8,
                            200u8, 157u8, 125u8, 151u8, 53u8, 76u8, 168u8,
                            26u8, 10u8, 9u8, 98u8, 68u8, 9u8, 178u8, 197u8,
                            113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod v_anchor_handler_bn254 {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct ExecuteVanchorCreateProposal {
                pub src_chain_id: ::core::primitive::u64,
                pub r_id: runtime_types::webb_proposals::header::ResourceId,
                pub max_edges: ::core::primitive::u32,
                pub tree_depth: ::core::primitive::u8,
                pub asset: ::core::primitive::u32,
                pub nonce: ::core::primitive::u32,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct ExecuteVanchorUpdateProposal {
                pub r_id: runtime_types::webb_proposals::header::ResourceId,
                pub merkle_root:
                    runtime_types::webb_primitives::runtime::Element,
                pub src_resource_id:
                    runtime_types::webb_proposals::header::ResourceId,
                pub nonce: ::core::primitive::u32,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct ExecuteSetResourceProposal {
                pub r_id: runtime_types::webb_proposals::header::ResourceId,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "This will be called by bridge when proposal to create a"]
                #[doc = "vanchor has been successfully voted on."]
                pub fn execute_vanchor_create_proposal(
                    &self,
                    src_chain_id: ::core::primitive::u64,
                    r_id: runtime_types::webb_proposals::header::ResourceId,
                    max_edges: ::core::primitive::u32,
                    tree_depth: ::core::primitive::u8,
                    asset: ::core::primitive::u32,
                    nonce: ::core::primitive::u32,
                ) -> ::subxt::tx::StaticTxPayload<ExecuteVanchorCreateProposal>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "VAnchorHandlerBn254",
                        "execute_vanchor_create_proposal",
                        ExecuteVanchorCreateProposal {
                            src_chain_id,
                            r_id,
                            max_edges,
                            tree_depth,
                            asset,
                            nonce,
                        },
                        [
                            87u8, 197u8, 136u8, 226u8, 195u8, 230u8, 78u8,
                            200u8, 62u8, 131u8, 194u8, 106u8, 230u8, 87u8,
                            105u8, 141u8, 52u8, 10u8, 34u8, 132u8, 152u8, 12u8,
                            182u8, 110u8, 124u8, 248u8, 42u8, 37u8, 184u8,
                            160u8, 30u8, 239u8,
                        ],
                    )
                }
                #[doc = "This will be called by bridge when proposal to add/update edge of a"]
                #[doc = "vanchor has been successfully voted on."]
                pub fn execute_vanchor_update_proposal(
                    &self,
                    r_id: runtime_types::webb_proposals::header::ResourceId,
                    merkle_root : runtime_types :: webb_primitives :: runtime :: Element,
                    src_resource_id : runtime_types :: webb_proposals :: header :: ResourceId,
                    nonce: ::core::primitive::u32,
                ) -> ::subxt::tx::StaticTxPayload<ExecuteVanchorUpdateProposal>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "VAnchorHandlerBn254",
                        "execute_vanchor_update_proposal",
                        ExecuteVanchorUpdateProposal {
                            r_id,
                            merkle_root,
                            src_resource_id,
                            nonce,
                        },
                        [
                            248u8, 213u8, 40u8, 228u8, 156u8, 188u8, 16u8,
                            104u8, 13u8, 176u8, 140u8, 155u8, 185u8, 97u8,
                            109u8, 27u8, 12u8, 209u8, 41u8, 174u8, 158u8,
                            208u8, 85u8, 120u8, 128u8, 218u8, 147u8, 71u8,
                            165u8, 153u8, 7u8, 249u8,
                        ],
                    )
                }
                #[doc = "This will by called by bridge when proposal to set new resource for"]
                #[doc = "handler has been successfully voted on."]
                pub fn execute_set_resource_proposal(
                    &self,
                    r_id: runtime_types::webb_proposals::header::ResourceId,
                ) -> ::subxt::tx::StaticTxPayload<ExecuteSetResourceProposal>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "VAnchorHandlerBn254",
                        "execute_set_resource_proposal",
                        ExecuteSetResourceProposal { r_id },
                        [
                            228u8, 152u8, 137u8, 216u8, 49u8, 178u8, 221u8,
                            163u8, 89u8, 90u8, 63u8, 173u8, 170u8, 175u8, 30u8,
                            31u8, 77u8, 198u8, 214u8, 169u8, 52u8, 13u8, 63u8,
                            98u8, 218u8, 108u8, 82u8, 222u8, 224u8, 50u8,
                            151u8, 247u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_vanchor_handler::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct AnchorCreated;
            impl ::subxt::events::StaticEvent for AnchorCreated {
                const PALLET: &'static str = "VAnchorHandlerBn254";
                const EVENT: &'static str = "AnchorCreated";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct AnchorEdgeAdded;
            impl ::subxt::events::StaticEvent for AnchorEdgeAdded {
                const PALLET: &'static str = "VAnchorHandlerBn254";
                const EVENT: &'static str = "AnchorEdgeAdded";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct AnchorEdgeUpdated;
            impl ::subxt::events::StaticEvent for AnchorEdgeUpdated {
                const PALLET: &'static str = "VAnchorHandlerBn254";
                const EVENT: &'static str = "AnchorEdgeUpdated";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct ResourceAnchored;
            impl ::subxt::events::StaticEvent for ResourceAnchored {
                const PALLET: &'static str = "VAnchorHandlerBn254";
                const EVENT: &'static str = "ResourceAnchored";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The map of trees to their anchor metadata"]                pub fn anchor_list (& self , _0 : impl :: std :: borrow :: Borrow < runtime_types :: webb_proposals :: header :: ResourceId > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u32 > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("VAnchorHandlerBn254" , "AnchorList" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Blake2_128Concat)] , [208u8 , 135u8 , 255u8 , 171u8 , 144u8 , 24u8 , 220u8 , 50u8 , 12u8 , 31u8 , 90u8 , 255u8 , 252u8 , 78u8 , 107u8 , 239u8 , 162u8 , 141u8 , 248u8 , 201u8 , 149u8 , 98u8 , 234u8 , 116u8 , 212u8 , 184u8 , 249u8 , 242u8 , 41u8 , 40u8 , 66u8 , 72u8 ,])
                }
                #[doc = " The map of trees to their anchor metadata"]                pub fn anchor_list_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u32 > , () , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "VAnchorHandlerBn254",
                        "AnchorList",
                        Vec::new(),
                        [
                            208u8, 135u8, 255u8, 171u8, 144u8, 24u8, 220u8,
                            50u8, 12u8, 31u8, 90u8, 255u8, 252u8, 78u8, 107u8,
                            239u8, 162u8, 141u8, 248u8, 201u8, 149u8, 98u8,
                            234u8, 116u8, 212u8, 184u8, 249u8, 242u8, 41u8,
                            40u8, 66u8, 72u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod signature_bridge {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct SetMaintainer {
                pub message: ::std::vec::Vec<::core::primitive::u8>,
                pub signature: ::std::vec::Vec<::core::primitive::u8>,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct ForceSetMaintainer {
                pub new_maintainer: ::std::vec::Vec<::core::primitive::u8>,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct SetResource {
                pub id: runtime_types::webb_proposals::header::ResourceId,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct RemoveResource {
                pub id: runtime_types::webb_proposals::header::ResourceId,
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct WhitelistChain {
                pub id: ::core::primitive::u64,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct SetResourceWithSignature {
                pub src_id: ::core::primitive::u64,
                pub proposal_data: ::std::vec::Vec<::core::primitive::u8>,
                pub signature: ::std::vec::Vec<::core::primitive::u8>,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct ExecuteProposal {
                pub src_id: ::core::primitive::u64,
                pub proposal_data: ::std::vec::Vec<::core::primitive::u8>,
                pub signature: ::std::vec::Vec<::core::primitive::u8>,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Sets the maintainer."]
                pub fn set_maintainer(
                    &self,
                    message: ::std::vec::Vec<::core::primitive::u8>,
                    signature: ::std::vec::Vec<::core::primitive::u8>,
                ) -> ::subxt::tx::StaticTxPayload<SetMaintainer>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "SignatureBridge",
                        "set_maintainer",
                        SetMaintainer { message, signature },
                        [
                            211u8, 168u8, 100u8, 48u8, 105u8, 134u8, 233u8,
                            183u8, 39u8, 94u8, 159u8, 156u8, 119u8, 29u8, 13u8,
                            186u8, 128u8, 99u8, 20u8, 30u8, 248u8, 147u8,
                            146u8, 230u8, 78u8, 168u8, 159u8, 212u8, 186u8,
                            10u8, 248u8, 73u8,
                        ],
                    )
                }
                pub fn force_set_maintainer(
                    &self,
                    new_maintainer: ::std::vec::Vec<::core::primitive::u8>,
                ) -> ::subxt::tx::StaticTxPayload<ForceSetMaintainer>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "SignatureBridge",
                        "force_set_maintainer",
                        ForceSetMaintainer { new_maintainer },
                        [
                            12u8, 195u8, 166u8, 199u8, 236u8, 22u8, 3u8, 130u8,
                            128u8, 12u8, 3u8, 216u8, 221u8, 96u8, 135u8, 233u8,
                            253u8, 15u8, 250u8, 119u8, 185u8, 9u8, 232u8, 68u8,
                            30u8, 176u8, 88u8, 173u8, 187u8, 105u8, 225u8,
                            123u8,
                        ],
                    )
                }
                #[doc = "Stores a method name on chain under an associated resource ID."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- O(1) write"]
                #[doc = "# </weight>"]
                pub fn set_resource(
                    &self,
                    id: runtime_types::webb_proposals::header::ResourceId,
                ) -> ::subxt::tx::StaticTxPayload<SetResource> {
                    ::subxt::tx::StaticTxPayload::new(
                        "SignatureBridge",
                        "set_resource",
                        SetResource { id },
                        [
                            100u8, 124u8, 197u8, 183u8, 34u8, 42u8, 154u8,
                            55u8, 12u8, 151u8, 135u8, 152u8, 211u8, 151u8,
                            33u8, 14u8, 67u8, 222u8, 3u8, 109u8, 144u8, 235u8,
                            253u8, 116u8, 76u8, 145u8, 90u8, 158u8, 138u8,
                            33u8, 204u8, 170u8,
                        ],
                    )
                }
                #[doc = "Removes a resource ID from the resource mapping."]
                #[doc = ""]
                #[doc = "After this call, bridge transfers with the associated resource ID"]
                #[doc = "will be rejected."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- O(1) removal"]
                #[doc = "# </weight>"]
                pub fn remove_resource(
                    &self,
                    id: runtime_types::webb_proposals::header::ResourceId,
                ) -> ::subxt::tx::StaticTxPayload<RemoveResource>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "SignatureBridge",
                        "remove_resource",
                        RemoveResource { id },
                        [
                            98u8, 85u8, 131u8, 94u8, 224u8, 152u8, 145u8,
                            154u8, 26u8, 36u8, 199u8, 221u8, 240u8, 200u8,
                            190u8, 184u8, 0u8, 140u8, 90u8, 36u8, 11u8, 250u8,
                            103u8, 150u8, 246u8, 70u8, 170u8, 94u8, 210u8,
                            172u8, 92u8, 67u8,
                        ],
                    )
                }
                #[doc = "Enables a chain ID as a source or destination for a bridge transfer."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- O(1) lookup and insert"]
                #[doc = "# </weight>"]
                pub fn whitelist_chain(
                    &self,
                    id: ::core::primitive::u64,
                ) -> ::subxt::tx::StaticTxPayload<WhitelistChain>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "SignatureBridge",
                        "whitelist_chain",
                        WhitelistChain { id },
                        [
                            230u8, 109u8, 92u8, 10u8, 127u8, 214u8, 167u8,
                            56u8, 125u8, 37u8, 161u8, 108u8, 98u8, 250u8, 3u8,
                            146u8, 224u8, 178u8, 139u8, 72u8, 21u8, 159u8,
                            54u8, 225u8, 172u8, 88u8, 214u8, 162u8, 235u8,
                            87u8, 125u8, 23u8,
                        ],
                    )
                }
                #[doc = "@param origin"]
                #[doc = "@param src_id"]
                #[doc = "@param proposal_data: (r_id, nonce, 4 bytes of zeroes, call)"]
                #[doc = "@param signature: a signature over the proposal_data"]
                #[doc = ""]
                #[doc = "We check:"]
                #[doc = "1. That the signature is actually over the proposal data"]
                #[doc = "2. Add ResourceId to the Storage"]
                #[doc = "3. That the call from the proposal data and the call input parameter to the function are"]
                #[doc = "consistent with each other 4. That the execution chain id type parsed from the r_id is"]
                #[doc = "indeed this chain's id type"]
                #[doc = ""]
                #[doc = "If all these checks pass then we call finalize_execution which actually executes the"]
                #[doc = "dispatchable call. The dispatchable call is usually a handler function, for instance in"]
                #[doc = "the anchor-handler or token-wrapper-handler pallet."]
                #[doc = ""]
                #[doc = "There are a few TODOs left in the function."]
                #[doc = ""]
                #[doc = "In the set_resource_with_signature"]
                #[doc = "# <weight>"]
                #[doc = "- weight of proposed call, regardless of whether execution is performed"]
                #[doc = "# </weight>"]
                pub fn set_resource_with_signature(
                    &self,
                    src_id: ::core::primitive::u64,
                    proposal_data: ::std::vec::Vec<::core::primitive::u8>,
                    signature: ::std::vec::Vec<::core::primitive::u8>,
                ) -> ::subxt::tx::StaticTxPayload<SetResourceWithSignature>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "SignatureBridge",
                        "set_resource_with_signature",
                        SetResourceWithSignature {
                            src_id,
                            proposal_data,
                            signature,
                        },
                        [
                            10u8, 234u8, 45u8, 210u8, 27u8, 117u8, 247u8,
                            200u8, 252u8, 212u8, 216u8, 135u8, 193u8, 236u8,
                            128u8, 222u8, 74u8, 196u8, 2u8, 244u8, 12u8, 44u8,
                            234u8, 167u8, 207u8, 102u8, 120u8, 231u8, 21u8,
                            164u8, 91u8, 16u8,
                        ],
                    )
                }
                #[doc = "@param origin"]
                #[doc = "@param src_id"]
                #[doc = "@param proposal_data: (r_id, nonce, 4 bytes of zeroes, call)"]
                #[doc = "@param signature: a signature over the proposal_data"]
                #[doc = ""]
                #[doc = "We check:"]
                #[doc = "1. That the signature is actually over the proposal data"]
                #[doc = "2. That the r_id parsed from the proposal data exists"]
                #[doc = "3. That the call from the proposal data and the call input parameter to the function are"]
                #[doc = "consistent with each other 4. That the execution chain id type parsed from the r_id is"]
                #[doc = "indeed this chain's id type"]
                #[doc = ""]
                #[doc = "If all these checks pass then we call finalize_execution which actually executes the"]
                #[doc = "dispatchable call. The dispatchable call is usually a handler function, for instance in"]
                #[doc = "the anchor-handler or token-wrapper-handler pallet."]
                #[doc = ""]
                #[doc = "There are a few TODOs left in the function."]
                #[doc = ""]
                #[doc = "In the execute_proposal"]
                #[doc = "# <weight>"]
                #[doc = "- weight of proposed call, regardless of whether execution is performed"]
                #[doc = "# </weight>"]
                pub fn execute_proposal(
                    &self,
                    src_id: ::core::primitive::u64,
                    proposal_data: ::std::vec::Vec<::core::primitive::u8>,
                    signature: ::std::vec::Vec<::core::primitive::u8>,
                ) -> ::subxt::tx::StaticTxPayload<ExecuteProposal>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "SignatureBridge",
                        "execute_proposal",
                        ExecuteProposal {
                            src_id,
                            proposal_data,
                            signature,
                        },
                        [
                            139u8, 64u8, 28u8, 253u8, 204u8, 202u8, 227u8,
                            159u8, 201u8, 180u8, 157u8, 228u8, 141u8, 223u8,
                            152u8, 197u8, 144u8, 43u8, 245u8, 14u8, 20u8,
                            159u8, 210u8, 87u8, 210u8, 209u8, 105u8, 98u8,
                            64u8, 38u8, 11u8, 95u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_signature_bridge::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "Maintainer is set"]
            pub struct MaintainerSet {
                pub old_maintainer: ::std::vec::Vec<::core::primitive::u8>,
                pub new_maintainer: ::std::vec::Vec<::core::primitive::u8>,
            }
            impl ::subxt::events::StaticEvent for MaintainerSet {
                const PALLET: &'static str = "SignatureBridge";
                const EVENT: &'static str = "MaintainerSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "Chain now available for transfers (chain_id)"]
            pub struct ChainWhitelisted {
                pub chain_id: ::core::primitive::u64,
            }
            impl ::subxt::events::StaticEvent for ChainWhitelisted {
                const PALLET: &'static str = "SignatureBridge";
                const EVENT: &'static str = "ChainWhitelisted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "Proposal has been approved"]
            pub struct ProposalApproved {
                pub chain_id: ::core::primitive::u64,
                pub proposal_nonce: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for ProposalApproved {
                const PALLET: &'static str = "SignatureBridge";
                const EVENT: &'static str = "ProposalApproved";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "Execution of call succeeded"]
            pub struct ProposalSucceeded {
                pub chain_id: ::core::primitive::u64,
                pub proposal_nonce: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for ProposalSucceeded {
                const PALLET: &'static str = "SignatureBridge";
                const EVENT: &'static str = "ProposalSucceeded";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "Execution of call failed"]
            pub struct ProposalFailed {
                pub chain_id: ::core::primitive::u64,
                pub proposal_nonce: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for ProposalFailed {
                const PALLET: &'static str = "SignatureBridge";
                const EVENT: &'static str = "ProposalFailed";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The parameter maintainer who can change the parameters"]                pub fn maintainer (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: std :: vec :: Vec < :: core :: primitive :: u8 > > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "SignatureBridge",
                        "Maintainer",
                        vec![],
                        [
                            239u8, 211u8, 64u8, 35u8, 178u8, 81u8, 121u8, 92u8,
                            205u8, 163u8, 92u8, 166u8, 203u8, 187u8, 237u8,
                            67u8, 0u8, 188u8, 105u8, 189u8, 122u8, 54u8, 181u8,
                            217u8, 25u8, 135u8, 80u8, 38u8, 34u8, 3u8, 156u8,
                            230u8,
                        ],
                    )
                }
                #[doc = " All whitelisted chains and their respective transaction counts"]                pub fn chain_nonces (& self , _0 : impl :: std :: borrow :: Borrow < :: core :: primitive :: u64 > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u32 > , :: subxt :: storage :: address :: Yes , () , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("SignatureBridge" , "ChainNonces" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Blake2_256)] , [46u8 , 115u8 , 113u8 , 107u8 , 117u8 , 64u8 , 44u8 , 249u8 , 225u8 , 85u8 , 228u8 , 126u8 , 121u8 , 101u8 , 13u8 , 244u8 , 174u8 , 210u8 , 21u8 , 34u8 , 248u8 , 203u8 , 38u8 , 35u8 , 113u8 , 149u8 , 100u8 , 157u8 , 8u8 , 100u8 , 113u8 , 68u8 ,])
                }
                #[doc = " All whitelisted chains and their respective transaction counts"]                pub fn chain_nonces_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u32 > , () , () , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "SignatureBridge",
                        "ChainNonces",
                        Vec::new(),
                        [
                            46u8, 115u8, 113u8, 107u8, 117u8, 64u8, 44u8,
                            249u8, 225u8, 85u8, 228u8, 126u8, 121u8, 101u8,
                            13u8, 244u8, 174u8, 210u8, 21u8, 34u8, 248u8,
                            203u8, 38u8, 35u8, 113u8, 149u8, 100u8, 157u8, 8u8,
                            100u8, 113u8, 68u8,
                        ],
                    )
                }
                #[doc = " Utilized by the bridge software to map resource IDs to actual methods"]                pub fn resources (& self , _0 : impl :: std :: borrow :: Borrow < runtime_types :: webb_proposals :: header :: ResourceId > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < () > , :: subxt :: storage :: address :: Yes , () , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("SignatureBridge" , "Resources" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Blake2_256)] , [244u8 , 76u8 , 108u8 , 200u8 , 197u8 , 2u8 , 102u8 , 136u8 , 158u8 , 135u8 , 102u8 , 251u8 , 56u8 , 170u8 , 225u8 , 248u8 , 37u8 , 168u8 , 49u8 , 184u8 , 241u8 , 15u8 , 4u8 , 100u8 , 144u8 , 154u8 , 29u8 , 128u8 , 69u8 , 188u8 , 80u8 , 121u8 ,])
                }
                #[doc = " Utilized by the bridge software to map resource IDs to actual methods"]                pub fn resources_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < () > , () , () , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "SignatureBridge",
                        "Resources",
                        Vec::new(),
                        [
                            244u8, 76u8, 108u8, 200u8, 197u8, 2u8, 102u8,
                            136u8, 158u8, 135u8, 102u8, 251u8, 56u8, 170u8,
                            225u8, 248u8, 37u8, 168u8, 49u8, 184u8, 241u8,
                            15u8, 4u8, 100u8, 144u8, 154u8, 29u8, 128u8, 69u8,
                            188u8, 80u8, 121u8,
                        ],
                    )
                }
                #[doc = " The proposal nonce used to prevent replay attacks on execute_proposal"]                pub fn proposal_nonce (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u32 > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "SignatureBridge",
                        "ProposalNonce",
                        vec![],
                        [
                            154u8, 253u8, 37u8, 31u8, 8u8, 75u8, 192u8, 196u8,
                            188u8, 21u8, 59u8, 170u8, 99u8, 150u8, 145u8, 96u8,
                            22u8, 161u8, 68u8, 112u8, 214u8, 239u8, 240u8, 5u8,
                            99u8, 141u8, 14u8, 94u8, 183u8, 202u8, 78u8, 42u8,
                        ],
                    )
                }                pub fn maintainer_nonce (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: core :: primitive :: u32 > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "SignatureBridge",
                        "MaintainerNonce",
                        vec![],
                        [
                            139u8, 246u8, 239u8, 180u8, 188u8, 73u8, 234u8,
                            114u8, 211u8, 68u8, 84u8, 178u8, 142u8, 49u8, 24u8,
                            160u8, 32u8, 180u8, 211u8, 16u8, 75u8, 91u8, 40u8,
                            132u8, 120u8, 68u8, 221u8, 167u8, 138u8, 53u8,
                            71u8, 250u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The identifier for this chain."]
                #[doc = " This must be unique and must not collide with existing IDs within a"]
                #[doc = " set of bridged chains."]
                pub fn chain_identifier(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<::core::primitive::u64>,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "SignatureBridge",
                        "ChainIdentifier",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8,
                            231u8, 190u8, 146u8, 59u8, 226u8, 157u8, 101u8,
                            103u8, 117u8, 249u8, 65u8, 18u8, 191u8, 103u8,
                            119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8,
                            239u8, 42u8, 246u8,
                        ],
                    )
                }
                #[doc = " The chain type for this chain."]
                #[doc = " This is either a standalone Substrate chain, relay chain, or parachain"]
                pub fn chain_type(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<
                        [::core::primitive::u8; 2usize],
                    >,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "SignatureBridge",
                        "ChainType",
                        [
                            163u8, 171u8, 193u8, 121u8, 113u8, 71u8, 193u8,
                            113u8, 218u8, 13u8, 107u8, 113u8, 90u8, 90u8, 0u8,
                            52u8, 37u8, 41u8, 230u8, 189u8, 210u8, 64u8, 128u8,
                            75u8, 183u8, 21u8, 157u8, 145u8, 53u8, 100u8,
                            240u8, 86u8,
                        ],
                    )
                }
                pub fn proposal_lifetime(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<::core::primitive::u64>,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "SignatureBridge",
                        "ProposalLifetime",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8,
                            231u8, 190u8, 146u8, 59u8, 226u8, 157u8, 101u8,
                            103u8, 117u8, 249u8, 65u8, 18u8, 191u8, 103u8,
                            119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8,
                            239u8, 42u8, 246u8,
                        ],
                    )
                }
                pub fn bridge_account_id(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<
                        runtime_types::frame_support::PalletId,
                    >,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "SignatureBridge",
                        "BridgeAccountId",
                        [
                            139u8, 109u8, 228u8, 151u8, 252u8, 32u8, 130u8,
                            69u8, 112u8, 154u8, 174u8, 45u8, 83u8, 245u8, 51u8,
                            132u8, 173u8, 5u8, 186u8, 24u8, 243u8, 9u8, 12u8,
                            214u8, 80u8, 74u8, 69u8, 189u8, 30u8, 94u8, 22u8,
                            39u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod relayer_registry {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Identity pallet declaration."]
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct SetResource {
                pub resource_id:
                    runtime_types::webb_proposals::header::ResourceId,
                pub info: ::std::boxed::Box<
                    runtime_types::pallet_relayer_registry::types::ResourceInfo,
                >,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct ClearResource {
                pub resource_id:
                    runtime_types::webb_proposals::header::ResourceId,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Set a resource's information and reserve the appropriate deposit."]
                #[doc = ""]
                #[doc = "If the resource already has resource information, the deposit is taken as part payment"]
                #[doc = "for the new deposit."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `info`: The resource information."]
                #[doc = ""]
                #[doc = "Emits `ResourceSet` if successful."]
                pub fn set_resource(
                    &self,
                    resource_id : runtime_types :: webb_proposals :: header :: ResourceId,
                    info : runtime_types :: pallet_relayer_registry :: types :: ResourceInfo,
                ) -> ::subxt::tx::StaticTxPayload<SetResource> {
                    ::subxt::tx::StaticTxPayload::new(
                        "RelayerRegistry",
                        "set_resource",
                        SetResource {
                            resource_id,
                            info: ::std::boxed::Box::new(info),
                        },
                        [
                            166u8, 246u8, 237u8, 192u8, 22u8, 46u8, 194u8, 9u8,
                            231u8, 182u8, 27u8, 204u8, 242u8, 15u8, 131u8,
                            111u8, 87u8, 15u8, 90u8, 74u8, 105u8, 242u8, 40u8,
                            250u8, 17u8, 14u8, 155u8, 76u8, 179u8, 0u8, 86u8,
                            29u8,
                        ],
                    )
                }
                #[doc = "Clear an account's resource record."]
                #[doc = ""]
                #[doc = "Payment: All reserved balances on the account are returned."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
                #[doc = "resource."]
                #[doc = ""]
                #[doc = "Emits `ResourceCleared` if successful."]
                pub fn clear_resource(
                    &self,
                    resource_id : runtime_types :: webb_proposals :: header :: ResourceId,
                ) -> ::subxt::tx::StaticTxPayload<ClearResource>
                {
                    ::subxt::tx::StaticTxPayload::new(
                        "RelayerRegistry",
                        "clear_resource",
                        ClearResource { resource_id },
                        [
                            92u8, 192u8, 248u8, 135u8, 120u8, 84u8, 22u8,
                            226u8, 51u8, 182u8, 16u8, 88u8, 235u8, 113u8,
                            231u8, 29u8, 194u8, 72u8, 78u8, 181u8, 35u8, 68u8,
                            80u8, 100u8, 64u8, 164u8, 236u8, 19u8, 25u8, 255u8,
                            121u8, 63u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_relayer_registry::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "A resource was set or reset (which will remove all judgements)."]
            pub struct ResourceSet {
                pub who: ::subxt::ext::sp_core::crypto::AccountId32,
            }
            impl ::subxt::events::StaticEvent for ResourceSet {
                const PALLET: &'static str = "RelayerRegistry";
                const EVENT: &'static str = "ResourceSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "A resource was cleared, and the given balance returned."]
            pub struct ResourceCleared {
                pub who: ::subxt::ext::sp_core::crypto::AccountId32,
                pub deposit: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for ResourceCleared {
                const PALLET: &'static str = "RelayerRegistry";
                const EVENT: &'static str = "ResourceCleared";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " A map that allows accounts to store metadata about each resource they are interested in."]
                #[doc = ""]
                #[doc = " TWOX-NOTE: OK ― `AccountId` is a secure hash."]                pub fn resource_of (& self , _0 : impl :: std :: borrow :: Borrow < :: subxt :: ext :: sp_core :: crypto :: AccountId32 > , _1 : impl :: std :: borrow :: Borrow < runtime_types :: webb_proposals :: header :: ResourceId > ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_relayer_registry :: types :: ResourceRecord < :: core :: primitive :: u128 > > , :: subxt :: storage :: address :: Yes , () , :: subxt :: storage :: address :: Yes >{
                    :: subxt :: storage :: address :: StaticStorageAddress :: new ("RelayerRegistry" , "ResourceOf" , vec ! [:: subxt :: storage :: address :: StorageMapKey :: new (_0 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Blake2_128Concat) , :: subxt :: storage :: address :: StorageMapKey :: new (_1 . borrow () , :: subxt :: storage :: address :: StorageHasher :: Blake2_128Concat)] , [185u8 , 81u8 , 138u8 , 7u8 , 131u8 , 31u8 , 61u8 , 187u8 , 117u8 , 12u8 , 0u8 , 178u8 , 133u8 , 254u8 , 247u8 , 85u8 , 113u8 , 184u8 , 82u8 , 178u8 , 182u8 , 103u8 , 240u8 , 30u8 , 20u8 , 126u8 , 187u8 , 120u8 , 113u8 , 119u8 , 53u8 , 250u8 ,])
                }
                #[doc = " A map that allows accounts to store metadata about each resource they are interested in."]
                #[doc = ""]
                #[doc = " TWOX-NOTE: OK ― `AccountId` is a secure hash."]                pub fn resource_of_root (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < runtime_types :: pallet_relayer_registry :: types :: ResourceRecord < :: core :: primitive :: u128 > > , () , () , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "RelayerRegistry",
                        "ResourceOf",
                        Vec::new(),
                        [
                            185u8, 81u8, 138u8, 7u8, 131u8, 31u8, 61u8, 187u8,
                            117u8, 12u8, 0u8, 178u8, 133u8, 254u8, 247u8, 85u8,
                            113u8, 184u8, 82u8, 178u8, 182u8, 103u8, 240u8,
                            30u8, 20u8, 126u8, 187u8, 120u8, 113u8, 119u8,
                            53u8, 250u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The amount held on deposit for a registered identity"]
                pub fn basic_deposit(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<
                        ::core::primitive::u128,
                    >,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "RelayerRegistry",
                        "BasicDeposit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8,
                            105u8, 200u8, 214u8, 27u8, 144u8, 208u8, 218u8,
                            160u8, 130u8, 109u8, 101u8, 54u8, 210u8, 136u8,
                            71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8,
                            148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The amount held on deposit per additional field for a registered identity."]
                pub fn field_deposit(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<
                        ::core::primitive::u128,
                    >,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "RelayerRegistry",
                        "FieldDeposit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8,
                            105u8, 200u8, 214u8, 27u8, 144u8, 208u8, 218u8,
                            160u8, 130u8, 109u8, 101u8, 54u8, 210u8, 136u8,
                            71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8,
                            148u8, 156u8,
                        ],
                    )
                }
                #[doc = " Maximum number of additional fields that may be stored in an ID. Needed to bound the I/O"]
                #[doc = " required to access an identity, but can be pretty high."]
                pub fn max_additional_fields(
                    &self,
                ) -> ::subxt::constants::StaticConstantAddress<
                    ::subxt::metadata::DecodeStaticType<::core::primitive::u32>,
                > {
                    ::subxt::constants::StaticConstantAddress::new(
                        "RelayerRegistry",
                        "MaxAdditionalFields",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8,
                            200u8, 157u8, 125u8, 151u8, 53u8, 76u8, 168u8,
                            26u8, 10u8, 9u8, 98u8, 68u8, 9u8, 178u8, 197u8,
                            113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod key_storage {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Register {
                pub owner: ::subxt::ext::sp_core::crypto::AccountId32,
                pub public_key: ::std::vec::Vec<::core::primitive::u8>,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                pub fn register(
                    &self,
                    owner: ::subxt::ext::sp_core::crypto::AccountId32,
                    public_key: ::std::vec::Vec<::core::primitive::u8>,
                ) -> ::subxt::tx::StaticTxPayload<Register> {
                    ::subxt::tx::StaticTxPayload::new(
                        "KeyStorage",
                        "register",
                        Register { owner, public_key },
                        [
                            48u8, 161u8, 133u8, 219u8, 159u8, 38u8, 12u8, 73u8,
                            85u8, 136u8, 175u8, 228u8, 201u8, 156u8, 166u8,
                            209u8, 39u8, 179u8, 108u8, 95u8, 252u8, 127u8,
                            119u8, 73u8, 162u8, 31u8, 176u8, 229u8, 234u8,
                            129u8, 195u8, 79u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_key_storage::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            #[doc = "Public key registration"]
            pub struct PublicKeyRegistration {
                pub owner: ::subxt::ext::sp_core::crypto::AccountId32,
                pub public_key: ::std::vec::Vec<::core::primitive::u8>,
            }
            impl ::subxt::events::StaticEvent for PublicKeyRegistration {
                const PALLET: &'static str = "KeyStorage";
                const EVENT: &'static str = "PublicKeyRegistration";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The map of owners to public keys"]                pub fn public_key_owners (& self ,) -> :: subxt :: storage :: address :: StaticStorageAddress :: < :: subxt :: metadata :: DecodeStaticType < :: std :: vec :: Vec < (:: subxt :: ext :: sp_core :: crypto :: AccountId32 , :: std :: vec :: Vec < :: core :: primitive :: u8 > ,) > > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , () >{
                    ::subxt::storage::address::StaticStorageAddress::new(
                        "KeyStorage",
                        "PublicKeyOwners",
                        vec![],
                        [
                            20u8, 153u8, 230u8, 46u8, 160u8, 79u8, 26u8, 120u8,
                            79u8, 202u8, 0u8, 91u8, 76u8, 88u8, 45u8, 105u8,
                            31u8, 182u8, 235u8, 223u8, 49u8, 135u8, 31u8,
                            251u8, 249u8, 51u8, 239u8, 255u8, 204u8, 22u8,
                            244u8, 34u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod runtime_types {
        use super::runtime_types;
        pub mod finality_grandpa {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Equivocation<_0, _1, _2> {
                pub round_number: ::core::primitive::u64,
                pub identity: _0,
                pub first: (_1, _2),
                pub second: (_1, _2),
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Precommit<_0, _1> {
                pub target_hash: _0,
                pub target_number: _1,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Prevote<_0, _1> {
                pub target_hash: _0,
                pub target_number: _1,
            }
        }
        pub mod frame_support {
            use super::runtime_types;
            pub mod dispatch {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                pub enum RawOrigin<_0> {
                    #[codec(index = 0)]
                    Root,
                    #[codec(index = 1)]
                    Signed(_0),
                    #[codec(index = 2)]
                    None,
                }
            }
            pub mod traits {
                use super::runtime_types;
                pub mod misc {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        Clone,
                        Debug,
                        Eq,
                        PartialEq,
                    )]
                    pub struct WrapperKeepOpaque<_0>(
                        #[codec(compact)] pub ::core::primitive::u32,
                        pub _0,
                    );
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        Clone,
                        Debug,
                        Eq,
                        PartialEq,
                    )]
                    pub struct WrapperOpaque<_0>(
                        #[codec(compact)] pub ::core::primitive::u32,
                        pub _0,
                    );
                }
                pub mod schedule {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        Clone,
                        Debug,
                        Eq,
                        PartialEq,
                    )]
                    pub enum LookupError {
                        #[codec(index = 0)]
                        Unknown,
                        #[codec(index = 1)]
                        BadFormat,
                    }
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        Clone,
                        Debug,
                        Eq,
                        PartialEq,
                    )]
                    pub enum MaybeHashed<_0, _1> {
                        #[codec(index = 0)]
                        Value(_0),
                        #[codec(index = 1)]
                        Hash(_1),
                    }
                }
                pub mod tokens {
                    use super::runtime_types;
                    pub mod misc {
                        use super::runtime_types;
                        #[derive(
                            :: subxt :: ext :: codec :: Decode,
                            :: subxt :: ext :: codec :: Encode,
                            Clone,
                            Debug,
                            Eq,
                            PartialEq,
                        )]
                        pub enum BalanceStatus {
                            #[codec(index = 0)]
                            Free,
                            #[codec(index = 1)]
                            Reserved,
                        }
                    }
                }
            }
            pub mod weights {
                use super::runtime_types;
                pub mod weight_v2 {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: CompactAs,
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        Clone,
                        Debug,
                        Eq,
                        PartialEq,
                    )]
                    pub struct Weight {
                        pub ref_time: ::core::primitive::u64,
                    }
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                pub enum DispatchClass {
                    #[codec(index = 0)]
                    Normal,
                    #[codec(index = 1)]
                    Operational,
                    #[codec(index = 2)]
                    Mandatory,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                pub struct DispatchInfo { pub weight : runtime_types :: frame_support :: weights :: weight_v2 :: Weight , pub class : runtime_types :: frame_support :: weights :: DispatchClass , pub pays_fee : runtime_types :: frame_support :: weights :: Pays , }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                pub enum Pays {
                    #[codec(index = 0)]
                    Yes,
                    #[codec(index = 1)]
                    No,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                pub struct PerDispatchClass<_0> {
                    pub normal: _0,
                    pub operational: _0,
                    pub mandatory: _0,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                pub struct RuntimeDbWeight {
                    pub read: ::core::primitive::u64,
                    pub write: ::core::primitive::u64,
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct PalletId(pub [::core::primitive::u8; 8usize]);
        }
        pub mod frame_system {
            use super::runtime_types;
            pub mod extensions {
                use super::runtime_types;
                pub mod check_genesis {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        Clone,
                        Debug,
                        Eq,
                        PartialEq,
                    )]
                    pub struct CheckGenesis;
                }
                pub mod check_mortality {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        Clone,
                        Debug,
                        Eq,
                        PartialEq,
                    )]
                    pub struct CheckMortality(
                        pub runtime_types::sp_runtime::generic::era::Era,
                    );
                }
                pub mod check_non_zero_sender {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        Clone,
                        Debug,
                        Eq,
                        PartialEq,
                    )]
                    pub struct CheckNonZeroSender;
                }
                pub mod check_nonce {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        Clone,
                        Debug,
                        Eq,
                        PartialEq,
                    )]
                    pub struct CheckNonce(
                        #[codec(compact)] pub ::core::primitive::u32,
                    );
                }
                pub mod check_spec_version {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        Clone,
                        Debug,
                        Eq,
                        PartialEq,
                    )]
                    pub struct CheckSpecVersion;
                }
                pub mod check_tx_version {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        Clone,
                        Debug,
                        Eq,
                        PartialEq,
                    )]
                    pub struct CheckTxVersion;
                }
                pub mod check_weight {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        Clone,
                        Debug,
                        Eq,
                        PartialEq,
                    )]
                    pub struct CheckWeight;
                }
            }
            pub mod limits {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                pub struct BlockLength {
                    pub max:
                        runtime_types::frame_support::weights::PerDispatchClass<
                            ::core::primitive::u32,
                        >,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                pub struct BlockWeights { pub base_block : runtime_types :: frame_support :: weights :: weight_v2 :: Weight , pub max_block : runtime_types :: frame_support :: weights :: weight_v2 :: Weight , pub per_class : runtime_types :: frame_support :: weights :: PerDispatchClass < runtime_types :: frame_system :: limits :: WeightsPerClass > , }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                pub struct WeightsPerClass { pub base_extrinsic : runtime_types :: frame_support :: weights :: weight_v2 :: Weight , pub max_extrinsic : :: core :: option :: Option < runtime_types :: frame_support :: weights :: weight_v2 :: Weight > , pub max_total : :: core :: option :: Option < runtime_types :: frame_support :: weights :: weight_v2 :: Weight > , pub reserved : :: core :: option :: Option < runtime_types :: frame_support :: weights :: weight_v2 :: Weight > , }
            }
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "A dispatch that will fill the block weight up to the given ratio."]
                    fill_block {
                        ratio:
                            runtime_types::sp_arithmetic::per_things::Perbill,
                    },
                    #[codec(index = 1)]
                    #[doc = "Make some on-chain remark."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- `O(1)`"]
                    #[doc = "# </weight>"]
                    remark {
                        remark: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 2)]
                    #[doc = "Set the number of pages in the WebAssembly environment's heap."]
                    set_heap_pages { pages: ::core::primitive::u64 },
                    #[codec(index = 3)]
                    #[doc = "Set the new runtime code."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- `O(C + S)` where `C` length of `code` and `S` complexity of `can_set_code`"]
                    #[doc = "- 1 call to `can_set_code`: `O(S)` (calls `sp_io::misc::runtime_version` which is"]
                    #[doc = "  expensive)."]
                    #[doc = "- 1 storage write (codec `O(C)`)."]
                    #[doc = "- 1 digest item."]
                    #[doc = "- 1 event."]
                    #[doc = "The weight of this function is dependent on the runtime, but generally this is very"]
                    #[doc = "expensive. We will treat this as a full block."]
                    #[doc = "# </weight>"]
                    set_code {
                        code: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 4)]
                    #[doc = "Set the new runtime code without doing any checks of the given `code`."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- `O(C)` where `C` length of `code`"]
                    #[doc = "- 1 storage write (codec `O(C)`)."]
                    #[doc = "- 1 digest item."]
                    #[doc = "- 1 event."]
                    #[doc = "The weight of this function is dependent on the runtime. We will treat this as a full"]
                    #[doc = "block. # </weight>"]
                    set_code_without_checks {
                        code: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 5)]
                    #[doc = "Set some items of storage."]
                    set_storage {
                        items: ::std::vec::Vec<(
                            ::std::vec::Vec<::core::primitive::u8>,
                            ::std::vec::Vec<::core::primitive::u8>,
                        )>,
                    },
                    #[codec(index = 6)]
                    #[doc = "Kill some items from storage."]
                    kill_storage {
                        keys: ::std::vec::Vec<
                            ::std::vec::Vec<::core::primitive::u8>,
                        >,
                    },
                    #[codec(index = 7)]
                    #[doc = "Kill all storage items with a key that starts with the given prefix."]
                    #[doc = ""]
                    #[doc = "**NOTE:** We rely on the Root origin to provide us the number of subkeys under"]
                    #[doc = "the prefix we are removing to accurately calculate the weight of this function."]
                    kill_prefix {
                        prefix: ::std::vec::Vec<::core::primitive::u8>,
                        subkeys: ::core::primitive::u32,
                    },
                    #[codec(index = 8)]
                    #[doc = "Make some on-chain remark and emit event."]
                    remark_with_event {
                        remark: ::std::vec::Vec<::core::primitive::u8>,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "Error for the System pallet"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "The name of specification does not match between the current runtime"]
                    #[doc = "and the new runtime."]
                    InvalidSpecName,
                    #[codec(index = 1)]
                    #[doc = "The specification version is not allowed to decrease between the current runtime"]
                    #[doc = "and the new runtime."]
                    SpecVersionNeedsToIncrease,
                    #[codec(index = 2)]
                    #[doc = "Failed to extract the runtime version from the new runtime."]
                    #[doc = ""]
                    #[doc = "Either calling `Core_version` or decoding `RuntimeVersion` failed."]
                    FailedToExtractRuntimeVersion,
                    #[codec(index = 3)]
                    #[doc = "Suicide called when the account has non-default composite data."]
                    NonDefaultComposite,
                    #[codec(index = 4)]
                    #[doc = "There is a non-zero reference count preventing the account from being purged."]
                    NonZeroRefCount,
                    #[codec(index = 5)]
                    #[doc = "The origin filter prevent the call to be dispatched."]
                    CallFiltered,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "Event for the System pallet."]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "An extrinsic completed successfully."]
                    ExtrinsicSuccess {
                        dispatch_info:
                            runtime_types::frame_support::weights::DispatchInfo,
                    },
                    #[codec(index = 1)]
                    #[doc = "An extrinsic failed."]
                    ExtrinsicFailed {
                        dispatch_error:
                            runtime_types::sp_runtime::DispatchError,
                        dispatch_info:
                            runtime_types::frame_support::weights::DispatchInfo,
                    },
                    #[codec(index = 2)]
                    #[doc = "`:code` was updated."]
                    CodeUpdated,
                    #[codec(index = 3)]
                    #[doc = "A new account was created."]
                    NewAccount {
                        account: ::subxt::ext::sp_core::crypto::AccountId32,
                    },
                    #[codec(index = 4)]
                    #[doc = "An account was reaped."]
                    KilledAccount {
                        account: ::subxt::ext::sp_core::crypto::AccountId32,
                    },
                    #[codec(index = 5)]
                    #[doc = "On on-chain remark happened."]
                    Remarked {
                        sender: ::subxt::ext::sp_core::crypto::AccountId32,
                        hash: ::subxt::ext::sp_core::H256,
                    },
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct AccountInfo<_0, _1> {
                pub nonce: _0,
                pub consumers: _0,
                pub providers: _0,
                pub sufficients: _0,
                pub data: _1,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct EventRecord<_0, _1> {
                pub phase: runtime_types::frame_system::Phase,
                pub event: _0,
                pub topics: ::std::vec::Vec<_1>,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct LastRuntimeUpgradeInfo {
                #[codec(compact)]
                pub spec_version: ::core::primitive::u32,
                pub spec_name: ::std::string::String,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub enum Phase {
                #[codec(index = 0)]
                ApplyExtrinsic(::core::primitive::u32),
                #[codec(index = 1)]
                Finalization,
                #[codec(index = 2)]
                Initialization,
            }
        }
        pub mod orml_currencies {
            use super::runtime_types;
            pub mod module {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Transfer some balance to another account under `currency_id`."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be `Signed` by the"]
                    #[doc = "transactor."]
                    transfer {
                        dest: ::subxt::ext::sp_runtime::MultiAddress<
                            ::subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        currency_id: ::core::primitive::u32,
                        #[codec(compact)]
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 1)]
                    #[doc = "Transfer some native currency to another account."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be `Signed` by the"]
                    #[doc = "transactor."]
                    transfer_native_currency {
                        dest: ::subxt::ext::sp_runtime::MultiAddress<
                            ::subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        #[codec(compact)]
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 2)]
                    #[doc = "update amount of account `who` under `currency_id`."]
                    #[doc = ""]
                    #[doc = "The dispatch origin of this call must be _Root_."]
                    update_balance {
                        who: ::subxt::ext::sp_runtime::MultiAddress<
                            ::subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        currency_id: ::core::primitive::u32,
                        amount: ::core::primitive::i128,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Unable to convert the Amount type into Balance."]
                    AmountIntoBalanceFailed,
                    #[codec(index = 1)]
                    #[doc = "Balance is too low."]
                    BalanceTooLow,
                    #[codec(index = 2)]
                    #[doc = "Deposit result is not expected"]
                    DepositFailed,
                }
            }
        }
        pub mod orml_tokens {
            use super::runtime_types;
            pub mod module {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Transfer some liquid free balance to another account."]
                    #[doc = ""]
                    #[doc = "`transfer` will set the `FreeBalance` of the sender and receiver."]
                    #[doc = "It will decrease the total issuance of the system by the"]
                    #[doc = "`TransferFee`. If the sender's account is below the existential"]
                    #[doc = "deposit as a result of the transfer, the account will be reaped."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be `Signed` by the"]
                    #[doc = "transactor."]
                    #[doc = ""]
                    #[doc = "- `dest`: The recipient of the transfer."]
                    #[doc = "- `currency_id`: currency type."]
                    #[doc = "- `amount`: free balance amount to tranfer."]
                    transfer {
                        dest: ::subxt::ext::sp_runtime::MultiAddress<
                            ::subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        currency_id: ::core::primitive::u32,
                        #[codec(compact)]
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 1)]
                    #[doc = "Transfer all remaining balance to the given account."]
                    #[doc = ""]
                    #[doc = "NOTE: This function only attempts to transfer _transferable_"]
                    #[doc = "balances. This means that any locked, reserved, or existential"]
                    #[doc = "deposits (when `keep_alive` is `true`), will not be transferred by"]
                    #[doc = "this function. To ensure that this function results in a killed"]
                    #[doc = "account, you might need to prepare the account by removing any"]
                    #[doc = "reference counters, storage deposits, etc..."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be `Signed` by the"]
                    #[doc = "transactor."]
                    #[doc = ""]
                    #[doc = "- `dest`: The recipient of the transfer."]
                    #[doc = "- `currency_id`: currency type."]
                    #[doc = "- `keep_alive`: A boolean to determine if the `transfer_all`"]
                    #[doc = "  operation should send all of the funds the account has, causing"]
                    #[doc = "  the sender account to be killed (false), or transfer everything"]
                    #[doc = "  except at least the existential deposit, which will guarantee to"]
                    #[doc = "  keep the sender account alive (true)."]
                    transfer_all {
                        dest: ::subxt::ext::sp_runtime::MultiAddress<
                            ::subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        currency_id: ::core::primitive::u32,
                        keep_alive: ::core::primitive::bool,
                    },
                    #[codec(index = 2)]
                    #[doc = "Same as the [`transfer`] call, but with a check that the transfer"]
                    #[doc = "will not kill the origin account."]
                    #[doc = ""]
                    #[doc = "99% of the time you want [`transfer`] instead."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be `Signed` by the"]
                    #[doc = "transactor."]
                    #[doc = ""]
                    #[doc = "- `dest`: The recipient of the transfer."]
                    #[doc = "- `currency_id`: currency type."]
                    #[doc = "- `amount`: free balance amount to tranfer."]
                    transfer_keep_alive {
                        dest: ::subxt::ext::sp_runtime::MultiAddress<
                            ::subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        currency_id: ::core::primitive::u32,
                        #[codec(compact)]
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 3)]
                    #[doc = "Exactly as `transfer`, except the origin must be root and the source"]
                    #[doc = "account may be specified."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Root_."]
                    #[doc = ""]
                    #[doc = "- `source`: The sender of the transfer."]
                    #[doc = "- `dest`: The recipient of the transfer."]
                    #[doc = "- `currency_id`: currency type."]
                    #[doc = "- `amount`: free balance amount to tranfer."]
                    force_transfer {
                        source: ::subxt::ext::sp_runtime::MultiAddress<
                            ::subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        dest: ::subxt::ext::sp_runtime::MultiAddress<
                            ::subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        currency_id: ::core::primitive::u32,
                        #[codec(compact)]
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 4)]
                    #[doc = "Set the balances of a given account."]
                    #[doc = ""]
                    #[doc = "This will alter `FreeBalance` and `ReservedBalance` in storage. it"]
                    #[doc = "will also decrease the total issuance of the system"]
                    #[doc = "(`TotalIssuance`). If the new free or reserved balance is below the"]
                    #[doc = "existential deposit, it will reap the `AccountInfo`."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call is `root`."]
                    set_balance {
                        who: ::subxt::ext::sp_runtime::MultiAddress<
                            ::subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        currency_id: ::core::primitive::u32,
                        #[codec(compact)]
                        new_free: ::core::primitive::u128,
                        #[codec(compact)]
                        new_reserved: ::core::primitive::u128,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "The balance is too low"]
                    BalanceTooLow,
                    #[codec(index = 1)]
                    #[doc = "Cannot convert Amount into Balance type"]
                    AmountIntoBalanceFailed,
                    #[codec(index = 2)]
                    #[doc = "Failed because liquidity restrictions due to locking"]
                    LiquidityRestrictions,
                    #[codec(index = 3)]
                    #[doc = "Failed because the maximum locks was exceeded"]
                    MaxLocksExceeded,
                    #[codec(index = 4)]
                    #[doc = "Transfer/payment would kill account"]
                    KeepAlive,
                    #[codec(index = 5)]
                    #[doc = "Value too low to create account due to existential deposit"]
                    ExistentialDeposit,
                    #[codec(index = 6)]
                    #[doc = "Beneficiary account must pre-exist"]
                    DeadAccount,
                    #[codec(index = 7)]
                    TooManyReserves,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    # [codec (index = 0)] # [doc = "An account was created with some free balance."] Endowed { currency_id : :: core :: primitive :: u32 , who : :: subxt :: ext :: sp_core :: crypto :: AccountId32 , amount : :: core :: primitive :: u128 , } , # [codec (index = 1)] # [doc = "An account was removed whose balance was non-zero but below"] # [doc = "ExistentialDeposit, resulting in an outright loss."] DustLost { currency_id : :: core :: primitive :: u32 , who : :: subxt :: ext :: sp_core :: crypto :: AccountId32 , amount : :: core :: primitive :: u128 , } , # [codec (index = 2)] # [doc = "Transfer succeeded."] Transfer { currency_id : :: core :: primitive :: u32 , from : :: subxt :: ext :: sp_core :: crypto :: AccountId32 , to : :: subxt :: ext :: sp_core :: crypto :: AccountId32 , amount : :: core :: primitive :: u128 , } , # [codec (index = 3)] # [doc = "Some balance was reserved (moved from free to reserved)."] Reserved { currency_id : :: core :: primitive :: u32 , who : :: subxt :: ext :: sp_core :: crypto :: AccountId32 , amount : :: core :: primitive :: u128 , } , # [codec (index = 4)] # [doc = "Some balance was unreserved (moved from reserved to free)."] Unreserved { currency_id : :: core :: primitive :: u32 , who : :: subxt :: ext :: sp_core :: crypto :: AccountId32 , amount : :: core :: primitive :: u128 , } , # [codec (index = 5)] # [doc = "Some reserved balance was repatriated (moved from reserved to"] # [doc = "another account)."] ReserveRepatriated { currency_id : :: core :: primitive :: u32 , from : :: subxt :: ext :: sp_core :: crypto :: AccountId32 , to : :: subxt :: ext :: sp_core :: crypto :: AccountId32 , amount : :: core :: primitive :: u128 , status : runtime_types :: frame_support :: traits :: tokens :: misc :: BalanceStatus , } , # [codec (index = 6)] # [doc = "A balance was set by root."] BalanceSet { currency_id : :: core :: primitive :: u32 , who : :: subxt :: ext :: sp_core :: crypto :: AccountId32 , free : :: core :: primitive :: u128 , reserved : :: core :: primitive :: u128 , } , # [codec (index = 7)] # [doc = "The total issuance of an currency has been set"] TotalIssuanceSet { currency_id : :: core :: primitive :: u32 , amount : :: core :: primitive :: u128 , } , # [codec (index = 8)] # [doc = "Some balances were withdrawn (e.g. pay for transaction fee)"] Withdrawn { currency_id : :: core :: primitive :: u32 , who : :: subxt :: ext :: sp_core :: crypto :: AccountId32 , amount : :: core :: primitive :: u128 , } , # [codec (index = 9)] # [doc = "Some balances were slashed (e.g. due to mis-behavior)"] Slashed { currency_id : :: core :: primitive :: u32 , who : :: subxt :: ext :: sp_core :: crypto :: AccountId32 , free_amount : :: core :: primitive :: u128 , reserved_amount : :: core :: primitive :: u128 , } , # [codec (index = 10)] # [doc = "Deposited some balance into an account"] Deposited { currency_id : :: core :: primitive :: u32 , who : :: subxt :: ext :: sp_core :: crypto :: AccountId32 , amount : :: core :: primitive :: u128 , } , # [codec (index = 11)] # [doc = "Some funds are locked"] LockSet { lock_id : [:: core :: primitive :: u8 ; 8usize] , currency_id : :: core :: primitive :: u32 , who : :: subxt :: ext :: sp_core :: crypto :: AccountId32 , amount : :: core :: primitive :: u128 , } , # [codec (index = 12)] # [doc = "Some locked funds were unlocked"] LockRemoved { lock_id : [:: core :: primitive :: u8 ; 8usize] , currency_id : :: core :: primitive :: u32 , who : :: subxt :: ext :: sp_core :: crypto :: AccountId32 , } , }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct AccountData<_0> {
                pub free: _0,
                pub reserved: _0,
                pub frozen: _0,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct BalanceLock<_0> {
                pub id: [::core::primitive::u8; 8usize],
                pub amount: _0,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct ReserveData<_0, _1> {
                pub id: _0,
                pub amount: _1,
            }
        }
        pub mod pallet_asset_registry {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    # [codec (index = 0)] # [doc = "Register a new asset."] # [doc = ""] # [doc = "Asset is identified by `name` and the name must not be used to"] # [doc = "register another asset."] # [doc = ""] # [doc = "New asset is given `NextAssetId` - sequential asset id"] # [doc = ""] # [doc = "Adds mapping between `name` and assigned `asset_id` so asset id can"] # [doc = "be retrieved by name too (Note: this approach is used in AMM"] # [doc = "implementation (xyk))"] # [doc = ""] # [doc = "Emits 'Registered` event when successful."] register { name : :: std :: vec :: Vec < :: core :: primitive :: u8 > , asset_type : runtime_types :: pallet_asset_registry :: types :: AssetType < :: core :: primitive :: u32 > , existential_deposit : :: core :: primitive :: u128 , } , # [codec (index = 1)] # [doc = "Update registered asset."] # [doc = ""] # [doc = "Updates also mapping between name and asset id if provided name is"] # [doc = "different than currently registered."] # [doc = ""] # [doc = "Emits `Updated` event when successful."] update { asset_id : :: core :: primitive :: u32 , name : :: std :: vec :: Vec < :: core :: primitive :: u8 > , asset_type : runtime_types :: pallet_asset_registry :: types :: AssetType < :: core :: primitive :: u32 > , existential_deposit : :: core :: option :: Option < :: core :: primitive :: u128 > , } , # [codec (index = 2)] # [doc = "Set metadata for an asset."] # [doc = ""] # [doc = "- `asset_id`: Asset identifier."] # [doc = "- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`."] # [doc = "- `decimals`: The number of decimals this asset uses to represent one unit."] # [doc = ""] # [doc = "Emits `MetadataSet` event when successful."] set_metadata { asset_id : :: core :: primitive :: u32 , symbol : :: std :: vec :: Vec < :: core :: primitive :: u8 > , decimals : :: core :: primitive :: u8 , } , # [codec (index = 3)] # [doc = "Set asset native location."] # [doc = ""] # [doc = "Adds mapping between native location and local asset id and vice"] # [doc = "versa."] # [doc = ""] # [doc = "Mainly used in XCM."] # [doc = ""] # [doc = "Emits `LocationSet` event when successful."] set_location { asset_id : :: core :: primitive :: u32 , location : :: core :: primitive :: u32 , } , # [codec (index = 4)] # [doc = "Add an asset to an existing pool."] add_asset_to_pool { pool : :: std :: vec :: Vec < :: core :: primitive :: u8 > , asset_id : :: core :: primitive :: u32 , } , # [codec (index = 5)] # [doc = "Remove an asset from an existing pool."] delete_asset_from_pool { pool : :: std :: vec :: Vec < :: core :: primitive :: u8 > , asset_id : :: core :: primitive :: u32 , } , }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Asset Id is not available. This only happens when it reaches the MAX"]
                    #[doc = "value of given id type."]
                    NoIdAvailable,
                    #[codec(index = 1)]
                    #[doc = "Invalid asset name or symbol."]
                    AssetNotFound,
                    #[codec(index = 2)]
                    #[doc = "Invalid asset name or symbol."]
                    TooLong,
                    #[codec(index = 3)]
                    #[doc = "Asset ID is not registered in the asset-registry."]
                    AssetNotRegistered,
                    #[codec(index = 4)]
                    #[doc = "Asset is already registered."]
                    AssetAlreadyRegistered,
                    #[codec(index = 5)]
                    #[doc = "Incorrect number of assets provided to create shared asset."]
                    InvalidSharedAssetLen,
                    #[codec(index = 6)]
                    #[doc = "Asset exists in to pool"]
                    AssetExistsInPool,
                    #[codec(index = 7)]
                    #[doc = "Asset not found in pool"]
                    AssetNotFoundInPool,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    # [codec (index = 0)] # [doc = "Asset was registered."] Registered { asset_id : :: core :: primitive :: u32 , name : runtime_types :: sp_runtime :: bounded :: bounded_vec :: BoundedVec < :: core :: primitive :: u8 > , asset_type : runtime_types :: pallet_asset_registry :: types :: AssetType < :: core :: primitive :: u32 > , } , # [codec (index = 1)] # [doc = "Asset was updated."] Updated { asset_id : :: core :: primitive :: u32 , name : runtime_types :: sp_runtime :: bounded :: bounded_vec :: BoundedVec < :: core :: primitive :: u8 > , asset_type : runtime_types :: pallet_asset_registry :: types :: AssetType < :: core :: primitive :: u32 > , } , # [codec (index = 2)] # [doc = "Metadata set for an asset."] MetadataSet { asset_id : :: core :: primitive :: u32 , symbol : runtime_types :: sp_runtime :: bounded :: bounded_vec :: BoundedVec < :: core :: primitive :: u8 > , decimals : :: core :: primitive :: u8 , } , # [codec (index = 3)] # [doc = "Native location set for an asset."] LocationSet { asset_id : :: core :: primitive :: u32 , location : :: core :: primitive :: u32 , } , }
            }
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                pub struct AssetDetails<_0, _1, _2> {
                    pub name: _2,
                    pub asset_type:
                        runtime_types::pallet_asset_registry::types::AssetType<
                            _0,
                        >,
                    pub existential_deposit: _1,
                    pub locked: ::core::primitive::bool,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                pub struct AssetMetadata<_0> {
                    pub symbol: _0,
                    pub decimals: ::core::primitive::u8,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                pub enum AssetType<_0> {
                    #[codec(index = 0)]
                    Token,
                    #[codec(index = 1)]
                    PoolShare(::std::vec::Vec<_0>),
                }
            }
        }
        pub mod pallet_asset_tx_payment {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,"]
                    #[doc = "has been paid by `who` in an asset `asset_id`."]
                    AssetTxFeePaid {
                        who: ::subxt::ext::sp_core::crypto::AccountId32,
                        actual_fee: ::core::primitive::u128,
                        tip: ::core::primitive::u128,
                        asset_id:
                            ::core::option::Option<::core::primitive::u32>,
                    },
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct ChargeAssetTxPayment {
                #[codec(compact)]
                pub tip: ::core::primitive::u128,
                pub asset_id: ::core::option::Option<::core::primitive::u32>,
            }
        }
        pub mod pallet_assets {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Issue a new class of fungible assets from a public origin."]
                    #[doc = ""]
                    #[doc = "This new asset class has no assets initially and its owner is the origin."]
                    #[doc = ""]
                    #[doc = "The origin must be Signed and the sender must have sufficient funds free."]
                    #[doc = ""]
                    #[doc = "Funds of sender are reserved by `AssetDeposit`."]
                    #[doc = ""]
                    #[doc = "Parameters:"]
                    #[doc = "- `id`: The identifier of the new asset. This must not be currently in use to identify"]
                    #[doc = "an existing asset."]
                    #[doc = "- `admin`: The admin of this class of assets. The admin is the initial address of each"]
                    #[doc = "member of the asset class's admin team."]
                    #[doc = "- `min_balance`: The minimum balance of this new asset that any single account must"]
                    #[doc = "have. If an account's balance is reduced below this, then it collapses to zero."]
                    #[doc = ""]
                    #[doc = "Emits `Created` event when successful."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    create {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                        admin: ::subxt::ext::sp_runtime::MultiAddress<
                            ::subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        min_balance: ::core::primitive::u128,
                    },
                    #[codec(index = 1)]
                    #[doc = "Issue a new class of fungible assets from a privileged origin."]
                    #[doc = ""]
                    #[doc = "This new asset class has no assets initially."]
                    #[doc = ""]
                    #[doc = "The origin must conform to `ForceOrigin`."]
                    #[doc = ""]
                    #[doc = "Unlike `create`, no funds are reserved."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the new asset. This must not be currently in use to identify"]
                    #[doc = "an existing asset."]
                    #[doc = "- `owner`: The owner of this class of assets. The owner has full superuser permissions"]
                    #[doc = "over this asset, but may later change and configure the permissions using"]
                    #[doc = "`transfer_ownership` and `set_team`."]
                    #[doc = "- `min_balance`: The minimum balance of this new asset that any single account must"]
                    #[doc = "have. If an account's balance is reduced below this, then it collapses to zero."]
                    #[doc = ""]
                    #[doc = "Emits `ForceCreated` event when successful."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    force_create {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                        owner: ::subxt::ext::sp_runtime::MultiAddress<
                            ::subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        is_sufficient: ::core::primitive::bool,
                        #[codec(compact)]
                        min_balance: ::core::primitive::u128,
                    },
                    #[codec(index = 2)]
                    #[doc = "Destroy a class of fungible assets."]
                    #[doc = ""]
                    #[doc = "The origin must conform to `ForceOrigin` or must be Signed and the sender must be the"]
                    #[doc = "owner of the asset `id`."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the asset to be destroyed. This must identify an existing"]
                    #[doc = "asset."]
                    #[doc = ""]
                    #[doc = "Emits `Destroyed` event when successful."]
                    #[doc = ""]
                    #[doc = "NOTE: It can be helpful to first freeze an asset before destroying it so that you"]
                    #[doc = "can provide accurate witness information and prevent users from manipulating state"]
                    #[doc = "in a way that can make it harder to destroy."]
                    #[doc = ""]
                    #[doc = "Weight: `O(c + p + a)` where:"]
                    #[doc = "- `c = (witness.accounts - witness.sufficients)`"]
                    #[doc = "- `s = witness.sufficients`"]
                    #[doc = "- `a = witness.approvals`"]
                    destroy {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                        witness:
                            runtime_types::pallet_assets::types::DestroyWitness,
                    },
                    #[codec(index = 3)]
                    #[doc = "Mint assets of a particular class."]
                    #[doc = ""]
                    #[doc = "The origin must be Signed and the sender must be the Issuer of the asset `id`."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the asset to have some amount minted."]
                    #[doc = "- `beneficiary`: The account to be credited with the minted assets."]
                    #[doc = "- `amount`: The amount of the asset to be minted."]
                    #[doc = ""]
                    #[doc = "Emits `Issued` event when successful."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    #[doc = "Modes: Pre-existing balance of `beneficiary`; Account pre-existence of `beneficiary`."]
                    mint {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                        beneficiary: ::subxt::ext::sp_runtime::MultiAddress<
                            ::subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        #[codec(compact)]
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 4)]
                    #[doc = "Reduce the balance of `who` by as much as possible up to `amount` assets of `id`."]
                    #[doc = ""]
                    #[doc = "Origin must be Signed and the sender should be the Manager of the asset `id`."]
                    #[doc = ""]
                    #[doc = "Bails with `NoAccount` if the `who` is already dead."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the asset to have some amount burned."]
                    #[doc = "- `who`: The account to be debited from."]
                    #[doc = "- `amount`: The maximum amount by which `who`'s balance should be reduced."]
                    #[doc = ""]
                    #[doc = "Emits `Burned` with the actual amount burned. If this takes the balance to below the"]
                    #[doc = "minimum for the asset, then the amount burned is increased to take it to zero."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    #[doc = "Modes: Post-existence of `who`; Pre & post Zombie-status of `who`."]
                    burn {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                        who: ::subxt::ext::sp_runtime::MultiAddress<
                            ::subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        #[codec(compact)]
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 5)]
                    #[doc = "Move some assets from the sender account to another."]
                    #[doc = ""]
                    #[doc = "Origin must be Signed."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the asset to have some amount transferred."]
                    #[doc = "- `target`: The account to be credited."]
                    #[doc = "- `amount`: The amount by which the sender's balance of assets should be reduced and"]
                    #[doc = "`target`'s balance increased. The amount actually transferred may be slightly greater in"]
                    #[doc = "the case that the transfer would otherwise take the sender balance above zero but below"]
                    #[doc = "the minimum balance. Must be greater than zero."]
                    #[doc = ""]
                    #[doc = "Emits `Transferred` with the actual amount transferred. If this takes the source balance"]
                    #[doc = "to below the minimum for the asset, then the amount transferred is increased to take it"]
                    #[doc = "to zero."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    #[doc = "Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of"]
                    #[doc = "`target`."]
                    transfer {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                        target: ::subxt::ext::sp_runtime::MultiAddress<
                            ::subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        #[codec(compact)]
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 6)]
                    #[doc = "Move some assets from the sender account to another, keeping the sender account alive."]
                    #[doc = ""]
                    #[doc = "Origin must be Signed."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the asset to have some amount transferred."]
                    #[doc = "- `target`: The account to be credited."]
                    #[doc = "- `amount`: The amount by which the sender's balance of assets should be reduced and"]
                    #[doc = "`target`'s balance increased. The amount actually transferred may be slightly greater in"]
                    #[doc = "the case that the transfer would otherwise take the sender balance above zero but below"]
                    #[doc = "the minimum balance. Must be greater than zero."]
                    #[doc = ""]
                    #[doc = "Emits `Transferred` with the actual amount transferred. If this takes the source balance"]
                    #[doc = "to below the minimum for the asset, then the amount transferred is increased to take it"]
                    #[doc = "to zero."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    #[doc = "Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of"]
                    #[doc = "`target`."]
                    transfer_keep_alive {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                        target: ::subxt::ext::sp_runtime::MultiAddress<
                            ::subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        #[codec(compact)]
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 7)]
                    #[doc = "Move some assets from one account to another."]
                    #[doc = ""]
                    #[doc = "Origin must be Signed and the sender should be the Admin of the asset `id`."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the asset to have some amount transferred."]
                    #[doc = "- `source`: The account to be debited."]
                    #[doc = "- `dest`: The account to be credited."]
                    #[doc = "- `amount`: The amount by which the `source`'s balance of assets should be reduced and"]
                    #[doc = "`dest`'s balance increased. The amount actually transferred may be slightly greater in"]
                    #[doc = "the case that the transfer would otherwise take the `source` balance above zero but"]
                    #[doc = "below the minimum balance. Must be greater than zero."]
                    #[doc = ""]
                    #[doc = "Emits `Transferred` with the actual amount transferred. If this takes the source balance"]
                    #[doc = "to below the minimum for the asset, then the amount transferred is increased to take it"]
                    #[doc = "to zero."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    #[doc = "Modes: Pre-existence of `dest`; Post-existence of `source`; Account pre-existence of"]
                    #[doc = "`dest`."]
                    force_transfer {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                        source: ::subxt::ext::sp_runtime::MultiAddress<
                            ::subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        dest: ::subxt::ext::sp_runtime::MultiAddress<
                            ::subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        #[codec(compact)]
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 8)]
                    #[doc = "Disallow further unprivileged transfers from an account."]
                    #[doc = ""]
                    #[doc = "Origin must be Signed and the sender should be the Freezer of the asset `id`."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the asset to be frozen."]
                    #[doc = "- `who`: The account to be frozen."]
                    #[doc = ""]
                    #[doc = "Emits `Frozen`."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    freeze {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                        who: ::subxt::ext::sp_runtime::MultiAddress<
                            ::subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 9)]
                    #[doc = "Allow unprivileged transfers from an account again."]
                    #[doc = ""]
                    #[doc = "Origin must be Signed and the sender should be the Admin of the asset `id`."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the asset to be frozen."]
                    #[doc = "- `who`: The account to be unfrozen."]
                    #[doc = ""]
                    #[doc = "Emits `Thawed`."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    thaw {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                        who: ::subxt::ext::sp_runtime::MultiAddress<
                            ::subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 10)]
                    #[doc = "Disallow further unprivileged transfers for the asset class."]
                    #[doc = ""]
                    #[doc = "Origin must be Signed and the sender should be the Freezer of the asset `id`."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the asset to be frozen."]
                    #[doc = ""]
                    #[doc = "Emits `Frozen`."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    freeze_asset {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                    },
                    #[codec(index = 11)]
                    #[doc = "Allow unprivileged transfers for the asset again."]
                    #[doc = ""]
                    #[doc = "Origin must be Signed and the sender should be the Admin of the asset `id`."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the asset to be thawed."]
                    #[doc = ""]
                    #[doc = "Emits `Thawed`."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    thaw_asset {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                    },
                    #[codec(index = 12)]
                    #[doc = "Change the Owner of an asset."]
                    #[doc = ""]
                    #[doc = "Origin must be Signed and the sender should be the Owner of the asset `id`."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the asset."]
                    #[doc = "- `owner`: The new Owner of this asset."]
                    #[doc = ""]
                    #[doc = "Emits `OwnerChanged`."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    transfer_ownership {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                        owner: ::subxt::ext::sp_runtime::MultiAddress<
                            ::subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 13)]
                    #[doc = "Change the Issuer, Admin and Freezer of an asset."]
                    #[doc = ""]
                    #[doc = "Origin must be Signed and the sender should be the Owner of the asset `id`."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the asset to be frozen."]
                    #[doc = "- `issuer`: The new Issuer of this asset."]
                    #[doc = "- `admin`: The new Admin of this asset."]
                    #[doc = "- `freezer`: The new Freezer of this asset."]
                    #[doc = ""]
                    #[doc = "Emits `TeamChanged`."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    set_team {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                        issuer: ::subxt::ext::sp_runtime::MultiAddress<
                            ::subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        admin: ::subxt::ext::sp_runtime::MultiAddress<
                            ::subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        freezer: ::subxt::ext::sp_runtime::MultiAddress<
                            ::subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 14)]
                    #[doc = "Set the metadata for an asset."]
                    #[doc = ""]
                    #[doc = "Origin must be Signed and the sender should be the Owner of the asset `id`."]
                    #[doc = ""]
                    #[doc = "Funds of sender are reserved according to the formula:"]
                    #[doc = "`MetadataDepositBase + MetadataDepositPerByte * (name.len + symbol.len)` taking into"]
                    #[doc = "account any already reserved funds."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the asset to update."]
                    #[doc = "- `name`: The user friendly name of this asset. Limited in length by `StringLimit`."]
                    #[doc = "- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`."]
                    #[doc = "- `decimals`: The number of decimals this asset uses to represent one unit."]
                    #[doc = ""]
                    #[doc = "Emits `MetadataSet`."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    set_metadata {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                        name: ::std::vec::Vec<::core::primitive::u8>,
                        symbol: ::std::vec::Vec<::core::primitive::u8>,
                        decimals: ::core::primitive::u8,
                    },
                    #[codec(index = 15)]
                    #[doc = "Clear the metadata for an asset."]
                    #[doc = ""]
                    #[doc = "Origin must be Signed and the sender should be the Owner of the asset `id`."]
                    #[doc = ""]
                    #[doc = "Any deposit is freed for the asset owner."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the asset to clear."]
                    #[doc = ""]
                    #[doc = "Emits `MetadataCleared`."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    clear_metadata {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                    },
                    #[codec(index = 16)]
                    #[doc = "Force the metadata for an asset to some value."]
                    #[doc = ""]
                    #[doc = "Origin must be ForceOrigin."]
                    #[doc = ""]
                    #[doc = "Any deposit is left alone."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the asset to update."]
                    #[doc = "- `name`: The user friendly name of this asset. Limited in length by `StringLimit`."]
                    #[doc = "- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`."]
                    #[doc = "- `decimals`: The number of decimals this asset uses to represent one unit."]
                    #[doc = ""]
                    #[doc = "Emits `MetadataSet`."]
                    #[doc = ""]
                    #[doc = "Weight: `O(N + S)` where N and S are the length of the name and symbol respectively."]
                    force_set_metadata {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                        name: ::std::vec::Vec<::core::primitive::u8>,
                        symbol: ::std::vec::Vec<::core::primitive::u8>,
                        decimals: ::core::primitive::u8,
                        is_frozen: ::core::primitive::bool,
                    },
                    #[codec(index = 17)]
                    #[doc = "Clear the metadata for an asset."]
                    #[doc = ""]
                    #[doc = "Origin must be ForceOrigin."]
                    #[doc = ""]
                    #[doc = "Any deposit is returned."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the asset to clear."]
                    #[doc = ""]
                    #[doc = "Emits `MetadataCleared`."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    force_clear_metadata {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                    },
                    #[codec(index = 18)]
                    #[doc = "Alter the attributes of a given asset."]
                    #[doc = ""]
                    #[doc = "Origin must be `ForceOrigin`."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the asset."]
                    #[doc = "- `owner`: The new Owner of this asset."]
                    #[doc = "- `issuer`: The new Issuer of this asset."]
                    #[doc = "- `admin`: The new Admin of this asset."]
                    #[doc = "- `freezer`: The new Freezer of this asset."]
                    #[doc = "- `min_balance`: The minimum balance of this new asset that any single account must"]
                    #[doc = "have. If an account's balance is reduced below this, then it collapses to zero."]
                    #[doc = "- `is_sufficient`: Whether a non-zero balance of this asset is deposit of sufficient"]
                    #[doc = "value to account for the state bloat associated with its balance storage. If set to"]
                    #[doc = "`true`, then non-zero balances may be stored without a `consumer` reference (and thus"]
                    #[doc = "an ED in the Balances pallet or whatever else is used to control user-account state"]
                    #[doc = "growth)."]
                    #[doc = "- `is_frozen`: Whether this asset class is frozen except for permissioned/admin"]
                    #[doc = "instructions."]
                    #[doc = ""]
                    #[doc = "Emits `AssetStatusChanged` with the identity of the asset."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    force_asset_status {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                        owner: ::subxt::ext::sp_runtime::MultiAddress<
                            ::subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        issuer: ::subxt::ext::sp_runtime::MultiAddress<
                            ::subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        admin: ::subxt::ext::sp_runtime::MultiAddress<
                            ::subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        freezer: ::subxt::ext::sp_runtime::MultiAddress<
                            ::subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        #[codec(compact)]
                        min_balance: ::core::primitive::u128,
                        is_sufficient: ::core::primitive::bool,
                        is_frozen: ::core::primitive::bool,
                    },
                    #[codec(index = 19)]
                    #[doc = "Approve an amount of asset for transfer by a delegated third-party account."]
                    #[doc = ""]
                    #[doc = "Origin must be Signed."]
                    #[doc = ""]
                    #[doc = "Ensures that `ApprovalDeposit` worth of `Currency` is reserved from signing account"]
                    #[doc = "for the purpose of holding the approval. If some non-zero amount of assets is already"]
                    #[doc = "approved from signing account to `delegate`, then it is topped up or unreserved to"]
                    #[doc = "meet the right value."]
                    #[doc = ""]
                    #[doc = "NOTE: The signing account does not need to own `amount` of assets at the point of"]
                    #[doc = "making this call."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the asset."]
                    #[doc = "- `delegate`: The account to delegate permission to transfer asset."]
                    #[doc = "- `amount`: The amount of asset that may be transferred by `delegate`. If there is"]
                    #[doc = "already an approval in place, then this acts additively."]
                    #[doc = ""]
                    #[doc = "Emits `ApprovedTransfer` on success."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    approve_transfer {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                        delegate: ::subxt::ext::sp_runtime::MultiAddress<
                            ::subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        #[codec(compact)]
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 20)]
                    #[doc = "Cancel all of some asset approved for delegated transfer by a third-party account."]
                    #[doc = ""]
                    #[doc = "Origin must be Signed and there must be an approval in place between signer and"]
                    #[doc = "`delegate`."]
                    #[doc = ""]
                    #[doc = "Unreserves any deposit previously reserved by `approve_transfer` for the approval."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the asset."]
                    #[doc = "- `delegate`: The account delegated permission to transfer asset."]
                    #[doc = ""]
                    #[doc = "Emits `ApprovalCancelled` on success."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    cancel_approval {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                        delegate: ::subxt::ext::sp_runtime::MultiAddress<
                            ::subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 21)]
                    #[doc = "Cancel all of some asset approved for delegated transfer by a third-party account."]
                    #[doc = ""]
                    #[doc = "Origin must be either ForceOrigin or Signed origin with the signer being the Admin"]
                    #[doc = "account of the asset `id`."]
                    #[doc = ""]
                    #[doc = "Unreserves any deposit previously reserved by `approve_transfer` for the approval."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the asset."]
                    #[doc = "- `delegate`: The account delegated permission to transfer asset."]
                    #[doc = ""]
                    #[doc = "Emits `ApprovalCancelled` on success."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    force_cancel_approval {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                        owner: ::subxt::ext::sp_runtime::MultiAddress<
                            ::subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        delegate: ::subxt::ext::sp_runtime::MultiAddress<
                            ::subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 22)]
                    #[doc = "Transfer some asset balance from a previously delegated account to some third-party"]
                    #[doc = "account."]
                    #[doc = ""]
                    #[doc = "Origin must be Signed and there must be an approval in place by the `owner` to the"]
                    #[doc = "signer."]
                    #[doc = ""]
                    #[doc = "If the entire amount approved for transfer is transferred, then any deposit previously"]
                    #[doc = "reserved by `approve_transfer` is unreserved."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the asset."]
                    #[doc = "- `owner`: The account which previously approved for a transfer of at least `amount` and"]
                    #[doc = "from which the asset balance will be withdrawn."]
                    #[doc = "- `destination`: The account to which the asset balance of `amount` will be transferred."]
                    #[doc = "- `amount`: The amount of assets to transfer."]
                    #[doc = ""]
                    #[doc = "Emits `TransferredApproved` on success."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    transfer_approved {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                        owner: ::subxt::ext::sp_runtime::MultiAddress<
                            ::subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        destination: ::subxt::ext::sp_runtime::MultiAddress<
                            ::subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        #[codec(compact)]
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 23)]
                    #[doc = "Create an asset account for non-provider assets."]
                    #[doc = ""]
                    #[doc = "A deposit will be taken from the signer account."]
                    #[doc = ""]
                    #[doc = "- `origin`: Must be Signed; the signer account must have sufficient funds for a deposit"]
                    #[doc = "  to be taken."]
                    #[doc = "- `id`: The identifier of the asset for the account to be created."]
                    #[doc = ""]
                    #[doc = "Emits `Touched` event when successful."]
                    touch {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                    },
                    #[codec(index = 24)]
                    #[doc = "Return the deposit (if any) of an asset account."]
                    #[doc = ""]
                    #[doc = "The origin must be Signed."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the asset for the account to be created."]
                    #[doc = "- `allow_burn`: If `true` then assets may be destroyed in order to complete the refund."]
                    #[doc = ""]
                    #[doc = "Emits `Refunded` event when successful."]
                    refund {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                        allow_burn: ::core::primitive::bool,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Account balance must be greater than or equal to the transfer amount."]
                    BalanceLow,
                    #[codec(index = 1)]
                    #[doc = "The account to alter does not exist."]
                    NoAccount,
                    #[codec(index = 2)]
                    #[doc = "The signing account has no permission to do the operation."]
                    NoPermission,
                    #[codec(index = 3)]
                    #[doc = "The given asset ID is unknown."]
                    Unknown,
                    #[codec(index = 4)]
                    #[doc = "The origin account is frozen."]
                    Frozen,
                    #[codec(index = 5)]
                    #[doc = "The asset ID is already taken."]
                    InUse,
                    #[codec(index = 6)]
                    #[doc = "Invalid witness data given."]
                    BadWitness,
                    #[codec(index = 7)]
                    #[doc = "Minimum balance should be non-zero."]
                    MinBalanceZero,
                    #[codec(index = 8)]
                    #[doc = "Unable to increment the consumer reference counters on the account. Either no provider"]
                    #[doc = "reference exists to allow a non-zero balance of a non-self-sufficient asset, or the"]
                    #[doc = "maximum number of consumers has been reached."]
                    NoProvider,
                    #[codec(index = 9)]
                    #[doc = "Invalid metadata given."]
                    BadMetadata,
                    #[codec(index = 10)]
                    #[doc = "No approval exists that would allow the transfer."]
                    Unapproved,
                    #[codec(index = 11)]
                    #[doc = "The source account would not survive the transfer and it needs to stay alive."]
                    WouldDie,
                    #[codec(index = 12)]
                    #[doc = "The asset-account already exists."]
                    AlreadyExists,
                    #[codec(index = 13)]
                    #[doc = "The asset-account doesn't have an associated deposit."]
                    NoDeposit,
                    #[codec(index = 14)]
                    #[doc = "The operation would result in funds being burned."]
                    WouldBurn,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "Some asset class was created."]
                    Created {
                        asset_id: ::core::primitive::u32,
                        creator: ::subxt::ext::sp_core::crypto::AccountId32,
                        owner: ::subxt::ext::sp_core::crypto::AccountId32,
                    },
                    #[codec(index = 1)]
                    #[doc = "Some assets were issued."]
                    Issued {
                        asset_id: ::core::primitive::u32,
                        owner: ::subxt::ext::sp_core::crypto::AccountId32,
                        total_supply: ::core::primitive::u128,
                    },
                    #[codec(index = 2)]
                    #[doc = "Some assets were transferred."]
                    Transferred {
                        asset_id: ::core::primitive::u32,
                        from: ::subxt::ext::sp_core::crypto::AccountId32,
                        to: ::subxt::ext::sp_core::crypto::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 3)]
                    #[doc = "Some assets were destroyed."]
                    Burned {
                        asset_id: ::core::primitive::u32,
                        owner: ::subxt::ext::sp_core::crypto::AccountId32,
                        balance: ::core::primitive::u128,
                    },
                    #[codec(index = 4)]
                    #[doc = "The management team changed."]
                    TeamChanged {
                        asset_id: ::core::primitive::u32,
                        issuer: ::subxt::ext::sp_core::crypto::AccountId32,
                        admin: ::subxt::ext::sp_core::crypto::AccountId32,
                        freezer: ::subxt::ext::sp_core::crypto::AccountId32,
                    },
                    #[codec(index = 5)]
                    #[doc = "The owner changed."]
                    OwnerChanged {
                        asset_id: ::core::primitive::u32,
                        owner: ::subxt::ext::sp_core::crypto::AccountId32,
                    },
                    #[codec(index = 6)]
                    #[doc = "Some account `who` was frozen."]
                    Frozen {
                        asset_id: ::core::primitive::u32,
                        who: ::subxt::ext::sp_core::crypto::AccountId32,
                    },
                    #[codec(index = 7)]
                    #[doc = "Some account `who` was thawed."]
                    Thawed {
                        asset_id: ::core::primitive::u32,
                        who: ::subxt::ext::sp_core::crypto::AccountId32,
                    },
                    #[codec(index = 8)]
                    #[doc = "Some asset `asset_id` was frozen."]
                    AssetFrozen { asset_id: ::core::primitive::u32 },
                    #[codec(index = 9)]
                    #[doc = "Some asset `asset_id` was thawed."]
                    AssetThawed { asset_id: ::core::primitive::u32 },
                    #[codec(index = 10)]
                    #[doc = "An asset class was destroyed."]
                    Destroyed { asset_id: ::core::primitive::u32 },
                    #[codec(index = 11)]
                    #[doc = "Some asset class was force-created."]
                    ForceCreated {
                        asset_id: ::core::primitive::u32,
                        owner: ::subxt::ext::sp_core::crypto::AccountId32,
                    },
                    #[codec(index = 12)]
                    #[doc = "New metadata has been set for an asset."]
                    MetadataSet {
                        asset_id: ::core::primitive::u32,
                        name: ::std::vec::Vec<::core::primitive::u8>,
                        symbol: ::std::vec::Vec<::core::primitive::u8>,
                        decimals: ::core::primitive::u8,
                        is_frozen: ::core::primitive::bool,
                    },
                    #[codec(index = 13)]
                    #[doc = "Metadata has been cleared for an asset."]
                    MetadataCleared { asset_id: ::core::primitive::u32 },
                    #[codec(index = 14)]
                    #[doc = "(Additional) funds have been approved for transfer to a destination account."]
                    ApprovedTransfer {
                        asset_id: ::core::primitive::u32,
                        source: ::subxt::ext::sp_core::crypto::AccountId32,
                        delegate: ::subxt::ext::sp_core::crypto::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 15)]
                    #[doc = "An approval for account `delegate` was cancelled by `owner`."]
                    ApprovalCancelled {
                        asset_id: ::core::primitive::u32,
                        owner: ::subxt::ext::sp_core::crypto::AccountId32,
                        delegate: ::subxt::ext::sp_core::crypto::AccountId32,
                    },
                    #[codec(index = 16)]
                    #[doc = "An `amount` was transferred in its entirety from `owner` to `destination` by"]
                    #[doc = "the approved `delegate`."]
                    TransferredApproved {
                        asset_id: ::core::primitive::u32,
                        owner: ::subxt::ext::sp_core::crypto::AccountId32,
                        delegate: ::subxt::ext::sp_core::crypto::AccountId32,
                        destination: ::subxt::ext::sp_core::crypto::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 17)]
                    #[doc = "An asset has had its attributes changed by the `Force` origin."]
                    AssetStatusChanged { asset_id: ::core::primitive::u32 },
                }
            }
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                pub struct Approval<_0, _1> {
                    pub amount: _0,
                    pub deposit: _0,
                    #[codec(skip)]
                    pub __subxt_unused_type_params:
                        ::core::marker::PhantomData<_1>,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                pub struct AssetAccount<_0, _1, _2> {
                    pub balance: _0,
                    pub is_frozen: ::core::primitive::bool,
                    pub reason:
                        runtime_types::pallet_assets::types::ExistenceReason<
                            _0,
                        >,
                    pub extra: _2,
                    #[codec(skip)]
                    pub __subxt_unused_type_params:
                        ::core::marker::PhantomData<_1>,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                pub struct AssetDetails<_0, _1, _2> {
                    pub owner: _1,
                    pub issuer: _1,
                    pub admin: _1,
                    pub freezer: _1,
                    pub supply: _0,
                    pub deposit: _0,
                    pub min_balance: _0,
                    pub is_sufficient: ::core::primitive::bool,
                    pub accounts: ::core::primitive::u32,
                    pub sufficients: ::core::primitive::u32,
                    pub approvals: ::core::primitive::u32,
                    pub is_frozen: ::core::primitive::bool,
                    #[codec(skip)]
                    pub __subxt_unused_type_params:
                        ::core::marker::PhantomData<_2>,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                pub struct AssetMetadata<_0, _1> {
                    pub deposit: _0,
                    pub name: _1,
                    pub symbol: _1,
                    pub decimals: ::core::primitive::u8,
                    pub is_frozen: ::core::primitive::bool,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                pub struct DestroyWitness {
                    #[codec(compact)]
                    pub accounts: ::core::primitive::u32,
                    #[codec(compact)]
                    pub sufficients: ::core::primitive::u32,
                    #[codec(compact)]
                    pub approvals: ::core::primitive::u32,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                pub enum ExistenceReason<_0> {
                    #[codec(index = 0)]
                    Consumer,
                    #[codec(index = 1)]
                    Sufficient,
                    #[codec(index = 2)]
                    DepositHeld(_0),
                    #[codec(index = 3)]
                    DepositRefunded,
                }
            }
        }
        pub mod pallet_authorship {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Provide a set of uncles."]
                    set_uncles {
                        new_uncles: ::std::vec::Vec<
                            runtime_types::sp_runtime::generic::header::Header<
                                ::core::primitive::u64,
                                runtime_types::sp_runtime::traits::BlakeTwo256,
                            >,
                        >,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "The uncle parent not in the chain."]
                    InvalidUncleParent,
                    #[codec(index = 1)]
                    #[doc = "Uncles already set in the block."]
                    UnclesAlreadySet,
                    #[codec(index = 2)]
                    #[doc = "Too many uncles."]
                    TooManyUncles,
                    #[codec(index = 3)]
                    #[doc = "The uncle is genesis."]
                    GenesisUncle,
                    #[codec(index = 4)]
                    #[doc = "The uncle is too high in chain."]
                    TooHighUncle,
                    #[codec(index = 5)]
                    #[doc = "The uncle is already included."]
                    UncleAlreadyIncluded,
                    #[codec(index = 6)]
                    #[doc = "The uncle isn't recent enough to be included."]
                    OldUncle,
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub enum UncleEntryItem<_0, _1, _2> {
                #[codec(index = 0)]
                InclusionHeight(_0),
                #[codec(index = 1)]
                Uncle(_1, ::core::option::Option<_2>),
            }
        }
        pub mod pallet_babe {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    # [codec (index = 0)] # [doc = "Report authority equivocation/misbehavior. This method will verify"] # [doc = "the equivocation proof and validate the given key ownership proof"] # [doc = "against the extracted offender. If both are valid, the offence will"] # [doc = "be reported."] report_equivocation { equivocation_proof : :: std :: boxed :: Box < runtime_types :: sp_consensus_slots :: EquivocationProof < runtime_types :: sp_runtime :: generic :: header :: Header < :: core :: primitive :: u64 , runtime_types :: sp_runtime :: traits :: BlakeTwo256 > , runtime_types :: sp_consensus_babe :: app :: Public > > , key_owner_proof : runtime_types :: sp_session :: MembershipProof , } , # [codec (index = 1)] # [doc = "Report authority equivocation/misbehavior. This method will verify"] # [doc = "the equivocation proof and validate the given key ownership proof"] # [doc = "against the extracted offender. If both are valid, the offence will"] # [doc = "be reported."] # [doc = "This extrinsic must be called unsigned and it is expected that only"] # [doc = "block authors will call it (validated in `ValidateUnsigned`), as such"] # [doc = "if the block author is defined it will be defined as the equivocation"] # [doc = "reporter."] report_equivocation_unsigned { equivocation_proof : :: std :: boxed :: Box < runtime_types :: sp_consensus_slots :: EquivocationProof < runtime_types :: sp_runtime :: generic :: header :: Header < :: core :: primitive :: u64 , runtime_types :: sp_runtime :: traits :: BlakeTwo256 > , runtime_types :: sp_consensus_babe :: app :: Public > > , key_owner_proof : runtime_types :: sp_session :: MembershipProof , } , # [codec (index = 2)] # [doc = "Plan an epoch config change. The epoch config change is recorded and will be enacted on"] # [doc = "the next call to `enact_epoch_change`. The config will be activated one epoch after."] # [doc = "Multiple calls to this method will replace any existing planned config change that had"] # [doc = "not been enacted yet."] plan_config_change { config : runtime_types :: sp_consensus_babe :: digests :: NextConfigDescriptor , } , }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "An equivocation proof provided as part of an equivocation report is invalid."]
                    InvalidEquivocationProof,
                    #[codec(index = 1)]
                    #[doc = "A key ownership proof provided as part of an equivocation report is invalid."]
                    InvalidKeyOwnershipProof,
                    #[codec(index = 2)]
                    #[doc = "A given equivocation report is valid but already previously reported."]
                    DuplicateOffenceReport,
                    #[codec(index = 3)]
                    #[doc = "Submitted configuration is invalid."]
                    InvalidConfiguration,
                }
            }
        }
        pub mod pallet_bags_list {
            use super::runtime_types;
            pub mod list {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                pub struct Bag {
                    pub head: ::core::option::Option<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                    >,
                    pub tail: ::core::option::Option<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                    >,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                pub enum ListError {
                    #[codec(index = 0)]
                    Duplicate,
                    #[codec(index = 1)]
                    NotHeavier,
                    #[codec(index = 2)]
                    NotInSameBag,
                    #[codec(index = 3)]
                    NodeNotFound,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                pub struct Node {
                    pub id: ::subxt::ext::sp_core::crypto::AccountId32,
                    pub prev: ::core::option::Option<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                    >,
                    pub next: ::core::option::Option<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                    >,
                    pub bag_upper: ::core::primitive::u64,
                    pub score: ::core::primitive::u64,
                }
            }
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Declare that some `dislocated` account has, through rewards or penalties, sufficiently"]
                    #[doc = "changed its score that it should properly fall into a different bag than its current"]
                    #[doc = "one."]
                    #[doc = ""]
                    #[doc = "Anyone can call this function about any potentially dislocated account."]
                    #[doc = ""]
                    #[doc = "Will always update the stored score of `dislocated` to the correct score, based on"]
                    #[doc = "`ScoreProvider`."]
                    #[doc = ""]
                    #[doc = "If `dislocated` does not exists, it returns an error."]
                    rebag {
                        dislocated: ::subxt::ext::sp_runtime::MultiAddress<
                            ::subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 1)]
                    #[doc = "Move the caller's Id directly in front of `lighter`."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_ and can only be called by the Id of"]
                    #[doc = "the account going in front of `lighter`."]
                    #[doc = ""]
                    #[doc = "Only works if"]
                    #[doc = "- both nodes are within the same bag,"]
                    #[doc = "- and `origin` has a greater `Score` than `lighter`."]
                    put_in_front_of {
                        lighter: ::subxt::ext::sp_runtime::MultiAddress<
                            ::subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "A error in the list interface implementation."]
                    List(runtime_types::pallet_bags_list::list::ListError),
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "Moved an account from one bag to another."]
                    Rebagged {
                        who: ::subxt::ext::sp_core::crypto::AccountId32,
                        from: ::core::primitive::u64,
                        to: ::core::primitive::u64,
                    },
                    #[codec(index = 1)]
                    #[doc = "Updated the score of some account to the given amount."]
                    ScoreUpdated {
                        who: ::subxt::ext::sp_core::crypto::AccountId32,
                        new_score: ::core::primitive::u64,
                    },
                }
            }
        }
        pub mod pallet_balances {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Transfer some liquid free balance to another account."]
                    #[doc = ""]
                    #[doc = "`transfer` will set the `FreeBalance` of the sender and receiver."]
                    #[doc = "If the sender's account is below the existential deposit as a result"]
                    #[doc = "of the transfer, the account will be reaped."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be `Signed` by the transactor."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- Dependent on arguments but not critical, given proper implementations for input config"]
                    #[doc = "  types. See related functions below."]
                    #[doc = "- It contains a limited number of reads and writes internally and no complex"]
                    #[doc = "  computation."]
                    #[doc = ""]
                    #[doc = "Related functions:"]
                    #[doc = ""]
                    #[doc = "  - `ensure_can_withdraw` is always called internally but has a bounded complexity."]
                    #[doc = "  - Transferring balances to accounts that did not exist before will cause"]
                    #[doc = "    `T::OnNewAccount::on_new_account` to be called."]
                    #[doc = "  - Removing enough funds from an account will trigger `T::DustRemoval::on_unbalanced`."]
                    #[doc = "  - `transfer_keep_alive` works the same way as `transfer`, but has an additional check"]
                    #[doc = "    that the transfer will not kill the origin account."]
                    #[doc = "---------------------------------"]
                    #[doc = "- Origin account is already in memory, so no DB operations for them."]
                    #[doc = "# </weight>"]
                    transfer {
                        dest: ::subxt::ext::sp_runtime::MultiAddress<
                            ::subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        #[codec(compact)]
                        value: ::core::primitive::u128,
                    },
                    #[codec(index = 1)]
                    #[doc = "Set the balances of a given account."]
                    #[doc = ""]
                    #[doc = "This will alter `FreeBalance` and `ReservedBalance` in storage. it will"]
                    #[doc = "also alter the total issuance of the system (`TotalIssuance`) appropriately."]
                    #[doc = "If the new free or reserved balance is below the existential deposit,"]
                    #[doc = "it will reset the account nonce (`frame_system::AccountNonce`)."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call is `root`."]
                    set_balance {
                        who: ::subxt::ext::sp_runtime::MultiAddress<
                            ::subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        #[codec(compact)]
                        new_free: ::core::primitive::u128,
                        #[codec(compact)]
                        new_reserved: ::core::primitive::u128,
                    },
                    #[codec(index = 2)]
                    #[doc = "Exactly as `transfer`, except the origin must be root and the source account may be"]
                    #[doc = "specified."]
                    #[doc = "# <weight>"]
                    #[doc = "- Same as transfer, but additional read and write because the source account is not"]
                    #[doc = "  assumed to be in the overlay."]
                    #[doc = "# </weight>"]
                    force_transfer {
                        source: ::subxt::ext::sp_runtime::MultiAddress<
                            ::subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        dest: ::subxt::ext::sp_runtime::MultiAddress<
                            ::subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        #[codec(compact)]
                        value: ::core::primitive::u128,
                    },
                    #[codec(index = 3)]
                    #[doc = "Same as the [`transfer`] call, but with a check that the transfer will not kill the"]
                    #[doc = "origin account."]
                    #[doc = ""]
                    #[doc = "99% of the time you want [`transfer`] instead."]
                    #[doc = ""]
                    #[doc = "[`transfer`]: struct.Pallet.html#method.transfer"]
                    transfer_keep_alive {
                        dest: ::subxt::ext::sp_runtime::MultiAddress<
                            ::subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        #[codec(compact)]
                        value: ::core::primitive::u128,
                    },
                    #[codec(index = 4)]
                    #[doc = "Transfer the entire transferable balance from the caller account."]
                    #[doc = ""]
                    #[doc = "NOTE: This function only attempts to transfer _transferable_ balances. This means that"]
                    #[doc = "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be"]
                    #[doc = "transferred by this function. To ensure that this function results in a killed account,"]
                    #[doc = "you might need to prepare the account by removing any reference counters, storage"]
                    #[doc = "deposits, etc..."]
                    #[doc = ""]
                    #[doc = "The dispatch origin of this call must be Signed."]
                    #[doc = ""]
                    #[doc = "- `dest`: The recipient of the transfer."]
                    #[doc = "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all"]
                    #[doc = "  of the funds the account has, causing the sender account to be killed (false), or"]
                    #[doc = "  transfer everything except at least the existential deposit, which will guarantee to"]
                    #[doc = "  keep the sender account alive (true). # <weight>"]
                    #[doc = "- O(1). Just like transfer, but reading the user's transferable balance first."]
                    #[doc = "  #</weight>"]
                    transfer_all {
                        dest: ::subxt::ext::sp_runtime::MultiAddress<
                            ::subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        keep_alive: ::core::primitive::bool,
                    },
                    #[codec(index = 5)]
                    #[doc = "Unreserve some balance from a user by force."]
                    #[doc = ""]
                    #[doc = "Can only be called by ROOT."]
                    force_unreserve {
                        who: ::subxt::ext::sp_runtime::MultiAddress<
                            ::subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        amount: ::core::primitive::u128,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Vesting balance too high to send value"]
                    VestingBalance,
                    #[codec(index = 1)]
                    #[doc = "Account liquidity restrictions prevent withdrawal"]
                    LiquidityRestrictions,
                    #[codec(index = 2)]
                    #[doc = "Balance too low to send value"]
                    InsufficientBalance,
                    #[codec(index = 3)]
                    #[doc = "Value too low to create account due to existential deposit"]
                    ExistentialDeposit,
                    #[codec(index = 4)]
                    #[doc = "Transfer/payment would kill account"]
                    KeepAlive,
                    #[codec(index = 5)]
                    #[doc = "A vesting schedule already exists for this account"]
                    ExistingVestingSchedule,
                    #[codec(index = 6)]
                    #[doc = "Beneficiary account must pre-exist"]
                    DeadAccount,
                    #[codec(index = 7)]
                    #[doc = "Number of named reserves exceed MaxReserves"]
                    TooManyReserves,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    # [codec (index = 0)] # [doc = "An account was created with some free balance."] Endowed { account : :: subxt :: ext :: sp_core :: crypto :: AccountId32 , free_balance : :: core :: primitive :: u128 , } , # [codec (index = 1)] # [doc = "An account was removed whose balance was non-zero but below ExistentialDeposit,"] # [doc = "resulting in an outright loss."] DustLost { account : :: subxt :: ext :: sp_core :: crypto :: AccountId32 , amount : :: core :: primitive :: u128 , } , # [codec (index = 2)] # [doc = "Transfer succeeded."] Transfer { from : :: subxt :: ext :: sp_core :: crypto :: AccountId32 , to : :: subxt :: ext :: sp_core :: crypto :: AccountId32 , amount : :: core :: primitive :: u128 , } , # [codec (index = 3)] # [doc = "A balance was set by root."] BalanceSet { who : :: subxt :: ext :: sp_core :: crypto :: AccountId32 , free : :: core :: primitive :: u128 , reserved : :: core :: primitive :: u128 , } , # [codec (index = 4)] # [doc = "Some balance was reserved (moved from free to reserved)."] Reserved { who : :: subxt :: ext :: sp_core :: crypto :: AccountId32 , amount : :: core :: primitive :: u128 , } , # [codec (index = 5)] # [doc = "Some balance was unreserved (moved from reserved to free)."] Unreserved { who : :: subxt :: ext :: sp_core :: crypto :: AccountId32 , amount : :: core :: primitive :: u128 , } , # [codec (index = 6)] # [doc = "Some balance was moved from the reserve of the first account to the second account."] # [doc = "Final argument indicates the destination balance type."] ReserveRepatriated { from : :: subxt :: ext :: sp_core :: crypto :: AccountId32 , to : :: subxt :: ext :: sp_core :: crypto :: AccountId32 , amount : :: core :: primitive :: u128 , destination_status : runtime_types :: frame_support :: traits :: tokens :: misc :: BalanceStatus , } , # [codec (index = 7)] # [doc = "Some amount was deposited (e.g. for transaction fees)."] Deposit { who : :: subxt :: ext :: sp_core :: crypto :: AccountId32 , amount : :: core :: primitive :: u128 , } , # [codec (index = 8)] # [doc = "Some amount was withdrawn from the account (e.g. for transaction fees)."] Withdraw { who : :: subxt :: ext :: sp_core :: crypto :: AccountId32 , amount : :: core :: primitive :: u128 , } , # [codec (index = 9)] # [doc = "Some amount was removed from the account (e.g. for misbehavior)."] Slashed { who : :: subxt :: ext :: sp_core :: crypto :: AccountId32 , amount : :: core :: primitive :: u128 , } , }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct AccountData<_0> {
                pub free: _0,
                pub reserved: _0,
                pub misc_frozen: _0,
                pub fee_frozen: _0,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct BalanceLock<_0> {
                pub id: [::core::primitive::u8; 8usize],
                pub amount: _0,
                pub reasons: runtime_types::pallet_balances::Reasons,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub enum Reasons {
                #[codec(index = 0)]
                Fee,
                #[codec(index = 1)]
                Misc,
                #[codec(index = 2)]
                All,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub enum Releases {
                #[codec(index = 0)]
                V1_0_0,
                #[codec(index = 1)]
                V2_0_0,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct ReserveData<_0, _1> {
                pub id: _0,
                pub amount: _1,
            }
        }
        pub mod pallet_bounties {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Propose a new bounty."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "Payment: `TipReportDepositBase` will be reserved from the origin account, as well as"]
                    #[doc = "`DataDepositPerByte` for each byte in `reason`. It will be unreserved upon approval,"]
                    #[doc = "or slashed when rejected."]
                    #[doc = ""]
                    #[doc = "- `curator`: The curator account whom will manage this bounty."]
                    #[doc = "- `fee`: The curator fee."]
                    #[doc = "- `value`: The total payment amount of this bounty, curator fee included."]
                    #[doc = "- `description`: The description of this bounty."]
                    propose_bounty {
                        #[codec(compact)]
                        value: ::core::primitive::u128,
                        description: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 1)]
                    #[doc = "Approve a bounty proposal. At a later time, the bounty will be funded and become active"]
                    #[doc = "and the original deposit will be returned."]
                    #[doc = ""]
                    #[doc = "May only be called from `T::ApproveOrigin`."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- O(1)."]
                    #[doc = "# </weight>"]
                    approve_bounty {
                        #[codec(compact)]
                        bounty_id: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    #[doc = "Assign a curator to a funded bounty."]
                    #[doc = ""]
                    #[doc = "May only be called from `T::ApproveOrigin`."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- O(1)."]
                    #[doc = "# </weight>"]
                    propose_curator {
                        #[codec(compact)]
                        bounty_id: ::core::primitive::u32,
                        curator: ::subxt::ext::sp_runtime::MultiAddress<
                            ::subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        #[codec(compact)]
                        fee: ::core::primitive::u128,
                    },
                    #[codec(index = 3)]
                    #[doc = "Unassign curator from a bounty."]
                    #[doc = ""]
                    #[doc = "This function can only be called by the `RejectOrigin` a signed origin."]
                    #[doc = ""]
                    #[doc = "If this function is called by the `RejectOrigin`, we assume that the curator is"]
                    #[doc = "malicious or inactive. As a result, we will slash the curator when possible."]
                    #[doc = ""]
                    #[doc = "If the origin is the curator, we take this as a sign they are unable to do their job and"]
                    #[doc = "they willingly give up. We could slash them, but for now we allow them to recover their"]
                    #[doc = "deposit and exit without issue. (We may want to change this if it is abused.)"]
                    #[doc = ""]
                    #[doc = "Finally, the origin can be anyone if and only if the curator is \"inactive\". This allows"]
                    #[doc = "anyone in the community to call out that a curator is not doing their due diligence, and"]
                    #[doc = "we should pick a new curator. In this case the curator should also be slashed."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- O(1)."]
                    #[doc = "# </weight>"]
                    unassign_curator {
                        #[codec(compact)]
                        bounty_id: ::core::primitive::u32,
                    },
                    #[codec(index = 4)]
                    #[doc = "Accept the curator role for a bounty."]
                    #[doc = "A deposit will be reserved from curator and refund upon successful payout."]
                    #[doc = ""]
                    #[doc = "May only be called from the curator."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- O(1)."]
                    #[doc = "# </weight>"]
                    accept_curator {
                        #[codec(compact)]
                        bounty_id: ::core::primitive::u32,
                    },
                    #[codec(index = 5)]
                    #[doc = "Award bounty to a beneficiary account. The beneficiary will be able to claim the funds"]
                    #[doc = "after a delay."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be the curator of this bounty."]
                    #[doc = ""]
                    #[doc = "- `bounty_id`: Bounty ID to award."]
                    #[doc = "- `beneficiary`: The beneficiary account whom will receive the payout."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- O(1)."]
                    #[doc = "# </weight>"]
                    award_bounty {
                        #[codec(compact)]
                        bounty_id: ::core::primitive::u32,
                        beneficiary: ::subxt::ext::sp_runtime::MultiAddress<
                            ::subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 6)]
                    #[doc = "Claim the payout from an awarded bounty after payout delay."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be the beneficiary of this bounty."]
                    #[doc = ""]
                    #[doc = "- `bounty_id`: Bounty ID to claim."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- O(1)."]
                    #[doc = "# </weight>"]
                    claim_bounty {
                        #[codec(compact)]
                        bounty_id: ::core::primitive::u32,
                    },
                    #[codec(index = 7)]
                    #[doc = "Cancel a proposed or active bounty. All the funds will be sent to treasury and"]
                    #[doc = "the curator deposit will be unreserved if possible."]
                    #[doc = ""]
                    #[doc = "Only `T::RejectOrigin` is able to cancel a bounty."]
                    #[doc = ""]
                    #[doc = "- `bounty_id`: Bounty ID to cancel."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- O(1)."]
                    #[doc = "# </weight>"]
                    close_bounty {
                        #[codec(compact)]
                        bounty_id: ::core::primitive::u32,
                    },
                    #[codec(index = 8)]
                    #[doc = "Extend the expiry time of an active bounty."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be the curator of this bounty."]
                    #[doc = ""]
                    #[doc = "- `bounty_id`: Bounty ID to extend."]
                    #[doc = "- `remark`: additional information."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- O(1)."]
                    #[doc = "# </weight>"]
                    extend_bounty_expiry {
                        #[codec(compact)]
                        bounty_id: ::core::primitive::u32,
                        remark: ::std::vec::Vec<::core::primitive::u8>,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Proposer's balance is too low."]
                    InsufficientProposersBalance,
                    #[codec(index = 1)]
                    #[doc = "No proposal or bounty at that index."]
                    InvalidIndex,
                    #[codec(index = 2)]
                    #[doc = "The reason given is just too big."]
                    ReasonTooBig,
                    #[codec(index = 3)]
                    #[doc = "The bounty status is unexpected."]
                    UnexpectedStatus,
                    #[codec(index = 4)]
                    #[doc = "Require bounty curator."]
                    RequireCurator,
                    #[codec(index = 5)]
                    #[doc = "Invalid bounty value."]
                    InvalidValue,
                    #[codec(index = 6)]
                    #[doc = "Invalid bounty fee."]
                    InvalidFee,
                    #[codec(index = 7)]
                    #[doc = "A bounty payout is pending."]
                    #[doc = "To cancel the bounty, you must unassign and slash the curator."]
                    PendingPayout,
                    #[codec(index = 8)]
                    #[doc = "The bounties cannot be claimed/closed because it's still in the countdown period."]
                    Premature,
                    #[codec(index = 9)]
                    #[doc = "The bounty cannot be closed because it has active child bounties."]
                    HasActiveChildBounty,
                    #[codec(index = 10)]
                    #[doc = "Too many approvals are already queued."]
                    TooManyQueued,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "New bounty proposal."]
                    BountyProposed { index: ::core::primitive::u32 },
                    #[codec(index = 1)]
                    #[doc = "A bounty proposal was rejected; funds were slashed."]
                    BountyRejected {
                        index: ::core::primitive::u32,
                        bond: ::core::primitive::u128,
                    },
                    #[codec(index = 2)]
                    #[doc = "A bounty proposal is funded and became active."]
                    BountyBecameActive { index: ::core::primitive::u32 },
                    #[codec(index = 3)]
                    #[doc = "A bounty is awarded to a beneficiary."]
                    BountyAwarded {
                        index: ::core::primitive::u32,
                        beneficiary: ::subxt::ext::sp_core::crypto::AccountId32,
                    },
                    #[codec(index = 4)]
                    #[doc = "A bounty is claimed by beneficiary."]
                    BountyClaimed {
                        index: ::core::primitive::u32,
                        payout: ::core::primitive::u128,
                        beneficiary: ::subxt::ext::sp_core::crypto::AccountId32,
                    },
                    #[codec(index = 5)]
                    #[doc = "A bounty is cancelled."]
                    BountyCanceled { index: ::core::primitive::u32 },
                    #[codec(index = 6)]
                    #[doc = "A bounty expiry is extended."]
                    BountyExtended { index: ::core::primitive::u32 },
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Bounty<_0, _1, _2> {
                pub proposer: _0,
                pub value: _1,
                pub fee: _1,
                pub curator_deposit: _1,
                pub bond: _1,
                pub status:
                    runtime_types::pallet_bounties::BountyStatus<_0, _2>,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub enum BountyStatus<_0, _1> {
                #[codec(index = 0)]
                Proposed,
                #[codec(index = 1)]
                Approved,
                #[codec(index = 2)]
                Funded,
                #[codec(index = 3)]
                CuratorProposed { curator: _0 },
                #[codec(index = 4)]
                Active { curator: _0, update_due: _1 },
                #[codec(index = 5)]
                PendingPayout {
                    curator: _0,
                    beneficiary: _0,
                    unlock_at: _1,
                },
            }
        }
        pub mod pallet_child_bounties {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Add a new child-bounty."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be the curator of parent"]
                    #[doc = "bounty and the parent bounty must be in \"active\" state."]
                    #[doc = ""]
                    #[doc = "Child-bounty gets added successfully & fund gets transferred from"]
                    #[doc = "parent bounty to child-bounty account, if parent bounty has enough"]
                    #[doc = "funds, else the call fails."]
                    #[doc = ""]
                    #[doc = "Upper bound to maximum number of active  child bounties that can be"]
                    #[doc = "added are managed via runtime trait config"]
                    #[doc = "[`Config::MaxActiveChildBountyCount`]."]
                    #[doc = ""]
                    #[doc = "If the call is success, the status of child-bounty is updated to"]
                    #[doc = "\"Added\"."]
                    #[doc = ""]
                    #[doc = "- `parent_bounty_id`: Index of parent bounty for which child-bounty is being added."]
                    #[doc = "- `value`: Value for executing the proposal."]
                    #[doc = "- `description`: Text description for the child-bounty."]
                    add_child_bounty {
                        #[codec(compact)]
                        parent_bounty_id: ::core::primitive::u32,
                        #[codec(compact)]
                        value: ::core::primitive::u128,
                        description: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 1)]
                    #[doc = "Propose curator for funded child-bounty."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be curator of parent bounty."]
                    #[doc = ""]
                    #[doc = "Parent bounty must be in active state, for this child-bounty call to"]
                    #[doc = "work."]
                    #[doc = ""]
                    #[doc = "Child-bounty must be in \"Added\" state, for processing the call. And"]
                    #[doc = "state of child-bounty is moved to \"CuratorProposed\" on successful"]
                    #[doc = "call completion."]
                    #[doc = ""]
                    #[doc = "- `parent_bounty_id`: Index of parent bounty."]
                    #[doc = "- `child_bounty_id`: Index of child bounty."]
                    #[doc = "- `curator`: Address of child-bounty curator."]
                    #[doc = "- `fee`: payment fee to child-bounty curator for execution."]
                    propose_curator {
                        #[codec(compact)]
                        parent_bounty_id: ::core::primitive::u32,
                        #[codec(compact)]
                        child_bounty_id: ::core::primitive::u32,
                        curator: ::subxt::ext::sp_runtime::MultiAddress<
                            ::subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        #[codec(compact)]
                        fee: ::core::primitive::u128,
                    },
                    #[codec(index = 2)]
                    #[doc = "Accept the curator role for the child-bounty."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be the curator of this"]
                    #[doc = "child-bounty."]
                    #[doc = ""]
                    #[doc = "A deposit will be reserved from the curator and refund upon"]
                    #[doc = "successful payout or cancellation."]
                    #[doc = ""]
                    #[doc = "Fee for curator is deducted from curator fee of parent bounty."]
                    #[doc = ""]
                    #[doc = "Parent bounty must be in active state, for this child-bounty call to"]
                    #[doc = "work."]
                    #[doc = ""]
                    #[doc = "Child-bounty must be in \"CuratorProposed\" state, for processing the"]
                    #[doc = "call. And state of child-bounty is moved to \"Active\" on successful"]
                    #[doc = "call completion."]
                    #[doc = ""]
                    #[doc = "- `parent_bounty_id`: Index of parent bounty."]
                    #[doc = "- `child_bounty_id`: Index of child bounty."]
                    accept_curator {
                        #[codec(compact)]
                        parent_bounty_id: ::core::primitive::u32,
                        #[codec(compact)]
                        child_bounty_id: ::core::primitive::u32,
                    },
                    #[codec(index = 3)]
                    #[doc = "Unassign curator from a child-bounty."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call can be either `RejectOrigin`, or"]
                    #[doc = "the curator of the parent bounty, or any signed origin."]
                    #[doc = ""]
                    #[doc = "For the origin other than T::RejectOrigin and the child-bounty"]
                    #[doc = "curator, parent bounty must be in active state, for this call to"]
                    #[doc = "work. We allow child-bounty curator and T::RejectOrigin to execute"]
                    #[doc = "this call irrespective of the parent bounty state."]
                    #[doc = ""]
                    #[doc = "If this function is called by the `RejectOrigin` or the"]
                    #[doc = "parent bounty curator, we assume that the child-bounty curator is"]
                    #[doc = "malicious or inactive. As a result, child-bounty curator deposit is"]
                    #[doc = "slashed."]
                    #[doc = ""]
                    #[doc = "If the origin is the child-bounty curator, we take this as a sign"]
                    #[doc = "that they are unable to do their job, and are willingly giving up."]
                    #[doc = "We could slash the deposit, but for now we allow them to unreserve"]
                    #[doc = "their deposit and exit without issue. (We may want to change this if"]
                    #[doc = "it is abused.)"]
                    #[doc = ""]
                    #[doc = "Finally, the origin can be anyone iff the child-bounty curator is"]
                    #[doc = "\"inactive\". Expiry update due of parent bounty is used to estimate"]
                    #[doc = "inactive state of child-bounty curator."]
                    #[doc = ""]
                    #[doc = "This allows anyone in the community to call out that a child-bounty"]
                    #[doc = "curator is not doing their due diligence, and we should pick a new"]
                    #[doc = "one. In this case the child-bounty curator deposit is slashed."]
                    #[doc = ""]
                    #[doc = "State of child-bounty is moved to Added state on successful call"]
                    #[doc = "completion."]
                    #[doc = ""]
                    #[doc = "- `parent_bounty_id`: Index of parent bounty."]
                    #[doc = "- `child_bounty_id`: Index of child bounty."]
                    unassign_curator {
                        #[codec(compact)]
                        parent_bounty_id: ::core::primitive::u32,
                        #[codec(compact)]
                        child_bounty_id: ::core::primitive::u32,
                    },
                    #[codec(index = 4)]
                    #[doc = "Award child-bounty to a beneficiary."]
                    #[doc = ""]
                    #[doc = "The beneficiary will be able to claim the funds after a delay."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be the parent curator or"]
                    #[doc = "curator of this child-bounty."]
                    #[doc = ""]
                    #[doc = "Parent bounty must be in active state, for this child-bounty call to"]
                    #[doc = "work."]
                    #[doc = ""]
                    #[doc = "Child-bounty must be in active state, for processing the call. And"]
                    #[doc = "state of child-bounty is moved to \"PendingPayout\" on successful call"]
                    #[doc = "completion."]
                    #[doc = ""]
                    #[doc = "- `parent_bounty_id`: Index of parent bounty."]
                    #[doc = "- `child_bounty_id`: Index of child bounty."]
                    #[doc = "- `beneficiary`: Beneficiary account."]
                    award_child_bounty {
                        #[codec(compact)]
                        parent_bounty_id: ::core::primitive::u32,
                        #[codec(compact)]
                        child_bounty_id: ::core::primitive::u32,
                        beneficiary: ::subxt::ext::sp_runtime::MultiAddress<
                            ::subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 5)]
                    #[doc = "Claim the payout from an awarded child-bounty after payout delay."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call may be any signed origin."]
                    #[doc = ""]
                    #[doc = "Call works independent of parent bounty state, No need for parent"]
                    #[doc = "bounty to be in active state."]
                    #[doc = ""]
                    #[doc = "The Beneficiary is paid out with agreed bounty value. Curator fee is"]
                    #[doc = "paid & curator deposit is unreserved."]
                    #[doc = ""]
                    #[doc = "Child-bounty must be in \"PendingPayout\" state, for processing the"]
                    #[doc = "call. And instance of child-bounty is removed from the state on"]
                    #[doc = "successful call completion."]
                    #[doc = ""]
                    #[doc = "- `parent_bounty_id`: Index of parent bounty."]
                    #[doc = "- `child_bounty_id`: Index of child bounty."]
                    claim_child_bounty {
                        #[codec(compact)]
                        parent_bounty_id: ::core::primitive::u32,
                        #[codec(compact)]
                        child_bounty_id: ::core::primitive::u32,
                    },
                    #[codec(index = 6)]
                    #[doc = "Cancel a proposed or active child-bounty. Child-bounty account funds"]
                    #[doc = "are transferred to parent bounty account. The child-bounty curator"]
                    #[doc = "deposit may be unreserved if possible."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be either parent curator or"]
                    #[doc = "`T::RejectOrigin`."]
                    #[doc = ""]
                    #[doc = "If the state of child-bounty is `Active`, curator deposit is"]
                    #[doc = "unreserved."]
                    #[doc = ""]
                    #[doc = "If the state of child-bounty is `PendingPayout`, call fails &"]
                    #[doc = "returns `PendingPayout` error."]
                    #[doc = ""]
                    #[doc = "For the origin other than T::RejectOrigin, parent bounty must be in"]
                    #[doc = "active state, for this child-bounty call to work. For origin"]
                    #[doc = "T::RejectOrigin execution is forced."]
                    #[doc = ""]
                    #[doc = "Instance of child-bounty is removed from the state on successful"]
                    #[doc = "call completion."]
                    #[doc = ""]
                    #[doc = "- `parent_bounty_id`: Index of parent bounty."]
                    #[doc = "- `child_bounty_id`: Index of child bounty."]
                    close_child_bounty {
                        #[codec(compact)]
                        parent_bounty_id: ::core::primitive::u32,
                        #[codec(compact)]
                        child_bounty_id: ::core::primitive::u32,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "The parent bounty is not in active state."]
                    ParentBountyNotActive,
                    #[codec(index = 1)]
                    #[doc = "The bounty balance is not enough to add new child-bounty."]
                    InsufficientBountyBalance,
                    #[codec(index = 2)]
                    #[doc = "Number of child bounties exceeds limit `MaxActiveChildBountyCount`."]
                    TooManyChildBounties,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A child-bounty is added."]
                    Added {
                        index: ::core::primitive::u32,
                        child_index: ::core::primitive::u32,
                    },
                    #[codec(index = 1)]
                    #[doc = "A child-bounty is awarded to a beneficiary."]
                    Awarded {
                        index: ::core::primitive::u32,
                        child_index: ::core::primitive::u32,
                        beneficiary: ::subxt::ext::sp_core::crypto::AccountId32,
                    },
                    #[codec(index = 2)]
                    #[doc = "A child-bounty is claimed by beneficiary."]
                    Claimed {
                        index: ::core::primitive::u32,
                        child_index: ::core::primitive::u32,
                        payout: ::core::primitive::u128,
                        beneficiary: ::subxt::ext::sp_core::crypto::AccountId32,
                    },
                    #[codec(index = 3)]
                    #[doc = "A child-bounty is cancelled."]
                    Canceled {
                        index: ::core::primitive::u32,
                        child_index: ::core::primitive::u32,
                    },
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct ChildBounty<_0, _1, _2> {
                pub parent_bounty: ::core::primitive::u32,
                pub value: _1,
                pub fee: _1,
                pub curator_deposit: _1,
                pub status:
                    runtime_types::pallet_child_bounties::ChildBountyStatus<
                        _0,
                        _2,
                    >,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub enum ChildBountyStatus<_0, _1> {
                #[codec(index = 0)]
                Added,
                #[codec(index = 1)]
                CuratorProposed { curator: _0 },
                #[codec(index = 2)]
                Active { curator: _0 },
                #[codec(index = 3)]
                PendingPayout {
                    curator: _0,
                    beneficiary: _0,
                    unlock_at: _1,
                },
            }
        }
        pub mod pallet_collective {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    # [codec (index = 0)] # [doc = "Set the collective's membership."] # [doc = ""] # [doc = "- `new_members`: The new member list. Be nice to the chain and provide it sorted."] # [doc = "- `prime`: The prime member whose vote sets the default."] # [doc = "- `old_count`: The upper bound for the previous number of members in storage. Used for"] # [doc = "  weight estimation."] # [doc = ""] # [doc = "Requires root origin."] # [doc = ""] # [doc = "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but"] # [doc = "      the weight estimations rely on it to estimate dispatchable weight."] # [doc = ""] # [doc = "# WARNING:"] # [doc = ""] # [doc = "The `pallet-collective` can also be managed by logic outside of the pallet through the"] # [doc = "implementation of the trait [`ChangeMembers`]."] # [doc = "Any call to `set_members` must be careful that the member set doesn't get out of sync"] # [doc = "with other logic managing the member set."] # [doc = ""] # [doc = "# <weight>"] # [doc = "## Weight"] # [doc = "- `O(MP + N)` where:"] # [doc = "  - `M` old-members-count (code- and governance-bounded)"] # [doc = "  - `N` new-members-count (code- and governance-bounded)"] # [doc = "  - `P` proposals-count (code-bounded)"] # [doc = "- DB:"] # [doc = "  - 1 storage mutation (codec `O(M)` read, `O(N)` write) for reading and writing the"] # [doc = "    members"] # [doc = "  - 1 storage read (codec `O(P)`) for reading the proposals"] # [doc = "  - `P` storage mutations (codec `O(M)`) for updating the votes for each proposal"] # [doc = "  - 1 storage write (codec `O(1)`) for deleting the old `prime` and setting the new one"] # [doc = "# </weight>"] set_members { new_members : :: std :: vec :: Vec < :: subxt :: ext :: sp_core :: crypto :: AccountId32 > , prime : :: core :: option :: Option < :: subxt :: ext :: sp_core :: crypto :: AccountId32 > , old_count : :: core :: primitive :: u32 , } , # [codec (index = 1)] # [doc = "Dispatch a proposal from a member using the `Member` origin."] # [doc = ""] # [doc = "Origin must be a member of the collective."] # [doc = ""] # [doc = "# <weight>"] # [doc = "## Weight"] # [doc = "- `O(M + P)` where `M` members-count (code-bounded) and `P` complexity of dispatching"] # [doc = "  `proposal`"] # [doc = "- DB: 1 read (codec `O(M)`) + DB access of `proposal`"] # [doc = "- 1 event"] # [doc = "# </weight>"] execute { proposal : :: std :: boxed :: Box < runtime_types :: webb_standalone_runtime :: Call > , # [codec (compact)] length_bound : :: core :: primitive :: u32 , } , # [codec (index = 2)] # [doc = "Add a new proposal to either be voted on or executed directly."] # [doc = ""] # [doc = "Requires the sender to be member."] # [doc = ""] # [doc = "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)"] # [doc = "or put up for voting."] # [doc = ""] # [doc = "# <weight>"] # [doc = "## Weight"] # [doc = "- `O(B + M + P1)` or `O(B + M + P2)` where:"] # [doc = "  - `B` is `proposal` size in bytes (length-fee-bounded)"] # [doc = "  - `M` is members-count (code- and governance-bounded)"] # [doc = "  - branching is influenced by `threshold` where:"] # [doc = "    - `P1` is proposal execution complexity (`threshold < 2`)"] # [doc = "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)"] # [doc = "- DB:"] # [doc = "  - 1 storage read `is_member` (codec `O(M)`)"] # [doc = "  - 1 storage read `ProposalOf::contains_key` (codec `O(1)`)"] # [doc = "  - DB accesses influenced by `threshold`:"] # [doc = "    - EITHER storage accesses done by `proposal` (`threshold < 2`)"] # [doc = "    - OR proposal insertion (`threshold <= 2`)"] # [doc = "      - 1 storage mutation `Proposals` (codec `O(P2)`)"] # [doc = "      - 1 storage mutation `ProposalCount` (codec `O(1)`)"] # [doc = "      - 1 storage write `ProposalOf` (codec `O(B)`)"] # [doc = "      - 1 storage write `Voting` (codec `O(M)`)"] # [doc = "  - 1 event"] # [doc = "# </weight>"] propose { # [codec (compact)] threshold : :: core :: primitive :: u32 , proposal : :: std :: boxed :: Box < runtime_types :: webb_standalone_runtime :: Call > , # [codec (compact)] length_bound : :: core :: primitive :: u32 , } , # [codec (index = 3)] # [doc = "Add an aye or nay vote for the sender to the given proposal."] # [doc = ""] # [doc = "Requires the sender to be a member."] # [doc = ""] # [doc = "Transaction fees will be waived if the member is voting on any particular proposal"] # [doc = "for the first time and the call is successful. Subsequent vote changes will charge a"] # [doc = "fee."] # [doc = "# <weight>"] # [doc = "## Weight"] # [doc = "- `O(M)` where `M` is members-count (code- and governance-bounded)"] # [doc = "- DB:"] # [doc = "  - 1 storage read `Members` (codec `O(M)`)"] # [doc = "  - 1 storage mutation `Voting` (codec `O(M)`)"] # [doc = "- 1 event"] # [doc = "# </weight>"] vote { proposal : :: subxt :: ext :: sp_core :: H256 , # [codec (compact)] index : :: core :: primitive :: u32 , approve : :: core :: primitive :: bool , } , # [codec (index = 4)] # [doc = "Close a vote that is either approved, disapproved or whose voting period has ended."] # [doc = ""] # [doc = "May be called by any signed account in order to finish voting and close the proposal."] # [doc = ""] # [doc = "If called before the end of the voting period it will only close the vote if it is"] # [doc = "has enough votes to be approved or disapproved."] # [doc = ""] # [doc = "If called after the end of the voting period abstentions are counted as rejections"] # [doc = "unless there is a prime member set and the prime member cast an approval."] # [doc = ""] # [doc = "If the close operation completes successfully with disapproval, the transaction fee will"] # [doc = "be waived. Otherwise execution of the approved operation will be charged to the caller."] # [doc = ""] # [doc = "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed"] # [doc = "proposal."] # [doc = "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via"] # [doc = "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length."] # [doc = ""] # [doc = "# <weight>"] # [doc = "## Weight"] # [doc = "- `O(B + M + P1 + P2)` where:"] # [doc = "  - `B` is `proposal` size in bytes (length-fee-bounded)"] # [doc = "  - `M` is members-count (code- and governance-bounded)"] # [doc = "  - `P1` is the complexity of `proposal` preimage."] # [doc = "  - `P2` is proposal-count (code-bounded)"] # [doc = "- DB:"] # [doc = " - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)"] # [doc = " - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec"] # [doc = "   `O(P2)`)"] # [doc = " - any mutations done while executing `proposal` (`P1`)"] # [doc = "- up to 3 events"] # [doc = "# </weight>"] close { proposal_hash : :: subxt :: ext :: sp_core :: H256 , # [codec (compact)] index : :: core :: primitive :: u32 , # [codec (compact)] proposal_weight_bound : runtime_types :: frame_support :: weights :: weight_v2 :: Weight , # [codec (compact)] length_bound : :: core :: primitive :: u32 , } , # [codec (index = 5)] # [doc = "Disapprove a proposal, close, and remove it from the system, regardless of its current"] # [doc = "state."] # [doc = ""] # [doc = "Must be called by the Root origin."] # [doc = ""] # [doc = "Parameters:"] # [doc = "* `proposal_hash`: The hash of the proposal that should be disapproved."] # [doc = ""] # [doc = "# <weight>"] # [doc = "Complexity: O(P) where P is the number of max proposals"] # [doc = "DB Weight:"] # [doc = "* Reads: Proposals"] # [doc = "* Writes: Voting, Proposals, ProposalOf"] # [doc = "# </weight>"] disapprove_proposal { proposal_hash : :: subxt :: ext :: sp_core :: H256 , } , }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Account is not a member"]
                    NotMember,
                    #[codec(index = 1)]
                    #[doc = "Duplicate proposals not allowed"]
                    DuplicateProposal,
                    #[codec(index = 2)]
                    #[doc = "Proposal must exist"]
                    ProposalMissing,
                    #[codec(index = 3)]
                    #[doc = "Mismatched index"]
                    WrongIndex,
                    #[codec(index = 4)]
                    #[doc = "Duplicate vote ignored"]
                    DuplicateVote,
                    #[codec(index = 5)]
                    #[doc = "Members are already initialized!"]
                    AlreadyInitialized,
                    #[codec(index = 6)]
                    #[doc = "The close call was made too early, before the end of the voting."]
                    TooEarly,
                    #[codec(index = 7)]
                    #[doc = "There can only be a maximum of `MaxProposals` active proposals."]
                    TooManyProposals,
                    #[codec(index = 8)]
                    #[doc = "The given weight bound for the proposal was too low."]
                    WrongProposalWeight,
                    #[codec(index = 9)]
                    #[doc = "The given length bound for the proposal was too low."]
                    WrongProposalLength,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A motion (given hash) has been proposed (by given account) with a threshold (given"]
                    #[doc = "`MemberCount`)."]
                    Proposed {
                        account: ::subxt::ext::sp_core::crypto::AccountId32,
                        proposal_index: ::core::primitive::u32,
                        proposal_hash: ::subxt::ext::sp_core::H256,
                        threshold: ::core::primitive::u32,
                    },
                    #[codec(index = 1)]
                    #[doc = "A motion (given hash) has been voted on by given account, leaving"]
                    #[doc = "a tally (yes votes and no votes given respectively as `MemberCount`)."]
                    Voted {
                        account: ::subxt::ext::sp_core::crypto::AccountId32,
                        proposal_hash: ::subxt::ext::sp_core::H256,
                        voted: ::core::primitive::bool,
                        yes: ::core::primitive::u32,
                        no: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    #[doc = "A motion was approved by the required threshold."]
                    Approved {
                        proposal_hash: ::subxt::ext::sp_core::H256,
                    },
                    #[codec(index = 3)]
                    #[doc = "A motion was not approved by the required threshold."]
                    Disapproved {
                        proposal_hash: ::subxt::ext::sp_core::H256,
                    },
                    #[codec(index = 4)]
                    #[doc = "A motion was executed; result will be `Ok` if it returned without error."]
                    Executed {
                        proposal_hash: ::subxt::ext::sp_core::H256,
                        result: ::core::result::Result<
                            (),
                            runtime_types::sp_runtime::DispatchError,
                        >,
                    },
                    #[codec(index = 5)]
                    #[doc = "A single member did some action; result will be `Ok` if it returned without error."]
                    MemberExecuted {
                        proposal_hash: ::subxt::ext::sp_core::H256,
                        result: ::core::result::Result<
                            (),
                            runtime_types::sp_runtime::DispatchError,
                        >,
                    },
                    #[codec(index = 6)]
                    #[doc = "A proposal was closed because its threshold was reached or after its duration was up."]
                    Closed {
                        proposal_hash: ::subxt::ext::sp_core::H256,
                        yes: ::core::primitive::u32,
                        no: ::core::primitive::u32,
                    },
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub enum RawOrigin<_0> {
                #[codec(index = 0)]
                Members(::core::primitive::u32, ::core::primitive::u32),
                #[codec(index = 1)]
                Member(_0),
                #[codec(index = 2)]
                _Phantom,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Votes<_0, _1> {
                pub index: ::core::primitive::u32,
                pub threshold: ::core::primitive::u32,
                pub ayes: ::std::vec::Vec<_0>,
                pub nays: ::std::vec::Vec<_0>,
                pub end: _1,
            }
        }
        pub mod pallet_democracy {
            use super::runtime_types;
            pub mod conviction {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                pub enum Conviction {
                    #[codec(index = 0)]
                    None,
                    #[codec(index = 1)]
                    Locked1x,
                    #[codec(index = 2)]
                    Locked2x,
                    #[codec(index = 3)]
                    Locked3x,
                    #[codec(index = 4)]
                    Locked4x,
                    #[codec(index = 5)]
                    Locked5x,
                    #[codec(index = 6)]
                    Locked6x,
                }
            }
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    # [codec (index = 0)] # [doc = "Propose a sensitive action to be taken."] # [doc = ""] # [doc = "The dispatch origin of this call must be _Signed_ and the sender must"] # [doc = "have funds to cover the deposit."] # [doc = ""] # [doc = "- `proposal_hash`: The hash of the proposal preimage."] # [doc = "- `value`: The amount of deposit (must be at least `MinimumDeposit`)."] # [doc = ""] # [doc = "Emits `Proposed`."] # [doc = ""] # [doc = "Weight: `O(p)`"] propose { proposal_hash : :: subxt :: ext :: sp_core :: H256 , # [codec (compact)] value : :: core :: primitive :: u128 , } , # [codec (index = 1)] # [doc = "Signals agreement with a particular proposal."] # [doc = ""] # [doc = "The dispatch origin of this call must be _Signed_ and the sender"] # [doc = "must have funds to cover the deposit, equal to the original deposit."] # [doc = ""] # [doc = "- `proposal`: The index of the proposal to second."] # [doc = "- `seconds_upper_bound`: an upper bound on the current number of seconds on this"] # [doc = "  proposal. Extrinsic is weighted according to this value with no refund."] # [doc = ""] # [doc = "Weight: `O(S)` where S is the number of seconds a proposal already has."] second { # [codec (compact)] proposal : :: core :: primitive :: u32 , # [codec (compact)] seconds_upper_bound : :: core :: primitive :: u32 , } , # [codec (index = 2)] # [doc = "Vote in a referendum. If `vote.is_aye()`, the vote is to enact the proposal;"] # [doc = "otherwise it is a vote to keep the status quo."] # [doc = ""] # [doc = "The dispatch origin of this call must be _Signed_."] # [doc = ""] # [doc = "- `ref_index`: The index of the referendum to vote for."] # [doc = "- `vote`: The vote configuration."] # [doc = ""] # [doc = "Weight: `O(R)` where R is the number of referendums the voter has voted on."] vote { # [codec (compact)] ref_index : :: core :: primitive :: u32 , vote : runtime_types :: pallet_democracy :: vote :: AccountVote < :: core :: primitive :: u128 > , } , # [codec (index = 3)] # [doc = "Schedule an emergency cancellation of a referendum. Cannot happen twice to the same"] # [doc = "referendum."] # [doc = ""] # [doc = "The dispatch origin of this call must be `CancellationOrigin`."] # [doc = ""] # [doc = "-`ref_index`: The index of the referendum to cancel."] # [doc = ""] # [doc = "Weight: `O(1)`."] emergency_cancel { ref_index : :: core :: primitive :: u32 , } , # [codec (index = 4)] # [doc = "Schedule a referendum to be tabled once it is legal to schedule an external"] # [doc = "referendum."] # [doc = ""] # [doc = "The dispatch origin of this call must be `ExternalOrigin`."] # [doc = ""] # [doc = "- `proposal_hash`: The preimage hash of the proposal."] # [doc = ""] # [doc = "Weight: `O(V)` with V number of vetoers in the blacklist of proposal."] # [doc = "  Decoding vec of length V. Charged as maximum"] external_propose { proposal_hash : :: subxt :: ext :: sp_core :: H256 , } , # [codec (index = 5)] # [doc = "Schedule a majority-carries referendum to be tabled next once it is legal to schedule"] # [doc = "an external referendum."] # [doc = ""] # [doc = "The dispatch of this call must be `ExternalMajorityOrigin`."] # [doc = ""] # [doc = "- `proposal_hash`: The preimage hash of the proposal."] # [doc = ""] # [doc = "Unlike `external_propose`, blacklisting has no effect on this and it may replace a"] # [doc = "pre-scheduled `external_propose` call."] # [doc = ""] # [doc = "Weight: `O(1)`"] external_propose_majority { proposal_hash : :: subxt :: ext :: sp_core :: H256 , } , # [codec (index = 6)] # [doc = "Schedule a negative-turnout-bias referendum to be tabled next once it is legal to"] # [doc = "schedule an external referendum."] # [doc = ""] # [doc = "The dispatch of this call must be `ExternalDefaultOrigin`."] # [doc = ""] # [doc = "- `proposal_hash`: The preimage hash of the proposal."] # [doc = ""] # [doc = "Unlike `external_propose`, blacklisting has no effect on this and it may replace a"] # [doc = "pre-scheduled `external_propose` call."] # [doc = ""] # [doc = "Weight: `O(1)`"] external_propose_default { proposal_hash : :: subxt :: ext :: sp_core :: H256 , } , # [codec (index = 7)] # [doc = "Schedule the currently externally-proposed majority-carries referendum to be tabled"] # [doc = "immediately. If there is no externally-proposed referendum currently, or if there is one"] # [doc = "but it is not a majority-carries referendum then it fails."] # [doc = ""] # [doc = "The dispatch of this call must be `FastTrackOrigin`."] # [doc = ""] # [doc = "- `proposal_hash`: The hash of the current external proposal."] # [doc = "- `voting_period`: The period that is allowed for voting on this proposal."] # [doc = "\tMust be always greater than zero."] # [doc = "\tFor `FastTrackOrigin` must be equal or greater than `FastTrackVotingPeriod`."] # [doc = "- `delay`: The number of block after voting has ended in approval and this should be"] # [doc = "  enacted. This doesn't have a minimum amount."] # [doc = ""] # [doc = "Emits `Started`."] # [doc = ""] # [doc = "Weight: `O(1)`"] fast_track { proposal_hash : :: subxt :: ext :: sp_core :: H256 , voting_period : :: core :: primitive :: u64 , delay : :: core :: primitive :: u64 , } , # [codec (index = 8)] # [doc = "Veto and blacklist the external proposal hash."] # [doc = ""] # [doc = "The dispatch origin of this call must be `VetoOrigin`."] # [doc = ""] # [doc = "- `proposal_hash`: The preimage hash of the proposal to veto and blacklist."] # [doc = ""] # [doc = "Emits `Vetoed`."] # [doc = ""] # [doc = "Weight: `O(V + log(V))` where V is number of `existing vetoers`"] veto_external { proposal_hash : :: subxt :: ext :: sp_core :: H256 , } , # [codec (index = 9)] # [doc = "Remove a referendum."] # [doc = ""] # [doc = "The dispatch origin of this call must be _Root_."] # [doc = ""] # [doc = "- `ref_index`: The index of the referendum to cancel."] # [doc = ""] # [doc = "# Weight: `O(1)`."] cancel_referendum { # [codec (compact)] ref_index : :: core :: primitive :: u32 , } , # [codec (index = 10)] # [doc = "Cancel a proposal queued for enactment."] # [doc = ""] # [doc = "The dispatch origin of this call must be _Root_."] # [doc = ""] # [doc = "- `which`: The index of the referendum to cancel."] # [doc = ""] # [doc = "Weight: `O(D)` where `D` is the items in the dispatch queue. Weighted as `D = 10`."] cancel_queued { which : :: core :: primitive :: u32 , } , # [codec (index = 11)] # [doc = "Delegate the voting power (with some given conviction) of the sending account."] # [doc = ""] # [doc = "The balance delegated is locked for as long as it's delegated, and thereafter for the"] # [doc = "time appropriate for the conviction's lock period."] # [doc = ""] # [doc = "The dispatch origin of this call must be _Signed_, and the signing account must either:"] # [doc = "  - be delegating already; or"] # [doc = "  - have no voting activity (if there is, then it will need to be removed/consolidated"] # [doc = "    through `reap_vote` or `unvote`)."] # [doc = ""] # [doc = "- `to`: The account whose voting the `target` account's voting power will follow."] # [doc = "- `conviction`: The conviction that will be attached to the delegated votes. When the"] # [doc = "  account is undelegated, the funds will be locked for the corresponding period."] # [doc = "- `balance`: The amount of the account's balance to be used in delegating. This must not"] # [doc = "  be more than the account's current balance."] # [doc = ""] # [doc = "Emits `Delegated`."] # [doc = ""] # [doc = "Weight: `O(R)` where R is the number of referendums the voter delegating to has"] # [doc = "  voted on. Weight is charged as if maximum votes."] delegate { to : :: subxt :: ext :: sp_runtime :: MultiAddress < :: subxt :: ext :: sp_core :: crypto :: AccountId32 , :: core :: primitive :: u32 > , conviction : runtime_types :: pallet_democracy :: conviction :: Conviction , balance : :: core :: primitive :: u128 , } , # [codec (index = 12)] # [doc = "Undelegate the voting power of the sending account."] # [doc = ""] # [doc = "Tokens may be unlocked following once an amount of time consistent with the lock period"] # [doc = "of the conviction with which the delegation was issued."] # [doc = ""] # [doc = "The dispatch origin of this call must be _Signed_ and the signing account must be"] # [doc = "currently delegating."] # [doc = ""] # [doc = "Emits `Undelegated`."] # [doc = ""] # [doc = "Weight: `O(R)` where R is the number of referendums the voter delegating to has"] # [doc = "  voted on. Weight is charged as if maximum votes."] undelegate , # [codec (index = 13)] # [doc = "Clears all public proposals."] # [doc = ""] # [doc = "The dispatch origin of this call must be _Root_."] # [doc = ""] # [doc = "Weight: `O(1)`."] clear_public_proposals , # [codec (index = 14)] # [doc = "Register the preimage for an upcoming proposal. This doesn't require the proposal to be"] # [doc = "in the dispatch queue but does require a deposit, returned once enacted."] # [doc = ""] # [doc = "The dispatch origin of this call must be _Signed_."] # [doc = ""] # [doc = "- `encoded_proposal`: The preimage of a proposal."] # [doc = ""] # [doc = "Emits `PreimageNoted`."] # [doc = ""] # [doc = "Weight: `O(E)` with E size of `encoded_proposal` (protected by a required deposit)."] note_preimage { encoded_proposal : :: std :: vec :: Vec < :: core :: primitive :: u8 > , } , # [codec (index = 15)] # [doc = "Same as `note_preimage` but origin is `OperationalPreimageOrigin`."] note_preimage_operational { encoded_proposal : :: std :: vec :: Vec < :: core :: primitive :: u8 > , } , # [codec (index = 16)] # [doc = "Register the preimage for an upcoming proposal. This requires the proposal to be"] # [doc = "in the dispatch queue. No deposit is needed. When this call is successful, i.e."] # [doc = "the preimage has not been uploaded before and matches some imminent proposal,"] # [doc = "no fee is paid."] # [doc = ""] # [doc = "The dispatch origin of this call must be _Signed_."] # [doc = ""] # [doc = "- `encoded_proposal`: The preimage of a proposal."] # [doc = ""] # [doc = "Emits `PreimageNoted`."] # [doc = ""] # [doc = "Weight: `O(E)` with E size of `encoded_proposal` (protected by a required deposit)."] note_imminent_preimage { encoded_proposal : :: std :: vec :: Vec < :: core :: primitive :: u8 > , } , # [codec (index = 17)] # [doc = "Same as `note_imminent_preimage` but origin is `OperationalPreimageOrigin`."] note_imminent_preimage_operational { encoded_proposal : :: std :: vec :: Vec < :: core :: primitive :: u8 > , } , # [codec (index = 18)] # [doc = "Remove an expired proposal preimage and collect the deposit."] # [doc = ""] # [doc = "The dispatch origin of this call must be _Signed_."] # [doc = ""] # [doc = "- `proposal_hash`: The preimage hash of a proposal."] # [doc = "- `proposal_length_upper_bound`: an upper bound on length of the proposal. Extrinsic is"] # [doc = "  weighted according to this value with no refund."] # [doc = ""] # [doc = "This will only work after `VotingPeriod` blocks from the time that the preimage was"] # [doc = "noted, if it's the same account doing it. If it's a different account, then it'll only"] # [doc = "work an additional `EnactmentPeriod` later."] # [doc = ""] # [doc = "Emits `PreimageReaped`."] # [doc = ""] # [doc = "Weight: `O(D)` where D is length of proposal."] reap_preimage { proposal_hash : :: subxt :: ext :: sp_core :: H256 , # [codec (compact)] proposal_len_upper_bound : :: core :: primitive :: u32 , } , # [codec (index = 19)] # [doc = "Unlock tokens that have an expired lock."] # [doc = ""] # [doc = "The dispatch origin of this call must be _Signed_."] # [doc = ""] # [doc = "- `target`: The account to remove the lock on."] # [doc = ""] # [doc = "Weight: `O(R)` with R number of vote of target."] unlock { target : :: subxt :: ext :: sp_runtime :: MultiAddress < :: subxt :: ext :: sp_core :: crypto :: AccountId32 , :: core :: primitive :: u32 > , } , # [codec (index = 20)] # [doc = "Remove a vote for a referendum."] # [doc = ""] # [doc = "If:"] # [doc = "- the referendum was cancelled, or"] # [doc = "- the referendum is ongoing, or"] # [doc = "- the referendum has ended such that"] # [doc = "  - the vote of the account was in opposition to the result; or"] # [doc = "  - there was no conviction to the account's vote; or"] # [doc = "  - the account made a split vote"] # [doc = "...then the vote is removed cleanly and a following call to `unlock` may result in more"] # [doc = "funds being available."] # [doc = ""] # [doc = "If, however, the referendum has ended and:"] # [doc = "- it finished corresponding to the vote of the account, and"] # [doc = "- the account made a standard vote with conviction, and"] # [doc = "- the lock period of the conviction is not over"] # [doc = "...then the lock will be aggregated into the overall account's lock, which may involve"] # [doc = "*overlocking* (where the two locks are combined into a single lock that is the maximum"] # [doc = "of both the amount locked and the time is it locked for)."] # [doc = ""] # [doc = "The dispatch origin of this call must be _Signed_, and the signer must have a vote"] # [doc = "registered for referendum `index`."] # [doc = ""] # [doc = "- `index`: The index of referendum of the vote to be removed."] # [doc = ""] # [doc = "Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on."] # [doc = "  Weight is calculated for the maximum number of vote."] remove_vote { index : :: core :: primitive :: u32 , } , # [codec (index = 21)] # [doc = "Remove a vote for a referendum."] # [doc = ""] # [doc = "If the `target` is equal to the signer, then this function is exactly equivalent to"] # [doc = "`remove_vote`. If not equal to the signer, then the vote must have expired,"] # [doc = "either because the referendum was cancelled, because the voter lost the referendum or"] # [doc = "because the conviction period is over."] # [doc = ""] # [doc = "The dispatch origin of this call must be _Signed_."] # [doc = ""] # [doc = "- `target`: The account of the vote to be removed; this account must have voted for"] # [doc = "  referendum `index`."] # [doc = "- `index`: The index of referendum of the vote to be removed."] # [doc = ""] # [doc = "Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on."] # [doc = "  Weight is calculated for the maximum number of vote."] remove_other_vote { target : :: subxt :: ext :: sp_runtime :: MultiAddress < :: subxt :: ext :: sp_core :: crypto :: AccountId32 , :: core :: primitive :: u32 > , index : :: core :: primitive :: u32 , } , # [codec (index = 22)] # [doc = "Enact a proposal from a referendum. For now we just make the weight be the maximum."] enact_proposal { proposal_hash : :: subxt :: ext :: sp_core :: H256 , index : :: core :: primitive :: u32 , } , # [codec (index = 23)] # [doc = "Permanently place a proposal into the blacklist. This prevents it from ever being"] # [doc = "proposed again."] # [doc = ""] # [doc = "If called on a queued public or external proposal, then this will result in it being"] # [doc = "removed. If the `ref_index` supplied is an active referendum with the proposal hash,"] # [doc = "then it will be cancelled."] # [doc = ""] # [doc = "The dispatch origin of this call must be `BlacklistOrigin`."] # [doc = ""] # [doc = "- `proposal_hash`: The proposal hash to blacklist permanently."] # [doc = "- `ref_index`: An ongoing referendum whose hash is `proposal_hash`, which will be"] # [doc = "cancelled."] # [doc = ""] # [doc = "Weight: `O(p)` (though as this is an high-privilege dispatch, we assume it has a"] # [doc = "  reasonable value)."] blacklist { proposal_hash : :: subxt :: ext :: sp_core :: H256 , maybe_ref_index : :: core :: option :: Option < :: core :: primitive :: u32 > , } , # [codec (index = 24)] # [doc = "Remove a proposal."] # [doc = ""] # [doc = "The dispatch origin of this call must be `CancelProposalOrigin`."] # [doc = ""] # [doc = "- `prop_index`: The index of the proposal to cancel."] # [doc = ""] # [doc = "Weight: `O(p)` where `p = PublicProps::<T>::decode_len()`"] cancel_proposal { # [codec (compact)] prop_index : :: core :: primitive :: u32 , } , }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Value too low"]
                    ValueLow,
                    #[codec(index = 1)]
                    #[doc = "Proposal does not exist"]
                    ProposalMissing,
                    #[codec(index = 2)]
                    #[doc = "Cannot cancel the same proposal twice"]
                    AlreadyCanceled,
                    #[codec(index = 3)]
                    #[doc = "Proposal already made"]
                    DuplicateProposal,
                    #[codec(index = 4)]
                    #[doc = "Proposal still blacklisted"]
                    ProposalBlacklisted,
                    #[codec(index = 5)]
                    #[doc = "Next external proposal not simple majority"]
                    NotSimpleMajority,
                    #[codec(index = 6)]
                    #[doc = "Invalid hash"]
                    InvalidHash,
                    #[codec(index = 7)]
                    #[doc = "No external proposal"]
                    NoProposal,
                    #[codec(index = 8)]
                    #[doc = "Identity may not veto a proposal twice"]
                    AlreadyVetoed,
                    #[codec(index = 9)]
                    #[doc = "Preimage already noted"]
                    DuplicatePreimage,
                    #[codec(index = 10)]
                    #[doc = "Not imminent"]
                    NotImminent,
                    #[codec(index = 11)]
                    #[doc = "Too early"]
                    TooEarly,
                    #[codec(index = 12)]
                    #[doc = "Imminent"]
                    Imminent,
                    #[codec(index = 13)]
                    #[doc = "Preimage not found"]
                    PreimageMissing,
                    #[codec(index = 14)]
                    #[doc = "Vote given for invalid referendum"]
                    ReferendumInvalid,
                    #[codec(index = 15)]
                    #[doc = "Invalid preimage"]
                    PreimageInvalid,
                    #[codec(index = 16)]
                    #[doc = "No proposals waiting"]
                    NoneWaiting,
                    #[codec(index = 17)]
                    #[doc = "The given account did not vote on the referendum."]
                    NotVoter,
                    #[codec(index = 18)]
                    #[doc = "The actor has no permission to conduct the action."]
                    NoPermission,
                    #[codec(index = 19)]
                    #[doc = "The account is already delegating."]
                    AlreadyDelegating,
                    #[codec(index = 20)]
                    #[doc = "Too high a balance was provided that the account cannot afford."]
                    InsufficientFunds,
                    #[codec(index = 21)]
                    #[doc = "The account is not currently delegating."]
                    NotDelegating,
                    #[codec(index = 22)]
                    #[doc = "The account currently has votes attached to it and the operation cannot succeed until"]
                    #[doc = "these are removed, either through `unvote` or `reap_vote`."]
                    VotesExist,
                    #[codec(index = 23)]
                    #[doc = "The instant referendum origin is currently disallowed."]
                    InstantNotAllowed,
                    #[codec(index = 24)]
                    #[doc = "Delegation to oneself makes no sense."]
                    Nonsense,
                    #[codec(index = 25)]
                    #[doc = "Invalid upper bound."]
                    WrongUpperBound,
                    #[codec(index = 26)]
                    #[doc = "Maximum number of votes reached."]
                    MaxVotesReached,
                    #[codec(index = 27)]
                    #[doc = "Maximum number of proposals reached."]
                    TooManyProposals,
                    #[codec(index = 28)]
                    #[doc = "Voting period too low"]
                    VotingPeriodLow,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    # [codec (index = 0)] # [doc = "A motion has been proposed by a public account."] Proposed { proposal_index : :: core :: primitive :: u32 , deposit : :: core :: primitive :: u128 , } , # [codec (index = 1)] # [doc = "A public proposal has been tabled for referendum vote."] Tabled { proposal_index : :: core :: primitive :: u32 , deposit : :: core :: primitive :: u128 , depositors : :: std :: vec :: Vec < :: subxt :: ext :: sp_core :: crypto :: AccountId32 > , } , # [codec (index = 2)] # [doc = "An external proposal has been tabled."] ExternalTabled , # [codec (index = 3)] # [doc = "A referendum has begun."] Started { ref_index : :: core :: primitive :: u32 , threshold : runtime_types :: pallet_democracy :: vote_threshold :: VoteThreshold , } , # [codec (index = 4)] # [doc = "A proposal has been approved by referendum."] Passed { ref_index : :: core :: primitive :: u32 , } , # [codec (index = 5)] # [doc = "A proposal has been rejected by referendum."] NotPassed { ref_index : :: core :: primitive :: u32 , } , # [codec (index = 6)] # [doc = "A referendum has been cancelled."] Cancelled { ref_index : :: core :: primitive :: u32 , } , # [codec (index = 7)] # [doc = "A proposal has been enacted."] Executed { ref_index : :: core :: primitive :: u32 , result : :: core :: result :: Result < () , runtime_types :: sp_runtime :: DispatchError > , } , # [codec (index = 8)] # [doc = "An account has delegated their vote to another account."] Delegated { who : :: subxt :: ext :: sp_core :: crypto :: AccountId32 , target : :: subxt :: ext :: sp_core :: crypto :: AccountId32 , } , # [codec (index = 9)] # [doc = "An account has cancelled a previous delegation operation."] Undelegated { account : :: subxt :: ext :: sp_core :: crypto :: AccountId32 , } , # [codec (index = 10)] # [doc = "An external proposal has been vetoed."] Vetoed { who : :: subxt :: ext :: sp_core :: crypto :: AccountId32 , proposal_hash : :: subxt :: ext :: sp_core :: H256 , until : :: core :: primitive :: u64 , } , # [codec (index = 11)] # [doc = "A proposal's preimage was noted, and the deposit taken."] PreimageNoted { proposal_hash : :: subxt :: ext :: sp_core :: H256 , who : :: subxt :: ext :: sp_core :: crypto :: AccountId32 , deposit : :: core :: primitive :: u128 , } , # [codec (index = 12)] # [doc = "A proposal preimage was removed and used (the deposit was returned)."] PreimageUsed { proposal_hash : :: subxt :: ext :: sp_core :: H256 , provider : :: subxt :: ext :: sp_core :: crypto :: AccountId32 , deposit : :: core :: primitive :: u128 , } , # [codec (index = 13)] # [doc = "A proposal could not be executed because its preimage was invalid."] PreimageInvalid { proposal_hash : :: subxt :: ext :: sp_core :: H256 , ref_index : :: core :: primitive :: u32 , } , # [codec (index = 14)] # [doc = "A proposal could not be executed because its preimage was missing."] PreimageMissing { proposal_hash : :: subxt :: ext :: sp_core :: H256 , ref_index : :: core :: primitive :: u32 , } , # [codec (index = 15)] # [doc = "A registered preimage was removed and the deposit collected by the reaper."] PreimageReaped { proposal_hash : :: subxt :: ext :: sp_core :: H256 , provider : :: subxt :: ext :: sp_core :: crypto :: AccountId32 , deposit : :: core :: primitive :: u128 , reaper : :: subxt :: ext :: sp_core :: crypto :: AccountId32 , } , # [codec (index = 16)] # [doc = "A proposal_hash has been blacklisted permanently."] Blacklisted { proposal_hash : :: subxt :: ext :: sp_core :: H256 , } , # [codec (index = 17)] # [doc = "An account has voted in a referendum"] Voted { voter : :: subxt :: ext :: sp_core :: crypto :: AccountId32 , ref_index : :: core :: primitive :: u32 , vote : runtime_types :: pallet_democracy :: vote :: AccountVote < :: core :: primitive :: u128 > , } , # [codec (index = 18)] # [doc = "An account has secconded a proposal"] Seconded { seconder : :: subxt :: ext :: sp_core :: crypto :: AccountId32 , prop_index : :: core :: primitive :: u32 , } , # [codec (index = 19)] # [doc = "A proposal got canceled."] ProposalCanceled { prop_index : :: core :: primitive :: u32 , } , }
            }
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                pub struct Delegations<_0> {
                    pub votes: _0,
                    pub capital: _0,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                pub enum ReferendumInfo<_0, _1, _2> {
                    # [codec (index = 0)] Ongoing (runtime_types :: pallet_democracy :: types :: ReferendumStatus < _0 , _1 , _2 > ,) , # [codec (index = 1)] Finished { approved : :: core :: primitive :: bool , end : _0 , } , }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                pub struct ReferendumStatus < _0 , _1 , _2 > { pub end : _0 , pub proposal_hash : _1 , pub threshold : runtime_types :: pallet_democracy :: vote_threshold :: VoteThreshold , pub delay : _0 , pub tally : runtime_types :: pallet_democracy :: types :: Tally < _2 > , }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                pub struct Tally<_0> {
                    pub ayes: _0,
                    pub nays: _0,
                    pub turnout: _0,
                }
            }
            pub mod vote {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                pub enum AccountVote<_0> {
                    #[codec(index = 0)]
                    Standard {
                        vote: runtime_types::pallet_democracy::vote::Vote,
                        balance: _0,
                    },
                    #[codec(index = 1)]
                    Split { aye: _0, nay: _0 },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                pub struct PriorLock<_0, _1>(pub _0, pub _1);
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                pub struct Vote(pub ::core::primitive::u8);
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                pub enum Voting<_0, _1, _2> {
                    # [codec (index = 0)] Direct { votes : :: std :: vec :: Vec < (:: core :: primitive :: u32 , runtime_types :: pallet_democracy :: vote :: AccountVote < _0 > ,) > , delegations : runtime_types :: pallet_democracy :: types :: Delegations < _0 > , prior : runtime_types :: pallet_democracy :: vote :: PriorLock < _2 , _0 > , } , # [codec (index = 1)] Delegating { balance : _0 , target : _1 , conviction : runtime_types :: pallet_democracy :: conviction :: Conviction , delegations : runtime_types :: pallet_democracy :: types :: Delegations < _0 > , prior : runtime_types :: pallet_democracy :: vote :: PriorLock < _2 , _0 > , } , }
            }
            pub mod vote_threshold {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                pub enum VoteThreshold {
                    #[codec(index = 0)]
                    SuperMajorityApprove,
                    #[codec(index = 1)]
                    SuperMajorityAgainst,
                    #[codec(index = 2)]
                    SimpleMajority,
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub enum PreimageStatus<_0, _1, _2> {
                #[codec(index = 0)]
                Missing(_2),
                #[codec(index = 1)]
                Available {
                    data: ::std::vec::Vec<::core::primitive::u8>,
                    provider: _0,
                    deposit: _1,
                    since: _2,
                    expiry: ::core::option::Option<_2>,
                },
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub enum Releases {
                #[codec(index = 0)]
                V1,
            }
        }
        pub mod pallet_election_provider_multi_phase {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    # [codec (index = 0)] # [doc = "Submit a solution for the unsigned phase."] # [doc = ""] # [doc = "The dispatch origin fo this call must be __none__."] # [doc = ""] # [doc = "This submission is checked on the fly. Moreover, this unsigned solution is only"] # [doc = "validated when submitted to the pool from the **local** node. Effectively, this means"] # [doc = "that only active validators can submit this transaction when authoring a block (similar"] # [doc = "to an inherent)."] # [doc = ""] # [doc = "To prevent any incorrect solution (and thus wasted time/weight), this transaction will"] # [doc = "panic if the solution submitted by the validator is invalid in any way, effectively"] # [doc = "putting their authoring reward at risk."] # [doc = ""] # [doc = "No deposit or reward is associated with this submission."] submit_unsigned { raw_solution : :: std :: boxed :: Box < runtime_types :: pallet_election_provider_multi_phase :: RawSolution < runtime_types :: webb_standalone_runtime :: NposSolution16 > > , witness : runtime_types :: pallet_election_provider_multi_phase :: SolutionOrSnapshotSize , } , # [codec (index = 1)] # [doc = "Set a new value for `MinimumUntrustedScore`."] # [doc = ""] # [doc = "Dispatch origin must be aligned with `T::ForceOrigin`."] # [doc = ""] # [doc = "This check can be turned off by setting the value to `None`."] set_minimum_untrusted_score { maybe_next_score : :: core :: option :: Option < runtime_types :: sp_npos_elections :: ElectionScore > , } , # [codec (index = 2)] # [doc = "Set a solution in the queue, to be handed out to the client of this pallet in the next"] # [doc = "call to `ElectionProvider::elect`."] # [doc = ""] # [doc = "This can only be set by `T::ForceOrigin`, and only when the phase is `Emergency`."] # [doc = ""] # [doc = "The solution is not checked for any feasibility and is assumed to be trustworthy, as any"] # [doc = "feasibility check itself can in principle cause the election process to fail (due to"] # [doc = "memory/weight constrains)."] set_emergency_election_result { supports : :: std :: vec :: Vec < (:: subxt :: ext :: sp_core :: crypto :: AccountId32 , runtime_types :: sp_npos_elections :: Support < :: subxt :: ext :: sp_core :: crypto :: AccountId32 > ,) > , } , # [codec (index = 3)] # [doc = "Submit a solution for the signed phase."] # [doc = ""] # [doc = "The dispatch origin fo this call must be __signed__."] # [doc = ""] # [doc = "The solution is potentially queued, based on the claimed score and processed at the end"] # [doc = "of the signed phase."] # [doc = ""] # [doc = "A deposit is reserved and recorded for the solution. Based on the outcome, the solution"] # [doc = "might be rewarded, slashed, or get all or a part of the deposit back."] submit { raw_solution : :: std :: boxed :: Box < runtime_types :: pallet_election_provider_multi_phase :: RawSolution < runtime_types :: webb_standalone_runtime :: NposSolution16 > > , } , # [codec (index = 4)] # [doc = "Trigger the governance fallback."] # [doc = ""] # [doc = "This can only be called when [`Phase::Emergency`] is enabled, as an alternative to"] # [doc = "calling [`Call::set_emergency_election_result`]."] governance_fallback { maybe_max_voters : :: core :: option :: Option < :: core :: primitive :: u32 > , maybe_max_targets : :: core :: option :: Option < :: core :: primitive :: u32 > , } , }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "Error of the pallet that can be returned in response to dispatches."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Submission was too early."]
                    PreDispatchEarlySubmission,
                    #[codec(index = 1)]
                    #[doc = "Wrong number of winners presented."]
                    PreDispatchWrongWinnerCount,
                    #[codec(index = 2)]
                    #[doc = "Submission was too weak, score-wise."]
                    PreDispatchWeakSubmission,
                    #[codec(index = 3)]
                    #[doc = "The queue was full, and the solution was not better than any of the existing ones."]
                    SignedQueueFull,
                    #[codec(index = 4)]
                    #[doc = "The origin failed to pay the deposit."]
                    SignedCannotPayDeposit,
                    #[codec(index = 5)]
                    #[doc = "Witness data to dispatchable is invalid."]
                    SignedInvalidWitness,
                    #[codec(index = 6)]
                    #[doc = "The signed submission consumes too much weight"]
                    SignedTooMuchWeight,
                    #[codec(index = 7)]
                    #[doc = "OCW submitted solution for wrong round"]
                    OcwCallWrongEra,
                    #[codec(index = 8)]
                    #[doc = "Snapshot metadata should exist but didn't."]
                    MissingSnapshotMetadata,
                    #[codec(index = 9)]
                    #[doc = "`Self::insert_submission` returned an invalid index."]
                    InvalidSubmissionIndex,
                    #[codec(index = 10)]
                    #[doc = "The call is not allowed at this point."]
                    CallNotAllowed,
                    #[codec(index = 11)]
                    #[doc = "The fallback failed"]
                    FallbackFailed,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    # [codec (index = 0)] # [doc = "A solution was stored with the given compute."] # [doc = ""] # [doc = "If the solution is signed, this means that it hasn't yet been processed. If the"] # [doc = "solution is unsigned, this means that it has also been processed."] # [doc = ""] # [doc = "The `bool` is `true` when a previous solution was ejected to make room for this one."] SolutionStored { compute : runtime_types :: pallet_election_provider_multi_phase :: ElectionCompute , prev_ejected : :: core :: primitive :: bool , } , # [codec (index = 1)] # [doc = "The election has been finalized, with the given computation and score."] ElectionFinalized { compute : runtime_types :: pallet_election_provider_multi_phase :: ElectionCompute , score : runtime_types :: sp_npos_elections :: ElectionScore , } , # [codec (index = 2)] # [doc = "An election failed."] # [doc = ""] # [doc = "Not much can be said about which computes failed in the process."] ElectionFailed , # [codec (index = 3)] # [doc = "An account has been rewarded for their signed submission being finalized."] Rewarded { account : :: subxt :: ext :: sp_core :: crypto :: AccountId32 , value : :: core :: primitive :: u128 , } , # [codec (index = 4)] # [doc = "An account has been slashed for submitting an invalid signed submission."] Slashed { account : :: subxt :: ext :: sp_core :: crypto :: AccountId32 , value : :: core :: primitive :: u128 , } , # [codec (index = 5)] # [doc = "The signed phase of the given round has started."] SignedPhaseStarted { round : :: core :: primitive :: u32 , } , # [codec (index = 6)] # [doc = "The unsigned phase of the given round has started."] UnsignedPhaseStarted { round : :: core :: primitive :: u32 , } , }
            }
            pub mod signed {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                pub struct SignedSubmission < _0 , _1 , _2 > { pub who : _0 , pub deposit : _1 , pub raw_solution : runtime_types :: pallet_election_provider_multi_phase :: RawSolution < _2 > , pub call_fee : _1 , }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub enum ElectionCompute {
                #[codec(index = 0)]
                OnChain,
                #[codec(index = 1)]
                Signed,
                #[codec(index = 2)]
                Unsigned,
                #[codec(index = 3)]
                Fallback,
                #[codec(index = 4)]
                Emergency,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub enum Phase<_0> {
                #[codec(index = 0)]
                Off,
                #[codec(index = 1)]
                Signed,
                #[codec(index = 2)]
                Unsigned((::core::primitive::bool, _0)),
                #[codec(index = 3)]
                Emergency,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct RawSolution<_0> {
                pub solution: _0,
                pub score: runtime_types::sp_npos_elections::ElectionScore,
                pub round: ::core::primitive::u32,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct ReadySolution < _0 > { pub supports : :: std :: vec :: Vec < (_0 , runtime_types :: sp_npos_elections :: Support < _0 > ,) > , pub score : runtime_types :: sp_npos_elections :: ElectionScore , pub compute : runtime_types :: pallet_election_provider_multi_phase :: ElectionCompute , }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct RoundSnapshot {
                pub voters: ::std::vec::Vec<(
                    ::subxt::ext::sp_core::crypto::AccountId32,
                    ::core::primitive::u64,
                    runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                    >,
                )>,
                pub targets:
                    ::std::vec::Vec<::subxt::ext::sp_core::crypto::AccountId32>,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct SolutionOrSnapshotSize {
                #[codec(compact)]
                pub voters: ::core::primitive::u32,
                #[codec(compact)]
                pub targets: ::core::primitive::u32,
            }
        }
        pub mod pallet_elections_phragmen {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    # [codec (index = 0)] # [doc = "Vote for a set of candidates for the upcoming round of election. This can be called to"] # [doc = "set the initial votes, or update already existing votes."] # [doc = ""] # [doc = "Upon initial voting, `value` units of `who`'s balance is locked and a deposit amount is"] # [doc = "reserved. The deposit is based on the number of votes and can be updated over time."] # [doc = ""] # [doc = "The `votes` should:"] # [doc = "  - not be empty."] # [doc = "  - be less than the number of possible candidates. Note that all current members and"] # [doc = "    runners-up are also automatically candidates for the next round."] # [doc = ""] # [doc = "If `value` is more than `who`'s free balance, then the maximum of the two is used."] # [doc = ""] # [doc = "The dispatch origin of this call must be signed."] # [doc = ""] # [doc = "### Warning"] # [doc = ""] # [doc = "It is the responsibility of the caller to **NOT** place all of their balance into the"] # [doc = "lock and keep some for further operations."] # [doc = ""] # [doc = "# <weight>"] # [doc = "We assume the maximum weight among all 3 cases: vote_equal, vote_more and vote_less."] # [doc = "# </weight>"] vote { votes : :: std :: vec :: Vec < :: subxt :: ext :: sp_core :: crypto :: AccountId32 > , # [codec (compact)] value : :: core :: primitive :: u128 , } , # [codec (index = 1)] # [doc = "Remove `origin` as a voter."] # [doc = ""] # [doc = "This removes the lock and returns the deposit."] # [doc = ""] # [doc = "The dispatch origin of this call must be signed and be a voter."] remove_voter , # [codec (index = 2)] # [doc = "Submit oneself for candidacy. A fixed amount of deposit is recorded."] # [doc = ""] # [doc = "All candidates are wiped at the end of the term. They either become a member/runner-up,"] # [doc = "or leave the system while their deposit is slashed."] # [doc = ""] # [doc = "The dispatch origin of this call must be signed."] # [doc = ""] # [doc = "### Warning"] # [doc = ""] # [doc = "Even if a candidate ends up being a member, they must call [`Call::renounce_candidacy`]"] # [doc = "to get their deposit back. Losing the spot in an election will always lead to a slash."] # [doc = ""] # [doc = "# <weight>"] # [doc = "The number of current candidates must be provided as witness data."] # [doc = "# </weight>"] submit_candidacy { # [codec (compact)] candidate_count : :: core :: primitive :: u32 , } , # [codec (index = 3)] # [doc = "Renounce one's intention to be a candidate for the next election round. 3 potential"] # [doc = "outcomes exist:"] # [doc = ""] # [doc = "- `origin` is a candidate and not elected in any set. In this case, the deposit is"] # [doc = "  unreserved, returned and origin is removed as a candidate."] # [doc = "- `origin` is a current runner-up. In this case, the deposit is unreserved, returned and"] # [doc = "  origin is removed as a runner-up."] # [doc = "- `origin` is a current member. In this case, the deposit is unreserved and origin is"] # [doc = "  removed as a member, consequently not being a candidate for the next round anymore."] # [doc = "  Similar to [`remove_member`](Self::remove_member), if replacement runners exists, they"] # [doc = "  are immediately used. If the prime is renouncing, then no prime will exist until the"] # [doc = "  next round."] # [doc = ""] # [doc = "The dispatch origin of this call must be signed, and have one of the above roles."] # [doc = ""] # [doc = "# <weight>"] # [doc = "The type of renouncing must be provided as witness data."] # [doc = "# </weight>"] renounce_candidacy { renouncing : runtime_types :: pallet_elections_phragmen :: Renouncing , } , # [codec (index = 4)] # [doc = "Remove a particular member from the set. This is effective immediately and the bond of"] # [doc = "the outgoing member is slashed."] # [doc = ""] # [doc = "If a runner-up is available, then the best runner-up will be removed and replaces the"] # [doc = "outgoing member. Otherwise, if `rerun_election` is `true`, a new phragmen election is"] # [doc = "started, else, nothing happens."] # [doc = ""] # [doc = "If `slash_bond` is set to true, the bond of the member being removed is slashed. Else,"] # [doc = "it is returned."] # [doc = ""] # [doc = "The dispatch origin of this call must be root."] # [doc = ""] # [doc = "Note that this does not affect the designated block number of the next election."] # [doc = ""] # [doc = "# <weight>"] # [doc = "If we have a replacement, we use a small weight. Else, since this is a root call and"] # [doc = "will go into phragmen, we assume full block for now."] # [doc = "# </weight>"] remove_member { who : :: subxt :: ext :: sp_runtime :: MultiAddress < :: subxt :: ext :: sp_core :: crypto :: AccountId32 , :: core :: primitive :: u32 > , slash_bond : :: core :: primitive :: bool , rerun_election : :: core :: primitive :: bool , } , # [codec (index = 5)] # [doc = "Clean all voters who are defunct (i.e. they do not serve any purpose at all). The"] # [doc = "deposit of the removed voters are returned."] # [doc = ""] # [doc = "This is an root function to be used only for cleaning the state."] # [doc = ""] # [doc = "The dispatch origin of this call must be root."] # [doc = ""] # [doc = "# <weight>"] # [doc = "The total number of voters and those that are defunct must be provided as witness data."] # [doc = "# </weight>"] clean_defunct_voters { num_voters : :: core :: primitive :: u32 , num_defunct : :: core :: primitive :: u32 , } , }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Cannot vote when no candidates or members exist."]
                    UnableToVote,
                    #[codec(index = 1)]
                    #[doc = "Must vote for at least one candidate."]
                    NoVotes,
                    #[codec(index = 2)]
                    #[doc = "Cannot vote more than candidates."]
                    TooManyVotes,
                    #[codec(index = 3)]
                    #[doc = "Cannot vote more than maximum allowed."]
                    MaximumVotesExceeded,
                    #[codec(index = 4)]
                    #[doc = "Cannot vote with stake less than minimum balance."]
                    LowBalance,
                    #[codec(index = 5)]
                    #[doc = "Voter can not pay voting bond."]
                    UnableToPayBond,
                    #[codec(index = 6)]
                    #[doc = "Must be a voter."]
                    MustBeVoter,
                    #[codec(index = 7)]
                    #[doc = "Duplicated candidate submission."]
                    DuplicatedCandidate,
                    #[codec(index = 8)]
                    #[doc = "Too many candidates have been created."]
                    TooManyCandidates,
                    #[codec(index = 9)]
                    #[doc = "Member cannot re-submit candidacy."]
                    MemberSubmit,
                    #[codec(index = 10)]
                    #[doc = "Runner cannot re-submit candidacy."]
                    RunnerUpSubmit,
                    #[codec(index = 11)]
                    #[doc = "Candidate does not have enough funds."]
                    InsufficientCandidateFunds,
                    #[codec(index = 12)]
                    #[doc = "Not a member."]
                    NotMember,
                    #[codec(index = 13)]
                    #[doc = "The provided count of number of candidates is incorrect."]
                    InvalidWitnessData,
                    #[codec(index = 14)]
                    #[doc = "The provided count of number of votes is incorrect."]
                    InvalidVoteCount,
                    #[codec(index = 15)]
                    #[doc = "The renouncing origin presented a wrong `Renouncing` parameter."]
                    InvalidRenouncing,
                    #[codec(index = 16)]
                    #[doc = "Prediction regarding replacement after member removal is wrong."]
                    InvalidReplacement,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A new term with new_members. This indicates that enough candidates existed to run"]
                    #[doc = "the election, not that enough have has been elected. The inner value must be examined"]
                    #[doc = "for this purpose. A `NewTerm(\\[\\])` indicates that some candidates got their bond"]
                    #[doc = "slashed and none were elected, whilst `EmptyTerm` means that no candidates existed to"]
                    #[doc = "begin with."]
                    NewTerm {
                        new_members: ::std::vec::Vec<(
                            ::subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u128,
                        )>,
                    },
                    #[codec(index = 1)]
                    #[doc = "No (or not enough) candidates existed for this round. This is different from"]
                    #[doc = "`NewTerm(\\[\\])`. See the description of `NewTerm`."]
                    EmptyTerm,
                    #[codec(index = 2)]
                    #[doc = "Internal error happened while trying to perform election."]
                    ElectionError,
                    #[codec(index = 3)]
                    #[doc = "A member has been removed. This should always be followed by either `NewTerm` or"]
                    #[doc = "`EmptyTerm`."]
                    MemberKicked {
                        member: ::subxt::ext::sp_core::crypto::AccountId32,
                    },
                    #[codec(index = 4)]
                    #[doc = "Someone has renounced their candidacy."]
                    Renounced {
                        candidate: ::subxt::ext::sp_core::crypto::AccountId32,
                    },
                    #[codec(index = 5)]
                    #[doc = "A candidate was slashed by amount due to failing to obtain a seat as member or"]
                    #[doc = "runner-up."]
                    #[doc = ""]
                    #[doc = "Note that old members and runners-up are also candidates."]
                    CandidateSlashed {
                        candidate: ::subxt::ext::sp_core::crypto::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 6)]
                    #[doc = "A seat holder was slashed by amount by being forcefully removed from the set."]
                    SeatHolderSlashed {
                        seat_holder: ::subxt::ext::sp_core::crypto::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub enum Renouncing {
                #[codec(index = 0)]
                Member,
                #[codec(index = 1)]
                RunnerUp,
                #[codec(index = 2)]
                Candidate(#[codec(compact)] ::core::primitive::u32),
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct SeatHolder<_0, _1> {
                pub who: _0,
                pub stake: _1,
                pub deposit: _1,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Voter<_0, _1> {
                pub votes: ::std::vec::Vec<_0>,
                pub stake: _1,
                pub deposit: _1,
            }
        }
        pub mod pallet_grandpa {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    # [codec (index = 0)] # [doc = "Report voter equivocation/misbehavior. This method will verify the"] # [doc = "equivocation proof and validate the given key ownership proof"] # [doc = "against the extracted offender. If both are valid, the offence"] # [doc = "will be reported."] report_equivocation { equivocation_proof : :: std :: boxed :: Box < runtime_types :: sp_finality_grandpa :: EquivocationProof < :: subxt :: ext :: sp_core :: H256 , :: core :: primitive :: u64 > > , key_owner_proof : runtime_types :: sp_session :: MembershipProof , } , # [codec (index = 1)] # [doc = "Report voter equivocation/misbehavior. This method will verify the"] # [doc = "equivocation proof and validate the given key ownership proof"] # [doc = "against the extracted offender. If both are valid, the offence"] # [doc = "will be reported."] # [doc = ""] # [doc = "This extrinsic must be called unsigned and it is expected that only"] # [doc = "block authors will call it (validated in `ValidateUnsigned`), as such"] # [doc = "if the block author is defined it will be defined as the equivocation"] # [doc = "reporter."] report_equivocation_unsigned { equivocation_proof : :: std :: boxed :: Box < runtime_types :: sp_finality_grandpa :: EquivocationProof < :: subxt :: ext :: sp_core :: H256 , :: core :: primitive :: u64 > > , key_owner_proof : runtime_types :: sp_session :: MembershipProof , } , # [codec (index = 2)] # [doc = "Note that the current authority set of the GRANDPA finality gadget has stalled."] # [doc = ""] # [doc = "This will trigger a forced authority set change at the beginning of the next session, to"] # [doc = "be enacted `delay` blocks after that. The `delay` should be high enough to safely assume"] # [doc = "that the block signalling the forced change will not be re-orged e.g. 1000 blocks."] # [doc = "The block production rate (which may be slowed down because of finality lagging) should"] # [doc = "be taken into account when choosing the `delay`. The GRANDPA voters based on the new"] # [doc = "authority will start voting on top of `best_finalized_block_number` for new finalized"] # [doc = "blocks. `best_finalized_block_number` should be the highest of the latest finalized"] # [doc = "block of all validators of the new authority set."] # [doc = ""] # [doc = "Only callable by root."] note_stalled { delay : :: core :: primitive :: u64 , best_finalized_block_number : :: core :: primitive :: u64 , } , }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Attempt to signal GRANDPA pause when the authority set isn't live"]
                    #[doc = "(either paused or already pending pause)."]
                    PauseFailed,
                    #[codec(index = 1)]
                    #[doc = "Attempt to signal GRANDPA resume when the authority set isn't paused"]
                    #[doc = "(either live or already pending resume)."]
                    ResumeFailed,
                    #[codec(index = 2)]
                    #[doc = "Attempt to signal GRANDPA change with one already pending."]
                    ChangePending,
                    #[codec(index = 3)]
                    #[doc = "Cannot signal forced change so soon after last."]
                    TooSoon,
                    #[codec(index = 4)]
                    #[doc = "A key ownership proof provided as part of an equivocation report is invalid."]
                    InvalidKeyOwnershipProof,
                    #[codec(index = 5)]
                    #[doc = "An equivocation proof provided as part of an equivocation report is invalid."]
                    InvalidEquivocationProof,
                    #[codec(index = 6)]
                    #[doc = "A given equivocation report is valid but already previously reported."]
                    DuplicateOffenceReport,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "New authority set has been applied."]
                    NewAuthorities {
                        authority_set: ::std::vec::Vec<(
                            runtime_types::sp_finality_grandpa::app::Public,
                            ::core::primitive::u64,
                        )>,
                    },
                    #[codec(index = 1)]
                    #[doc = "Current authority set has been paused."]
                    Paused,
                    #[codec(index = 2)]
                    #[doc = "Current authority set has been resumed."]
                    Resumed,
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct StoredPendingChange < _0 > { pub scheduled_at : _0 , pub delay : _0 , pub next_authorities : runtime_types :: sp_runtime :: bounded :: weak_bounded_vec :: WeakBoundedVec < (runtime_types :: sp_finality_grandpa :: app :: Public , _0 ,) > , pub forced : :: core :: option :: Option < _0 > , }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub enum StoredState<_0> {
                #[codec(index = 0)]
                Live,
                #[codec(index = 1)]
                PendingPause { scheduled_at: _0, delay: _0 },
                #[codec(index = 2)]
                Paused,
                #[codec(index = 3)]
                PendingResume { scheduled_at: _0, delay: _0 },
            }
        }
        pub mod pallet_hasher {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    force_set_parameters {
                        parameters: ::std::vec::Vec<::core::primitive::u8>,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Parameters haven't been initialized"]
                    ParametersNotInitialized,
                    #[codec(index = 1)]
                    #[doc = "Error during hashing"]
                    HashError,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {}
            }
        }
        pub mod pallet_identity {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                pub enum Data {
                    #[codec(index = 0)]
                    None,
                    #[codec(index = 1)]
                    Raw0([::core::primitive::u8; 0usize]),
                    #[codec(index = 2)]
                    Raw1([::core::primitive::u8; 1usize]),
                    #[codec(index = 3)]
                    Raw2([::core::primitive::u8; 2usize]),
                    #[codec(index = 4)]
                    Raw3([::core::primitive::u8; 3usize]),
                    #[codec(index = 5)]
                    Raw4([::core::primitive::u8; 4usize]),
                    #[codec(index = 6)]
                    Raw5([::core::primitive::u8; 5usize]),
                    #[codec(index = 7)]
                    Raw6([::core::primitive::u8; 6usize]),
                    #[codec(index = 8)]
                    Raw7([::core::primitive::u8; 7usize]),
                    #[codec(index = 9)]
                    Raw8([::core::primitive::u8; 8usize]),
                    #[codec(index = 10)]
                    Raw9([::core::primitive::u8; 9usize]),
                    #[codec(index = 11)]
                    Raw10([::core::primitive::u8; 10usize]),
                    #[codec(index = 12)]
                    Raw11([::core::primitive::u8; 11usize]),
                    #[codec(index = 13)]
                    Raw12([::core::primitive::u8; 12usize]),
                    #[codec(index = 14)]
                    Raw13([::core::primitive::u8; 13usize]),
                    #[codec(index = 15)]
                    Raw14([::core::primitive::u8; 14usize]),
                    #[codec(index = 16)]
                    Raw15([::core::primitive::u8; 15usize]),
                    #[codec(index = 17)]
                    Raw16([::core::primitive::u8; 16usize]),
                    #[codec(index = 18)]
                    Raw17([::core::primitive::u8; 17usize]),
                    #[codec(index = 19)]
                    Raw18([::core::primitive::u8; 18usize]),
                    #[codec(index = 20)]
                    Raw19([::core::primitive::u8; 19usize]),
                    #[codec(index = 21)]
                    Raw20([::core::primitive::u8; 20usize]),
                    #[codec(index = 22)]
                    Raw21([::core::primitive::u8; 21usize]),
                    #[codec(index = 23)]
                    Raw22([::core::primitive::u8; 22usize]),
                    #[codec(index = 24)]
                    Raw23([::core::primitive::u8; 23usize]),
                    #[codec(index = 25)]
                    Raw24([::core::primitive::u8; 24usize]),
                    #[codec(index = 26)]
                    Raw25([::core::primitive::u8; 25usize]),
                    #[codec(index = 27)]
                    Raw26([::core::primitive::u8; 26usize]),
                    #[codec(index = 28)]
                    Raw27([::core::primitive::u8; 27usize]),
                    #[codec(index = 29)]
                    Raw28([::core::primitive::u8; 28usize]),
                    #[codec(index = 30)]
                    Raw29([::core::primitive::u8; 29usize]),
                    #[codec(index = 31)]
                    Raw30([::core::primitive::u8; 30usize]),
                    #[codec(index = 32)]
                    Raw31([::core::primitive::u8; 31usize]),
                    #[codec(index = 33)]
                    Raw32([::core::primitive::u8; 32usize]),
                    #[codec(index = 34)]
                    BlakeTwo256([::core::primitive::u8; 32usize]),
                    #[codec(index = 35)]
                    Sha256([::core::primitive::u8; 32usize]),
                    #[codec(index = 36)]
                    Keccak256([::core::primitive::u8; 32usize]),
                    #[codec(index = 37)]
                    ShaThree256([::core::primitive::u8; 32usize]),
                }
            }
        }
        pub mod pallet_im_online {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    # [codec (index = 0)] # [doc = "# <weight>"] # [doc = "- Complexity: `O(K + E)` where K is length of `Keys` (heartbeat.validators_len) and E is"] # [doc = "  length of `heartbeat.network_state.external_address`"] # [doc = "  - `O(K)`: decoding of length `K`"] # [doc = "  - `O(E)`: decoding/encoding of length `E`"] # [doc = "- DbReads: pallet_session `Validators`, pallet_session `CurrentIndex`, `Keys`,"] # [doc = "  `ReceivedHeartbeats`"] # [doc = "- DbWrites: `ReceivedHeartbeats`"] # [doc = "# </weight>"] heartbeat { heartbeat : runtime_types :: pallet_im_online :: Heartbeat < :: core :: primitive :: u64 > , signature : runtime_types :: pallet_im_online :: sr25519 :: app_sr25519 :: Signature , } , }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Non existent public key."]
                    InvalidKey,
                    #[codec(index = 1)]
                    #[doc = "Duplicated heartbeat."]
                    DuplicatedHeartbeat,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    # [codec (index = 0)] # [doc = "A new heartbeat was received from `AuthorityId`."] HeartbeatReceived { authority_id : runtime_types :: pallet_im_online :: sr25519 :: app_sr25519 :: Public , } , # [codec (index = 1)] # [doc = "At the end of the session, no offence was committed."] AllGood , # [codec (index = 2)] # [doc = "At the end of the session, at least one validator was found to be offline."] SomeOffline { offline : :: std :: vec :: Vec < (:: subxt :: ext :: sp_core :: crypto :: AccountId32 , runtime_types :: pallet_staking :: Exposure < :: subxt :: ext :: sp_core :: crypto :: AccountId32 , :: core :: primitive :: u128 > ,) > , } , }
            }
            pub mod sr25519 {
                use super::runtime_types;
                pub mod app_sr25519 {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        Clone,
                        Debug,
                        Eq,
                        PartialEq,
                    )]
                    pub struct Public(
                        pub runtime_types::sp_core::sr25519::Public,
                    );
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        Clone,
                        Debug,
                        Eq,
                        PartialEq,
                    )]
                    pub struct Signature(
                        pub runtime_types::sp_core::sr25519::Signature,
                    );
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct BoundedOpaqueNetworkState { pub peer_id : runtime_types :: sp_runtime :: bounded :: weak_bounded_vec :: WeakBoundedVec < :: core :: primitive :: u8 > , pub external_addresses : runtime_types :: sp_runtime :: bounded :: weak_bounded_vec :: WeakBoundedVec < runtime_types :: sp_runtime :: bounded :: weak_bounded_vec :: WeakBoundedVec < :: core :: primitive :: u8 > > , }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Heartbeat<_0> {
                pub block_number: _0,
                pub network_state:
                    runtime_types::sp_core::offchain::OpaqueNetworkState,
                pub session_index: ::core::primitive::u32,
                pub authority_index: ::core::primitive::u32,
                pub validators_len: ::core::primitive::u32,
            }
        }
        pub mod pallet_indices {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Assign an previously unassigned index."]
                    #[doc = ""]
                    #[doc = "Payment: `Deposit` is reserved from the sender account."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "- `index`: the index to be claimed. This must not be in use."]
                    #[doc = ""]
                    #[doc = "Emits `IndexAssigned` if successful."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- `O(1)`."]
                    #[doc = "- One storage mutation (codec `O(1)`)."]
                    #[doc = "- One reserve operation."]
                    #[doc = "- One event."]
                    #[doc = "-------------------"]
                    #[doc = "- DB Weight: 1 Read/Write (Accounts)"]
                    #[doc = "# </weight>"]
                    claim { index: ::core::primitive::u32 },
                    #[codec(index = 1)]
                    #[doc = "Assign an index already owned by the sender to another account. The balance reservation"]
                    #[doc = "is effectively transferred to the new account."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "- `index`: the index to be re-assigned. This must be owned by the sender."]
                    #[doc = "- `new`: the new owner of the index. This function is a no-op if it is equal to sender."]
                    #[doc = ""]
                    #[doc = "Emits `IndexAssigned` if successful."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- `O(1)`."]
                    #[doc = "- One storage mutation (codec `O(1)`)."]
                    #[doc = "- One transfer operation."]
                    #[doc = "- One event."]
                    #[doc = "-------------------"]
                    #[doc = "- DB Weight:"]
                    #[doc = "   - Reads: Indices Accounts, System Account (recipient)"]
                    #[doc = "   - Writes: Indices Accounts, System Account (recipient)"]
                    #[doc = "# </weight>"]
                    transfer {
                        new: ::subxt::ext::sp_runtime::MultiAddress<
                            ::subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        index: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    #[doc = "Free up an index owned by the sender."]
                    #[doc = ""]
                    #[doc = "Payment: Any previous deposit placed for the index is unreserved in the sender account."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_ and the sender must own the index."]
                    #[doc = ""]
                    #[doc = "- `index`: the index to be freed. This must be owned by the sender."]
                    #[doc = ""]
                    #[doc = "Emits `IndexFreed` if successful."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- `O(1)`."]
                    #[doc = "- One storage mutation (codec `O(1)`)."]
                    #[doc = "- One reserve operation."]
                    #[doc = "- One event."]
                    #[doc = "-------------------"]
                    #[doc = "- DB Weight: 1 Read/Write (Accounts)"]
                    #[doc = "# </weight>"]
                    free { index: ::core::primitive::u32 },
                    #[codec(index = 3)]
                    #[doc = "Force an index to an account. This doesn't require a deposit. If the index is already"]
                    #[doc = "held, then any deposit is reimbursed to its current owner."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Root_."]
                    #[doc = ""]
                    #[doc = "- `index`: the index to be (re-)assigned."]
                    #[doc = "- `new`: the new owner of the index. This function is a no-op if it is equal to sender."]
                    #[doc = "- `freeze`: if set to `true`, will freeze the index so it cannot be transferred."]
                    #[doc = ""]
                    #[doc = "Emits `IndexAssigned` if successful."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- `O(1)`."]
                    #[doc = "- One storage mutation (codec `O(1)`)."]
                    #[doc = "- Up to one reserve operation."]
                    #[doc = "- One event."]
                    #[doc = "-------------------"]
                    #[doc = "- DB Weight:"]
                    #[doc = "   - Reads: Indices Accounts, System Account (original owner)"]
                    #[doc = "   - Writes: Indices Accounts, System Account (original owner)"]
                    #[doc = "# </weight>"]
                    force_transfer {
                        new: ::subxt::ext::sp_runtime::MultiAddress<
                            ::subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        index: ::core::primitive::u32,
                        freeze: ::core::primitive::bool,
                    },
                    #[codec(index = 4)]
                    #[doc = "Freeze an index so it will always point to the sender account. This consumes the"]
                    #[doc = "deposit."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_ and the signing account must have a"]
                    #[doc = "non-frozen account `index`."]
                    #[doc = ""]
                    #[doc = "- `index`: the index to be frozen in place."]
                    #[doc = ""]
                    #[doc = "Emits `IndexFrozen` if successful."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- `O(1)`."]
                    #[doc = "- One storage mutation (codec `O(1)`)."]
                    #[doc = "- Up to one slash operation."]
                    #[doc = "- One event."]
                    #[doc = "-------------------"]
                    #[doc = "- DB Weight: 1 Read/Write (Accounts)"]
                    #[doc = "# </weight>"]
                    freeze { index: ::core::primitive::u32 },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "The index was not already assigned."]
                    NotAssigned,
                    #[codec(index = 1)]
                    #[doc = "The index is assigned to another account."]
                    NotOwner,
                    #[codec(index = 2)]
                    #[doc = "The index was not available."]
                    InUse,
                    #[codec(index = 3)]
                    #[doc = "The source and destination accounts are identical."]
                    NotTransfer,
                    #[codec(index = 4)]
                    #[doc = "The index is permanent and may not be freed/changed."]
                    Permanent,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A account index was assigned."]
                    IndexAssigned {
                        who: ::subxt::ext::sp_core::crypto::AccountId32,
                        index: ::core::primitive::u32,
                    },
                    #[codec(index = 1)]
                    #[doc = "A account index has been freed up (unassigned)."]
                    IndexFreed { index: ::core::primitive::u32 },
                    #[codec(index = 2)]
                    #[doc = "A account index has been frozen to its current account ID."]
                    IndexFrozen {
                        index: ::core::primitive::u32,
                        who: ::subxt::ext::sp_core::crypto::AccountId32,
                    },
                }
            }
        }
        pub mod pallet_key_storage {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    register {
                        owner: ::subxt::ext::sp_core::crypto::AccountId32,
                        public_key: ::std::vec::Vec<::core::primitive::u8>,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {}
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "Public key registration"]
                    PublicKeyRegistration {
                        owner: ::subxt::ext::sp_core::crypto::AccountId32,
                        public_key: ::std::vec::Vec<::core::primitive::u8>,
                    },
                }
            }
        }
        pub mod pallet_linkable_tree {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    create {
                        max_edges: ::core::primitive::u32,
                        depth: ::core::primitive::u8,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    UnknownRoot,
                    #[codec(index = 1)]
                    #[doc = "Invalid Merkle Roots"]
                    InvalidMerkleRoots,
                    #[codec(index = 2)]
                    #[doc = "Invalid neighbor root passed in withdrawal"]
                    #[doc = "(neighbor root is not in neighbor history)"]
                    InvalidNeighborWithdrawRoot,
                    #[codec(index = 3)]
                    #[doc = "Anchor is at maximum number of edges for the given tree"]
                    TooManyEdges,
                    #[codec(index = 4)]
                    #[doc = "Edge already exists"]
                    EdgeAlreadyExists,
                    #[codec(index = 5)]
                    #[doc = "Edge does not exist"]
                    EdgeDoesntExists,
                    #[codec(index = 6)]
                    #[doc = "Invalid latest leaf index"]
                    InvalidLatestLeafIndex,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "New tree created"]
                    LinkableTreeCreation { tree_id: ::core::primitive::u32 },
                }
            }
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                pub struct EdgeMetadata<_0, _1, _2> {
                    pub src_chain_id: _0,
                    pub root: _1,
                    pub latest_leaf_index: _2,
                    pub src_resource_id:
                        runtime_types::webb_proposals::header::ResourceId,
                }
            }
        }
        pub mod pallet_mixer {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    create {
                        deposit_size: ::core::primitive::u128,
                        depth: ::core::primitive::u8,
                        asset: ::core::primitive::u32,
                    },
                    #[codec(index = 1)]
                    deposit {
                        tree_id: ::core::primitive::u32,
                        leaf: runtime_types::webb_primitives::runtime::Element,
                    },
                    #[codec(index = 2)]
                    withdraw {
                        id: ::core::primitive::u32,
                        proof_bytes: ::std::vec::Vec<::core::primitive::u8>,
                        root: runtime_types::webb_primitives::runtime::Element,
                        nullifier_hash:
                            runtime_types::webb_primitives::runtime::Element,
                        recipient: ::subxt::ext::sp_core::crypto::AccountId32,
                        relayer: ::subxt::ext::sp_core::crypto::AccountId32,
                        fee: ::core::primitive::u128,
                        refund: ::core::primitive::u128,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Account does not have correct permissions"]
                    InvalidPermissions,
                    #[codec(index = 1)]
                    #[doc = "Invalid withdraw proof"]
                    InvalidWithdrawProof,
                    #[codec(index = 2)]
                    #[doc = "Invalid nullifier that is already used"]
                    #[doc = "(this error is returned when a nullifier is used twice)"]
                    AlreadyRevealedNullifier,
                    #[codec(index = 3)]
                    InvalidArbitraryData,
                    #[codec(index = 4)]
                    #[doc = "Invalid root"]
                    UnknownRoot,
                    #[codec(index = 5)]
                    #[doc = "No mixer found"]
                    NoMixerFound,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "New tree created"]
                    MixerCreation { tree_id: ::core::primitive::u32 },
                    #[codec(index = 1)]
                    Deposit {
                        tree_id: ::core::primitive::u32,
                        leaf: runtime_types::webb_primitives::runtime::Element,
                    },
                    #[codec(index = 2)]
                    Withdraw {
                        tree_id: ::core::primitive::u32,
                        recipient: ::subxt::ext::sp_core::crypto::AccountId32,
                    },
                }
            }
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                pub struct MixerMetadata<_0, _1> {
                    pub deposit_size: _0,
                    pub asset: _1,
                }
            }
        }
        pub mod pallet_mt {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    create { depth: ::core::primitive::u8 },
                    #[codec(index = 1)]
                    insert {
                        tree_id: ::core::primitive::u32,
                        leaf: runtime_types::webb_primitives::runtime::Element,
                    },
                    #[codec(index = 2)]
                    force_set_default_hashes {
                        default_hashes: ::std::vec::Vec<
                            runtime_types::webb_primitives::runtime::Element,
                        >,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Account does not have correct permissions"]
                    InvalidPermissions,
                    #[codec(index = 1)]
                    #[doc = "Invalid depth of the tree specified"]
                    InvalidTreeDepth,
                    #[codec(index = 2)]
                    #[doc = "Invalid  leaf index,  either taken or too large"]
                    InvalidLeafIndex,
                    #[codec(index = 3)]
                    #[doc = "Tree is full"]
                    ExceedsMaxLeaves,
                    #[codec(index = 4)]
                    #[doc = "Tree doesnt exist"]
                    TreeDoesntExist,
                    #[codec(index = 5)]
                    #[doc = "Invalid length for default hashes"]
                    ExceedsMaxDefaultHashes,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "New tree created"]
                    TreeCreation {
                        tree_id: ::core::primitive::u32,
                        who: ::subxt::ext::sp_core::crypto::AccountId32,
                    },
                    #[codec(index = 1)]
                    #[doc = "New leaf inserted"]
                    LeafInsertion {
                        tree_id: ::core::primitive::u32,
                        leaf_index: ::core::primitive::u32,
                        leaf: runtime_types::webb_primitives::runtime::Element,
                    },
                }
            }
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                pub struct TreeMetadata<_0, _1, _2> {
                    pub creator: ::core::option::Option<_0>,
                    pub paused: ::core::primitive::bool,
                    pub leaf_count: _1,
                    pub max_leaves: _1,
                    pub depth: ::core::primitive::u8,
                    pub root: _2,
                    pub edge_nodes: ::std::vec::Vec<_2>,
                }
            }
        }
        pub mod pallet_multisig {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    # [codec (index = 0)] # [doc = "Immediately dispatch a multi-signature call using a single approval from the caller."] # [doc = ""] # [doc = "The dispatch origin for this call must be _Signed_."] # [doc = ""] # [doc = "- `other_signatories`: The accounts (other than the sender) who are part of the"] # [doc = "multi-signature, but do not participate in the approval process."] # [doc = "- `call`: The call to be executed."] # [doc = ""] # [doc = "Result is equivalent to the dispatched result."] # [doc = ""] # [doc = "# <weight>"] # [doc = "O(Z + C) where Z is the length of the call and C its execution weight."] # [doc = "-------------------------------"] # [doc = "- DB Weight: None"] # [doc = "- Plus Call Weight"] # [doc = "# </weight>"] as_multi_threshold_1 { other_signatories : :: std :: vec :: Vec < :: subxt :: ext :: sp_core :: crypto :: AccountId32 > , call : :: std :: boxed :: Box < runtime_types :: webb_standalone_runtime :: Call > , } , # [codec (index = 1)] # [doc = "Register approval for a dispatch to be made from a deterministic composite account if"] # [doc = "approved by a total of `threshold - 1` of `other_signatories`."] # [doc = ""] # [doc = "If there are enough, then dispatch the call."] # [doc = ""] # [doc = "Payment: `DepositBase` will be reserved if this is the first approval, plus"] # [doc = "`threshold` times `DepositFactor`. It is returned once this dispatch happens or"] # [doc = "is cancelled."] # [doc = ""] # [doc = "The dispatch origin for this call must be _Signed_."] # [doc = ""] # [doc = "- `threshold`: The total number of approvals for this dispatch before it is executed."] # [doc = "- `other_signatories`: The accounts (other than the sender) who can approve this"] # [doc = "dispatch. May not be empty."] # [doc = "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is"] # [doc = "not the first approval, then it must be `Some`, with the timepoint (block number and"] # [doc = "transaction index) of the first approval transaction."] # [doc = "- `call`: The call to be executed."] # [doc = ""] # [doc = "NOTE: Unless this is the final approval, you will generally want to use"] # [doc = "`approve_as_multi` instead, since it only requires a hash of the call."] # [doc = ""] # [doc = "Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise"] # [doc = "on success, result is `Ok` and the result from the interior call, if it was executed,"] # [doc = "may be found in the deposited `MultisigExecuted` event."] # [doc = ""] # [doc = "# <weight>"] # [doc = "- `O(S + Z + Call)`."] # [doc = "- Up to one balance-reserve or unreserve operation."] # [doc = "- One passthrough operation, one insert, both `O(S)` where `S` is the number of"] # [doc = "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional."] # [doc = "- One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len."] # [doc = "- One encode & hash, both of complexity `O(S)`."] # [doc = "- Up to one binary search and insert (`O(logS + S)`)."] # [doc = "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove."] # [doc = "- One event."] # [doc = "- The weight of the `call`."] # [doc = "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit"] # [doc = "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."] # [doc = "-------------------------------"] # [doc = "- DB Weight:"] # [doc = "    - Reads: Multisig Storage, [Caller Account], Calls (if `store_call`)"] # [doc = "    - Writes: Multisig Storage, [Caller Account], Calls (if `store_call`)"] # [doc = "- Plus Call Weight"] # [doc = "# </weight>"] as_multi { threshold : :: core :: primitive :: u16 , other_signatories : :: std :: vec :: Vec < :: subxt :: ext :: sp_core :: crypto :: AccountId32 > , maybe_timepoint : :: core :: option :: Option < runtime_types :: pallet_multisig :: Timepoint < :: core :: primitive :: u64 > > , call : :: subxt :: utils :: WrapperKeepOpaque < runtime_types :: webb_standalone_runtime :: Call > , store_call : :: core :: primitive :: bool , max_weight : runtime_types :: frame_support :: weights :: weight_v2 :: Weight , } , # [codec (index = 2)] # [doc = "Register approval for a dispatch to be made from a deterministic composite account if"] # [doc = "approved by a total of `threshold - 1` of `other_signatories`."] # [doc = ""] # [doc = "Payment: `DepositBase` will be reserved if this is the first approval, plus"] # [doc = "`threshold` times `DepositFactor`. It is returned once this dispatch happens or"] # [doc = "is cancelled."] # [doc = ""] # [doc = "The dispatch origin for this call must be _Signed_."] # [doc = ""] # [doc = "- `threshold`: The total number of approvals for this dispatch before it is executed."] # [doc = "- `other_signatories`: The accounts (other than the sender) who can approve this"] # [doc = "dispatch. May not be empty."] # [doc = "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is"] # [doc = "not the first approval, then it must be `Some`, with the timepoint (block number and"] # [doc = "transaction index) of the first approval transaction."] # [doc = "- `call_hash`: The hash of the call to be executed."] # [doc = ""] # [doc = "NOTE: If this is the final approval, you will want to use `as_multi` instead."] # [doc = ""] # [doc = "# <weight>"] # [doc = "- `O(S)`."] # [doc = "- Up to one balance-reserve or unreserve operation."] # [doc = "- One passthrough operation, one insert, both `O(S)` where `S` is the number of"] # [doc = "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional."] # [doc = "- One encode & hash, both of complexity `O(S)`."] # [doc = "- Up to one binary search and insert (`O(logS + S)`)."] # [doc = "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove."] # [doc = "- One event."] # [doc = "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit"] # [doc = "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."] # [doc = "----------------------------------"] # [doc = "- DB Weight:"] # [doc = "    - Read: Multisig Storage, [Caller Account]"] # [doc = "    - Write: Multisig Storage, [Caller Account]"] # [doc = "# </weight>"] approve_as_multi { threshold : :: core :: primitive :: u16 , other_signatories : :: std :: vec :: Vec < :: subxt :: ext :: sp_core :: crypto :: AccountId32 > , maybe_timepoint : :: core :: option :: Option < runtime_types :: pallet_multisig :: Timepoint < :: core :: primitive :: u64 > > , call_hash : [:: core :: primitive :: u8 ; 32usize] , max_weight : runtime_types :: frame_support :: weights :: weight_v2 :: Weight , } , # [codec (index = 3)] # [doc = "Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously"] # [doc = "for this operation will be unreserved on success."] # [doc = ""] # [doc = "The dispatch origin for this call must be _Signed_."] # [doc = ""] # [doc = "- `threshold`: The total number of approvals for this dispatch before it is executed."] # [doc = "- `other_signatories`: The accounts (other than the sender) who can approve this"] # [doc = "dispatch. May not be empty."] # [doc = "- `timepoint`: The timepoint (block number and transaction index) of the first approval"] # [doc = "transaction for this dispatch."] # [doc = "- `call_hash`: The hash of the call to be executed."] # [doc = ""] # [doc = "# <weight>"] # [doc = "- `O(S)`."] # [doc = "- Up to one balance-reserve or unreserve operation."] # [doc = "- One passthrough operation, one insert, both `O(S)` where `S` is the number of"] # [doc = "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional."] # [doc = "- One encode & hash, both of complexity `O(S)`."] # [doc = "- One event."] # [doc = "- I/O: 1 read `O(S)`, one remove."] # [doc = "- Storage: removes one item."] # [doc = "----------------------------------"] # [doc = "- DB Weight:"] # [doc = "    - Read: Multisig Storage, [Caller Account], Refund Account, Calls"] # [doc = "    - Write: Multisig Storage, [Caller Account], Refund Account, Calls"] # [doc = "# </weight>"] cancel_as_multi { threshold : :: core :: primitive :: u16 , other_signatories : :: std :: vec :: Vec < :: subxt :: ext :: sp_core :: crypto :: AccountId32 > , timepoint : runtime_types :: pallet_multisig :: Timepoint < :: core :: primitive :: u64 > , call_hash : [:: core :: primitive :: u8 ; 32usize] , } , }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Threshold must be 2 or greater."]
                    MinimumThreshold,
                    #[codec(index = 1)]
                    #[doc = "Call is already approved by this signatory."]
                    AlreadyApproved,
                    #[codec(index = 2)]
                    #[doc = "Call doesn't need any (more) approvals."]
                    NoApprovalsNeeded,
                    #[codec(index = 3)]
                    #[doc = "There are too few signatories in the list."]
                    TooFewSignatories,
                    #[codec(index = 4)]
                    #[doc = "There are too many signatories in the list."]
                    TooManySignatories,
                    #[codec(index = 5)]
                    #[doc = "The signatories were provided out of order; they should be ordered."]
                    SignatoriesOutOfOrder,
                    #[codec(index = 6)]
                    #[doc = "The sender was contained in the other signatories; it shouldn't be."]
                    SenderInSignatories,
                    #[codec(index = 7)]
                    #[doc = "Multisig operation not found when attempting to cancel."]
                    NotFound,
                    #[codec(index = 8)]
                    #[doc = "Only the account that originally created the multisig is able to cancel it."]
                    NotOwner,
                    #[codec(index = 9)]
                    #[doc = "No timepoint was given, yet the multisig operation is already underway."]
                    NoTimepoint,
                    #[codec(index = 10)]
                    #[doc = "A different timepoint was given to the multisig operation that is underway."]
                    WrongTimepoint,
                    #[codec(index = 11)]
                    #[doc = "A timepoint was given, yet no multisig operation is underway."]
                    UnexpectedTimepoint,
                    #[codec(index = 12)]
                    #[doc = "The maximum weight information provided was too low."]
                    MaxWeightTooLow,
                    #[codec(index = 13)]
                    #[doc = "The data to be stored is already stored."]
                    AlreadyStored,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A new multisig operation has begun."]
                    NewMultisig {
                        approving: ::subxt::ext::sp_core::crypto::AccountId32,
                        multisig: ::subxt::ext::sp_core::crypto::AccountId32,
                        call_hash: [::core::primitive::u8; 32usize],
                    },
                    #[codec(index = 1)]
                    #[doc = "A multisig operation has been approved by someone."]
                    MultisigApproval {
                        approving: ::subxt::ext::sp_core::crypto::AccountId32,
                        timepoint: runtime_types::pallet_multisig::Timepoint<
                            ::core::primitive::u64,
                        >,
                        multisig: ::subxt::ext::sp_core::crypto::AccountId32,
                        call_hash: [::core::primitive::u8; 32usize],
                    },
                    #[codec(index = 2)]
                    #[doc = "A multisig operation has been executed."]
                    MultisigExecuted {
                        approving: ::subxt::ext::sp_core::crypto::AccountId32,
                        timepoint: runtime_types::pallet_multisig::Timepoint<
                            ::core::primitive::u64,
                        >,
                        multisig: ::subxt::ext::sp_core::crypto::AccountId32,
                        call_hash: [::core::primitive::u8; 32usize],
                        result: ::core::result::Result<
                            (),
                            runtime_types::sp_runtime::DispatchError,
                        >,
                    },
                    #[codec(index = 3)]
                    #[doc = "A multisig operation has been cancelled."]
                    MultisigCancelled {
                        cancelling: ::subxt::ext::sp_core::crypto::AccountId32,
                        timepoint: runtime_types::pallet_multisig::Timepoint<
                            ::core::primitive::u64,
                        >,
                        multisig: ::subxt::ext::sp_core::crypto::AccountId32,
                        call_hash: [::core::primitive::u8; 32usize],
                    },
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Multisig<_0, _1, _2> {
                pub when: runtime_types::pallet_multisig::Timepoint<_0>,
                pub deposit: _1,
                pub depositor: _2,
                pub approvals: ::std::vec::Vec<_2>,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Timepoint<_0> {
                pub height: _0,
                pub index: ::core::primitive::u32,
            }
        }
        pub mod pallet_nomination_pools {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Stake funds with a pool. The amount to bond is transferred from the member to the"]
                    #[doc = "pools account and immediately increases the pools bond."]
                    #[doc = ""]
                    #[doc = "# Note"]
                    #[doc = ""]
                    #[doc = "* An account can only be a member of a single pool."]
                    #[doc = "* An account cannot join the same pool multiple times."]
                    #[doc = "* This call will *not* dust the member account, so the member must have at least"]
                    #[doc = "  `existential deposit + amount` in their account."]
                    #[doc = "* Only a pool with [`PoolState::Open`] can be joined"]
                    join {
                        #[codec(compact)]
                        amount: ::core::primitive::u128,
                        pool_id: ::core::primitive::u32,
                    },
                    #[codec(index = 1)]
                    #[doc = "Bond `extra` more funds from `origin` into the pool to which they already belong."]
                    #[doc = ""]
                    #[doc = "Additional funds can come from either the free balance of the account, of from the"]
                    #[doc = "accumulated rewards, see [`BondExtra`]."]
                    #[doc = ""]
                    #[doc = "Bonding extra funds implies an automatic payout of all pending rewards as well."]
                    bond_extra {
                        extra:
                            runtime_types::pallet_nomination_pools::BondExtra<
                                ::core::primitive::u128,
                            >,
                    },
                    #[codec(index = 2)]
                    #[doc = "A bonded member can use this to claim their payout based on the rewards that the pool"]
                    #[doc = "has accumulated since their last claimed payout (OR since joining if this is there first"]
                    #[doc = "time claiming rewards). The payout will be transferred to the member's account."]
                    #[doc = ""]
                    #[doc = "The member will earn rewards pro rata based on the members stake vs the sum of the"]
                    #[doc = "members in the pools stake. Rewards do not \"expire\"."]
                    claim_payout,
                    #[codec(index = 3)]
                    #[doc = "Unbond up to `unbonding_points` of the `member_account`'s funds from the pool. It"]
                    #[doc = "implicitly collects the rewards one last time, since not doing so would mean some"]
                    #[doc = "rewards would be forfeited."]
                    #[doc = ""]
                    #[doc = "Under certain conditions, this call can be dispatched permissionlessly (i.e. by any"]
                    #[doc = "account)."]
                    #[doc = ""]
                    #[doc = "# Conditions for a permissionless dispatch."]
                    #[doc = ""]
                    #[doc = "* The pool is blocked and the caller is either the root or state-toggler. This is"]
                    #[doc = "  refereed to as a kick."]
                    #[doc = "* The pool is destroying and the member is not the depositor."]
                    #[doc = "* The pool is destroying, the member is the depositor and no other members are in the"]
                    #[doc = "  pool."]
                    #[doc = ""]
                    #[doc = "## Conditions for permissioned dispatch (i.e. the caller is also the"]
                    #[doc = "`member_account`):"]
                    #[doc = ""]
                    #[doc = "* The caller is not the depositor."]
                    #[doc = "* The caller is the depositor, the pool is destroying and no other members are in the"]
                    #[doc = "  pool."]
                    #[doc = ""]
                    #[doc = "# Note"]
                    #[doc = ""]
                    #[doc = "If there are too many unlocking chunks to unbond with the pool account,"]
                    #[doc = "[`Call::pool_withdraw_unbonded`] can be called to try and minimize unlocking chunks. If"]
                    #[doc = "there are too many unlocking chunks, the result of this call will likely be the"]
                    #[doc = "`NoMoreChunks` error from the staking system."]
                    unbond {
                        member_account: ::subxt::ext::sp_runtime::MultiAddress<
                            ::subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        #[codec(compact)]
                        unbonding_points: ::core::primitive::u128,
                    },
                    #[codec(index = 4)]
                    #[doc = "Call `withdraw_unbonded` for the pools account. This call can be made by any account."]
                    #[doc = ""]
                    #[doc = "This is useful if their are too many unlocking chunks to call `unbond`, and some"]
                    #[doc = "can be cleared by withdrawing. In the case there are too many unlocking chunks, the user"]
                    #[doc = "would probably see an error like `NoMoreChunks` emitted from the staking system when"]
                    #[doc = "they attempt to unbond."]
                    pool_withdraw_unbonded {
                        pool_id: ::core::primitive::u32,
                        num_slashing_spans: ::core::primitive::u32,
                    },
                    #[codec(index = 5)]
                    #[doc = "Withdraw unbonded funds from `member_account`. If no bonded funds can be unbonded, an"]
                    #[doc = "error is returned."]
                    #[doc = ""]
                    #[doc = "Under certain conditions, this call can be dispatched permissionlessly (i.e. by any"]
                    #[doc = "account)."]
                    #[doc = ""]
                    #[doc = "# Conditions for a permissionless dispatch"]
                    #[doc = ""]
                    #[doc = "* The pool is in destroy mode and the target is not the depositor."]
                    #[doc = "* The target is the depositor and they are the only member in the sub pools."]
                    #[doc = "* The pool is blocked and the caller is either the root or state-toggler."]
                    #[doc = ""]
                    #[doc = "# Conditions for permissioned dispatch"]
                    #[doc = ""]
                    #[doc = "* The caller is the target and they are not the depositor."]
                    #[doc = ""]
                    #[doc = "# Note"]
                    #[doc = ""]
                    #[doc = "If the target is the depositor, the pool will be destroyed."]
                    withdraw_unbonded {
                        member_account: ::subxt::ext::sp_runtime::MultiAddress<
                            ::subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        num_slashing_spans: ::core::primitive::u32,
                    },
                    #[codec(index = 6)]
                    #[doc = "Create a new delegation pool."]
                    #[doc = ""]
                    #[doc = "# Arguments"]
                    #[doc = ""]
                    #[doc = "* `amount` - The amount of funds to delegate to the pool. This also acts of a sort of"]
                    #[doc = "  deposit since the pools creator cannot fully unbond funds until the pool is being"]
                    #[doc = "  destroyed."]
                    #[doc = "* `index` - A disambiguation index for creating the account. Likely only useful when"]
                    #[doc = "  creating multiple pools in the same extrinsic."]
                    #[doc = "* `root` - The account to set as [`PoolRoles::root`]."]
                    #[doc = "* `nominator` - The account to set as the [`PoolRoles::nominator`]."]
                    #[doc = "* `state_toggler` - The account to set as the [`PoolRoles::state_toggler`]."]
                    #[doc = ""]
                    #[doc = "# Note"]
                    #[doc = ""]
                    #[doc = "In addition to `amount`, the caller will transfer the existential deposit; so the caller"]
                    #[doc = "needs at have at least `amount + existential_deposit` transferrable."]
                    create {
                        #[codec(compact)]
                        amount: ::core::primitive::u128,
                        root: ::subxt::ext::sp_runtime::MultiAddress<
                            ::subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        nominator: ::subxt::ext::sp_runtime::MultiAddress<
                            ::subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        state_toggler: ::subxt::ext::sp_runtime::MultiAddress<
                            ::subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 7)]
                    #[doc = "Nominate on behalf of the pool."]
                    #[doc = ""]
                    #[doc = "The dispatch origin of this call must be signed by the pool nominator or the pool"]
                    #[doc = "root role."]
                    #[doc = ""]
                    #[doc = "This directly forward the call to the staking pallet, on behalf of the pool bonded"]
                    #[doc = "account."]
                    nominate {
                        pool_id: ::core::primitive::u32,
                        validators: ::std::vec::Vec<
                            ::subxt::ext::sp_core::crypto::AccountId32,
                        >,
                    },
                    #[codec(index = 8)]
                    #[doc = "Set a new state for the pool."]
                    #[doc = ""]
                    #[doc = "If a pool is already in the `Destroying` state, then under no condition can its state"]
                    #[doc = "change again."]
                    #[doc = ""]
                    #[doc = "The dispatch origin of this call must be either:"]
                    #[doc = ""]
                    #[doc = "1. signed by the state toggler, or the root role of the pool,"]
                    #[doc = "2. if the pool conditions to be open are NOT met (as described by `ok_to_be_open`), and"]
                    #[doc = "   then the state of the pool can be permissionlessly changed to `Destroying`."]
                    set_state {
                        pool_id: ::core::primitive::u32,
                        state:
                            runtime_types::pallet_nomination_pools::PoolState,
                    },
                    #[codec(index = 9)]
                    #[doc = "Set a new metadata for the pool."]
                    #[doc = ""]
                    #[doc = "The dispatch origin of this call must be signed by the state toggler, or the root role"]
                    #[doc = "of the pool."]
                    set_metadata {
                        pool_id: ::core::primitive::u32,
                        metadata: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 10)]
                    #[doc = "Update configurations for the nomination pools. The origin for this call must be"]
                    #[doc = "Root."]
                    #[doc = ""]
                    #[doc = "# Arguments"]
                    #[doc = ""]
                    #[doc = "* `min_join_bond` - Set [`MinJoinBond`]."]
                    #[doc = "* `min_create_bond` - Set [`MinCreateBond`]."]
                    #[doc = "* `max_pools` - Set [`MaxPools`]."]
                    #[doc = "* `max_members` - Set [`MaxPoolMembers`]."]
                    #[doc = "* `max_members_per_pool` - Set [`MaxPoolMembersPerPool`]."]
                    set_configs {
                        min_join_bond:
                            runtime_types::pallet_nomination_pools::ConfigOp<
                                ::core::primitive::u128,
                            >,
                        min_create_bond:
                            runtime_types::pallet_nomination_pools::ConfigOp<
                                ::core::primitive::u128,
                            >,
                        max_pools:
                            runtime_types::pallet_nomination_pools::ConfigOp<
                                ::core::primitive::u32,
                            >,
                        max_members:
                            runtime_types::pallet_nomination_pools::ConfigOp<
                                ::core::primitive::u32,
                            >,
                        max_members_per_pool:
                            runtime_types::pallet_nomination_pools::ConfigOp<
                                ::core::primitive::u32,
                            >,
                    },
                    #[codec(index = 11)]
                    #[doc = "Update the roles of the pool."]
                    #[doc = ""]
                    #[doc = "The root is the only entity that can change any of the roles, including itself,"]
                    #[doc = "excluding the depositor, who can never change."]
                    #[doc = ""]
                    #[doc = "It emits an event, notifying UIs of the role change. This event is quite relevant to"]
                    #[doc = "most pool members and they should be informed of changes to pool roles."]
                    update_roles {
                        pool_id: ::core::primitive::u32,
                        new_root:
                            runtime_types::pallet_nomination_pools::ConfigOp<
                                ::subxt::ext::sp_core::crypto::AccountId32,
                            >,
                        new_nominator:
                            runtime_types::pallet_nomination_pools::ConfigOp<
                                ::subxt::ext::sp_core::crypto::AccountId32,
                            >,
                        new_state_toggler:
                            runtime_types::pallet_nomination_pools::ConfigOp<
                                ::subxt::ext::sp_core::crypto::AccountId32,
                            >,
                    },
                    #[codec(index = 12)]
                    #[doc = "Chill on behalf of the pool."]
                    #[doc = ""]
                    #[doc = "The dispatch origin of this call must be signed by the pool nominator or the pool"]
                    #[doc = "root role, same as [`Pallet::nominate`]."]
                    #[doc = ""]
                    #[doc = "This directly forward the call to the staking pallet, on behalf of the pool bonded"]
                    #[doc = "account."]
                    chill { pool_id: ::core::primitive::u32 },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                pub enum DefensiveError {
                    #[codec(index = 0)]
                    NotEnoughSpaceInUnbondPool,
                    #[codec(index = 1)]
                    PoolNotFound,
                    #[codec(index = 2)]
                    RewardPoolNotFound,
                    #[codec(index = 3)]
                    SubPoolsNotFound,
                    #[codec(index = 4)]
                    BondedStashKilledPrematurely,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    # [codec (index = 0)] # [doc = "A (bonded) pool id does not exist."] PoolNotFound , # [codec (index = 1)] # [doc = "An account is not a member."] PoolMemberNotFound , # [codec (index = 2)] # [doc = "A reward pool does not exist. In all cases this is a system logic error."] RewardPoolNotFound , # [codec (index = 3)] # [doc = "A sub pool does not exist."] SubPoolsNotFound , # [codec (index = 4)] # [doc = "An account is already delegating in another pool. An account may only belong to one"] # [doc = "pool at a time."] AccountBelongsToOtherPool , # [codec (index = 5)] # [doc = "The member is fully unbonded (and thus cannot access the bonded and reward pool"] # [doc = "anymore to, for example, collect rewards)."] FullyUnbonding , # [codec (index = 6)] # [doc = "The member cannot unbond further chunks due to reaching the limit."] MaxUnbondingLimit , # [codec (index = 7)] # [doc = "None of the funds can be withdrawn yet because the bonding duration has not passed."] CannotWithdrawAny , # [codec (index = 8)] # [doc = "The amount does not meet the minimum bond to either join or create a pool."] # [doc = ""] # [doc = "The depositor can never unbond to a value less than"] # [doc = "`Pallet::depositor_min_bond`. The caller does not have nominating"] # [doc = "permissions for the pool. Members can never unbond to a value below `MinJoinBond`."] MinimumBondNotMet , # [codec (index = 9)] # [doc = "The transaction could not be executed due to overflow risk for the pool."] OverflowRisk , # [codec (index = 10)] # [doc = "A pool must be in [`PoolState::Destroying`] in order for the depositor to unbond or for"] # [doc = "other members to be permissionlessly unbonded."] NotDestroying , # [codec (index = 11)] # [doc = "The caller does not have nominating permissions for the pool."] NotNominator , # [codec (index = 12)] # [doc = "Either a) the caller cannot make a valid kick or b) the pool is not destroying."] NotKickerOrDestroying , # [codec (index = 13)] # [doc = "The pool is not open to join"] NotOpen , # [codec (index = 14)] # [doc = "The system is maxed out on pools."] MaxPools , # [codec (index = 15)] # [doc = "Too many members in the pool or system."] MaxPoolMembers , # [codec (index = 16)] # [doc = "The pools state cannot be changed."] CanNotChangeState , # [codec (index = 17)] # [doc = "The caller does not have adequate permissions."] DoesNotHavePermission , # [codec (index = 18)] # [doc = "Metadata exceeds [`Config::MaxMetadataLen`]"] MetadataExceedsMaxLen , # [codec (index = 19)] # [doc = "Some error occurred that should never happen. This should be reported to the"] # [doc = "maintainers."] Defensive (runtime_types :: pallet_nomination_pools :: pallet :: DefensiveError ,) , # [codec (index = 20)] # [doc = "Partial unbonding now allowed permissionlessly."] PartialUnbondNotAllowedPermissionlessly , }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "Events of this pallet."]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A pool has been created."]
                    Created {
                        depositor: ::subxt::ext::sp_core::crypto::AccountId32,
                        pool_id: ::core::primitive::u32,
                    },
                    #[codec(index = 1)]
                    #[doc = "A member has became bonded in a pool."]
                    Bonded {
                        member: ::subxt::ext::sp_core::crypto::AccountId32,
                        pool_id: ::core::primitive::u32,
                        bonded: ::core::primitive::u128,
                        joined: ::core::primitive::bool,
                    },
                    #[codec(index = 2)]
                    #[doc = "A payout has been made to a member."]
                    PaidOut {
                        member: ::subxt::ext::sp_core::crypto::AccountId32,
                        pool_id: ::core::primitive::u32,
                        payout: ::core::primitive::u128,
                    },
                    #[codec(index = 3)]
                    #[doc = "A member has unbonded from their pool."]
                    #[doc = ""]
                    #[doc = "- `balance` is the corresponding balance of the number of points that has been"]
                    #[doc = "  requested to be unbonded (the argument of the `unbond` transaction) from the bonded"]
                    #[doc = "  pool."]
                    #[doc = "- `points` is the number of points that are issued as a result of `balance` being"]
                    #[doc = "dissolved into the corresponding unbonding pool."]
                    #[doc = "- `era` is the era in which the balance will be unbonded."]
                    #[doc = "In the absence of slashing, these values will match. In the presence of slashing, the"]
                    #[doc = "number of points that are issued in the unbonding pool will be less than the amount"]
                    #[doc = "requested to be unbonded."]
                    Unbonded {
                        member: ::subxt::ext::sp_core::crypto::AccountId32,
                        pool_id: ::core::primitive::u32,
                        balance: ::core::primitive::u128,
                        points: ::core::primitive::u128,
                        era: ::core::primitive::u32,
                    },
                    #[codec(index = 4)]
                    #[doc = "A member has withdrawn from their pool."]
                    #[doc = ""]
                    #[doc = "The given number of `points` have been dissolved in return of `balance`."]
                    #[doc = ""]
                    #[doc = "Similar to `Unbonded` event, in the absence of slashing, the ratio of point to balance"]
                    #[doc = "will be 1."]
                    Withdrawn {
                        member: ::subxt::ext::sp_core::crypto::AccountId32,
                        pool_id: ::core::primitive::u32,
                        balance: ::core::primitive::u128,
                        points: ::core::primitive::u128,
                    },
                    #[codec(index = 5)]
                    #[doc = "A pool has been destroyed."]
                    Destroyed { pool_id: ::core::primitive::u32 },
                    #[codec(index = 6)]
                    #[doc = "The state of a pool has changed"]
                    StateChanged {
                        pool_id: ::core::primitive::u32,
                        new_state:
                            runtime_types::pallet_nomination_pools::PoolState,
                    },
                    #[codec(index = 7)]
                    #[doc = "A member has been removed from a pool."]
                    #[doc = ""]
                    #[doc = "The removal can be voluntary (withdrawn all unbonded funds) or involuntary (kicked)."]
                    MemberRemoved {
                        pool_id: ::core::primitive::u32,
                        member: ::subxt::ext::sp_core::crypto::AccountId32,
                    },
                    #[codec(index = 8)]
                    #[doc = "The roles of a pool have been updated to the given new roles. Note that the depositor"]
                    #[doc = "can never change."]
                    RolesUpdated {
                        root: ::core::option::Option<
                            ::subxt::ext::sp_core::crypto::AccountId32,
                        >,
                        state_toggler: ::core::option::Option<
                            ::subxt::ext::sp_core::crypto::AccountId32,
                        >,
                        nominator: ::core::option::Option<
                            ::subxt::ext::sp_core::crypto::AccountId32,
                        >,
                    },
                    #[codec(index = 9)]
                    #[doc = "The active balance of pool `pool_id` has been slashed to `balance`."]
                    PoolSlashed {
                        pool_id: ::core::primitive::u32,
                        balance: ::core::primitive::u128,
                    },
                    #[codec(index = 10)]
                    #[doc = "The unbond pool at `era` of pool `pool_id` has been slashed to `balance`."]
                    UnbondingPoolSlashed {
                        pool_id: ::core::primitive::u32,
                        era: ::core::primitive::u32,
                        balance: ::core::primitive::u128,
                    },
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub enum BondExtra<_0> {
                #[codec(index = 0)]
                FreeBalance(_0),
                #[codec(index = 1)]
                Rewards,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct BondedPoolInner {
                pub points: ::core::primitive::u128,
                pub state: runtime_types::pallet_nomination_pools::PoolState,
                pub member_counter: ::core::primitive::u32,
                pub roles: runtime_types::pallet_nomination_pools::PoolRoles<
                    ::subxt::ext::sp_core::crypto::AccountId32,
                >,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub enum ConfigOp<_0> {
                #[codec(index = 0)]
                Noop,
                #[codec(index = 1)]
                Set(_0),
                #[codec(index = 2)]
                Remove,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct PoolMember { pub pool_id : :: core :: primitive :: u32 , pub points : :: core :: primitive :: u128 , pub last_recorded_reward_counter : runtime_types :: sp_arithmetic :: fixed_point :: FixedU128 , pub unbonding_eras : runtime_types :: sp_runtime :: bounded :: bounded_btree_map :: BoundedBTreeMap < :: core :: primitive :: u32 , :: core :: primitive :: u128 > , }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct PoolRoles<_0> {
                pub depositor: _0,
                pub root: ::core::option::Option<_0>,
                pub nominator: ::core::option::Option<_0>,
                pub state_toggler: ::core::option::Option<_0>,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub enum PoolState {
                #[codec(index = 0)]
                Open,
                #[codec(index = 1)]
                Blocked,
                #[codec(index = 2)]
                Destroying,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct RewardPool {
                pub last_recorded_reward_counter:
                    runtime_types::sp_arithmetic::fixed_point::FixedU128,
                pub last_recorded_total_payouts: ::core::primitive::u128,
                pub total_rewards_claimed: ::core::primitive::u128,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct SubPools { pub no_era : runtime_types :: pallet_nomination_pools :: UnbondPool , pub with_era : runtime_types :: sp_runtime :: bounded :: bounded_btree_map :: BoundedBTreeMap < :: core :: primitive :: u32 , runtime_types :: pallet_nomination_pools :: UnbondPool > , }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct UnbondPool {
                pub points: ::core::primitive::u128,
                pub balance: ::core::primitive::u128,
            }
        }
        pub mod pallet_offences {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "Events type."]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "There is an offence reported of the given `kind` happened at the `session_index` and"]
                    #[doc = "(kind-specific) time slot. This event is not deposited for duplicate slashes."]
                    #[doc = "\\[kind, timeslot\\]."]
                    Offence {
                        kind: [::core::primitive::u8; 16usize],
                        timeslot: ::std::vec::Vec<::core::primitive::u8>,
                    },
                }
            }
        }
        pub mod pallet_preimage {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Register a preimage on-chain."]
                    #[doc = ""]
                    #[doc = "If the preimage was previously requested, no fees or deposits are taken for providing"]
                    #[doc = "the preimage. Otherwise, a deposit is taken proportional to the size of the preimage."]
                    note_preimage {
                        bytes: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 1)]
                    #[doc = "Clear an unrequested preimage from the runtime storage."]
                    unnote_preimage { hash: ::subxt::ext::sp_core::H256 },
                    #[codec(index = 2)]
                    #[doc = "Request a preimage be uploaded to the chain without paying any fees or deposits."]
                    #[doc = ""]
                    #[doc = "If the preimage requests has already been provided on-chain, we unreserve any deposit"]
                    #[doc = "a user may have paid, and take the control of the preimage out of their hands."]
                    request_preimage { hash: ::subxt::ext::sp_core::H256 },
                    #[codec(index = 3)]
                    #[doc = "Clear a previously made request for a preimage."]
                    #[doc = ""]
                    #[doc = "NOTE: THIS MUST NOT BE CALLED ON `hash` MORE TIMES THAN `request_preimage`."]
                    unrequest_preimage { hash: ::subxt::ext::sp_core::H256 },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Preimage is too large to store on-chain."]
                    TooLarge,
                    #[codec(index = 1)]
                    #[doc = "Preimage has already been noted on-chain."]
                    AlreadyNoted,
                    #[codec(index = 2)]
                    #[doc = "The user is not authorized to perform this action."]
                    NotAuthorized,
                    #[codec(index = 3)]
                    #[doc = "The preimage cannot be removed since it has not yet been noted."]
                    NotNoted,
                    #[codec(index = 4)]
                    #[doc = "A preimage may not be removed when there are outstanding requests."]
                    Requested,
                    #[codec(index = 5)]
                    #[doc = "The preimage request cannot be removed since no outstanding requests exist."]
                    NotRequested,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A preimage has been noted."]
                    Noted { hash: ::subxt::ext::sp_core::H256 },
                    #[codec(index = 1)]
                    #[doc = "A preimage has been requested."]
                    Requested { hash: ::subxt::ext::sp_core::H256 },
                    #[codec(index = 2)]
                    #[doc = "A preimage has ben cleared."]
                    Cleared { hash: ::subxt::ext::sp_core::H256 },
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub enum RequestStatus<_0, _1> {
                #[codec(index = 0)]
                Unrequested(::core::option::Option<(_0, _1)>),
                #[codec(index = 1)]
                Requested(::core::primitive::u32),
            }
        }
        pub mod pallet_proxy {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Dispatch the given `call` from an account that the sender is authorised for through"]
                    #[doc = "`add_proxy`."]
                    #[doc = ""]
                    #[doc = "Removes any corresponding announcement(s)."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "Parameters:"]
                    #[doc = "- `real`: The account that the proxy will make a call on behalf of."]
                    #[doc = "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call."]
                    #[doc = "- `call`: The call to be made by the `real` account."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "Weight is a function of the number of proxies the user has (P)."]
                    #[doc = "# </weight>"]
                    proxy {
                        real: ::subxt::ext::sp_runtime::MultiAddress<
                            ::subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        force_proxy_type: ::core::option::Option<
                            runtime_types::webb_standalone_runtime::ProxyType,
                        >,
                        call: ::std::boxed::Box<
                            runtime_types::webb_standalone_runtime::Call,
                        >,
                    },
                    #[codec(index = 1)]
                    #[doc = "Register a proxy account for the sender that is able to make calls on its behalf."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "Parameters:"]
                    #[doc = "- `proxy`: The account that the `caller` would like to make a proxy."]
                    #[doc = "- `proxy_type`: The permissions allowed for this proxy account."]
                    #[doc = "- `delay`: The announcement period required of the initial proxy. Will generally be"]
                    #[doc = "zero."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "Weight is a function of the number of proxies the user has (P)."]
                    #[doc = "# </weight>"]
                    add_proxy {
                        delegate: ::subxt::ext::sp_runtime::MultiAddress<
                            ::subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        proxy_type:
                            runtime_types::webb_standalone_runtime::ProxyType,
                        delay: ::core::primitive::u64,
                    },
                    #[codec(index = 2)]
                    #[doc = "Unregister a proxy account for the sender."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "Parameters:"]
                    #[doc = "- `proxy`: The account that the `caller` would like to remove as a proxy."]
                    #[doc = "- `proxy_type`: The permissions currently enabled for the removed proxy account."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "Weight is a function of the number of proxies the user has (P)."]
                    #[doc = "# </weight>"]
                    remove_proxy {
                        delegate: ::subxt::ext::sp_runtime::MultiAddress<
                            ::subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        proxy_type:
                            runtime_types::webb_standalone_runtime::ProxyType,
                        delay: ::core::primitive::u64,
                    },
                    #[codec(index = 3)]
                    #[doc = "Unregister all proxy accounts for the sender."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "WARNING: This may be called on accounts created by `anonymous`, however if done, then"]
                    #[doc = "the unreserved fees will be inaccessible. **All access to this account will be lost.**"]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "Weight is a function of the number of proxies the user has (P)."]
                    #[doc = "# </weight>"]
                    remove_proxies,
                    #[codec(index = 4)]
                    #[doc = "Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and"]
                    #[doc = "initialize it with a proxy of `proxy_type` for `origin` sender."]
                    #[doc = ""]
                    #[doc = "Requires a `Signed` origin."]
                    #[doc = ""]
                    #[doc = "- `proxy_type`: The type of the proxy that the sender will be registered as over the"]
                    #[doc = "new account. This will almost always be the most permissive `ProxyType` possible to"]
                    #[doc = "allow for maximum flexibility."]
                    #[doc = "- `index`: A disambiguation index, in case this is called multiple times in the same"]
                    #[doc = "transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just"]
                    #[doc = "want to use `0`."]
                    #[doc = "- `delay`: The announcement period required of the initial proxy. Will generally be"]
                    #[doc = "zero."]
                    #[doc = ""]
                    #[doc = "Fails with `Duplicate` if this has already been called in this transaction, from the"]
                    #[doc = "same sender, with the same parameters."]
                    #[doc = ""]
                    #[doc = "Fails if there are insufficient funds to pay for deposit."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "Weight is a function of the number of proxies the user has (P)."]
                    #[doc = "# </weight>"]
                    #[doc = "TODO: Might be over counting 1 read"]
                    anonymous {
                        proxy_type:
                            runtime_types::webb_standalone_runtime::ProxyType,
                        delay: ::core::primitive::u64,
                        index: ::core::primitive::u16,
                    },
                    #[codec(index = 5)]
                    #[doc = "Removes a previously spawned anonymous proxy."]
                    #[doc = ""]
                    #[doc = "WARNING: **All access to this account will be lost.** Any funds held in it will be"]
                    #[doc = "inaccessible."]
                    #[doc = ""]
                    #[doc = "Requires a `Signed` origin, and the sender account must have been created by a call to"]
                    #[doc = "`anonymous` with corresponding parameters."]
                    #[doc = ""]
                    #[doc = "- `spawner`: The account that originally called `anonymous` to create this account."]
                    #[doc = "- `index`: The disambiguation index originally passed to `anonymous`. Probably `0`."]
                    #[doc = "- `proxy_type`: The proxy type originally passed to `anonymous`."]
                    #[doc = "- `height`: The height of the chain when the call to `anonymous` was processed."]
                    #[doc = "- `ext_index`: The extrinsic index in which the call to `anonymous` was processed."]
                    #[doc = ""]
                    #[doc = "Fails with `NoPermission` in case the caller is not a previously created anonymous"]
                    #[doc = "account whose `anonymous` call has corresponding parameters."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "Weight is a function of the number of proxies the user has (P)."]
                    #[doc = "# </weight>"]
                    kill_anonymous {
                        spawner: ::subxt::ext::sp_runtime::MultiAddress<
                            ::subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        proxy_type:
                            runtime_types::webb_standalone_runtime::ProxyType,
                        index: ::core::primitive::u16,
                        #[codec(compact)]
                        height: ::core::primitive::u64,
                        #[codec(compact)]
                        ext_index: ::core::primitive::u32,
                    },
                    #[codec(index = 6)]
                    #[doc = "Publish the hash of a proxy-call that will be made in the future."]
                    #[doc = ""]
                    #[doc = "This must be called some number of blocks before the corresponding `proxy` is attempted"]
                    #[doc = "if the delay associated with the proxy relationship is greater than zero."]
                    #[doc = ""]
                    #[doc = "No more than `MaxPending` announcements may be made at any one time."]
                    #[doc = ""]
                    #[doc = "This will take a deposit of `AnnouncementDepositFactor` as well as"]
                    #[doc = "`AnnouncementDepositBase` if there are no other pending announcements."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_ and a proxy of `real`."]
                    #[doc = ""]
                    #[doc = "Parameters:"]
                    #[doc = "- `real`: The account that the proxy will make a call on behalf of."]
                    #[doc = "- `call_hash`: The hash of the call to be made by the `real` account."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "Weight is a function of:"]
                    #[doc = "- A: the number of announcements made."]
                    #[doc = "- P: the number of proxies the user has."]
                    #[doc = "# </weight>"]
                    announce {
                        real: ::subxt::ext::sp_runtime::MultiAddress<
                            ::subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        call_hash: ::subxt::ext::sp_core::H256,
                    },
                    #[codec(index = 7)]
                    #[doc = "Remove a given announcement."]
                    #[doc = ""]
                    #[doc = "May be called by a proxy account to remove a call they previously announced and return"]
                    #[doc = "the deposit."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "Parameters:"]
                    #[doc = "- `real`: The account that the proxy will make a call on behalf of."]
                    #[doc = "- `call_hash`: The hash of the call to be made by the `real` account."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "Weight is a function of:"]
                    #[doc = "- A: the number of announcements made."]
                    #[doc = "- P: the number of proxies the user has."]
                    #[doc = "# </weight>"]
                    remove_announcement {
                        real: ::subxt::ext::sp_runtime::MultiAddress<
                            ::subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        call_hash: ::subxt::ext::sp_core::H256,
                    },
                    #[codec(index = 8)]
                    #[doc = "Remove the given announcement of a delegate."]
                    #[doc = ""]
                    #[doc = "May be called by a target (proxied) account to remove a call that one of their delegates"]
                    #[doc = "(`delegate`) has announced they want to execute. The deposit is returned."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "Parameters:"]
                    #[doc = "- `delegate`: The account that previously announced the call."]
                    #[doc = "- `call_hash`: The hash of the call to be made."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "Weight is a function of:"]
                    #[doc = "- A: the number of announcements made."]
                    #[doc = "- P: the number of proxies the user has."]
                    #[doc = "# </weight>"]
                    reject_announcement {
                        delegate: ::subxt::ext::sp_runtime::MultiAddress<
                            ::subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        call_hash: ::subxt::ext::sp_core::H256,
                    },
                    #[codec(index = 9)]
                    #[doc = "Dispatch the given `call` from an account that the sender is authorized for through"]
                    #[doc = "`add_proxy`."]
                    #[doc = ""]
                    #[doc = "Removes any corresponding announcement(s)."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "Parameters:"]
                    #[doc = "- `real`: The account that the proxy will make a call on behalf of."]
                    #[doc = "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call."]
                    #[doc = "- `call`: The call to be made by the `real` account."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "Weight is a function of:"]
                    #[doc = "- A: the number of announcements made."]
                    #[doc = "- P: the number of proxies the user has."]
                    #[doc = "# </weight>"]
                    proxy_announced {
                        delegate: ::subxt::ext::sp_runtime::MultiAddress<
                            ::subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        real: ::subxt::ext::sp_runtime::MultiAddress<
                            ::subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                        force_proxy_type: ::core::option::Option<
                            runtime_types::webb_standalone_runtime::ProxyType,
                        >,
                        call: ::std::boxed::Box<
                            runtime_types::webb_standalone_runtime::Call,
                        >,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "There are too many proxies registered or too many announcements pending."]
                    TooMany,
                    #[codec(index = 1)]
                    #[doc = "Proxy registration not found."]
                    NotFound,
                    #[codec(index = 2)]
                    #[doc = "Sender is not a proxy of the account to be proxied."]
                    NotProxy,
                    #[codec(index = 3)]
                    #[doc = "A call which is incompatible with the proxy type's filter was attempted."]
                    Unproxyable,
                    #[codec(index = 4)]
                    #[doc = "Account is already a proxy."]
                    Duplicate,
                    #[codec(index = 5)]
                    #[doc = "Call may not be made by proxy because it may escalate its privileges."]
                    NoPermission,
                    #[codec(index = 6)]
                    #[doc = "Announcement, if made at all, was made too recently."]
                    Unannounced,
                    #[codec(index = 7)]
                    #[doc = "Cannot add self as proxy."]
                    NoSelfProxy,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A proxy was executed correctly, with the given."]
                    ProxyExecuted {
                        result: ::core::result::Result<
                            (),
                            runtime_types::sp_runtime::DispatchError,
                        >,
                    },
                    #[codec(index = 1)]
                    #[doc = "Anonymous account has been created by new proxy with given"]
                    #[doc = "disambiguation index and proxy type."]
                    AnonymousCreated {
                        anonymous: ::subxt::ext::sp_core::crypto::AccountId32,
                        who: ::subxt::ext::sp_core::crypto::AccountId32,
                        proxy_type:
                            runtime_types::webb_standalone_runtime::ProxyType,
                        disambiguation_index: ::core::primitive::u16,
                    },
                    #[codec(index = 2)]
                    #[doc = "An announcement was placed to make a call in the future."]
                    Announced {
                        real: ::subxt::ext::sp_core::crypto::AccountId32,
                        proxy: ::subxt::ext::sp_core::crypto::AccountId32,
                        call_hash: ::subxt::ext::sp_core::H256,
                    },
                    #[codec(index = 3)]
                    #[doc = "A proxy was added."]
                    ProxyAdded {
                        delegator: ::subxt::ext::sp_core::crypto::AccountId32,
                        delegatee: ::subxt::ext::sp_core::crypto::AccountId32,
                        proxy_type:
                            runtime_types::webb_standalone_runtime::ProxyType,
                        delay: ::core::primitive::u64,
                    },
                    #[codec(index = 4)]
                    #[doc = "A proxy was removed."]
                    ProxyRemoved {
                        delegator: ::subxt::ext::sp_core::crypto::AccountId32,
                        delegatee: ::subxt::ext::sp_core::crypto::AccountId32,
                        proxy_type:
                            runtime_types::webb_standalone_runtime::ProxyType,
                        delay: ::core::primitive::u64,
                    },
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Announcement<_0, _1, _2> {
                pub real: _0,
                pub call_hash: _1,
                pub height: _2,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct ProxyDefinition<_0, _1, _2> {
                pub delegate: _0,
                pub proxy_type: _1,
                pub delay: _2,
            }
        }
        pub mod pallet_relayer_registry {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "Identity pallet declaration."]
                pub enum Call {
                    # [codec (index = 0)] # [doc = "Set a resource's information and reserve the appropriate deposit."] # [doc = ""] # [doc = "If the resource already has resource information, the deposit is taken as part payment"] # [doc = "for the new deposit."] # [doc = ""] # [doc = "The dispatch origin for this call must be _Signed_."] # [doc = ""] # [doc = "- `info`: The resource information."] # [doc = ""] # [doc = "Emits `ResourceSet` if successful."] set_resource { resource_id : runtime_types :: webb_proposals :: header :: ResourceId , info : :: std :: boxed :: Box < runtime_types :: pallet_relayer_registry :: types :: ResourceInfo > , } , # [codec (index = 1)] # [doc = "Clear an account's resource record."] # [doc = ""] # [doc = "Payment: All reserved balances on the account are returned."] # [doc = ""] # [doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"] # [doc = "resource."] # [doc = ""] # [doc = "Emits `ResourceCleared` if successful."] clear_resource { resource_id : runtime_types :: webb_proposals :: header :: ResourceId , } , }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Account isn't found."]
                    NotFound,
                    #[codec(index = 1)]
                    #[doc = "Account isn't named."]
                    NotNamed,
                    #[codec(index = 2)]
                    #[doc = "Too many additional fields."]
                    TooManyFields,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A resource was set or reset (which will remove all judgements)."]
                    ResourceSet {
                        who: ::subxt::ext::sp_core::crypto::AccountId32,
                    },
                    #[codec(index = 1)]
                    #[doc = "A resource was cleared, and the given balance returned."]
                    ResourceCleared {
                        who: ::subxt::ext::sp_core::crypto::AccountId32,
                        deposit: ::core::primitive::u128,
                    },
                }
            }
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                pub struct ResourceInfo { pub additional : runtime_types :: sp_runtime :: bounded :: bounded_vec :: BoundedVec < (runtime_types :: pallet_identity :: types :: Data , runtime_types :: pallet_identity :: types :: Data ,) > , pub display : runtime_types :: pallet_identity :: types :: Data , pub chain : runtime_types :: webb_proposals :: header :: TypedChainId , pub target_system : runtime_types :: webb_proposals :: target_system :: TargetSystem , }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                pub struct ResourceRecord < _0 > { pub deposit : _0 , pub info : runtime_types :: pallet_relayer_registry :: types :: ResourceInfo , }
            }
        }
        pub mod pallet_scheduler {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    # [codec (index = 0)] # [doc = "Anonymously schedule a task."] schedule { when : :: core :: primitive :: u64 , maybe_periodic : :: core :: option :: Option < (:: core :: primitive :: u64 , :: core :: primitive :: u32 ,) > , priority : :: core :: primitive :: u8 , call : :: std :: boxed :: Box < runtime_types :: frame_support :: traits :: schedule :: MaybeHashed < runtime_types :: webb_standalone_runtime :: Call , :: subxt :: ext :: sp_core :: H256 > > , } , # [codec (index = 1)] # [doc = "Cancel an anonymously scheduled task."] cancel { when : :: core :: primitive :: u64 , index : :: core :: primitive :: u32 , } , # [codec (index = 2)] # [doc = "Schedule a named task."] schedule_named { id : :: std :: vec :: Vec < :: core :: primitive :: u8 > , when : :: core :: primitive :: u64 , maybe_periodic : :: core :: option :: Option < (:: core :: primitive :: u64 , :: core :: primitive :: u32 ,) > , priority : :: core :: primitive :: u8 , call : :: std :: boxed :: Box < runtime_types :: frame_support :: traits :: schedule :: MaybeHashed < runtime_types :: webb_standalone_runtime :: Call , :: subxt :: ext :: sp_core :: H256 > > , } , # [codec (index = 3)] # [doc = "Cancel a named scheduled task."] cancel_named { id : :: std :: vec :: Vec < :: core :: primitive :: u8 > , } , # [codec (index = 4)] # [doc = "Anonymously schedule a task after a delay."] # [doc = ""] # [doc = "# <weight>"] # [doc = "Same as [`schedule`]."] # [doc = "# </weight>"] schedule_after { after : :: core :: primitive :: u64 , maybe_periodic : :: core :: option :: Option < (:: core :: primitive :: u64 , :: core :: primitive :: u32 ,) > , priority : :: core :: primitive :: u8 , call : :: std :: boxed :: Box < runtime_types :: frame_support :: traits :: schedule :: MaybeHashed < runtime_types :: webb_standalone_runtime :: Call , :: subxt :: ext :: sp_core :: H256 > > , } , # [codec (index = 5)] # [doc = "Schedule a named task after a delay."] # [doc = ""] # [doc = "# <weight>"] # [doc = "Same as [`schedule_named`](Self::schedule_named)."] # [doc = "# </weight>"] schedule_named_after { id : :: std :: vec :: Vec < :: core :: primitive :: u8 > , after : :: core :: primitive :: u64 , maybe_periodic : :: core :: option :: Option < (:: core :: primitive :: u64 , :: core :: primitive :: u32 ,) > , priority : :: core :: primitive :: u8 , call : :: std :: boxed :: Box < runtime_types :: frame_support :: traits :: schedule :: MaybeHashed < runtime_types :: webb_standalone_runtime :: Call , :: subxt :: ext :: sp_core :: H256 > > , } , }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Failed to schedule a call"]
                    FailedToSchedule,
                    #[codec(index = 1)]
                    #[doc = "Cannot find the scheduled call."]
                    NotFound,
                    #[codec(index = 2)]
                    #[doc = "Given target block number is in the past."]
                    TargetBlockNumberInPast,
                    #[codec(index = 3)]
                    #[doc = "Reschedule failed because it does not change scheduled time."]
                    RescheduleNoChange,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "Events type."]
                pub enum Event {
                    # [codec (index = 0)] # [doc = "Scheduled some task."] Scheduled { when : :: core :: primitive :: u64 , index : :: core :: primitive :: u32 , } , # [codec (index = 1)] # [doc = "Canceled some task."] Canceled { when : :: core :: primitive :: u64 , index : :: core :: primitive :: u32 , } , # [codec (index = 2)] # [doc = "Dispatched some task."] Dispatched { task : (:: core :: primitive :: u64 , :: core :: primitive :: u32 ,) , id : :: core :: option :: Option < :: std :: vec :: Vec < :: core :: primitive :: u8 > > , result : :: core :: result :: Result < () , runtime_types :: sp_runtime :: DispatchError > , } , # [codec (index = 3)] # [doc = "The call for the provided hash was not found so the task has been aborted."] CallLookupFailed { task : (:: core :: primitive :: u64 , :: core :: primitive :: u32 ,) , id : :: core :: option :: Option < :: std :: vec :: Vec < :: core :: primitive :: u8 > > , error : runtime_types :: frame_support :: traits :: schedule :: LookupError , } , }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct ScheduledV3<_0, _1, _2, _3> {
                pub maybe_id: ::core::option::Option<
                    ::std::vec::Vec<::core::primitive::u8>,
                >,
                pub priority: ::core::primitive::u8,
                pub call: _0,
                pub maybe_periodic:
                    ::core::option::Option<(_1, ::core::primitive::u32)>,
                pub origin: _2,
                #[codec(skip)]
                pub __subxt_unused_type_params: ::core::marker::PhantomData<_3>,
            }
        }
        pub mod pallet_session {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Sets the session key(s) of the function caller to `keys`."]
                    #[doc = "Allows an account to set its session key prior to becoming a validator."]
                    #[doc = "This doesn't take effect until the next session."]
                    #[doc = ""]
                    #[doc = "The dispatch origin of this function must be signed."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- Complexity: `O(1)`. Actual cost depends on the number of length of"]
                    #[doc = "  `T::Keys::key_ids()` which is fixed."]
                    #[doc = "- DbReads: `origin account`, `T::ValidatorIdOf`, `NextKeys`"]
                    #[doc = "- DbWrites: `origin account`, `NextKeys`"]
                    #[doc = "- DbReads per key id: `KeyOwner`"]
                    #[doc = "- DbWrites per key id: `KeyOwner`"]
                    #[doc = "# </weight>"]
                    set_keys {
                        keys:
                            runtime_types::webb_standalone_runtime::SessionKeys,
                        proof: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 1)]
                    #[doc = "Removes any session key(s) of the function caller."]
                    #[doc = ""]
                    #[doc = "This doesn't take effect until the next session."]
                    #[doc = ""]
                    #[doc = "The dispatch origin of this function must be Signed and the account must be either be"]
                    #[doc = "convertible to a validator ID using the chain's typical addressing system (this usually"]
                    #[doc = "means being a controller account) or directly convertible into a validator ID (which"]
                    #[doc = "usually means being a stash account)."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- Complexity: `O(1)` in number of key types. Actual cost depends on the number of length"]
                    #[doc = "  of `T::Keys::key_ids()` which is fixed."]
                    #[doc = "- DbReads: `T::ValidatorIdOf`, `NextKeys`, `origin account`"]
                    #[doc = "- DbWrites: `NextKeys`, `origin account`"]
                    #[doc = "- DbWrites per key id: `KeyOwner`"]
                    #[doc = "# </weight>"]
                    purge_keys,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "Error for the session pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Invalid ownership proof."]
                    InvalidProof,
                    #[codec(index = 1)]
                    #[doc = "No associated validator ID for account."]
                    NoAssociatedValidatorId,
                    #[codec(index = 2)]
                    #[doc = "Registered duplicate key."]
                    DuplicatedKey,
                    #[codec(index = 3)]
                    #[doc = "No keys are associated with this account."]
                    NoKeys,
                    #[codec(index = 4)]
                    #[doc = "Key setting account is not live, so it's impossible to associate keys."]
                    NoAccount,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "New session has happened. Note that the argument is the session index, not the"]
                    #[doc = "block number as the type might suggest."]
                    NewSession {
                        session_index: ::core::primitive::u32,
                    },
                }
            }
        }
        pub mod pallet_signature_bridge {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Sets the maintainer."]
                    set_maintainer {
                        message: ::std::vec::Vec<::core::primitive::u8>,
                        signature: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 1)]
                    force_set_maintainer {
                        new_maintainer: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 2)]
                    #[doc = "Stores a method name on chain under an associated resource ID."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- O(1) write"]
                    #[doc = "# </weight>"]
                    set_resource {
                        id: runtime_types::webb_proposals::header::ResourceId,
                    },
                    #[codec(index = 3)]
                    #[doc = "Removes a resource ID from the resource mapping."]
                    #[doc = ""]
                    #[doc = "After this call, bridge transfers with the associated resource ID"]
                    #[doc = "will be rejected."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- O(1) removal"]
                    #[doc = "# </weight>"]
                    remove_resource {
                        id: runtime_types::webb_proposals::header::ResourceId,
                    },
                    #[codec(index = 4)]
                    #[doc = "Enables a chain ID as a source or destination for a bridge transfer."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- O(1) lookup and insert"]
                    #[doc = "# </weight>"]
                    whitelist_chain { id: ::core::primitive::u64 },
                    #[codec(index = 5)]
                    #[doc = "@param origin"]
                    #[doc = "@param src_id"]
                    #[doc = "@param proposal_data: (r_id, nonce, 4 bytes of zeroes, call)"]
                    #[doc = "@param signature: a signature over the proposal_data"]
                    #[doc = ""]
                    #[doc = "We check:"]
                    #[doc = "1. That the signature is actually over the proposal data"]
                    #[doc = "2. Add ResourceId to the Storage"]
                    #[doc = "3. That the call from the proposal data and the call input parameter to the function are"]
                    #[doc = "consistent with each other 4. That the execution chain id type parsed from the r_id is"]
                    #[doc = "indeed this chain's id type"]
                    #[doc = ""]
                    #[doc = "If all these checks pass then we call finalize_execution which actually executes the"]
                    #[doc = "dispatchable call. The dispatchable call is usually a handler function, for instance in"]
                    #[doc = "the anchor-handler or token-wrapper-handler pallet."]
                    #[doc = ""]
                    #[doc = "There are a few TODOs left in the function."]
                    #[doc = ""]
                    #[doc = "In the set_resource_with_signature"]
                    #[doc = "# <weight>"]
                    #[doc = "- weight of proposed call, regardless of whether execution is performed"]
                    #[doc = "# </weight>"]
                    set_resource_with_signature {
                        src_id: ::core::primitive::u64,
                        proposal_data: ::std::vec::Vec<::core::primitive::u8>,
                        signature: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 6)]
                    #[doc = "@param origin"]
                    #[doc = "@param src_id"]
                    #[doc = "@param proposal_data: (r_id, nonce, 4 bytes of zeroes, call)"]
                    #[doc = "@param signature: a signature over the proposal_data"]
                    #[doc = ""]
                    #[doc = "We check:"]
                    #[doc = "1. That the signature is actually over the proposal data"]
                    #[doc = "2. That the r_id parsed from the proposal data exists"]
                    #[doc = "3. That the call from the proposal data and the call input parameter to the function are"]
                    #[doc = "consistent with each other 4. That the execution chain id type parsed from the r_id is"]
                    #[doc = "indeed this chain's id type"]
                    #[doc = ""]
                    #[doc = "If all these checks pass then we call finalize_execution which actually executes the"]
                    #[doc = "dispatchable call. The dispatchable call is usually a handler function, for instance in"]
                    #[doc = "the anchor-handler or token-wrapper-handler pallet."]
                    #[doc = ""]
                    #[doc = "There are a few TODOs left in the function."]
                    #[doc = ""]
                    #[doc = "In the execute_proposal"]
                    #[doc = "# <weight>"]
                    #[doc = "- weight of proposed call, regardless of whether execution is performed"]
                    #[doc = "# </weight>"]
                    execute_proposal {
                        src_id: ::core::primitive::u64,
                        proposal_data: ::std::vec::Vec<::core::primitive::u8>,
                        signature: ::std::vec::Vec<::core::primitive::u8>,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Account does not have correct permissions"]
                    InvalidPermissions,
                    #[codec(index = 1)]
                    #[doc = "Provided chain Id is not valid"]
                    InvalidChainId,
                    #[codec(index = 2)]
                    #[doc = "Interactions with this chain is not permitted"]
                    ChainNotWhitelisted,
                    #[codec(index = 3)]
                    #[doc = "Chain has already been enabled"]
                    ChainAlreadyWhitelisted,
                    #[codec(index = 4)]
                    #[doc = "Resource ID provided isn't mapped to anything"]
                    ResourceDoesNotExist,
                    #[codec(index = 5)]
                    #[doc = "Resource ID provided is already mapped to anchor"]
                    ResourceAlreadyExists,
                    #[codec(index = 6)]
                    #[doc = "Provided signature is not from the active maintainer"]
                    SignatureInvalid,
                    #[codec(index = 7)]
                    #[doc = "Protected operation, must be performed by relayer"]
                    MustBeMaintainer,
                    #[codec(index = 8)]
                    #[doc = "A proposal with these parameters has already been submitted"]
                    ProposalAlreadyExists,
                    #[codec(index = 9)]
                    #[doc = "Call does not match parsed call from proposal data"]
                    CallNotConsistentWithProposalData,
                    #[codec(index = 10)]
                    #[doc = "Call does not match resource id according to resources mapping"]
                    CallDoesNotMatchResourceId,
                    #[codec(index = 11)]
                    #[doc = "Chain Id Type from the r_id does not match this chain"]
                    IncorrectExecutionChainIdType,
                    #[codec(index = 12)]
                    #[doc = "Invalid nonce"]
                    InvalidNonce,
                    #[codec(index = 13)]
                    #[doc = "Invalid proposal data"]
                    InvalidProposalData,
                    #[codec(index = 14)]
                    #[doc = "Invalid call - calls must be delegated to handler pallets"]
                    InvalidCall,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "Maintainer is set"]
                    MaintainerSet {
                        old_maintainer: ::std::vec::Vec<::core::primitive::u8>,
                        new_maintainer: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 1)]
                    #[doc = "Chain now available for transfers (chain_id)"]
                    ChainWhitelisted { chain_id: ::core::primitive::u64 },
                    #[codec(index = 2)]
                    #[doc = "Proposal has been approved"]
                    ProposalApproved {
                        chain_id: ::core::primitive::u64,
                        proposal_nonce: ::core::primitive::u32,
                    },
                    #[codec(index = 3)]
                    #[doc = "Execution of call succeeded"]
                    ProposalSucceeded {
                        chain_id: ::core::primitive::u64,
                        proposal_nonce: ::core::primitive::u32,
                    },
                    #[codec(index = 4)]
                    #[doc = "Execution of call failed"]
                    ProposalFailed {
                        chain_id: ::core::primitive::u64,
                        proposal_nonce: ::core::primitive::u32,
                    },
                }
            }
        }
        pub mod pallet_staking {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                pub mod pallet {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        Clone,
                        Debug,
                        Eq,
                        PartialEq,
                    )]
                    #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                    pub enum Call {
                        # [codec (index = 0)] # [doc = "Take the origin account as a stash and lock up `value` of its balance. `controller` will"] # [doc = "be the account that controls it."] # [doc = ""] # [doc = "`value` must be more than the `minimum_balance` specified by `T::Currency`."] # [doc = ""] # [doc = "The dispatch origin for this call must be _Signed_ by the stash account."] # [doc = ""] # [doc = "Emits `Bonded`."] # [doc = "# <weight>"] # [doc = "- Independent of the arguments. Moderate complexity."] # [doc = "- O(1)."] # [doc = "- Three extra DB entries."] # [doc = ""] # [doc = "NOTE: Two of the storage writes (`Self::bonded`, `Self::payee`) are _never_ cleaned"] # [doc = "unless the `origin` falls below _existential deposit_ and gets removed as dust."] # [doc = "------------------"] # [doc = "# </weight>"] bond { controller : :: subxt :: ext :: sp_runtime :: MultiAddress < :: subxt :: ext :: sp_core :: crypto :: AccountId32 , :: core :: primitive :: u32 > , # [codec (compact)] value : :: core :: primitive :: u128 , payee : runtime_types :: pallet_staking :: RewardDestination < :: subxt :: ext :: sp_core :: crypto :: AccountId32 > , } , # [codec (index = 1)] # [doc = "Add some extra amount that have appeared in the stash `free_balance` into the balance up"] # [doc = "for staking."] # [doc = ""] # [doc = "The dispatch origin for this call must be _Signed_ by the stash, not the controller."] # [doc = ""] # [doc = "Use this if there are additional funds in your stash account that you wish to bond."] # [doc = "Unlike [`bond`](Self::bond) or [`unbond`](Self::unbond) this function does not impose"] # [doc = "any limitation on the amount that can be added."] # [doc = ""] # [doc = "Emits `Bonded`."] # [doc = ""] # [doc = "# <weight>"] # [doc = "- Independent of the arguments. Insignificant complexity."] # [doc = "- O(1)."] # [doc = "# </weight>"] bond_extra { # [codec (compact)] max_additional : :: core :: primitive :: u128 , } , # [codec (index = 2)] # [doc = "Schedule a portion of the stash to be unlocked ready for transfer out after the bond"] # [doc = "period ends. If this leaves an amount actively bonded less than"] # [doc = "T::Currency::minimum_balance(), then it is increased to the full amount."] # [doc = ""] # [doc = "The dispatch origin for this call must be _Signed_ by the controller, not the stash."] # [doc = ""] # [doc = "Once the unlock period is done, you can call `withdraw_unbonded` to actually move"] # [doc = "the funds out of management ready for transfer."] # [doc = ""] # [doc = "No more than a limited number of unlocking chunks (see `MaxUnlockingChunks`)"] # [doc = "can co-exists at the same time. In that case, [`Call::withdraw_unbonded`] need"] # [doc = "to be called first to remove some of the chunks (if possible)."] # [doc = ""] # [doc = "If a user encounters the `InsufficientBond` error when calling this extrinsic,"] # [doc = "they should call `chill` first in order to free up their bonded funds."] # [doc = ""] # [doc = "Emits `Unbonded`."] # [doc = ""] # [doc = "See also [`Call::withdraw_unbonded`]."] unbond { # [codec (compact)] value : :: core :: primitive :: u128 , } , # [codec (index = 3)] # [doc = "Remove any unlocked chunks from the `unlocking` queue from our management."] # [doc = ""] # [doc = "This essentially frees up that balance to be used by the stash account to do"] # [doc = "whatever it wants."] # [doc = ""] # [doc = "The dispatch origin for this call must be _Signed_ by the controller."] # [doc = ""] # [doc = "Emits `Withdrawn`."] # [doc = ""] # [doc = "See also [`Call::unbond`]."] # [doc = ""] # [doc = "# <weight>"] # [doc = "Complexity O(S) where S is the number of slashing spans to remove"] # [doc = "NOTE: Weight annotation is the kill scenario, we refund otherwise."] # [doc = "# </weight>"] withdraw_unbonded { num_slashing_spans : :: core :: primitive :: u32 , } , # [codec (index = 4)] # [doc = "Declare the desire to validate for the origin controller."] # [doc = ""] # [doc = "Effects will be felt at the beginning of the next era."] # [doc = ""] # [doc = "The dispatch origin for this call must be _Signed_ by the controller, not the stash."] validate { prefs : runtime_types :: pallet_staking :: ValidatorPrefs , } , # [codec (index = 5)] # [doc = "Declare the desire to nominate `targets` for the origin controller."] # [doc = ""] # [doc = "Effects will be felt at the beginning of the next era."] # [doc = ""] # [doc = "The dispatch origin for this call must be _Signed_ by the controller, not the stash."] # [doc = ""] # [doc = "# <weight>"] # [doc = "- The transaction's complexity is proportional to the size of `targets` (N)"] # [doc = "which is capped at CompactAssignments::LIMIT (T::MaxNominations)."] # [doc = "- Both the reads and writes follow a similar pattern."] # [doc = "# </weight>"] nominate { targets : :: std :: vec :: Vec < :: subxt :: ext :: sp_runtime :: MultiAddress < :: subxt :: ext :: sp_core :: crypto :: AccountId32 , :: core :: primitive :: u32 > > , } , # [codec (index = 6)] # [doc = "Declare no desire to either validate or nominate."] # [doc = ""] # [doc = "Effects will be felt at the beginning of the next era."] # [doc = ""] # [doc = "The dispatch origin for this call must be _Signed_ by the controller, not the stash."] # [doc = ""] # [doc = "# <weight>"] # [doc = "- Independent of the arguments. Insignificant complexity."] # [doc = "- Contains one read."] # [doc = "- Writes are limited to the `origin` account key."] # [doc = "# </weight>"] chill , # [codec (index = 7)] # [doc = "(Re-)set the payment target for a controller."] # [doc = ""] # [doc = "Effects will be felt instantly (as soon as this function is completed successfully)."] # [doc = ""] # [doc = "The dispatch origin for this call must be _Signed_ by the controller, not the stash."] # [doc = ""] # [doc = "# <weight>"] # [doc = "- Independent of the arguments. Insignificant complexity."] # [doc = "- Contains a limited number of reads."] # [doc = "- Writes are limited to the `origin` account key."] # [doc = "---------"] # [doc = "- Weight: O(1)"] # [doc = "- DB Weight:"] # [doc = "    - Read: Ledger"] # [doc = "    - Write: Payee"] # [doc = "# </weight>"] set_payee { payee : runtime_types :: pallet_staking :: RewardDestination < :: subxt :: ext :: sp_core :: crypto :: AccountId32 > , } , # [codec (index = 8)] # [doc = "(Re-)set the controller of a stash."] # [doc = ""] # [doc = "Effects will be felt instantly (as soon as this function is completed successfully)."] # [doc = ""] # [doc = "The dispatch origin for this call must be _Signed_ by the stash, not the controller."] # [doc = ""] # [doc = "# <weight>"] # [doc = "- Independent of the arguments. Insignificant complexity."] # [doc = "- Contains a limited number of reads."] # [doc = "- Writes are limited to the `origin` account key."] # [doc = "----------"] # [doc = "Weight: O(1)"] # [doc = "DB Weight:"] # [doc = "- Read: Bonded, Ledger New Controller, Ledger Old Controller"] # [doc = "- Write: Bonded, Ledger New Controller, Ledger Old Controller"] # [doc = "# </weight>"] set_controller { controller : :: subxt :: ext :: sp_runtime :: MultiAddress < :: subxt :: ext :: sp_core :: crypto :: AccountId32 , :: core :: primitive :: u32 > , } , # [codec (index = 9)] # [doc = "Sets the ideal number of validators."] # [doc = ""] # [doc = "The dispatch origin must be Root."] # [doc = ""] # [doc = "# <weight>"] # [doc = "Weight: O(1)"] # [doc = "Write: Validator Count"] # [doc = "# </weight>"] set_validator_count { # [codec (compact)] new : :: core :: primitive :: u32 , } , # [codec (index = 10)] # [doc = "Increments the ideal number of validators."] # [doc = ""] # [doc = "The dispatch origin must be Root."] # [doc = ""] # [doc = "# <weight>"] # [doc = "Same as [`Self::set_validator_count`]."] # [doc = "# </weight>"] increase_validator_count { # [codec (compact)] additional : :: core :: primitive :: u32 , } , # [codec (index = 11)] # [doc = "Scale up the ideal number of validators by a factor."] # [doc = ""] # [doc = "The dispatch origin must be Root."] # [doc = ""] # [doc = "# <weight>"] # [doc = "Same as [`Self::set_validator_count`]."] # [doc = "# </weight>"] scale_validator_count { factor : runtime_types :: sp_arithmetic :: per_things :: Percent , } , # [codec (index = 12)] # [doc = "Force there to be no new eras indefinitely."] # [doc = ""] # [doc = "The dispatch origin must be Root."] # [doc = ""] # [doc = "# Warning"] # [doc = ""] # [doc = "The election process starts multiple blocks before the end of the era."] # [doc = "Thus the election process may be ongoing when this is called. In this case the"] # [doc = "election will continue until the next era is triggered."] # [doc = ""] # [doc = "# <weight>"] # [doc = "- No arguments."] # [doc = "- Weight: O(1)"] # [doc = "- Write: ForceEra"] # [doc = "# </weight>"] force_no_eras , # [codec (index = 13)] # [doc = "Force there to be a new era at the end of the next session. After this, it will be"] # [doc = "reset to normal (non-forced) behaviour."] # [doc = ""] # [doc = "The dispatch origin must be Root."] # [doc = ""] # [doc = "# Warning"] # [doc = ""] # [doc = "The election process starts multiple blocks before the end of the era."] # [doc = "If this is called just before a new era is triggered, the election process may not"] # [doc = "have enough blocks to get a result."] # [doc = ""] # [doc = "# <weight>"] # [doc = "- No arguments."] # [doc = "- Weight: O(1)"] # [doc = "- Write ForceEra"] # [doc = "# </weight>"] force_new_era , # [codec (index = 14)] # [doc = "Set the validators who cannot be slashed (if any)."] # [doc = ""] # [doc = "The dispatch origin must be Root."] set_invulnerables { invulnerables : :: std :: vec :: Vec < :: subxt :: ext :: sp_core :: crypto :: AccountId32 > , } , # [codec (index = 15)] # [doc = "Force a current staker to become completely unstaked, immediately."] # [doc = ""] # [doc = "The dispatch origin must be Root."] force_unstake { stash : :: subxt :: ext :: sp_core :: crypto :: AccountId32 , num_slashing_spans : :: core :: primitive :: u32 , } , # [codec (index = 16)] # [doc = "Force there to be a new era at the end of sessions indefinitely."] # [doc = ""] # [doc = "The dispatch origin must be Root."] # [doc = ""] # [doc = "# Warning"] # [doc = ""] # [doc = "The election process starts multiple blocks before the end of the era."] # [doc = "If this is called just before a new era is triggered, the election process may not"] # [doc = "have enough blocks to get a result."] force_new_era_always , # [codec (index = 17)] # [doc = "Cancel enactment of a deferred slash."] # [doc = ""] # [doc = "Can be called by the `T::SlashCancelOrigin`."] # [doc = ""] # [doc = "Parameters: era and indices of the slashes for that era to kill."] cancel_deferred_slash { era : :: core :: primitive :: u32 , slash_indices : :: std :: vec :: Vec < :: core :: primitive :: u32 > , } , # [codec (index = 18)] # [doc = "Pay out all the stakers behind a single validator for a single era."] # [doc = ""] # [doc = "- `validator_stash` is the stash account of the validator. Their nominators, up to"] # [doc = "  `T::MaxNominatorRewardedPerValidator`, will also receive their rewards."] # [doc = "- `era` may be any era between `[current_era - history_depth; current_era]`."] # [doc = ""] # [doc = "The origin of this call must be _Signed_. Any account can call this function, even if"] # [doc = "it is not one of the stakers."] # [doc = ""] # [doc = "# <weight>"] # [doc = "- Time complexity: at most O(MaxNominatorRewardedPerValidator)."] # [doc = "- Contains a limited number of reads and writes."] # [doc = "-----------"] # [doc = "N is the Number of payouts for the validator (including the validator)"] # [doc = "Weight:"] # [doc = "- Reward Destination Staked: O(N)"] # [doc = "- Reward Destination Controller (Creating): O(N)"] # [doc = ""] # [doc = "  NOTE: weights are assuming that payouts are made to alive stash account (Staked)."] # [doc = "  Paying even a dead controller is cheaper weight-wise. We don't do any refunds here."] # [doc = "# </weight>"] payout_stakers { validator_stash : :: subxt :: ext :: sp_core :: crypto :: AccountId32 , era : :: core :: primitive :: u32 , } , # [codec (index = 19)] # [doc = "Rebond a portion of the stash scheduled to be unlocked."] # [doc = ""] # [doc = "The dispatch origin must be signed by the controller."] # [doc = ""] # [doc = "# <weight>"] # [doc = "- Time complexity: O(L), where L is unlocking chunks"] # [doc = "- Bounded by `MaxUnlockingChunks`."] # [doc = "- Storage changes: Can't increase storage, only decrease it."] # [doc = "# </weight>"] rebond { # [codec (compact)] value : :: core :: primitive :: u128 , } , # [codec (index = 20)] # [doc = "Set `HistoryDepth` value. This function will delete any history information"] # [doc = "when `HistoryDepth` is reduced."] # [doc = ""] # [doc = "Parameters:"] # [doc = "- `new_history_depth`: The new history depth you would like to set."] # [doc = "- `era_items_deleted`: The number of items that will be deleted by this dispatch. This"] # [doc = "  should report all the storage items that will be deleted by clearing old era history."] # [doc = "  Needed to report an accurate weight for the dispatch. Trusted by `Root` to report an"] # [doc = "  accurate number."] # [doc = ""] # [doc = "Origin must be root."] # [doc = ""] # [doc = "# <weight>"] # [doc = "- E: Number of history depths removed, i.e. 10 -> 7 = 3"] # [doc = "- Weight: O(E)"] # [doc = "- DB Weight:"] # [doc = "    - Reads: Current Era, History Depth"] # [doc = "    - Writes: History Depth"] # [doc = "    - Clear Prefix Each: Era Stakers, EraStakersClipped, ErasValidatorPrefs"] # [doc = "    - Writes Each: ErasValidatorReward, ErasRewardPoints, ErasTotalStake,"] # [doc = "      ErasStartSessionIndex"] # [doc = "# </weight>"] set_history_depth { # [codec (compact)] new_history_depth : :: core :: primitive :: u32 , # [codec (compact)] era_items_deleted : :: core :: primitive :: u32 , } , # [codec (index = 21)] # [doc = "Remove all data structures concerning a staker/stash once it is at a state where it can"] # [doc = "be considered `dust` in the staking system. The requirements are:"] # [doc = ""] # [doc = "1. the `total_balance` of the stash is below existential deposit."] # [doc = "2. or, the `ledger.total` of the stash is below existential deposit."] # [doc = ""] # [doc = "The former can happen in cases like a slash; the latter when a fully unbonded account"] # [doc = "is still receiving staking rewards in `RewardDestination::Staked`."] # [doc = ""] # [doc = "It can be called by anyone, as long as `stash` meets the above requirements."] # [doc = ""] # [doc = "Refunds the transaction fees upon successful execution."] reap_stash { stash : :: subxt :: ext :: sp_core :: crypto :: AccountId32 , num_slashing_spans : :: core :: primitive :: u32 , } , # [codec (index = 22)] # [doc = "Remove the given nominations from the calling validator."] # [doc = ""] # [doc = "Effects will be felt at the beginning of the next era."] # [doc = ""] # [doc = "The dispatch origin for this call must be _Signed_ by the controller, not the stash."] # [doc = ""] # [doc = "- `who`: A list of nominator stash accounts who are nominating this validator which"] # [doc = "  should no longer be nominating this validator."] # [doc = ""] # [doc = "Note: Making this call only makes sense if you first set the validator preferences to"] # [doc = "block any further nominations."] kick { who : :: std :: vec :: Vec < :: subxt :: ext :: sp_runtime :: MultiAddress < :: subxt :: ext :: sp_core :: crypto :: AccountId32 , :: core :: primitive :: u32 > > , } , # [codec (index = 23)] # [doc = "Update the various staking configurations ."] # [doc = ""] # [doc = "* `min_nominator_bond`: The minimum active bond needed to be a nominator."] # [doc = "* `min_validator_bond`: The minimum active bond needed to be a validator."] # [doc = "* `max_nominator_count`: The max number of users who can be a nominator at once. When"] # [doc = "  set to `None`, no limit is enforced."] # [doc = "* `max_validator_count`: The max number of users who can be a validator at once. When"] # [doc = "  set to `None`, no limit is enforced."] # [doc = "* `chill_threshold`: The ratio of `max_nominator_count` or `max_validator_count` which"] # [doc = "  should be filled in order for the `chill_other` transaction to work."] # [doc = "* `min_commission`: The minimum amount of commission that each validators must maintain."] # [doc = "  This is checked only upon calling `validate`. Existing validators are not affected."] # [doc = ""] # [doc = "Origin must be Root to call this function."] # [doc = ""] # [doc = "NOTE: Existing nominators and validators will not be affected by this update."] # [doc = "to kick people under the new limits, `chill_other` should be called."] set_staking_configs { min_nominator_bond : runtime_types :: pallet_staking :: pallet :: pallet :: ConfigOp < :: core :: primitive :: u128 > , min_validator_bond : runtime_types :: pallet_staking :: pallet :: pallet :: ConfigOp < :: core :: primitive :: u128 > , max_nominator_count : runtime_types :: pallet_staking :: pallet :: pallet :: ConfigOp < :: core :: primitive :: u32 > , max_validator_count : runtime_types :: pallet_staking :: pallet :: pallet :: ConfigOp < :: core :: primitive :: u32 > , chill_threshold : runtime_types :: pallet_staking :: pallet :: pallet :: ConfigOp < runtime_types :: sp_arithmetic :: per_things :: Percent > , min_commission : runtime_types :: pallet_staking :: pallet :: pallet :: ConfigOp < runtime_types :: sp_arithmetic :: per_things :: Perbill > , } , # [codec (index = 24)] # [doc = "Declare a `controller` to stop participating as either a validator or nominator."] # [doc = ""] # [doc = "Effects will be felt at the beginning of the next era."] # [doc = ""] # [doc = "The dispatch origin for this call must be _Signed_, but can be called by anyone."] # [doc = ""] # [doc = "If the caller is the same as the controller being targeted, then no further checks are"] # [doc = "enforced, and this function behaves just like `chill`."] # [doc = ""] # [doc = "If the caller is different than the controller being targeted, the following conditions"] # [doc = "must be met:"] # [doc = ""] # [doc = "* `controller` must belong to a nominator who has become non-decodable,"] # [doc = ""] # [doc = "Or:"] # [doc = ""] # [doc = "* A `ChillThreshold` must be set and checked which defines how close to the max"] # [doc = "  nominators or validators we must reach before users can start chilling one-another."] # [doc = "* A `MaxNominatorCount` and `MaxValidatorCount` must be set which is used to determine"] # [doc = "  how close we are to the threshold."] # [doc = "* A `MinNominatorBond` and `MinValidatorBond` must be set and checked, which determines"] # [doc = "  if this is a person that should be chilled because they have not met the threshold"] # [doc = "  bond required."] # [doc = ""] # [doc = "This can be helpful if bond requirements are updated, and we need to remove old users"] # [doc = "who do not satisfy these requirements."] chill_other { controller : :: subxt :: ext :: sp_core :: crypto :: AccountId32 , } , # [codec (index = 25)] # [doc = "Force a validator to have at least the minimum commission. This will not affect a"] # [doc = "validator who already has a commission greater than or equal to the minimum. Any account"] # [doc = "can call this."] force_apply_min_commission { validator_stash : :: subxt :: ext :: sp_core :: crypto :: AccountId32 , } , }
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        Clone,
                        Debug,
                        Eq,
                        PartialEq,
                    )]
                    pub enum ConfigOp<_0> {
                        #[codec(index = 0)]
                        Noop,
                        #[codec(index = 1)]
                        Set(_0),
                        #[codec(index = 2)]
                        Remove,
                    }
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        Clone,
                        Debug,
                        Eq,
                        PartialEq,
                    )]
                    #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                    pub enum Error {
                        #[codec(index = 0)]
                        #[doc = "Not a controller account."]
                        NotController,
                        #[codec(index = 1)]
                        #[doc = "Not a stash account."]
                        NotStash,
                        #[codec(index = 2)]
                        #[doc = "Stash is already bonded."]
                        AlreadyBonded,
                        #[codec(index = 3)]
                        #[doc = "Controller is already paired."]
                        AlreadyPaired,
                        #[codec(index = 4)]
                        #[doc = "Targets cannot be empty."]
                        EmptyTargets,
                        #[codec(index = 5)]
                        #[doc = "Duplicate index."]
                        DuplicateIndex,
                        #[codec(index = 6)]
                        #[doc = "Slash record index out of bounds."]
                        InvalidSlashIndex,
                        #[codec(index = 7)]
                        #[doc = "Cannot have a validator or nominator role, with value less than the minimum defined by"]
                        #[doc = "governance (see `MinValidatorBond` and `MinNominatorBond`). If unbonding is the"]
                        #[doc = "intention, `chill` first to remove one's role as validator/nominator."]
                        InsufficientBond,
                        #[codec(index = 8)]
                        #[doc = "Can not schedule more unlock chunks."]
                        NoMoreChunks,
                        #[codec(index = 9)]
                        #[doc = "Can not rebond without unlocking chunks."]
                        NoUnlockChunk,
                        #[codec(index = 10)]
                        #[doc = "Attempting to target a stash that still has funds."]
                        FundedTarget,
                        #[codec(index = 11)]
                        #[doc = "Invalid era to reward."]
                        InvalidEraToReward,
                        #[codec(index = 12)]
                        #[doc = "Invalid number of nominations."]
                        InvalidNumberOfNominations,
                        #[codec(index = 13)]
                        #[doc = "Items are not sorted and unique."]
                        NotSortedAndUnique,
                        #[codec(index = 14)]
                        #[doc = "Rewards for this era have already been claimed for this validator."]
                        AlreadyClaimed,
                        #[codec(index = 15)]
                        #[doc = "Incorrect previous history depth input provided."]
                        IncorrectHistoryDepth,
                        #[codec(index = 16)]
                        #[doc = "Incorrect number of slashing spans provided."]
                        IncorrectSlashingSpans,
                        #[codec(index = 17)]
                        #[doc = "Internal state has become somehow corrupted and the operation cannot continue."]
                        BadState,
                        #[codec(index = 18)]
                        #[doc = "Too many nomination targets supplied."]
                        TooManyTargets,
                        #[codec(index = 19)]
                        #[doc = "A nomination target was supplied that was blocked or otherwise not a validator."]
                        BadTarget,
                        #[codec(index = 20)]
                        #[doc = "The user has enough bond and thus cannot be chilled forcefully by an external person."]
                        CannotChillOther,
                        #[codec(index = 21)]
                        #[doc = "There are too many nominators in the system. Governance needs to adjust the staking"]
                        #[doc = "settings to keep things safe for the runtime."]
                        TooManyNominators,
                        #[codec(index = 22)]
                        #[doc = "There are too many validators in the system. Governance needs to adjust the staking"]
                        #[doc = "settings to keep things safe for the runtime."]
                        TooManyValidators,
                        #[codec(index = 23)]
                        #[doc = "Commission is too low. Must be at least `MinCommission`."]
                        CommissionTooLow,
                    }
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        Clone,
                        Debug,
                        Eq,
                        PartialEq,
                    )]
                    #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                    pub enum Event {
                        #[codec(index = 0)]
                        #[doc = "The era payout has been set; the first balance is the validator-payout; the second is"]
                        #[doc = "the remainder from the maximum amount of reward."]
                        #[doc = "\\[era_index, validator_payout, remainder\\]"]
                        EraPaid(
                            ::core::primitive::u32,
                            ::core::primitive::u128,
                            ::core::primitive::u128,
                        ),
                        #[codec(index = 1)]
                        #[doc = "The nominator has been rewarded by this amount. \\[stash, amount\\]"]
                        Rewarded(
                            ::subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u128,
                        ),
                        #[codec(index = 2)]
                        #[doc = "One validator (and its nominators) has been slashed by the given amount."]
                        #[doc = "\\[validator, amount\\]"]
                        Slashed(
                            ::subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u128,
                        ),
                        #[codec(index = 3)]
                        #[doc = "An old slashing report from a prior era was discarded because it could"]
                        #[doc = "not be processed. \\[session_index\\]"]
                        OldSlashingReportDiscarded(::core::primitive::u32),
                        #[codec(index = 4)]
                        #[doc = "A new set of stakers was elected."]
                        StakersElected,
                        #[codec(index = 5)]
                        #[doc = "An account has bonded this amount. \\[stash, amount\\]"]
                        #[doc = ""]
                        #[doc = "NOTE: This event is only emitted when funds are bonded via a dispatchable. Notably,"]
                        #[doc = "it will not be emitted for staking rewards when they are added to stake."]
                        Bonded(
                            ::subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u128,
                        ),
                        #[codec(index = 6)]
                        #[doc = "An account has unbonded this amount. \\[stash, amount\\]"]
                        Unbonded(
                            ::subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u128,
                        ),
                        #[codec(index = 7)]
                        #[doc = "An account has called `withdraw_unbonded` and removed unbonding chunks worth `Balance`"]
                        #[doc = "from the unlocking queue. \\[stash, amount\\]"]
                        Withdrawn(
                            ::subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u128,
                        ),
                        #[codec(index = 8)]
                        #[doc = "A nominator has been kicked from a validator. \\[nominator, stash\\]"]
                        Kicked(
                            ::subxt::ext::sp_core::crypto::AccountId32,
                            ::subxt::ext::sp_core::crypto::AccountId32,
                        ),
                        #[codec(index = 9)]
                        #[doc = "The election failed. No new era is planned."]
                        StakingElectionFailed,
                        #[codec(index = 10)]
                        #[doc = "An account has stopped participating as either a validator or nominator."]
                        #[doc = "\\[stash\\]"]
                        Chilled(::subxt::ext::sp_core::crypto::AccountId32),
                        #[codec(index = 11)]
                        #[doc = "The stakers' rewards are getting paid. \\[era_index, validator_stash\\]"]
                        PayoutStarted(
                            ::core::primitive::u32,
                            ::subxt::ext::sp_core::crypto::AccountId32,
                        ),
                        #[codec(index = 12)]
                        #[doc = "A validator has set their preferences."]
                        ValidatorPrefsSet(
                            ::subxt::ext::sp_core::crypto::AccountId32,
                            runtime_types::pallet_staking::ValidatorPrefs,
                        ),
                    }
                }
            }
            pub mod slashing {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                pub struct SlashingSpans {
                    pub span_index: ::core::primitive::u32,
                    pub last_start: ::core::primitive::u32,
                    pub last_nonzero_slash: ::core::primitive::u32,
                    pub prior: ::std::vec::Vec<::core::primitive::u32>,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                pub struct SpanRecord<_0> {
                    pub slashed: _0,
                    pub paid_out: _0,
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct ActiveEraInfo {
                pub index: ::core::primitive::u32,
                pub start: ::core::option::Option<::core::primitive::u64>,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct EraRewardPoints<_0> {
                pub total: ::core::primitive::u32,
                pub individual:
                    ::subxt::utils::KeyedVec<_0, ::core::primitive::u32>,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Exposure<_0, _1> {
                #[codec(compact)]
                pub total: _1,
                #[codec(compact)]
                pub own: _1,
                pub others: ::std::vec::Vec<
                    runtime_types::pallet_staking::IndividualExposure<_0, _1>,
                >,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub enum Forcing {
                #[codec(index = 0)]
                NotForcing,
                #[codec(index = 1)]
                ForceNew,
                #[codec(index = 2)]
                ForceNone,
                #[codec(index = 3)]
                ForceAlways,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct IndividualExposure<_0, _1> {
                pub who: _0,
                #[codec(compact)]
                pub value: _1,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Nominations {
                pub targets:
                    runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                    >,
                pub submitted_in: ::core::primitive::u32,
                pub suppressed: ::core::primitive::bool,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub enum Releases {
                #[codec(index = 0)]
                V1_0_0Ancient,
                #[codec(index = 1)]
                V2_0_0,
                #[codec(index = 2)]
                V3_0_0,
                #[codec(index = 3)]
                V4_0_0,
                #[codec(index = 4)]
                V5_0_0,
                #[codec(index = 5)]
                V6_0_0,
                #[codec(index = 6)]
                V7_0_0,
                #[codec(index = 7)]
                V8_0_0,
                #[codec(index = 8)]
                V9_0_0,
                #[codec(index = 9)]
                V10_0_0,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub enum RewardDestination<_0> {
                #[codec(index = 0)]
                Staked,
                #[codec(index = 1)]
                Stash,
                #[codec(index = 2)]
                Controller,
                #[codec(index = 3)]
                Account(_0),
                #[codec(index = 4)]
                None,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct StakingLedger {
                pub stash: ::subxt::ext::sp_core::crypto::AccountId32,
                #[codec(compact)]
                pub total: ::core::primitive::u128,
                #[codec(compact)]
                pub active: ::core::primitive::u128,
                pub unlocking:
                    runtime_types::sp_runtime::bounded::bounded_vec::BoundedVec<
                        runtime_types::pallet_staking::UnlockChunk<
                            ::core::primitive::u128,
                        >,
                    >,
                pub claimed_rewards: ::std::vec::Vec<::core::primitive::u32>,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct UnappliedSlash<_0, _1> {
                pub validator: _0,
                pub own: _1,
                pub others: ::std::vec::Vec<(_0, _1)>,
                pub reporters: ::std::vec::Vec<_0>,
                pub payout: _1,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct UnlockChunk<_0> {
                #[codec(compact)]
                pub value: _0,
                #[codec(compact)]
                pub era: ::core::primitive::u32,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct ValidatorPrefs {
                #[codec(compact)]
                pub commission:
                    runtime_types::sp_arithmetic::per_things::Perbill,
                pub blocked: ::core::primitive::bool,
            }
        }
        pub mod pallet_sudo {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    # [codec (index = 0)] # [doc = "Authenticates the sudo key and dispatches a function call with `Root` origin."] # [doc = ""] # [doc = "The dispatch origin for this call must be _Signed_."] # [doc = ""] # [doc = "# <weight>"] # [doc = "- O(1)."] # [doc = "- Limited storage reads."] # [doc = "- One DB write (event)."] # [doc = "- Weight of derivative `call` execution + 10,000."] # [doc = "# </weight>"] sudo { call : :: std :: boxed :: Box < runtime_types :: webb_standalone_runtime :: Call > , } , # [codec (index = 1)] # [doc = "Authenticates the sudo key and dispatches a function call with `Root` origin."] # [doc = "This function does not check the weight of the call, and instead allows the"] # [doc = "Sudo user to specify the weight of the call."] # [doc = ""] # [doc = "The dispatch origin for this call must be _Signed_."] # [doc = ""] # [doc = "# <weight>"] # [doc = "- O(1)."] # [doc = "- The weight of this call is defined by the caller."] # [doc = "# </weight>"] sudo_unchecked_weight { call : :: std :: boxed :: Box < runtime_types :: webb_standalone_runtime :: Call > , weight : runtime_types :: frame_support :: weights :: weight_v2 :: Weight , } , # [codec (index = 2)] # [doc = "Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo"] # [doc = "key."] # [doc = ""] # [doc = "The dispatch origin for this call must be _Signed_."] # [doc = ""] # [doc = "# <weight>"] # [doc = "- O(1)."] # [doc = "- Limited storage reads."] # [doc = "- One DB change."] # [doc = "# </weight>"] set_key { new : :: subxt :: ext :: sp_runtime :: MultiAddress < :: subxt :: ext :: sp_core :: crypto :: AccountId32 , :: core :: primitive :: u32 > , } , # [codec (index = 3)] # [doc = "Authenticates the sudo key and dispatches a function call with `Signed` origin from"] # [doc = "a given account."] # [doc = ""] # [doc = "The dispatch origin for this call must be _Signed_."] # [doc = ""] # [doc = "# <weight>"] # [doc = "- O(1)."] # [doc = "- Limited storage reads."] # [doc = "- One DB write (event)."] # [doc = "- Weight of derivative `call` execution + 10,000."] # [doc = "# </weight>"] sudo_as { who : :: subxt :: ext :: sp_runtime :: MultiAddress < :: subxt :: ext :: sp_core :: crypto :: AccountId32 , :: core :: primitive :: u32 > , call : :: std :: boxed :: Box < runtime_types :: webb_standalone_runtime :: Call > , } , }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "Error for the Sudo pallet"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Sender must be the Sudo account"]
                    RequireSudo,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A sudo just took place. \\[result\\]"]
                    Sudid {
                        sudo_result: ::core::result::Result<
                            (),
                            runtime_types::sp_runtime::DispatchError,
                        >,
                    },
                    #[codec(index = 1)]
                    #[doc = "The \\[sudoer\\] just switched identity; the old key is supplied if one existed."]
                    KeyChanged {
                        old_sudoer: ::core::option::Option<
                            ::subxt::ext::sp_core::crypto::AccountId32,
                        >,
                    },
                    #[codec(index = 2)]
                    #[doc = "A sudo just took place. \\[result\\]"]
                    SudoAsDone {
                        sudo_result: ::core::result::Result<
                            (),
                            runtime_types::sp_runtime::DispatchError,
                        >,
                    },
                }
            }
        }
        pub mod pallet_timestamp {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Set the current time."]
                    #[doc = ""]
                    #[doc = "This call should be invoked exactly once per block. It will panic at the finalization"]
                    #[doc = "phase, if this call hasn't been invoked by that time."]
                    #[doc = ""]
                    #[doc = "The timestamp should be greater than the previous one by the amount specified by"]
                    #[doc = "`MinimumPeriod`."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be `Inherent`."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)"]
                    #[doc = "- 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in"]
                    #[doc = "  `on_finalize`)"]
                    #[doc = "- 1 event handler `on_timestamp_set`. Must be `O(1)`."]
                    #[doc = "# </weight>"]
                    set {
                        #[codec(compact)]
                        now: ::core::primitive::u64,
                    },
                }
            }
        }
        pub mod pallet_token_wrapper {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    set_wrapping_fee {
                        fee: ::core::primitive::u128,
                        into_pool_share_id: ::core::primitive::u32,
                        nonce: ::core::primitive::u32,
                    },
                    #[codec(index = 1)]
                    wrap {
                        from_asset_id: ::core::primitive::u32,
                        into_pool_share_id: ::core::primitive::u32,
                        amount: ::core::primitive::u128,
                        recipient: ::subxt::ext::sp_core::crypto::AccountId32,
                    },
                    #[codec(index = 2)]
                    unwrap {
                        from_pool_share_id: ::core::primitive::u32,
                        into_asset_id: ::core::primitive::u32,
                        amount: ::core::primitive::u128,
                        recipient: ::subxt::ext::sp_core::crypto::AccountId32,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Invalid transaction amount"]
                    InvalidAmount,
                    #[codec(index = 1)]
                    #[doc = "AssetId not found in selected pool share"]
                    UnregisteredAssetId,
                    #[codec(index = 2)]
                    #[doc = "Assets not found in selected pool"]
                    NotFoundInPool,
                    #[codec(index = 3)]
                    #[doc = "Insufficient Balance for an asset"]
                    InsufficientBalance,
                    #[codec(index = 4)]
                    NoWrappingFeePercentFound,
                    #[codec(index = 5)]
                    #[doc = "Invalid nonce"]
                    InvalidNonce,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    WrappedToken {
                        pool_share_asset: ::core::primitive::u32,
                        asset_id: ::core::primitive::u32,
                        amount: ::core::primitive::u128,
                        recipient: ::subxt::ext::sp_core::crypto::AccountId32,
                    },
                    #[codec(index = 1)]
                    UnwrappedToken {
                        pool_share_asset: ::core::primitive::u32,
                        asset_id: ::core::primitive::u32,
                        amount: ::core::primitive::u128,
                        recipient: ::subxt::ext::sp_core::crypto::AccountId32,
                    },
                    #[codec(index = 2)]
                    UpdatedWrappingFeePercent {
                        into_pool_share_id: ::core::primitive::u32,
                        wrapping_fee_percent: ::core::primitive::u128,
                    },
                }
            }
        }
        pub mod pallet_token_wrapper_handler {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Execute the wrapping fee proposal by calling the update_wrapping_fee"]
                    #[doc = "method. Ensures that only the bridge can call this function."]
                    execute_wrapping_fee_proposal {
                        wrapping_fee_percent: ::core::primitive::u128,
                        into_pool_share_id: ::core::primitive::u32,
                        nonce: ::core::primitive::u32,
                    },
                    #[codec(index = 1)]
                    execute_add_token_to_pool_share {
                        name: ::std::vec::Vec<::core::primitive::u8>,
                        asset_id: ::core::primitive::u32,
                        nonce: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    execute_remove_token_from_pool_share {
                        name: ::std::vec::Vec<::core::primitive::u8>,
                        asset_id: ::core::primitive::u32,
                        nonce: ::core::primitive::u32,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Access violation."]
                    InvalidPermissions,
                    #[codec(index = 1)]
                    ResourceIsAlreadyAnchored,
                    #[codec(index = 2)]
                    TokenWrapperHandlerNotFound,
                    #[codec(index = 3)]
                    #[doc = "Storage overflowed."]
                    StorageOverflow,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    UpdatedWrappingFeePercent {
                        wrapping_fee_percent: ::core::primitive::u128,
                    },
                }
            }
        }
        pub mod pallet_transaction_payment {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,"]
                    #[doc = "has been paid by `who`."]
                    TransactionFeePaid {
                        who: ::subxt::ext::sp_core::crypto::AccountId32,
                        actual_fee: ::core::primitive::u128,
                        tip: ::core::primitive::u128,
                    },
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub enum Releases {
                #[codec(index = 0)]
                V1Ancient,
                #[codec(index = 1)]
                V2,
            }
        }
        pub mod pallet_treasury {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Put forward a suggestion for spending. A deposit proportional to the value"]
                    #[doc = "is reserved and slashed if the proposal is rejected. It is returned once the"]
                    #[doc = "proposal is awarded."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- Complexity: O(1)"]
                    #[doc = "- DbReads: `ProposalCount`, `origin account`"]
                    #[doc = "- DbWrites: `ProposalCount`, `Proposals`, `origin account`"]
                    #[doc = "# </weight>"]
                    propose_spend {
                        #[codec(compact)]
                        value: ::core::primitive::u128,
                        beneficiary: ::subxt::ext::sp_runtime::MultiAddress<
                            ::subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 1)]
                    #[doc = "Reject a proposed spend. The original deposit will be slashed."]
                    #[doc = ""]
                    #[doc = "May only be called from `T::RejectOrigin`."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- Complexity: O(1)"]
                    #[doc = "- DbReads: `Proposals`, `rejected proposer account`"]
                    #[doc = "- DbWrites: `Proposals`, `rejected proposer account`"]
                    #[doc = "# </weight>"]
                    reject_proposal {
                        #[codec(compact)]
                        proposal_id: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    #[doc = "Approve a proposal. At a later time, the proposal will be allocated to the beneficiary"]
                    #[doc = "and the original deposit will be returned."]
                    #[doc = ""]
                    #[doc = "May only be called from `T::ApproveOrigin`."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- Complexity: O(1)."]
                    #[doc = "- DbReads: `Proposals`, `Approvals`"]
                    #[doc = "- DbWrite: `Approvals`"]
                    #[doc = "# </weight>"]
                    approve_proposal {
                        #[codec(compact)]
                        proposal_id: ::core::primitive::u32,
                    },
                    #[codec(index = 3)]
                    #[doc = "Propose and approve a spend of treasury funds."]
                    #[doc = ""]
                    #[doc = "- `origin`: Must be `SpendOrigin` with the `Success` value being at least `amount`."]
                    #[doc = "- `amount`: The amount to be transferred from the treasury to the `beneficiary`."]
                    #[doc = "- `beneficiary`: The destination account for the transfer."]
                    #[doc = ""]
                    #[doc = "NOTE: For record-keeping purposes, the proposer is deemed to be equivalent to the"]
                    #[doc = "beneficiary."]
                    spend {
                        #[codec(compact)]
                        amount: ::core::primitive::u128,
                        beneficiary: ::subxt::ext::sp_runtime::MultiAddress<
                            ::subxt::ext::sp_core::crypto::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 4)]
                    #[doc = "Force a previously approved proposal to be removed from the approval queue."]
                    #[doc = "The original deposit will no longer be returned."]
                    #[doc = ""]
                    #[doc = "May only be called from `T::RejectOrigin`."]
                    #[doc = "- `proposal_id`: The index of a proposal"]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- Complexity: O(A) where `A` is the number of approvals"]
                    #[doc = "- Db reads and writes: `Approvals`"]
                    #[doc = "# </weight>"]
                    #[doc = ""]
                    #[doc = "Errors:"]
                    #[doc = "- `ProposalNotApproved`: The `proposal_id` supplied was not found in the approval queue,"]
                    #[doc = "i.e., the proposal has not been approved. This could also mean the proposal does not"]
                    #[doc = "exist altogether, thus there is no way it would have been approved in the first place."]
                    remove_approval {
                        #[codec(compact)]
                        proposal_id: ::core::primitive::u32,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "Error for the treasury pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Proposer's balance is too low."]
                    InsufficientProposersBalance,
                    #[codec(index = 1)]
                    #[doc = "No proposal or bounty at that index."]
                    InvalidIndex,
                    #[codec(index = 2)]
                    #[doc = "Too many approvals in the queue."]
                    TooManyApprovals,
                    #[codec(index = 3)]
                    #[doc = "The spend origin is valid but the amount it is allowed to spend is lower than the"]
                    #[doc = "amount to be spent."]
                    InsufficientPermission,
                    #[codec(index = 4)]
                    #[doc = "Proposal has not been approved."]
                    ProposalNotApproved,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "New proposal."]
                    Proposed {
                        proposal_index: ::core::primitive::u32,
                    },
                    #[codec(index = 1)]
                    #[doc = "We have ended a spend period and will now allocate funds."]
                    Spending {
                        budget_remaining: ::core::primitive::u128,
                    },
                    #[codec(index = 2)]
                    #[doc = "Some funds have been allocated."]
                    Awarded {
                        proposal_index: ::core::primitive::u32,
                        award: ::core::primitive::u128,
                        account: ::subxt::ext::sp_core::crypto::AccountId32,
                    },
                    #[codec(index = 3)]
                    #[doc = "A proposal was rejected; funds were slashed."]
                    Rejected {
                        proposal_index: ::core::primitive::u32,
                        slashed: ::core::primitive::u128,
                    },
                    #[codec(index = 4)]
                    #[doc = "Some of our funds have been burnt."]
                    Burnt {
                        burnt_funds: ::core::primitive::u128,
                    },
                    #[codec(index = 5)]
                    #[doc = "Spending has finished; this is the amount that rolls over until next spend."]
                    Rollover {
                        rollover_balance: ::core::primitive::u128,
                    },
                    #[codec(index = 6)]
                    #[doc = "Some funds have been deposited."]
                    Deposit { value: ::core::primitive::u128 },
                    #[codec(index = 7)]
                    #[doc = "A new spend proposal has been approved."]
                    SpendApproved {
                        proposal_index: ::core::primitive::u32,
                        amount: ::core::primitive::u128,
                        beneficiary: ::subxt::ext::sp_core::crypto::AccountId32,
                    },
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Proposal<_0, _1> {
                pub proposer: _0,
                pub value: _1,
                pub beneficiary: _0,
                pub bond: _1,
            }
        }
        pub mod pallet_utility {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    # [codec (index = 0)] # [doc = "Send a batch of dispatch calls."] # [doc = ""] # [doc = "May be called from any origin."] # [doc = ""] # [doc = "- `calls`: The calls to be dispatched from the same origin. The number of call must not"] # [doc = "  exceed the constant: `batched_calls_limit` (available in constant metadata)."] # [doc = ""] # [doc = "If origin is root then call are dispatch without checking origin filter. (This includes"] # [doc = "bypassing `frame_system::Config::BaseCallFilter`)."] # [doc = ""] # [doc = "# <weight>"] # [doc = "- Complexity: O(C) where C is the number of calls to be batched."] # [doc = "# </weight>"] # [doc = ""] # [doc = "This will return `Ok` in all circumstances. To determine the success of the batch, an"] # [doc = "event is deposited. If a call failed and the batch was interrupted, then the"] # [doc = "`BatchInterrupted` event is deposited, along with the number of successful calls made"] # [doc = "and the error of the failed call. If all were successful, then the `BatchCompleted`"] # [doc = "event is deposited."] batch { calls : :: std :: vec :: Vec < runtime_types :: webb_standalone_runtime :: Call > , } , # [codec (index = 1)] # [doc = "Send a call through an indexed pseudonym of the sender."] # [doc = ""] # [doc = "Filter from origin are passed along. The call will be dispatched with an origin which"] # [doc = "use the same filter as the origin of this call."] # [doc = ""] # [doc = "NOTE: If you need to ensure that any account-based filtering is not honored (i.e."] # [doc = "because you expect `proxy` to have been used prior in the call stack and you do not want"] # [doc = "the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`"] # [doc = "in the Multisig pallet instead."] # [doc = ""] # [doc = "NOTE: Prior to version *12, this was called `as_limited_sub`."] # [doc = ""] # [doc = "The dispatch origin for this call must be _Signed_."] as_derivative { index : :: core :: primitive :: u16 , call : :: std :: boxed :: Box < runtime_types :: webb_standalone_runtime :: Call > , } , # [codec (index = 2)] # [doc = "Send a batch of dispatch calls and atomically execute them."] # [doc = "The whole transaction will rollback and fail if any of the calls failed."] # [doc = ""] # [doc = "May be called from any origin."] # [doc = ""] # [doc = "- `calls`: The calls to be dispatched from the same origin. The number of call must not"] # [doc = "  exceed the constant: `batched_calls_limit` (available in constant metadata)."] # [doc = ""] # [doc = "If origin is root then call are dispatch without checking origin filter. (This includes"] # [doc = "bypassing `frame_system::Config::BaseCallFilter`)."] # [doc = ""] # [doc = "# <weight>"] # [doc = "- Complexity: O(C) where C is the number of calls to be batched."] # [doc = "# </weight>"] batch_all { calls : :: std :: vec :: Vec < runtime_types :: webb_standalone_runtime :: Call > , } , # [codec (index = 3)] # [doc = "Dispatches a function call with a provided origin."] # [doc = ""] # [doc = "The dispatch origin for this call must be _Root_."] # [doc = ""] # [doc = "# <weight>"] # [doc = "- O(1)."] # [doc = "- Limited storage reads."] # [doc = "- One DB write (event)."] # [doc = "- Weight of derivative `call` execution + T::WeightInfo::dispatch_as()."] # [doc = "# </weight>"] dispatch_as { as_origin : :: std :: boxed :: Box < runtime_types :: webb_standalone_runtime :: OriginCaller > , call : :: std :: boxed :: Box < runtime_types :: webb_standalone_runtime :: Call > , } , # [codec (index = 4)] # [doc = "Send a batch of dispatch calls."] # [doc = "Unlike `batch`, it allows errors and won't interrupt."] # [doc = ""] # [doc = "May be called from any origin."] # [doc = ""] # [doc = "- `calls`: The calls to be dispatched from the same origin. The number of call must not"] # [doc = "  exceed the constant: `batched_calls_limit` (available in constant metadata)."] # [doc = ""] # [doc = "If origin is root then call are dispatch without checking origin filter. (This includes"] # [doc = "bypassing `frame_system::Config::BaseCallFilter`)."] # [doc = ""] # [doc = "# <weight>"] # [doc = "- Complexity: O(C) where C is the number of calls to be batched."] # [doc = "# </weight>"] force_batch { calls : :: std :: vec :: Vec < runtime_types :: webb_standalone_runtime :: Call > , } , }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Too many calls batched."]
                    TooManyCalls,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "Batch of dispatches did not complete fully. Index of first failing dispatch given, as"]
                    #[doc = "well as the error."]
                    BatchInterrupted {
                        index: ::core::primitive::u32,
                        error: runtime_types::sp_runtime::DispatchError,
                    },
                    #[codec(index = 1)]
                    #[doc = "Batch of dispatches completed fully with no error."]
                    BatchCompleted,
                    #[codec(index = 2)]
                    #[doc = "Batch of dispatches completed but has errors."]
                    BatchCompletedWithErrors,
                    #[codec(index = 3)]
                    #[doc = "A single item within a Batch of dispatches has completed with no error."]
                    ItemCompleted,
                    #[codec(index = 4)]
                    #[doc = "A single item within a Batch of dispatches has completed with error."]
                    ItemFailed {
                        error: runtime_types::sp_runtime::DispatchError,
                    },
                    #[codec(index = 5)]
                    #[doc = "A call was dispatched."]
                    DispatchedAs {
                        result: ::core::result::Result<
                            (),
                            runtime_types::sp_runtime::DispatchError,
                        >,
                    },
                }
            }
        }
        pub mod pallet_vanchor {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    # [codec (index = 0)] create { max_edges : :: core :: primitive :: u32 , depth : :: core :: primitive :: u8 , asset : :: core :: primitive :: u32 , } , # [codec (index = 1)] transact { id : :: core :: primitive :: u32 , proof_data : runtime_types :: webb_primitives :: types :: vanchor :: ProofData < runtime_types :: webb_primitives :: runtime :: Element > , ext_data : runtime_types :: webb_primitives :: types :: vanchor :: ExtData < :: subxt :: ext :: sp_core :: crypto :: AccountId32 , :: core :: primitive :: i128 , :: core :: primitive :: u128 , :: core :: primitive :: u32 > , } , # [codec (index = 2)] register_and_transact { owner : :: subxt :: ext :: sp_core :: crypto :: AccountId32 , public_key : :: std :: vec :: Vec < :: core :: primitive :: u8 > , id : :: core :: primitive :: u32 , proof_data : runtime_types :: webb_primitives :: types :: vanchor :: ProofData < runtime_types :: webb_primitives :: runtime :: Element > , ext_data : runtime_types :: webb_primitives :: types :: vanchor :: ExtData < :: subxt :: ext :: sp_core :: crypto :: AccountId32 , :: core :: primitive :: i128 , :: core :: primitive :: u128 , :: core :: primitive :: u32 > , } , # [codec (index = 3)] set_max_deposit_amount { max_deposit_amount : :: core :: primitive :: u128 , nonce : :: core :: primitive :: u32 , } , # [codec (index = 4)] set_min_withdraw_amount { min_withdraw_amount : :: core :: primitive :: u128 , nonce : :: core :: primitive :: u32 , } , }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Invalid transaction proof"]
                    InvalidTransactionProof,
                    #[codec(index = 1)]
                    #[doc = "Variable Anchor not found."]
                    NoVAnchorFound,
                    #[codec(index = 2)]
                    #[doc = "Invalid nullifier that is already used"]
                    #[doc = "(this error is returned when a nullifier is used twice)"]
                    AlreadyRevealedNullifier,
                    #[codec(index = 3)]
                    InvalidExtAmount,
                    #[codec(index = 4)]
                    InvalidDepositAmount,
                    #[codec(index = 5)]
                    InvalidWithdrawAmount,
                    #[codec(index = 6)]
                    InvalidExtData,
                    #[codec(index = 7)]
                    InvalidInputNullifiers,
                    #[codec(index = 8)]
                    InvalidFee,
                    #[codec(index = 9)]
                    InvalidPublicAmount,
                    #[codec(index = 10)]
                    #[doc = "Invalid nonce"]
                    InvalidNonce,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "New tree created"]
                    VAnchorCreation { tree_id: ::core::primitive::u32 },
                    #[codec(index = 1)]
                    #[doc = "Transaction has been made"]
                    Transaction {
                        transactor: ::subxt::ext::sp_core::crypto::AccountId32,
                        tree_id: ::core::primitive::u32,
                        leafs: ::std::vec::Vec<
                            runtime_types::webb_primitives::runtime::Element,
                        >,
                        encrypted_output1:
                            ::std::vec::Vec<::core::primitive::u8>,
                        encrypted_output2:
                            ::std::vec::Vec<::core::primitive::u8>,
                        amount: ::core::primitive::i128,
                    },
                    #[codec(index = 2)]
                    #[doc = "Deposit hook has executed successfully"]
                    Deposit {
                        depositor: ::subxt::ext::sp_core::crypto::AccountId32,
                        tree_id: ::core::primitive::u32,
                        leaf: runtime_types::webb_primitives::runtime::Element,
                    },
                    #[codec(index = 3)]
                    MaxDepositAmountChanged {
                        max_deposit_amount: ::core::primitive::u128,
                    },
                    #[codec(index = 4)]
                    MinWithdrawAmountChanged {
                        min_withdraw_amount: ::core::primitive::u128,
                    },
                }
            }
        }
        pub mod pallet_vanchor_handler {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "This will be called by bridge when proposal to create a"]
                    #[doc = "vanchor has been successfully voted on."]
                    execute_vanchor_create_proposal {
                        src_chain_id: ::core::primitive::u64,
                        r_id: runtime_types::webb_proposals::header::ResourceId,
                        max_edges: ::core::primitive::u32,
                        tree_depth: ::core::primitive::u8,
                        asset: ::core::primitive::u32,
                        nonce: ::core::primitive::u32,
                    },
                    #[codec(index = 1)]
                    #[doc = "This will be called by bridge when proposal to add/update edge of a"]
                    #[doc = "vanchor has been successfully voted on."]
                    execute_vanchor_update_proposal {
                        r_id: runtime_types::webb_proposals::header::ResourceId,
                        merkle_root:
                            runtime_types::webb_primitives::runtime::Element,
                        src_resource_id:
                            runtime_types::webb_proposals::header::ResourceId,
                        nonce: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    #[doc = "This will by called by bridge when proposal to set new resource for"]
                    #[doc = "handler has been successfully voted on."]
                    execute_set_resource_proposal {
                        r_id: runtime_types::webb_proposals::header::ResourceId,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Access violation."]
                    InvalidPermissions,
                    #[codec(index = 1)]
                    ResourceIsAlreadyAnchored,
                    #[codec(index = 2)]
                    AnchorHandlerNotFound,
                    #[codec(index = 3)]
                    SourceChainIdNotFound,
                    #[codec(index = 4)]
                    #[doc = "Storage overflowed."]
                    StorageOverflow,
                    #[codec(index = 5)]
                    #[doc = "Invalid nonce"]
                    InvalidNonce,
                    #[codec(index = 6)]
                    #[doc = "Invalid resource ID"]
                    InvalidResourceId,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    AnchorCreated,
                    #[codec(index = 1)]
                    AnchorEdgeAdded,
                    #[codec(index = 2)]
                    AnchorEdgeUpdated,
                    #[codec(index = 3)]
                    ResourceAnchored,
                }
            }
        }
        pub mod pallet_vanchor_verifier {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    force_set_parameters {
                        configuration:
                            (::core::primitive::u8, ::core::primitive::u8),
                        parameters: ::std::vec::Vec<::core::primitive::u8>,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Parameters haven't been initialized"]
                    ParametersNotInitialized,
                    #[codec(index = 1)]
                    #[doc = "Error during verification"]
                    VerifyError,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {}
            }
        }
        pub mod pallet_verifier {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    force_set_parameters {
                        parameters: ::std::vec::Vec<::core::primitive::u8>,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Parameters haven't been initialized"]
                    ParametersNotInitialized,
                    #[codec(index = 1)]
                    #[doc = "Error during verification"]
                    VerifyError,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {}
            }
        }
        pub mod primitive_types {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct H256(pub [::core::primitive::u8; 32usize]);
        }
        pub mod sp_arithmetic {
            use super::runtime_types;
            pub mod fixed_point {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                pub struct FixedU128(pub ::core::primitive::u128);
            }
            pub mod per_things {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                pub struct PerU16(pub ::core::primitive::u16);
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                pub struct Perbill(pub ::core::primitive::u32);
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                pub struct Percent(pub ::core::primitive::u8);
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                pub struct Permill(pub ::core::primitive::u32);
            }
        }
        pub mod sp_authority_discovery {
            use super::runtime_types;
            pub mod app {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                pub struct Public(pub runtime_types::sp_core::sr25519::Public);
            }
        }
        pub mod sp_consensus_babe {
            use super::runtime_types;
            pub mod app {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                pub struct Public(pub runtime_types::sp_core::sr25519::Public);
            }
            pub mod digests {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                pub enum NextConfigDescriptor {
                    #[codec(index = 1)]
                    V1 {
                        c: (::core::primitive::u64, ::core::primitive::u64),
                        allowed_slots:
                            runtime_types::sp_consensus_babe::AllowedSlots,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                pub enum PreDigest {
                    # [codec (index = 1)] Primary (runtime_types :: sp_consensus_babe :: digests :: PrimaryPreDigest ,) , # [codec (index = 2)] SecondaryPlain (runtime_types :: sp_consensus_babe :: digests :: SecondaryPlainPreDigest ,) , # [codec (index = 3)] SecondaryVRF (runtime_types :: sp_consensus_babe :: digests :: SecondaryVRFPreDigest ,) , }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                pub struct PrimaryPreDigest {
                    pub authority_index: ::core::primitive::u32,
                    pub slot: runtime_types::sp_consensus_slots::Slot,
                    pub vrf_output: [::core::primitive::u8; 32usize],
                    pub vrf_proof: [::core::primitive::u8; 64usize],
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                pub struct SecondaryPlainPreDigest {
                    pub authority_index: ::core::primitive::u32,
                    pub slot: runtime_types::sp_consensus_slots::Slot,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                pub struct SecondaryVRFPreDigest {
                    pub authority_index: ::core::primitive::u32,
                    pub slot: runtime_types::sp_consensus_slots::Slot,
                    pub vrf_output: [::core::primitive::u8; 32usize],
                    pub vrf_proof: [::core::primitive::u8; 64usize],
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub enum AllowedSlots {
                #[codec(index = 0)]
                PrimarySlots,
                #[codec(index = 1)]
                PrimaryAndSecondaryPlainSlots,
                #[codec(index = 2)]
                PrimaryAndSecondaryVRFSlots,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct BabeEpochConfiguration {
                pub c: (::core::primitive::u64, ::core::primitive::u64),
                pub allowed_slots:
                    runtime_types::sp_consensus_babe::AllowedSlots,
            }
        }
        pub mod sp_consensus_slots {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct EquivocationProof<_0, _1> {
                pub offender: _1,
                pub slot: runtime_types::sp_consensus_slots::Slot,
                pub first_header: _0,
                pub second_header: _0,
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Slot(pub ::core::primitive::u64);
        }
        pub mod sp_core {
            use super::runtime_types;
            pub mod crypto {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                pub struct AccountId32(pub [::core::primitive::u8; 32usize]);
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                pub struct KeyTypeId(pub [::core::primitive::u8; 4usize]);
            }
            pub mod ecdsa {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                pub struct Signature(pub [::core::primitive::u8; 65usize]);
            }
            pub mod ed25519 {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                pub struct Public(pub [::core::primitive::u8; 32usize]);
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                pub struct Signature(pub [::core::primitive::u8; 64usize]);
            }
            pub mod offchain {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                pub struct OpaqueMultiaddr(
                    pub ::std::vec::Vec<::core::primitive::u8>,
                );
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                pub struct OpaqueNetworkState {
                    pub peer_id: runtime_types::sp_core::OpaquePeerId,
                    pub external_addresses: ::std::vec::Vec<
                        runtime_types::sp_core::offchain::OpaqueMultiaddr,
                    >,
                }
            }
            pub mod sr25519 {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                pub struct Public(pub [::core::primitive::u8; 32usize]);
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                pub struct Signature(pub [::core::primitive::u8; 64usize]);
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct OpaquePeerId(pub ::std::vec::Vec<::core::primitive::u8>);
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub enum Void {}
        }
        pub mod sp_finality_grandpa {
            use super::runtime_types;
            pub mod app {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                pub struct Public(pub runtime_types::sp_core::ed25519::Public);
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                pub struct Signature(
                    pub runtime_types::sp_core::ed25519::Signature,
                );
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub enum Equivocation<_0, _1> {
                #[codec(index = 0)]
                Prevote(
                    runtime_types::finality_grandpa::Equivocation<
                        runtime_types::sp_finality_grandpa::app::Public,
                        runtime_types::finality_grandpa::Prevote<_0, _1>,
                        runtime_types::sp_finality_grandpa::app::Signature,
                    >,
                ),
                #[codec(index = 1)]
                Precommit(
                    runtime_types::finality_grandpa::Equivocation<
                        runtime_types::sp_finality_grandpa::app::Public,
                        runtime_types::finality_grandpa::Precommit<_0, _1>,
                        runtime_types::sp_finality_grandpa::app::Signature,
                    >,
                ),
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct EquivocationProof<_0, _1> {
                pub set_id: _1,
                pub equivocation:
                    runtime_types::sp_finality_grandpa::Equivocation<_0, _1>,
            }
        }
        pub mod sp_npos_elections {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct ElectionScore {
                pub minimal_stake: ::core::primitive::u128,
                pub sum_stake: ::core::primitive::u128,
                pub sum_stake_squared: ::core::primitive::u128,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Support<_0> {
                pub total: ::core::primitive::u128,
                pub voters: ::std::vec::Vec<(_0, ::core::primitive::u128)>,
            }
        }
        pub mod sp_runtime {
            use super::runtime_types;
            pub mod bounded {
                use super::runtime_types;
                pub mod bounded_btree_map {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        Clone,
                        Debug,
                        Eq,
                        PartialEq,
                    )]
                    pub struct BoundedBTreeMap<_0, _1>(
                        pub ::subxt::utils::KeyedVec<_0, _1>,
                    );
                }
                pub mod bounded_vec {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        Clone,
                        Debug,
                        Eq,
                        PartialEq,
                    )]
                    pub struct BoundedVec<_0>(pub ::std::vec::Vec<_0>);
                }
                pub mod weak_bounded_vec {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        Clone,
                        Debug,
                        Eq,
                        PartialEq,
                    )]
                    pub struct WeakBoundedVec<_0>(pub ::std::vec::Vec<_0>);
                }
            }
            pub mod generic {
                use super::runtime_types;
                pub mod digest {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        Clone,
                        Debug,
                        Eq,
                        PartialEq,
                    )]
                    pub struct Digest { pub logs : :: std :: vec :: Vec < runtime_types :: sp_runtime :: generic :: digest :: DigestItem > , }
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        Clone,
                        Debug,
                        Eq,
                        PartialEq,
                    )]
                    pub enum DigestItem {
                        #[codec(index = 6)]
                        PreRuntime(
                            [::core::primitive::u8; 4usize],
                            ::std::vec::Vec<::core::primitive::u8>,
                        ),
                        #[codec(index = 4)]
                        Consensus(
                            [::core::primitive::u8; 4usize],
                            ::std::vec::Vec<::core::primitive::u8>,
                        ),
                        #[codec(index = 5)]
                        Seal(
                            [::core::primitive::u8; 4usize],
                            ::std::vec::Vec<::core::primitive::u8>,
                        ),
                        #[codec(index = 0)]
                        Other(::std::vec::Vec<::core::primitive::u8>),
                        #[codec(index = 8)]
                        RuntimeEnvironmentUpdated,
                    }
                }
                pub mod era {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        Clone,
                        Debug,
                        Eq,
                        PartialEq,
                    )]
                    pub enum Era {
                        #[codec(index = 0)]
                        Immortal,
                        #[codec(index = 1)]
                        Mortal1(::core::primitive::u8),
                        #[codec(index = 2)]
                        Mortal2(::core::primitive::u8),
                        #[codec(index = 3)]
                        Mortal3(::core::primitive::u8),
                        #[codec(index = 4)]
                        Mortal4(::core::primitive::u8),
                        #[codec(index = 5)]
                        Mortal5(::core::primitive::u8),
                        #[codec(index = 6)]
                        Mortal6(::core::primitive::u8),
                        #[codec(index = 7)]
                        Mortal7(::core::primitive::u8),
                        #[codec(index = 8)]
                        Mortal8(::core::primitive::u8),
                        #[codec(index = 9)]
                        Mortal9(::core::primitive::u8),
                        #[codec(index = 10)]
                        Mortal10(::core::primitive::u8),
                        #[codec(index = 11)]
                        Mortal11(::core::primitive::u8),
                        #[codec(index = 12)]
                        Mortal12(::core::primitive::u8),
                        #[codec(index = 13)]
                        Mortal13(::core::primitive::u8),
                        #[codec(index = 14)]
                        Mortal14(::core::primitive::u8),
                        #[codec(index = 15)]
                        Mortal15(::core::primitive::u8),
                        #[codec(index = 16)]
                        Mortal16(::core::primitive::u8),
                        #[codec(index = 17)]
                        Mortal17(::core::primitive::u8),
                        #[codec(index = 18)]
                        Mortal18(::core::primitive::u8),
                        #[codec(index = 19)]
                        Mortal19(::core::primitive::u8),
                        #[codec(index = 20)]
                        Mortal20(::core::primitive::u8),
                        #[codec(index = 21)]
                        Mortal21(::core::primitive::u8),
                        #[codec(index = 22)]
                        Mortal22(::core::primitive::u8),
                        #[codec(index = 23)]
                        Mortal23(::core::primitive::u8),
                        #[codec(index = 24)]
                        Mortal24(::core::primitive::u8),
                        #[codec(index = 25)]
                        Mortal25(::core::primitive::u8),
                        #[codec(index = 26)]
                        Mortal26(::core::primitive::u8),
                        #[codec(index = 27)]
                        Mortal27(::core::primitive::u8),
                        #[codec(index = 28)]
                        Mortal28(::core::primitive::u8),
                        #[codec(index = 29)]
                        Mortal29(::core::primitive::u8),
                        #[codec(index = 30)]
                        Mortal30(::core::primitive::u8),
                        #[codec(index = 31)]
                        Mortal31(::core::primitive::u8),
                        #[codec(index = 32)]
                        Mortal32(::core::primitive::u8),
                        #[codec(index = 33)]
                        Mortal33(::core::primitive::u8),
                        #[codec(index = 34)]
                        Mortal34(::core::primitive::u8),
                        #[codec(index = 35)]
                        Mortal35(::core::primitive::u8),
                        #[codec(index = 36)]
                        Mortal36(::core::primitive::u8),
                        #[codec(index = 37)]
                        Mortal37(::core::primitive::u8),
                        #[codec(index = 38)]
                        Mortal38(::core::primitive::u8),
                        #[codec(index = 39)]
                        Mortal39(::core::primitive::u8),
                        #[codec(index = 40)]
                        Mortal40(::core::primitive::u8),
                        #[codec(index = 41)]
                        Mortal41(::core::primitive::u8),
                        #[codec(index = 42)]
                        Mortal42(::core::primitive::u8),
                        #[codec(index = 43)]
                        Mortal43(::core::primitive::u8),
                        #[codec(index = 44)]
                        Mortal44(::core::primitive::u8),
                        #[codec(index = 45)]
                        Mortal45(::core::primitive::u8),
                        #[codec(index = 46)]
                        Mortal46(::core::primitive::u8),
                        #[codec(index = 47)]
                        Mortal47(::core::primitive::u8),
                        #[codec(index = 48)]
                        Mortal48(::core::primitive::u8),
                        #[codec(index = 49)]
                        Mortal49(::core::primitive::u8),
                        #[codec(index = 50)]
                        Mortal50(::core::primitive::u8),
                        #[codec(index = 51)]
                        Mortal51(::core::primitive::u8),
                        #[codec(index = 52)]
                        Mortal52(::core::primitive::u8),
                        #[codec(index = 53)]
                        Mortal53(::core::primitive::u8),
                        #[codec(index = 54)]
                        Mortal54(::core::primitive::u8),
                        #[codec(index = 55)]
                        Mortal55(::core::primitive::u8),
                        #[codec(index = 56)]
                        Mortal56(::core::primitive::u8),
                        #[codec(index = 57)]
                        Mortal57(::core::primitive::u8),
                        #[codec(index = 58)]
                        Mortal58(::core::primitive::u8),
                        #[codec(index = 59)]
                        Mortal59(::core::primitive::u8),
                        #[codec(index = 60)]
                        Mortal60(::core::primitive::u8),
                        #[codec(index = 61)]
                        Mortal61(::core::primitive::u8),
                        #[codec(index = 62)]
                        Mortal62(::core::primitive::u8),
                        #[codec(index = 63)]
                        Mortal63(::core::primitive::u8),
                        #[codec(index = 64)]
                        Mortal64(::core::primitive::u8),
                        #[codec(index = 65)]
                        Mortal65(::core::primitive::u8),
                        #[codec(index = 66)]
                        Mortal66(::core::primitive::u8),
                        #[codec(index = 67)]
                        Mortal67(::core::primitive::u8),
                        #[codec(index = 68)]
                        Mortal68(::core::primitive::u8),
                        #[codec(index = 69)]
                        Mortal69(::core::primitive::u8),
                        #[codec(index = 70)]
                        Mortal70(::core::primitive::u8),
                        #[codec(index = 71)]
                        Mortal71(::core::primitive::u8),
                        #[codec(index = 72)]
                        Mortal72(::core::primitive::u8),
                        #[codec(index = 73)]
                        Mortal73(::core::primitive::u8),
                        #[codec(index = 74)]
                        Mortal74(::core::primitive::u8),
                        #[codec(index = 75)]
                        Mortal75(::core::primitive::u8),
                        #[codec(index = 76)]
                        Mortal76(::core::primitive::u8),
                        #[codec(index = 77)]
                        Mortal77(::core::primitive::u8),
                        #[codec(index = 78)]
                        Mortal78(::core::primitive::u8),
                        #[codec(index = 79)]
                        Mortal79(::core::primitive::u8),
                        #[codec(index = 80)]
                        Mortal80(::core::primitive::u8),
                        #[codec(index = 81)]
                        Mortal81(::core::primitive::u8),
                        #[codec(index = 82)]
                        Mortal82(::core::primitive::u8),
                        #[codec(index = 83)]
                        Mortal83(::core::primitive::u8),
                        #[codec(index = 84)]
                        Mortal84(::core::primitive::u8),
                        #[codec(index = 85)]
                        Mortal85(::core::primitive::u8),
                        #[codec(index = 86)]
                        Mortal86(::core::primitive::u8),
                        #[codec(index = 87)]
                        Mortal87(::core::primitive::u8),
                        #[codec(index = 88)]
                        Mortal88(::core::primitive::u8),
                        #[codec(index = 89)]
                        Mortal89(::core::primitive::u8),
                        #[codec(index = 90)]
                        Mortal90(::core::primitive::u8),
                        #[codec(index = 91)]
                        Mortal91(::core::primitive::u8),
                        #[codec(index = 92)]
                        Mortal92(::core::primitive::u8),
                        #[codec(index = 93)]
                        Mortal93(::core::primitive::u8),
                        #[codec(index = 94)]
                        Mortal94(::core::primitive::u8),
                        #[codec(index = 95)]
                        Mortal95(::core::primitive::u8),
                        #[codec(index = 96)]
                        Mortal96(::core::primitive::u8),
                        #[codec(index = 97)]
                        Mortal97(::core::primitive::u8),
                        #[codec(index = 98)]
                        Mortal98(::core::primitive::u8),
                        #[codec(index = 99)]
                        Mortal99(::core::primitive::u8),
                        #[codec(index = 100)]
                        Mortal100(::core::primitive::u8),
                        #[codec(index = 101)]
                        Mortal101(::core::primitive::u8),
                        #[codec(index = 102)]
                        Mortal102(::core::primitive::u8),
                        #[codec(index = 103)]
                        Mortal103(::core::primitive::u8),
                        #[codec(index = 104)]
                        Mortal104(::core::primitive::u8),
                        #[codec(index = 105)]
                        Mortal105(::core::primitive::u8),
                        #[codec(index = 106)]
                        Mortal106(::core::primitive::u8),
                        #[codec(index = 107)]
                        Mortal107(::core::primitive::u8),
                        #[codec(index = 108)]
                        Mortal108(::core::primitive::u8),
                        #[codec(index = 109)]
                        Mortal109(::core::primitive::u8),
                        #[codec(index = 110)]
                        Mortal110(::core::primitive::u8),
                        #[codec(index = 111)]
                        Mortal111(::core::primitive::u8),
                        #[codec(index = 112)]
                        Mortal112(::core::primitive::u8),
                        #[codec(index = 113)]
                        Mortal113(::core::primitive::u8),
                        #[codec(index = 114)]
                        Mortal114(::core::primitive::u8),
                        #[codec(index = 115)]
                        Mortal115(::core::primitive::u8),
                        #[codec(index = 116)]
                        Mortal116(::core::primitive::u8),
                        #[codec(index = 117)]
                        Mortal117(::core::primitive::u8),
                        #[codec(index = 118)]
                        Mortal118(::core::primitive::u8),
                        #[codec(index = 119)]
                        Mortal119(::core::primitive::u8),
                        #[codec(index = 120)]
                        Mortal120(::core::primitive::u8),
                        #[codec(index = 121)]
                        Mortal121(::core::primitive::u8),
                        #[codec(index = 122)]
                        Mortal122(::core::primitive::u8),
                        #[codec(index = 123)]
                        Mortal123(::core::primitive::u8),
                        #[codec(index = 124)]
                        Mortal124(::core::primitive::u8),
                        #[codec(index = 125)]
                        Mortal125(::core::primitive::u8),
                        #[codec(index = 126)]
                        Mortal126(::core::primitive::u8),
                        #[codec(index = 127)]
                        Mortal127(::core::primitive::u8),
                        #[codec(index = 128)]
                        Mortal128(::core::primitive::u8),
                        #[codec(index = 129)]
                        Mortal129(::core::primitive::u8),
                        #[codec(index = 130)]
                        Mortal130(::core::primitive::u8),
                        #[codec(index = 131)]
                        Mortal131(::core::primitive::u8),
                        #[codec(index = 132)]
                        Mortal132(::core::primitive::u8),
                        #[codec(index = 133)]
                        Mortal133(::core::primitive::u8),
                        #[codec(index = 134)]
                        Mortal134(::core::primitive::u8),
                        #[codec(index = 135)]
                        Mortal135(::core::primitive::u8),
                        #[codec(index = 136)]
                        Mortal136(::core::primitive::u8),
                        #[codec(index = 137)]
                        Mortal137(::core::primitive::u8),
                        #[codec(index = 138)]
                        Mortal138(::core::primitive::u8),
                        #[codec(index = 139)]
                        Mortal139(::core::primitive::u8),
                        #[codec(index = 140)]
                        Mortal140(::core::primitive::u8),
                        #[codec(index = 141)]
                        Mortal141(::core::primitive::u8),
                        #[codec(index = 142)]
                        Mortal142(::core::primitive::u8),
                        #[codec(index = 143)]
                        Mortal143(::core::primitive::u8),
                        #[codec(index = 144)]
                        Mortal144(::core::primitive::u8),
                        #[codec(index = 145)]
                        Mortal145(::core::primitive::u8),
                        #[codec(index = 146)]
                        Mortal146(::core::primitive::u8),
                        #[codec(index = 147)]
                        Mortal147(::core::primitive::u8),
                        #[codec(index = 148)]
                        Mortal148(::core::primitive::u8),
                        #[codec(index = 149)]
                        Mortal149(::core::primitive::u8),
                        #[codec(index = 150)]
                        Mortal150(::core::primitive::u8),
                        #[codec(index = 151)]
                        Mortal151(::core::primitive::u8),
                        #[codec(index = 152)]
                        Mortal152(::core::primitive::u8),
                        #[codec(index = 153)]
                        Mortal153(::core::primitive::u8),
                        #[codec(index = 154)]
                        Mortal154(::core::primitive::u8),
                        #[codec(index = 155)]
                        Mortal155(::core::primitive::u8),
                        #[codec(index = 156)]
                        Mortal156(::core::primitive::u8),
                        #[codec(index = 157)]
                        Mortal157(::core::primitive::u8),
                        #[codec(index = 158)]
                        Mortal158(::core::primitive::u8),
                        #[codec(index = 159)]
                        Mortal159(::core::primitive::u8),
                        #[codec(index = 160)]
                        Mortal160(::core::primitive::u8),
                        #[codec(index = 161)]
                        Mortal161(::core::primitive::u8),
                        #[codec(index = 162)]
                        Mortal162(::core::primitive::u8),
                        #[codec(index = 163)]
                        Mortal163(::core::primitive::u8),
                        #[codec(index = 164)]
                        Mortal164(::core::primitive::u8),
                        #[codec(index = 165)]
                        Mortal165(::core::primitive::u8),
                        #[codec(index = 166)]
                        Mortal166(::core::primitive::u8),
                        #[codec(index = 167)]
                        Mortal167(::core::primitive::u8),
                        #[codec(index = 168)]
                        Mortal168(::core::primitive::u8),
                        #[codec(index = 169)]
                        Mortal169(::core::primitive::u8),
                        #[codec(index = 170)]
                        Mortal170(::core::primitive::u8),
                        #[codec(index = 171)]
                        Mortal171(::core::primitive::u8),
                        #[codec(index = 172)]
                        Mortal172(::core::primitive::u8),
                        #[codec(index = 173)]
                        Mortal173(::core::primitive::u8),
                        #[codec(index = 174)]
                        Mortal174(::core::primitive::u8),
                        #[codec(index = 175)]
                        Mortal175(::core::primitive::u8),
                        #[codec(index = 176)]
                        Mortal176(::core::primitive::u8),
                        #[codec(index = 177)]
                        Mortal177(::core::primitive::u8),
                        #[codec(index = 178)]
                        Mortal178(::core::primitive::u8),
                        #[codec(index = 179)]
                        Mortal179(::core::primitive::u8),
                        #[codec(index = 180)]
                        Mortal180(::core::primitive::u8),
                        #[codec(index = 181)]
                        Mortal181(::core::primitive::u8),
                        #[codec(index = 182)]
                        Mortal182(::core::primitive::u8),
                        #[codec(index = 183)]
                        Mortal183(::core::primitive::u8),
                        #[codec(index = 184)]
                        Mortal184(::core::primitive::u8),
                        #[codec(index = 185)]
                        Mortal185(::core::primitive::u8),
                        #[codec(index = 186)]
                        Mortal186(::core::primitive::u8),
                        #[codec(index = 187)]
                        Mortal187(::core::primitive::u8),
                        #[codec(index = 188)]
                        Mortal188(::core::primitive::u8),
                        #[codec(index = 189)]
                        Mortal189(::core::primitive::u8),
                        #[codec(index = 190)]
                        Mortal190(::core::primitive::u8),
                        #[codec(index = 191)]
                        Mortal191(::core::primitive::u8),
                        #[codec(index = 192)]
                        Mortal192(::core::primitive::u8),
                        #[codec(index = 193)]
                        Mortal193(::core::primitive::u8),
                        #[codec(index = 194)]
                        Mortal194(::core::primitive::u8),
                        #[codec(index = 195)]
                        Mortal195(::core::primitive::u8),
                        #[codec(index = 196)]
                        Mortal196(::core::primitive::u8),
                        #[codec(index = 197)]
                        Mortal197(::core::primitive::u8),
                        #[codec(index = 198)]
                        Mortal198(::core::primitive::u8),
                        #[codec(index = 199)]
                        Mortal199(::core::primitive::u8),
                        #[codec(index = 200)]
                        Mortal200(::core::primitive::u8),
                        #[codec(index = 201)]
                        Mortal201(::core::primitive::u8),
                        #[codec(index = 202)]
                        Mortal202(::core::primitive::u8),
                        #[codec(index = 203)]
                        Mortal203(::core::primitive::u8),
                        #[codec(index = 204)]
                        Mortal204(::core::primitive::u8),
                        #[codec(index = 205)]
                        Mortal205(::core::primitive::u8),
                        #[codec(index = 206)]
                        Mortal206(::core::primitive::u8),
                        #[codec(index = 207)]
                        Mortal207(::core::primitive::u8),
                        #[codec(index = 208)]
                        Mortal208(::core::primitive::u8),
                        #[codec(index = 209)]
                        Mortal209(::core::primitive::u8),
                        #[codec(index = 210)]
                        Mortal210(::core::primitive::u8),
                        #[codec(index = 211)]
                        Mortal211(::core::primitive::u8),
                        #[codec(index = 212)]
                        Mortal212(::core::primitive::u8),
                        #[codec(index = 213)]
                        Mortal213(::core::primitive::u8),
                        #[codec(index = 214)]
                        Mortal214(::core::primitive::u8),
                        #[codec(index = 215)]
                        Mortal215(::core::primitive::u8),
                        #[codec(index = 216)]
                        Mortal216(::core::primitive::u8),
                        #[codec(index = 217)]
                        Mortal217(::core::primitive::u8),
                        #[codec(index = 218)]
                        Mortal218(::core::primitive::u8),
                        #[codec(index = 219)]
                        Mortal219(::core::primitive::u8),
                        #[codec(index = 220)]
                        Mortal220(::core::primitive::u8),
                        #[codec(index = 221)]
                        Mortal221(::core::primitive::u8),
                        #[codec(index = 222)]
                        Mortal222(::core::primitive::u8),
                        #[codec(index = 223)]
                        Mortal223(::core::primitive::u8),
                        #[codec(index = 224)]
                        Mortal224(::core::primitive::u8),
                        #[codec(index = 225)]
                        Mortal225(::core::primitive::u8),
                        #[codec(index = 226)]
                        Mortal226(::core::primitive::u8),
                        #[codec(index = 227)]
                        Mortal227(::core::primitive::u8),
                        #[codec(index = 228)]
                        Mortal228(::core::primitive::u8),
                        #[codec(index = 229)]
                        Mortal229(::core::primitive::u8),
                        #[codec(index = 230)]
                        Mortal230(::core::primitive::u8),
                        #[codec(index = 231)]
                        Mortal231(::core::primitive::u8),
                        #[codec(index = 232)]
                        Mortal232(::core::primitive::u8),
                        #[codec(index = 233)]
                        Mortal233(::core::primitive::u8),
                        #[codec(index = 234)]
                        Mortal234(::core::primitive::u8),
                        #[codec(index = 235)]
                        Mortal235(::core::primitive::u8),
                        #[codec(index = 236)]
                        Mortal236(::core::primitive::u8),
                        #[codec(index = 237)]
                        Mortal237(::core::primitive::u8),
                        #[codec(index = 238)]
                        Mortal238(::core::primitive::u8),
                        #[codec(index = 239)]
                        Mortal239(::core::primitive::u8),
                        #[codec(index = 240)]
                        Mortal240(::core::primitive::u8),
                        #[codec(index = 241)]
                        Mortal241(::core::primitive::u8),
                        #[codec(index = 242)]
                        Mortal242(::core::primitive::u8),
                        #[codec(index = 243)]
                        Mortal243(::core::primitive::u8),
                        #[codec(index = 244)]
                        Mortal244(::core::primitive::u8),
                        #[codec(index = 245)]
                        Mortal245(::core::primitive::u8),
                        #[codec(index = 246)]
                        Mortal246(::core::primitive::u8),
                        #[codec(index = 247)]
                        Mortal247(::core::primitive::u8),
                        #[codec(index = 248)]
                        Mortal248(::core::primitive::u8),
                        #[codec(index = 249)]
                        Mortal249(::core::primitive::u8),
                        #[codec(index = 250)]
                        Mortal250(::core::primitive::u8),
                        #[codec(index = 251)]
                        Mortal251(::core::primitive::u8),
                        #[codec(index = 252)]
                        Mortal252(::core::primitive::u8),
                        #[codec(index = 253)]
                        Mortal253(::core::primitive::u8),
                        #[codec(index = 254)]
                        Mortal254(::core::primitive::u8),
                        #[codec(index = 255)]
                        Mortal255(::core::primitive::u8),
                    }
                }
                pub mod header {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        Clone,
                        Debug,
                        Eq,
                        PartialEq,
                    )]
                    pub struct Header<_0, _1> {
                        pub parent_hash: ::subxt::ext::sp_core::H256,
                        #[codec(compact)]
                        pub number: _0,
                        pub state_root: ::subxt::ext::sp_core::H256,
                        pub extrinsics_root: ::subxt::ext::sp_core::H256,
                        pub digest:
                            runtime_types::sp_runtime::generic::digest::Digest,
                        #[codec(skip)]
                        pub __subxt_unused_type_params:
                            ::core::marker::PhantomData<_1>,
                    }
                }
                pub mod unchecked_extrinsic {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        Clone,
                        Debug,
                        Eq,
                        PartialEq,
                    )]
                    pub struct UncheckedExtrinsic<_0, _1, _2, _3>(
                        pub ::std::vec::Vec<::core::primitive::u8>,
                        #[codec(skip)]
                        pub  ::core::marker::PhantomData<(_0, _1, _2, _3)>,
                    );
                }
            }
            pub mod multiaddress {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                pub enum MultiAddress<_0, _1> {
                    #[codec(index = 0)]
                    Id(_0),
                    #[codec(index = 1)]
                    Index(#[codec(compact)] _1),
                    #[codec(index = 2)]
                    Raw(::std::vec::Vec<::core::primitive::u8>),
                    #[codec(index = 3)]
                    Address32([::core::primitive::u8; 32usize]),
                    #[codec(index = 4)]
                    Address20([::core::primitive::u8; 20usize]),
                }
            }
            pub mod traits {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                pub struct BlakeTwo256;
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub enum ArithmeticError {
                #[codec(index = 0)]
                Underflow,
                #[codec(index = 1)]
                Overflow,
                #[codec(index = 2)]
                DivisionByZero,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub enum DispatchError {
                #[codec(index = 0)]
                Other,
                #[codec(index = 1)]
                CannotLookup,
                #[codec(index = 2)]
                BadOrigin,
                #[codec(index = 3)]
                Module(runtime_types::sp_runtime::ModuleError),
                #[codec(index = 4)]
                ConsumerRemaining,
                #[codec(index = 5)]
                NoProviders,
                #[codec(index = 6)]
                TooManyConsumers,
                #[codec(index = 7)]
                Token(runtime_types::sp_runtime::TokenError),
                #[codec(index = 8)]
                Arithmetic(runtime_types::sp_runtime::ArithmeticError),
                #[codec(index = 9)]
                Transactional(runtime_types::sp_runtime::TransactionalError),
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct ModuleError {
                pub index: ::core::primitive::u8,
                pub error: [::core::primitive::u8; 4usize],
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub enum MultiSignature {
                #[codec(index = 0)]
                Ed25519(runtime_types::sp_core::ed25519::Signature),
                #[codec(index = 1)]
                Sr25519(runtime_types::sp_core::sr25519::Signature),
                #[codec(index = 2)]
                Ecdsa(runtime_types::sp_core::ecdsa::Signature),
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub enum TokenError {
                #[codec(index = 0)]
                NoFunds,
                #[codec(index = 1)]
                WouldDie,
                #[codec(index = 2)]
                BelowMinimum,
                #[codec(index = 3)]
                CannotCreate,
                #[codec(index = 4)]
                UnknownAsset,
                #[codec(index = 5)]
                Frozen,
                #[codec(index = 6)]
                Unsupported,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub enum TransactionalError {
                #[codec(index = 0)]
                LimitReached,
                #[codec(index = 1)]
                NoLayer,
            }
        }
        pub mod sp_session {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct MembershipProof {
                pub session: ::core::primitive::u32,
                pub trie_nodes:
                    ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
                pub validator_count: ::core::primitive::u32,
            }
        }
        pub mod sp_staking {
            use super::runtime_types;
            pub mod offence {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                pub struct OffenceDetails<_0, _1> {
                    pub offender: _1,
                    pub reporters: ::std::vec::Vec<_0>,
                }
            }
        }
        pub mod sp_version {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct RuntimeVersion {
                pub spec_name: ::std::string::String,
                pub impl_name: ::std::string::String,
                pub authoring_version: ::core::primitive::u32,
                pub spec_version: ::core::primitive::u32,
                pub impl_version: ::core::primitive::u32,
                pub apis: ::std::vec::Vec<(
                    [::core::primitive::u8; 8usize],
                    ::core::primitive::u32,
                )>,
                pub transaction_version: ::core::primitive::u32,
                pub state_version: ::core::primitive::u8,
            }
        }
        pub mod webb_primitives {
            use super::runtime_types;
            pub mod runtime {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                pub struct Element(pub [::core::primitive::u8; 32usize]);
            }
            pub mod types {
                use super::runtime_types;
                pub mod vanchor {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        Clone,
                        Debug,
                        Eq,
                        PartialEq,
                    )]
                    pub struct ExtData<_0, _1, _2, _3> {
                        pub recipient: _0,
                        pub relayer: _0,
                        pub ext_amount: _1,
                        pub fee: _2,
                        pub refund: _2,
                        pub token: _3,
                        pub encrypted_output1:
                            ::std::vec::Vec<::core::primitive::u8>,
                        pub encrypted_output2:
                            ::std::vec::Vec<::core::primitive::u8>,
                    }
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        Clone,
                        Debug,
                        Eq,
                        PartialEq,
                    )]
                    pub struct ProofData<_0> {
                        pub proof: ::std::vec::Vec<::core::primitive::u8>,
                        pub public_amount: _0,
                        pub roots: ::std::vec::Vec<_0>,
                        pub input_nullifiers: ::std::vec::Vec<_0>,
                        pub output_commitments: ::std::vec::Vec<_0>,
                        pub ext_data_hash: _0,
                    }
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        Clone,
                        Debug,
                        Eq,
                        PartialEq,
                    )]
                    pub struct VAnchorMetadata<_0, _1> {
                        pub creator: ::core::option::Option<_0>,
                        pub asset: _1,
                    }
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                pub struct DepositDetails<_0, _1> {
                    pub depositor: _0,
                    pub deposit: _1,
                }
            }
        }
        pub mod webb_proposals {
            use super::runtime_types;
            pub mod header {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                pub struct ResourceId(pub [::core::primitive::u8; 32usize]);
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                pub enum TypedChainId {
                    #[codec(index = 0)]
                    None,
                    #[codec(index = 1)]
                    Evm(::core::primitive::u32),
                    #[codec(index = 2)]
                    Substrate(::core::primitive::u32),
                    #[codec(index = 3)]
                    PolkadotParachain(::core::primitive::u32),
                    #[codec(index = 4)]
                    KusamaParachain(::core::primitive::u32),
                    #[codec(index = 5)]
                    RococoParachain(::core::primitive::u32),
                    #[codec(index = 6)]
                    Cosmos(::core::primitive::u32),
                    #[codec(index = 7)]
                    Solana(::core::primitive::u32),
                    #[codec(index = 8)]
                    Ink(::core::primitive::u32),
                }
            }
            pub mod target_system {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                pub struct SubstrateTargetSystem {
                    pub pallet_index: ::core::primitive::u8,
                    pub tree_id: ::core::primitive::u32,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    Clone,
                    Debug,
                    Eq,
                    PartialEq,
                )]
                pub enum TargetSystem {
                    # [codec (index = 0)] ContractAddress ([:: core :: primitive :: u8 ; 20usize] ,) , # [codec (index = 1)] Substrate (runtime_types :: webb_proposals :: target_system :: SubstrateTargetSystem ,) , }
            }
        }
        pub mod webb_standalone_runtime {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub enum Call {
                # [codec (index = 0)] System (runtime_types :: frame_system :: pallet :: Call ,) , # [codec (index = 2)] Timestamp (runtime_types :: pallet_timestamp :: pallet :: Call ,) , # [codec (index = 3)] Babe (runtime_types :: pallet_babe :: pallet :: Call ,) , # [codec (index = 4)] Authorship (runtime_types :: pallet_authorship :: pallet :: Call ,) , # [codec (index = 5)] Indices (runtime_types :: pallet_indices :: pallet :: Call ,) , # [codec (index = 6)] Balances (runtime_types :: pallet_balances :: pallet :: Call ,) , # [codec (index = 9)] ElectionProviderMultiPhase (runtime_types :: pallet_election_provider_multi_phase :: pallet :: Call ,) , # [codec (index = 10)] Staking (runtime_types :: pallet_staking :: pallet :: pallet :: Call ,) , # [codec (index = 11)] Session (runtime_types :: pallet_session :: pallet :: Call ,) , # [codec (index = 12)] Democracy (runtime_types :: pallet_democracy :: pallet :: Call ,) , # [codec (index = 13)] Council (runtime_types :: pallet_collective :: pallet :: Call ,) , # [codec (index = 14)] Elections (runtime_types :: pallet_elections_phragmen :: pallet :: Call ,) , # [codec (index = 15)] Grandpa (runtime_types :: pallet_grandpa :: pallet :: Call ,) , # [codec (index = 16)] Treasury (runtime_types :: pallet_treasury :: pallet :: Call ,) , # [codec (index = 17)] Utility (runtime_types :: pallet_utility :: pallet :: Call ,) , # [codec (index = 18)] Multisig (runtime_types :: pallet_multisig :: pallet :: Call ,) , # [codec (index = 19)] Scheduler (runtime_types :: pallet_scheduler :: pallet :: Call ,) , # [codec (index = 20)] Preimage (runtime_types :: pallet_preimage :: pallet :: Call ,) , # [codec (index = 21)] Proxy (runtime_types :: pallet_proxy :: pallet :: Call ,) , # [codec (index = 22)] Assets (runtime_types :: pallet_assets :: pallet :: Call ,) , # [codec (index = 23)] Sudo (runtime_types :: pallet_sudo :: pallet :: Call ,) , # [codec (index = 24)] ImOnline (runtime_types :: pallet_im_online :: pallet :: Call ,) , # [codec (index = 28)] Bounties (runtime_types :: pallet_bounties :: pallet :: Call ,) , # [codec (index = 29)] ChildBounties (runtime_types :: pallet_child_bounties :: pallet :: Call ,) , # [codec (index = 30)] BagsList (runtime_types :: pallet_bags_list :: pallet :: Call ,) , # [codec (index = 31)] NominationPools (runtime_types :: pallet_nomination_pools :: pallet :: Call ,) , # [codec (index = 32)] HasherBn254 (runtime_types :: pallet_hasher :: pallet :: Call ,) , # [codec (index = 33)] AssetRegistry (runtime_types :: pallet_asset_registry :: pallet :: Call ,) , # [codec (index = 34)] Currencies (runtime_types :: orml_currencies :: module :: Call ,) , # [codec (index = 35)] Tokens (runtime_types :: orml_tokens :: module :: Call ,) , # [codec (index = 36)] TokenWrapper (runtime_types :: pallet_token_wrapper :: pallet :: Call ,) , # [codec (index = 37)] TokenWrapperHandler (runtime_types :: pallet_token_wrapper_handler :: pallet :: Call ,) , # [codec (index = 38)] MixerVerifierBn254 (runtime_types :: pallet_verifier :: pallet :: Call ,) , # [codec (index = 39)] VAnchorVerifier (runtime_types :: pallet_vanchor_verifier :: pallet :: Call ,) , # [codec (index = 40)] MerkleTreeBn254 (runtime_types :: pallet_mt :: pallet :: Call ,) , # [codec (index = 41)] LinkableTreeBn254 (runtime_types :: pallet_linkable_tree :: pallet :: Call ,) , # [codec (index = 42)] MixerBn254 (runtime_types :: pallet_mixer :: pallet :: Call ,) , # [codec (index = 43)] VAnchorBn254 (runtime_types :: pallet_vanchor :: pallet :: Call ,) , # [codec (index = 44)] VAnchorHandlerBn254 (runtime_types :: pallet_vanchor_handler :: pallet :: Call ,) , # [codec (index = 45)] SignatureBridge (runtime_types :: pallet_signature_bridge :: pallet :: Call ,) , # [codec (index = 46)] RelayerRegistry (runtime_types :: pallet_relayer_registry :: pallet :: Call ,) , # [codec (index = 47)] KeyStorage (runtime_types :: pallet_key_storage :: pallet :: Call ,) , }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub enum Event {
                # [codec (index = 0)] System (runtime_types :: frame_system :: pallet :: Event ,) , # [codec (index = 5)] Indices (runtime_types :: pallet_indices :: pallet :: Event ,) , # [codec (index = 6)] Balances (runtime_types :: pallet_balances :: pallet :: Event ,) , # [codec (index = 7)] TransactionPayment (runtime_types :: pallet_transaction_payment :: pallet :: Event ,) , # [codec (index = 8)] AssetTxPayment (runtime_types :: pallet_asset_tx_payment :: pallet :: Event ,) , # [codec (index = 9)] ElectionProviderMultiPhase (runtime_types :: pallet_election_provider_multi_phase :: pallet :: Event ,) , # [codec (index = 10)] Staking (runtime_types :: pallet_staking :: pallet :: pallet :: Event ,) , # [codec (index = 11)] Session (runtime_types :: pallet_session :: pallet :: Event ,) , # [codec (index = 12)] Democracy (runtime_types :: pallet_democracy :: pallet :: Event ,) , # [codec (index = 13)] Council (runtime_types :: pallet_collective :: pallet :: Event ,) , # [codec (index = 14)] Elections (runtime_types :: pallet_elections_phragmen :: pallet :: Event ,) , # [codec (index = 15)] Grandpa (runtime_types :: pallet_grandpa :: pallet :: Event ,) , # [codec (index = 16)] Treasury (runtime_types :: pallet_treasury :: pallet :: Event ,) , # [codec (index = 17)] Utility (runtime_types :: pallet_utility :: pallet :: Event ,) , # [codec (index = 18)] Multisig (runtime_types :: pallet_multisig :: pallet :: Event ,) , # [codec (index = 19)] Scheduler (runtime_types :: pallet_scheduler :: pallet :: Event ,) , # [codec (index = 20)] Preimage (runtime_types :: pallet_preimage :: pallet :: Event ,) , # [codec (index = 21)] Proxy (runtime_types :: pallet_proxy :: pallet :: Event ,) , # [codec (index = 22)] Assets (runtime_types :: pallet_assets :: pallet :: Event ,) , # [codec (index = 23)] Sudo (runtime_types :: pallet_sudo :: pallet :: Event ,) , # [codec (index = 24)] ImOnline (runtime_types :: pallet_im_online :: pallet :: Event ,) , # [codec (index = 26)] Offences (runtime_types :: pallet_offences :: pallet :: Event ,) , # [codec (index = 28)] Bounties (runtime_types :: pallet_bounties :: pallet :: Event ,) , # [codec (index = 29)] ChildBounties (runtime_types :: pallet_child_bounties :: pallet :: Event ,) , # [codec (index = 30)] BagsList (runtime_types :: pallet_bags_list :: pallet :: Event ,) , # [codec (index = 31)] NominationPools (runtime_types :: pallet_nomination_pools :: pallet :: Event ,) , # [codec (index = 32)] HasherBn254 (runtime_types :: pallet_hasher :: pallet :: Event ,) , # [codec (index = 33)] AssetRegistry (runtime_types :: pallet_asset_registry :: pallet :: Event ,) , # [codec (index = 35)] Tokens (runtime_types :: orml_tokens :: module :: Event ,) , # [codec (index = 36)] TokenWrapper (runtime_types :: pallet_token_wrapper :: pallet :: Event ,) , # [codec (index = 37)] TokenWrapperHandler (runtime_types :: pallet_token_wrapper_handler :: pallet :: Event ,) , # [codec (index = 38)] MixerVerifierBn254 (runtime_types :: pallet_verifier :: pallet :: Event ,) , # [codec (index = 39)] VAnchorVerifier (runtime_types :: pallet_vanchor_verifier :: pallet :: Event ,) , # [codec (index = 40)] MerkleTreeBn254 (runtime_types :: pallet_mt :: pallet :: Event ,) , # [codec (index = 41)] LinkableTreeBn254 (runtime_types :: pallet_linkable_tree :: pallet :: Event ,) , # [codec (index = 42)] MixerBn254 (runtime_types :: pallet_mixer :: pallet :: Event ,) , # [codec (index = 43)] VAnchorBn254 (runtime_types :: pallet_vanchor :: pallet :: Event ,) , # [codec (index = 44)] VAnchorHandlerBn254 (runtime_types :: pallet_vanchor_handler :: pallet :: Event ,) , # [codec (index = 45)] SignatureBridge (runtime_types :: pallet_signature_bridge :: pallet :: Event ,) , # [codec (index = 46)] RelayerRegistry (runtime_types :: pallet_relayer_registry :: pallet :: Event ,) , # [codec (index = 47)] KeyStorage (runtime_types :: pallet_key_storage :: pallet :: Event ,) , }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct NposSolution16 {
                pub votes1: ::std::vec::Vec<(
                    ::subxt::ext::codec::Compact<::core::primitive::u32>,
                    ::subxt::ext::codec::Compact<::core::primitive::u16>,
                )>,
                pub votes2: ::std::vec::Vec<(
                    ::subxt::ext::codec::Compact<::core::primitive::u32>,
                    (
                        ::subxt::ext::codec::Compact<::core::primitive::u16>,
                        ::subxt::ext::codec::Compact<
                            runtime_types::sp_arithmetic::per_things::PerU16,
                        >,
                    ),
                    ::subxt::ext::codec::Compact<::core::primitive::u16>,
                )>,
                pub votes3: ::std::vec::Vec<(
                    ::subxt::ext::codec::Compact<::core::primitive::u32>,
                    [(
                        ::subxt::ext::codec::Compact<::core::primitive::u16>,
                        ::subxt::ext::codec::Compact<
                            runtime_types::sp_arithmetic::per_things::PerU16,
                        >,
                    ); 2usize],
                    ::subxt::ext::codec::Compact<::core::primitive::u16>,
                )>,
                pub votes4: ::std::vec::Vec<(
                    ::subxt::ext::codec::Compact<::core::primitive::u32>,
                    [(
                        ::subxt::ext::codec::Compact<::core::primitive::u16>,
                        ::subxt::ext::codec::Compact<
                            runtime_types::sp_arithmetic::per_things::PerU16,
                        >,
                    ); 3usize],
                    ::subxt::ext::codec::Compact<::core::primitive::u16>,
                )>,
                pub votes5: ::std::vec::Vec<(
                    ::subxt::ext::codec::Compact<::core::primitive::u32>,
                    [(
                        ::subxt::ext::codec::Compact<::core::primitive::u16>,
                        ::subxt::ext::codec::Compact<
                            runtime_types::sp_arithmetic::per_things::PerU16,
                        >,
                    ); 4usize],
                    ::subxt::ext::codec::Compact<::core::primitive::u16>,
                )>,
                pub votes6: ::std::vec::Vec<(
                    ::subxt::ext::codec::Compact<::core::primitive::u32>,
                    [(
                        ::subxt::ext::codec::Compact<::core::primitive::u16>,
                        ::subxt::ext::codec::Compact<
                            runtime_types::sp_arithmetic::per_things::PerU16,
                        >,
                    ); 5usize],
                    ::subxt::ext::codec::Compact<::core::primitive::u16>,
                )>,
                pub votes7: ::std::vec::Vec<(
                    ::subxt::ext::codec::Compact<::core::primitive::u32>,
                    [(
                        ::subxt::ext::codec::Compact<::core::primitive::u16>,
                        ::subxt::ext::codec::Compact<
                            runtime_types::sp_arithmetic::per_things::PerU16,
                        >,
                    ); 6usize],
                    ::subxt::ext::codec::Compact<::core::primitive::u16>,
                )>,
                pub votes8: ::std::vec::Vec<(
                    ::subxt::ext::codec::Compact<::core::primitive::u32>,
                    [(
                        ::subxt::ext::codec::Compact<::core::primitive::u16>,
                        ::subxt::ext::codec::Compact<
                            runtime_types::sp_arithmetic::per_things::PerU16,
                        >,
                    ); 7usize],
                    ::subxt::ext::codec::Compact<::core::primitive::u16>,
                )>,
                pub votes9: ::std::vec::Vec<(
                    ::subxt::ext::codec::Compact<::core::primitive::u32>,
                    [(
                        ::subxt::ext::codec::Compact<::core::primitive::u16>,
                        ::subxt::ext::codec::Compact<
                            runtime_types::sp_arithmetic::per_things::PerU16,
                        >,
                    ); 8usize],
                    ::subxt::ext::codec::Compact<::core::primitive::u16>,
                )>,
                pub votes10: ::std::vec::Vec<(
                    ::subxt::ext::codec::Compact<::core::primitive::u32>,
                    [(
                        ::subxt::ext::codec::Compact<::core::primitive::u16>,
                        ::subxt::ext::codec::Compact<
                            runtime_types::sp_arithmetic::per_things::PerU16,
                        >,
                    ); 9usize],
                    ::subxt::ext::codec::Compact<::core::primitive::u16>,
                )>,
                pub votes11: ::std::vec::Vec<(
                    ::subxt::ext::codec::Compact<::core::primitive::u32>,
                    [(
                        ::subxt::ext::codec::Compact<::core::primitive::u16>,
                        ::subxt::ext::codec::Compact<
                            runtime_types::sp_arithmetic::per_things::PerU16,
                        >,
                    ); 10usize],
                    ::subxt::ext::codec::Compact<::core::primitive::u16>,
                )>,
                pub votes12: ::std::vec::Vec<(
                    ::subxt::ext::codec::Compact<::core::primitive::u32>,
                    [(
                        ::subxt::ext::codec::Compact<::core::primitive::u16>,
                        ::subxt::ext::codec::Compact<
                            runtime_types::sp_arithmetic::per_things::PerU16,
                        >,
                    ); 11usize],
                    ::subxt::ext::codec::Compact<::core::primitive::u16>,
                )>,
                pub votes13: ::std::vec::Vec<(
                    ::subxt::ext::codec::Compact<::core::primitive::u32>,
                    [(
                        ::subxt::ext::codec::Compact<::core::primitive::u16>,
                        ::subxt::ext::codec::Compact<
                            runtime_types::sp_arithmetic::per_things::PerU16,
                        >,
                    ); 12usize],
                    ::subxt::ext::codec::Compact<::core::primitive::u16>,
                )>,
                pub votes14: ::std::vec::Vec<(
                    ::subxt::ext::codec::Compact<::core::primitive::u32>,
                    [(
                        ::subxt::ext::codec::Compact<::core::primitive::u16>,
                        ::subxt::ext::codec::Compact<
                            runtime_types::sp_arithmetic::per_things::PerU16,
                        >,
                    ); 13usize],
                    ::subxt::ext::codec::Compact<::core::primitive::u16>,
                )>,
                pub votes15: ::std::vec::Vec<(
                    ::subxt::ext::codec::Compact<::core::primitive::u32>,
                    [(
                        ::subxt::ext::codec::Compact<::core::primitive::u16>,
                        ::subxt::ext::codec::Compact<
                            runtime_types::sp_arithmetic::per_things::PerU16,
                        >,
                    ); 14usize],
                    ::subxt::ext::codec::Compact<::core::primitive::u16>,
                )>,
                pub votes16: ::std::vec::Vec<(
                    ::subxt::ext::codec::Compact<::core::primitive::u32>,
                    [(
                        ::subxt::ext::codec::Compact<::core::primitive::u16>,
                        ::subxt::ext::codec::Compact<
                            runtime_types::sp_arithmetic::per_things::PerU16,
                        >,
                    ); 15usize],
                    ::subxt::ext::codec::Compact<::core::primitive::u16>,
                )>,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub enum OriginCaller {
                #[codec(index = 0)]
                system(
                    runtime_types::frame_support::dispatch::RawOrigin<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                    >,
                ),
                #[codec(index = 13)]
                Council(
                    runtime_types::pallet_collective::RawOrigin<
                        ::subxt::ext::sp_core::crypto::AccountId32,
                    >,
                ),
                #[codec(index = 2)]
                Void(runtime_types::sp_core::Void),
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub enum ProxyType {
                #[codec(index = 0)]
                Any,
                #[codec(index = 1)]
                NonTransfer,
                #[codec(index = 2)]
                CancelProxy,
                #[codec(index = 3)]
                Assets,
                #[codec(index = 4)]
                AssetOwner,
                #[codec(index = 5)]
                AssetManager,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct Runtime;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                Clone,
                Debug,
                Eq,
                PartialEq,
            )]
            pub struct SessionKeys { pub grandpa : runtime_types :: sp_finality_grandpa :: app :: Public , pub babe : runtime_types :: sp_consensus_babe :: app :: Public , pub im_online : runtime_types :: pallet_im_online :: sr25519 :: app_sr25519 :: Public , pub authority_discovery : runtime_types :: sp_authority_discovery :: app :: Public , }
        }
    }
    #[doc = r" The default error type returned when there is a runtime issue,"]
    #[doc = r" exposed here for ease of use."]
    pub type DispatchError = runtime_types::sp_runtime::DispatchError;
    pub fn constants() -> ConstantsApi {
        ConstantsApi
    }
    pub fn storage() -> StorageApi {
        StorageApi
    }
    pub fn tx() -> TransactionApi {
        TransactionApi
    }
    pub struct ConstantsApi;
    impl ConstantsApi {
        pub fn system(&self) -> system::constants::ConstantsApi {
            system::constants::ConstantsApi
        }
        pub fn timestamp(&self) -> timestamp::constants::ConstantsApi {
            timestamp::constants::ConstantsApi
        }
        pub fn babe(&self) -> babe::constants::ConstantsApi {
            babe::constants::ConstantsApi
        }
        pub fn authorship(&self) -> authorship::constants::ConstantsApi {
            authorship::constants::ConstantsApi
        }
        pub fn indices(&self) -> indices::constants::ConstantsApi {
            indices::constants::ConstantsApi
        }
        pub fn balances(&self) -> balances::constants::ConstantsApi {
            balances::constants::ConstantsApi
        }
        pub fn transaction_payment(
            &self,
        ) -> transaction_payment::constants::ConstantsApi {
            transaction_payment::constants::ConstantsApi
        }
        pub fn election_provider_multi_phase(
            &self,
        ) -> election_provider_multi_phase::constants::ConstantsApi {
            election_provider_multi_phase::constants::ConstantsApi
        }
        pub fn staking(&self) -> staking::constants::ConstantsApi {
            staking::constants::ConstantsApi
        }
        pub fn democracy(&self) -> democracy::constants::ConstantsApi {
            democracy::constants::ConstantsApi
        }
        pub fn elections(&self) -> elections::constants::ConstantsApi {
            elections::constants::ConstantsApi
        }
        pub fn grandpa(&self) -> grandpa::constants::ConstantsApi {
            grandpa::constants::ConstantsApi
        }
        pub fn treasury(&self) -> treasury::constants::ConstantsApi {
            treasury::constants::ConstantsApi
        }
        pub fn utility(&self) -> utility::constants::ConstantsApi {
            utility::constants::ConstantsApi
        }
        pub fn multisig(&self) -> multisig::constants::ConstantsApi {
            multisig::constants::ConstantsApi
        }
        pub fn scheduler(&self) -> scheduler::constants::ConstantsApi {
            scheduler::constants::ConstantsApi
        }
        pub fn proxy(&self) -> proxy::constants::ConstantsApi {
            proxy::constants::ConstantsApi
        }
        pub fn assets(&self) -> assets::constants::ConstantsApi {
            assets::constants::ConstantsApi
        }
        pub fn im_online(&self) -> im_online::constants::ConstantsApi {
            im_online::constants::ConstantsApi
        }
        pub fn bounties(&self) -> bounties::constants::ConstantsApi {
            bounties::constants::ConstantsApi
        }
        pub fn child_bounties(
            &self,
        ) -> child_bounties::constants::ConstantsApi {
            child_bounties::constants::ConstantsApi
        }
        pub fn bags_list(&self) -> bags_list::constants::ConstantsApi {
            bags_list::constants::ConstantsApi
        }
        pub fn nomination_pools(
            &self,
        ) -> nomination_pools::constants::ConstantsApi {
            nomination_pools::constants::ConstantsApi
        }
        pub fn asset_registry(
            &self,
        ) -> asset_registry::constants::ConstantsApi {
            asset_registry::constants::ConstantsApi
        }
        pub fn currencies(&self) -> currencies::constants::ConstantsApi {
            currencies::constants::ConstantsApi
        }
        pub fn tokens(&self) -> tokens::constants::ConstantsApi {
            tokens::constants::ConstantsApi
        }
        pub fn token_wrapper(&self) -> token_wrapper::constants::ConstantsApi {
            token_wrapper::constants::ConstantsApi
        }
        pub fn linkable_tree_bn254(
            &self,
        ) -> linkable_tree_bn254::constants::ConstantsApi {
            linkable_tree_bn254::constants::ConstantsApi
        }
        pub fn mixer_bn254(&self) -> mixer_bn254::constants::ConstantsApi {
            mixer_bn254::constants::ConstantsApi
        }
        pub fn v_anchor_bn254(
            &self,
        ) -> v_anchor_bn254::constants::ConstantsApi {
            v_anchor_bn254::constants::ConstantsApi
        }
        pub fn signature_bridge(
            &self,
        ) -> signature_bridge::constants::ConstantsApi {
            signature_bridge::constants::ConstantsApi
        }
        pub fn relayer_registry(
            &self,
        ) -> relayer_registry::constants::ConstantsApi {
            relayer_registry::constants::ConstantsApi
        }
    }
    pub struct StorageApi;
    impl StorageApi {
        pub fn system(&self) -> system::storage::StorageApi {
            system::storage::StorageApi
        }
        pub fn randomness_collective_flip(
            &self,
        ) -> randomness_collective_flip::storage::StorageApi {
            randomness_collective_flip::storage::StorageApi
        }
        pub fn timestamp(&self) -> timestamp::storage::StorageApi {
            timestamp::storage::StorageApi
        }
        pub fn babe(&self) -> babe::storage::StorageApi {
            babe::storage::StorageApi
        }
        pub fn authorship(&self) -> authorship::storage::StorageApi {
            authorship::storage::StorageApi
        }
        pub fn indices(&self) -> indices::storage::StorageApi {
            indices::storage::StorageApi
        }
        pub fn balances(&self) -> balances::storage::StorageApi {
            balances::storage::StorageApi
        }
        pub fn transaction_payment(
            &self,
        ) -> transaction_payment::storage::StorageApi {
            transaction_payment::storage::StorageApi
        }
        pub fn asset_tx_payment(
            &self,
        ) -> asset_tx_payment::storage::StorageApi {
            asset_tx_payment::storage::StorageApi
        }
        pub fn election_provider_multi_phase(
            &self,
        ) -> election_provider_multi_phase::storage::StorageApi {
            election_provider_multi_phase::storage::StorageApi
        }
        pub fn staking(&self) -> staking::storage::StorageApi {
            staking::storage::StorageApi
        }
        pub fn session(&self) -> session::storage::StorageApi {
            session::storage::StorageApi
        }
        pub fn democracy(&self) -> democracy::storage::StorageApi {
            democracy::storage::StorageApi
        }
        pub fn council(&self) -> council::storage::StorageApi {
            council::storage::StorageApi
        }
        pub fn elections(&self) -> elections::storage::StorageApi {
            elections::storage::StorageApi
        }
        pub fn grandpa(&self) -> grandpa::storage::StorageApi {
            grandpa::storage::StorageApi
        }
        pub fn treasury(&self) -> treasury::storage::StorageApi {
            treasury::storage::StorageApi
        }
        pub fn multisig(&self) -> multisig::storage::StorageApi {
            multisig::storage::StorageApi
        }
        pub fn scheduler(&self) -> scheduler::storage::StorageApi {
            scheduler::storage::StorageApi
        }
        pub fn preimage(&self) -> preimage::storage::StorageApi {
            preimage::storage::StorageApi
        }
        pub fn proxy(&self) -> proxy::storage::StorageApi {
            proxy::storage::StorageApi
        }
        pub fn assets(&self) -> assets::storage::StorageApi {
            assets::storage::StorageApi
        }
        pub fn sudo(&self) -> sudo::storage::StorageApi {
            sudo::storage::StorageApi
        }
        pub fn im_online(&self) -> im_online::storage::StorageApi {
            im_online::storage::StorageApi
        }
        pub fn offences(&self) -> offences::storage::StorageApi {
            offences::storage::StorageApi
        }
        pub fn bounties(&self) -> bounties::storage::StorageApi {
            bounties::storage::StorageApi
        }
        pub fn child_bounties(&self) -> child_bounties::storage::StorageApi {
            child_bounties::storage::StorageApi
        }
        pub fn bags_list(&self) -> bags_list::storage::StorageApi {
            bags_list::storage::StorageApi
        }
        pub fn nomination_pools(
            &self,
        ) -> nomination_pools::storage::StorageApi {
            nomination_pools::storage::StorageApi
        }
        pub fn hasher_bn254(&self) -> hasher_bn254::storage::StorageApi {
            hasher_bn254::storage::StorageApi
        }
        pub fn asset_registry(&self) -> asset_registry::storage::StorageApi {
            asset_registry::storage::StorageApi
        }
        pub fn tokens(&self) -> tokens::storage::StorageApi {
            tokens::storage::StorageApi
        }
        pub fn token_wrapper(&self) -> token_wrapper::storage::StorageApi {
            token_wrapper::storage::StorageApi
        }
        pub fn token_wrapper_handler(
            &self,
        ) -> token_wrapper_handler::storage::StorageApi {
            token_wrapper_handler::storage::StorageApi
        }
        pub fn mixer_verifier_bn254(
            &self,
        ) -> mixer_verifier_bn254::storage::StorageApi {
            mixer_verifier_bn254::storage::StorageApi
        }
        pub fn v_anchor_verifier(
            &self,
        ) -> v_anchor_verifier::storage::StorageApi {
            v_anchor_verifier::storage::StorageApi
        }
        pub fn merkle_tree_bn254(
            &self,
        ) -> merkle_tree_bn254::storage::StorageApi {
            merkle_tree_bn254::storage::StorageApi
        }
        pub fn linkable_tree_bn254(
            &self,
        ) -> linkable_tree_bn254::storage::StorageApi {
            linkable_tree_bn254::storage::StorageApi
        }
        pub fn mixer_bn254(&self) -> mixer_bn254::storage::StorageApi {
            mixer_bn254::storage::StorageApi
        }
        pub fn v_anchor_bn254(&self) -> v_anchor_bn254::storage::StorageApi {
            v_anchor_bn254::storage::StorageApi
        }
        pub fn v_anchor_handler_bn254(
            &self,
        ) -> v_anchor_handler_bn254::storage::StorageApi {
            v_anchor_handler_bn254::storage::StorageApi
        }
        pub fn signature_bridge(
            &self,
        ) -> signature_bridge::storage::StorageApi {
            signature_bridge::storage::StorageApi
        }
        pub fn relayer_registry(
            &self,
        ) -> relayer_registry::storage::StorageApi {
            relayer_registry::storage::StorageApi
        }
        pub fn key_storage(&self) -> key_storage::storage::StorageApi {
            key_storage::storage::StorageApi
        }
    }
    pub struct TransactionApi;
    impl TransactionApi {
        pub fn system(&self) -> system::calls::TransactionApi {
            system::calls::TransactionApi
        }
        pub fn timestamp(&self) -> timestamp::calls::TransactionApi {
            timestamp::calls::TransactionApi
        }
        pub fn babe(&self) -> babe::calls::TransactionApi {
            babe::calls::TransactionApi
        }
        pub fn authorship(&self) -> authorship::calls::TransactionApi {
            authorship::calls::TransactionApi
        }
        pub fn indices(&self) -> indices::calls::TransactionApi {
            indices::calls::TransactionApi
        }
        pub fn balances(&self) -> balances::calls::TransactionApi {
            balances::calls::TransactionApi
        }
        pub fn election_provider_multi_phase(
            &self,
        ) -> election_provider_multi_phase::calls::TransactionApi {
            election_provider_multi_phase::calls::TransactionApi
        }
        pub fn staking(&self) -> staking::calls::TransactionApi {
            staking::calls::TransactionApi
        }
        pub fn session(&self) -> session::calls::TransactionApi {
            session::calls::TransactionApi
        }
        pub fn democracy(&self) -> democracy::calls::TransactionApi {
            democracy::calls::TransactionApi
        }
        pub fn council(&self) -> council::calls::TransactionApi {
            council::calls::TransactionApi
        }
        pub fn elections(&self) -> elections::calls::TransactionApi {
            elections::calls::TransactionApi
        }
        pub fn grandpa(&self) -> grandpa::calls::TransactionApi {
            grandpa::calls::TransactionApi
        }
        pub fn treasury(&self) -> treasury::calls::TransactionApi {
            treasury::calls::TransactionApi
        }
        pub fn utility(&self) -> utility::calls::TransactionApi {
            utility::calls::TransactionApi
        }
        pub fn multisig(&self) -> multisig::calls::TransactionApi {
            multisig::calls::TransactionApi
        }
        pub fn scheduler(&self) -> scheduler::calls::TransactionApi {
            scheduler::calls::TransactionApi
        }
        pub fn preimage(&self) -> preimage::calls::TransactionApi {
            preimage::calls::TransactionApi
        }
        pub fn proxy(&self) -> proxy::calls::TransactionApi {
            proxy::calls::TransactionApi
        }
        pub fn assets(&self) -> assets::calls::TransactionApi {
            assets::calls::TransactionApi
        }
        pub fn sudo(&self) -> sudo::calls::TransactionApi {
            sudo::calls::TransactionApi
        }
        pub fn im_online(&self) -> im_online::calls::TransactionApi {
            im_online::calls::TransactionApi
        }
        pub fn bounties(&self) -> bounties::calls::TransactionApi {
            bounties::calls::TransactionApi
        }
        pub fn child_bounties(&self) -> child_bounties::calls::TransactionApi {
            child_bounties::calls::TransactionApi
        }
        pub fn bags_list(&self) -> bags_list::calls::TransactionApi {
            bags_list::calls::TransactionApi
        }
        pub fn nomination_pools(
            &self,
        ) -> nomination_pools::calls::TransactionApi {
            nomination_pools::calls::TransactionApi
        }
        pub fn hasher_bn254(&self) -> hasher_bn254::calls::TransactionApi {
            hasher_bn254::calls::TransactionApi
        }
        pub fn asset_registry(&self) -> asset_registry::calls::TransactionApi {
            asset_registry::calls::TransactionApi
        }
        pub fn currencies(&self) -> currencies::calls::TransactionApi {
            currencies::calls::TransactionApi
        }
        pub fn tokens(&self) -> tokens::calls::TransactionApi {
            tokens::calls::TransactionApi
        }
        pub fn token_wrapper(&self) -> token_wrapper::calls::TransactionApi {
            token_wrapper::calls::TransactionApi
        }
        pub fn token_wrapper_handler(
            &self,
        ) -> token_wrapper_handler::calls::TransactionApi {
            token_wrapper_handler::calls::TransactionApi
        }
        pub fn mixer_verifier_bn254(
            &self,
        ) -> mixer_verifier_bn254::calls::TransactionApi {
            mixer_verifier_bn254::calls::TransactionApi
        }
        pub fn v_anchor_verifier(
            &self,
        ) -> v_anchor_verifier::calls::TransactionApi {
            v_anchor_verifier::calls::TransactionApi
        }
        pub fn merkle_tree_bn254(
            &self,
        ) -> merkle_tree_bn254::calls::TransactionApi {
            merkle_tree_bn254::calls::TransactionApi
        }
        pub fn linkable_tree_bn254(
            &self,
        ) -> linkable_tree_bn254::calls::TransactionApi {
            linkable_tree_bn254::calls::TransactionApi
        }
        pub fn mixer_bn254(&self) -> mixer_bn254::calls::TransactionApi {
            mixer_bn254::calls::TransactionApi
        }
        pub fn v_anchor_bn254(&self) -> v_anchor_bn254::calls::TransactionApi {
            v_anchor_bn254::calls::TransactionApi
        }
        pub fn v_anchor_handler_bn254(
            &self,
        ) -> v_anchor_handler_bn254::calls::TransactionApi {
            v_anchor_handler_bn254::calls::TransactionApi
        }
        pub fn signature_bridge(
            &self,
        ) -> signature_bridge::calls::TransactionApi {
            signature_bridge::calls::TransactionApi
        }
        pub fn relayer_registry(
            &self,
        ) -> relayer_registry::calls::TransactionApi {
            relayer_registry::calls::TransactionApi
        }
        pub fn key_storage(&self) -> key_storage::calls::TransactionApi {
            key_storage::calls::TransactionApi
        }
    }
    #[doc = r" check whether the Client you are using is aligned with the statically generated codegen."]
    pub fn validate_codegen<
        T: ::subxt::Config,
        C: ::subxt::client::OfflineClientT<T>,
    >(
        client: &C,
    ) -> Result<(), ::subxt::error::MetadataError> {
        let runtime_metadata_hash = client.metadata().metadata_hash(&PALLETS);
        if runtime_metadata_hash
            != [
                47u8, 197u8, 243u8, 222u8, 38u8, 178u8, 37u8, 34u8, 172u8,
                119u8, 150u8, 125u8, 176u8, 35u8, 247u8, 127u8, 109u8, 42u8,
                22u8, 247u8, 54u8, 193u8, 233u8, 124u8, 245u8, 253u8, 207u8,
                62u8, 241u8, 127u8, 225u8, 133u8,
            ]
        {
            Err(::subxt::error::MetadataError::IncompatibleMetadata)
        } else {
            Ok(())
        }
    }
}
