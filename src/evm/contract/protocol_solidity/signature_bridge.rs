pub use signature_bridge_contract::*;
#[doc = r" This module was auto-generated with ethers-rs Abigen."]
#[doc = r" More information at: <https://github.com/gakonst/ethers-rs>"]
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types
)]
pub mod signature_bridge_contract {
    # [rustfmt :: skip] const __ABI : & str = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialGovernor\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint32\",\"name\":\"nonce\",\"type\":\"uint32\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"GovernanceOwnershipTransferred\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"Paused\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recovered\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"RecoveredAddress\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"Unpaused\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"EVM_CHAIN_ID_TYPE\",\"outputs\":[{\"internalType\":\"bytes2\",\"name\":\"\",\"type\":\"bytes2\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"_resourceIDToHandlerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\",\"components\":[]},{\"internalType\":\"bytes4\",\"name\":\"functionSig\",\"type\":\"bytes4\",\"components\":[]},{\"internalType\":\"uint32\",\"name\":\"nonce\",\"type\":\"uint32\",\"components\":[]},{\"internalType\":\"bytes32\",\"name\":\"newResourceID\",\"type\":\"bytes32\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"handlerAddress\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"adminSetResourceWithSignature\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"averageSessionLengthInMillisecs\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\",\"components\":[]},{\"internalType\":\"bytes[]\",\"name\":\"sig\",\"type\":\"bytes[]\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"batchExecuteProposalWithSignature\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"currentVotingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"executeProposalWithSignature\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getChainIdType\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getProposalNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"isCorrectExecutionChain\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"resourceId\",\"type\":\"bytes32\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"isCorrectExecutionContext\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"isGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"isSignatureFromGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"lastGovernorUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"numOfProposers\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_resourceId\",\"type\":\"bytes32\",\"components\":[]}],\"stateMutability\":\"pure\",\"type\":\"function\",\"name\":\"parseChainIdFromResourceId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"proposalNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"proposerSetRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"proposerSetUpdateNonce\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\",\"components\":[]}],\"stateMutability\":\"pure\",\"type\":\"function\",\"name\":\"recover\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"refreshNonce\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"renounceOwnership\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"sessionLengthMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint32\",\"name\":\"nonce\",\"type\":\"uint32\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"transferOwnership\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\",\"components\":[]},{\"internalType\":\"uint32\",\"name\":\"nonce\",\"type\":\"uint32\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"transferOwnershipWithSignaturePubKey\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_proposerSetRoot\",\"type\":\"bytes32\",\"components\":[]},{\"internalType\":\"uint64\",\"name\":\"_averageSessionLengthInMillisecs\",\"type\":\"uint64\",\"components\":[]},{\"internalType\":\"uint32\",\"name\":\"_numOfProposers\",\"type\":\"uint32\",\"components\":[]},{\"internalType\":\"uint32\",\"name\":\"_proposerSetUpdateNonce\",\"type\":\"uint32\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"_sig\",\"type\":\"bytes\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"updateProposerSetData\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"struct Governable.Vote\",\"name\":\"vote\",\"type\":\"tuple\",\"components\":[{\"internalType\":\"uint32\",\"name\":\"leafIndex\",\"type\":\"uint32\",\"components\":[]},{\"internalType\":\"bytes32[]\",\"name\":\"siblingPathNodes\",\"type\":\"bytes32[]\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"proposedGovernor\",\"type\":\"address\",\"components\":[]}]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"voteInFavorForceSetGovernor\",\"outputs\":[]}]" ;
    #[doc = "The parsed JSON ABI of the contract."]
    pub static SIGNATUREBRIDGECONTRACT_ABI: ::ethers::contract::Lazy<
        ::ethers::core::abi::Abi,
    > = ::ethers::contract::Lazy::new(|| {
        ::ethers::core::utils::__serde_json::from_str(__ABI)
            .expect("ABI is always valid")
    });
    # [rustfmt :: skip] const __BYTECODE : & [u8] = & [96 , 128 , 96 , 64 , 82 , 96 , 0 , 128 , 84 , 96 , 1 , 96 , 168 , 27 , 96 , 1 , 96 , 232 , 27 , 3 , 25 , 22 , 129 , 85 , 96 , 2 , 128 , 84 , 96 , 1 , 96 , 1 , 96 , 64 , 27 , 3 , 25 , 22 , 96 , 1 , 96 , 1 , 96 , 64 , 27 , 3 , 23 , 129 , 85 , 96 , 3 , 85 , 96 , 5 , 85 , 52 , 128 , 21 , 98 , 0 , 0 , 67 , 87 , 96 , 0 , 128 , 253 , 91 , 80 , 96 , 64 , 81 , 98 , 0 , 36 , 23 , 56 , 3 , 128 , 98 , 0 , 36 , 23 , 131 , 57 , 129 , 1 , 96 , 64 , 129 , 144 , 82 , 98 , 0 , 0 , 102 , 145 , 98 , 0 , 0 , 229 , 86 , 91 , 96 , 0 , 128 , 84 , 96 , 1 , 96 , 1 , 96 , 200 , 27 , 3 , 25 , 22 , 97 , 1 , 0 , 96 , 1 , 96 , 1 , 96 , 160 , 27 , 3 , 133 , 129 , 22 , 130 , 2 , 99 , 255 , 255 , 255 , 255 , 96 , 168 , 27 , 25 , 22 , 146 , 144 , 146 , 23 , 96 , 1 , 96 , 168 , 27 , 99 , 255 , 255 , 255 , 255 , 134 , 22 , 2 , 23 , 128 , 132 , 85 , 66 , 96 , 8 , 85 , 96 , 64 , 81 , 134 , 148 , 134 , 148 , 147 , 144 , 146 , 4 , 144 , 146 , 22 , 145 , 127 , 31 , 50 , 52 , 137 , 244 , 4 , 227 , 186 , 215 , 98 , 33 , 95 , 192 , 84 , 71 , 249 , 167 , 123 , 183 , 243 , 182 , 48 , 166 , 240 , 138 , 40 , 81 , 185 , 153 , 219 , 65 , 247 , 144 , 130 , 144 , 163 , 80 , 80 , 80 , 80 , 98 , 0 , 1 , 55 , 86 , 91 , 96 , 0 , 128 , 96 , 64 , 131 , 133 , 3 , 18 , 21 , 98 , 0 , 0 , 249 , 87 , 96 , 0 , 128 , 253 , 91 , 130 , 81 , 96 , 1 , 96 , 1 , 96 , 160 , 27 , 3 , 129 , 22 , 129 , 20 , 98 , 0 , 1 , 17 , 87 , 96 , 0 , 128 , 253 , 91 , 96 , 32 , 132 , 1 , 81 , 144 , 146 , 80 , 99 , 255 , 255 , 255 , 255 , 129 , 22 , 129 , 20 , 98 , 0 , 1 , 44 , 87 , 96 , 0 , 128 , 253 , 91 , 128 , 145 , 80 , 80 , 146 , 80 , 146 , 144 , 80 , 86 , 91 , 97 , 34 , 208 , 128 , 98 , 0 , 1 , 71 , 96 , 0 , 57 , 96 , 0 , 243 , 254 , 96 , 128 , 96 , 64 , 82 , 52 , 128 , 21 , 97 , 0 , 16 , 87 , 96 , 0 , 128 , 253 , 91 , 80 , 96 , 4 , 54 , 16 , 97 , 1 , 218 , 87 , 96 , 0 , 53 , 96 , 224 , 28 , 128 , 99 , 135 , 85 , 188 , 173 , 17 , 97 , 1 , 4 , 87 , 128 , 99 , 189 , 250 , 220 , 132 , 17 , 97 , 0 , 162 , 87 , 128 , 99 , 204 , 60 , 116 , 161 , 17 , 97 , 0 , 113 , 87 , 128 , 99 , 204 , 60 , 116 , 161 , 20 , 97 , 4 , 30 , 87 , 128 , 99 , 216 , 198 , 45 , 176 , 20 , 97 , 4 , 39 , 87 , 128 , 99 , 243 , 210 , 61 , 84 , 20 , 97 , 4 , 58 , 87 , 128 , 99 , 245 , 252 , 61 , 107 , 20 , 97 , 4 , 77 , 87 , 96 , 0 , 128 , 253 , 91 , 128 , 99 , 189 , 250 , 220 , 132 , 20 , 97 , 3 , 219 , 87 , 128 , 99 , 194 , 35 , 13 , 110 , 20 , 97 , 3 , 228 , 87 , 128 , 99 , 197 , 235 , 107 , 31 , 20 , 97 , 3 , 253 , 87 , 128 , 99 , 199 , 175 , 51 , 82 , 20 , 97 , 4 , 6 , 87 , 96 , 0 , 128 , 253 , 91 , 128 , 99 , 157 , 43 , 30 , 215 , 17 , 97 , 0 , 222 , 87 , 128 , 99 , 157 , 43 , 30 , 215 , 20 , 97 , 3 , 156 , 87 , 128 , 99 , 158 , 9 , 88 , 60 , 20 , 97 , 3 , 175 , 87 , 128 , 99 , 166 , 233 , 76 , 145 , 20 , 97 , 3 , 184 , 87 , 128 , 99 , 186 , 193 , 99 , 162 , 20 , 97 , 3 , 203 , 87 , 96 , 0 , 128 , 253 , 91 , 128 , 99 , 135 , 85 , 188 , 173 , 20 , 97 , 3 , 78 , 87 , 128 , 99 , 139 , 126 , 135 , 130 , 20 , 97 , 3 , 97 , 87 , 128 , 99 , 147 , 89 , 103 , 0 , 20 , 97 , 3 , 133 , 87 , 96 , 0 , 128 , 253 , 91 , 128 , 99 , 58 , 4 , 158 , 2 , 17 , 97 , 1 , 124 , 87 , 128 , 99 , 113 , 80 , 24 , 166 , 17 , 97 , 1 , 75 , 87 , 128 , 99 , 113 , 80 , 24 , 166 , 20 , 97 , 2 , 247 , 87 , 128 , 99 , 114 , 150 , 181 , 216 , 20 , 97 , 2 , 255 , 87 , 128 , 99 , 131 , 11 , 47 , 87 , 20 , 97 , 3 , 18 , 87 , 128 , 99 , 132 , 219 , 128 , 159 , 20 , 97 , 3 , 37 , 87 , 96 , 0 , 128 , 253 , 91 , 128 , 99 , 58 , 4 , 158 , 2 , 20 , 97 , 2 , 165 , 87 , 128 , 99 , 76 , 131 , 12 , 189 , 20 , 97 , 2 , 174 , 87 , 128 , 99 , 92 , 151 , 90 , 187 , 20 , 97 , 2 , 205 , 87 , 128 , 99 , 98 , 69 , 229 , 97 , 20 , 97 , 2 , 228 , 87 , 96 , 0 , 128 , 253 , 91 , 128 , 99 , 19 , 203 , 1 , 249 , 17 , 97 , 1 , 184 , 87 , 128 , 99 , 19 , 203 , 1 , 249 , 20 , 97 , 2 , 75 , 87 , 128 , 99 , 30 , 209 , 61 , 27 , 20 , 97 , 2 , 119 , 87 , 128 , 99 , 36 , 17 , 136 , 4 , 20 , 97 , 2 , 138 , 87 , 128 , 99 , 52 , 8 , 228 , 112 , 20 , 97 , 2 , 159 , 87 , 96 , 0 , 128 , 253 , 91 , 128 , 99 , 1 , 103 , 55 , 187 , 20 , 97 , 1 , 223 , 87 , 128 , 99 , 11 , 39 , 251 , 154 , 20 , 97 , 2 , 15 , 87 , 128 , 99 , 12 , 52 , 10 , 36 , 20 , 97 , 2 , 33 , 87 , 91 , 96 , 0 , 128 , 253 , 91 , 96 , 2 , 84 , 97 , 1 , 242 , 144 , 96 , 1 , 96 , 1 , 96 , 64 , 27 , 3 , 22 , 129 , 86 , 91 , 96 , 64 , 81 , 96 , 1 , 96 , 1 , 96 , 64 , 27 , 3 , 144 , 145 , 22 , 129 , 82 , 96 , 32 , 1 , 91 , 96 , 64 , 81 , 128 , 145 , 3 , 144 , 243 , 91 , 96 , 9 , 84 , 91 , 96 , 64 , 81 , 144 , 129 , 82 , 96 , 32 , 1 , 97 , 2 , 6 , 86 , 91 , 96 , 0 , 84 , 97 , 1 , 0 , 144 , 4 , 96 , 1 , 96 , 1 , 96 , 160 , 27 , 3 , 22 , 91 , 96 , 64 , 81 , 96 , 1 , 96 , 1 , 96 , 160 , 27 , 3 , 144 , 145 , 22 , 129 , 82 , 96 , 32 , 1 , 97 , 2 , 6 , 86 , 91 , 96 , 0 , 84 , 97 , 2 , 98 , 144 , 96 , 1 , 96 , 168 , 27 , 144 , 4 , 99 , 255 , 255 , 255 , 255 , 22 , 129 , 86 , 91 , 96 , 64 , 81 , 99 , 255 , 255 , 255 , 255 , 144 , 145 , 22 , 129 , 82 , 96 , 32 , 1 , 97 , 2 , 6 , 86 , 91 , 97 , 2 , 51 , 97 , 2 , 133 , 54 , 96 , 4 , 97 , 28 , 196 , 86 , 91 , 97 , 4 , 108 , 86 , 91 , 97 , 2 , 157 , 97 , 2 , 152 , 54 , 96 , 4 , 97 , 29 , 131 , 86 , 91 , 97 , 4 , 140 , 86 , 91 , 0 , 91 , 70 , 97 , 2 , 19 , 86 , 91 , 97 , 2 , 19 , 96 , 5 , 84 , 129 , 86 , 91 , 97 , 2 , 182 , 97 , 6 , 101 , 86 , 91 , 96 , 64 , 81 , 101 , 255 , 255 , 255 , 255 , 255 , 255 , 144 , 145 , 22 , 129 , 82 , 96 , 32 , 1 , 97 , 2 , 6 , 86 , 91 , 96 , 0 , 84 , 96 , 255 , 22 , 91 , 96 , 64 , 81 , 144 , 21 , 21 , 129 , 82 , 96 , 32 , 1 , 97 , 2 , 6 , 86 , 91 , 97 , 2 , 157 , 97 , 2 , 242 , 54 , 96 , 4 , 97 , 27 , 40 , 86 , 91 , 97 , 6 , 179 , 86 , 91 , 97 , 2 , 157 , 97 , 11 , 54 , 86 , 91 , 97 , 2 , 157 , 97 , 3 , 13 , 54 , 96 , 4 , 97 , 29 , 39 , 86 , 91 , 97 , 11 , 180 , 86 , 91 , 97 , 2 , 212 , 97 , 3 , 32 , 54 , 96 , 4 , 97 , 27 , 15 , 86 , 91 , 97 , 13 , 4 , 86 , 91 , 97 , 2 , 51 , 97 , 3 , 51 , 54 , 96 , 4 , 97 , 27 , 15 , 86 , 91 , 96 , 10 , 96 , 32 , 82 , 96 , 0 , 144 , 129 , 82 , 96 , 64 , 144 , 32 , 84 , 96 , 1 , 96 , 1 , 96 , 160 , 27 , 3 , 22 , 129 , 86 , 91 , 97 , 2 , 212 , 97 , 3 , 92 , 54 , 96 , 4 , 97 , 28 , 196 , 86 , 91 , 97 , 13 , 40 , 86 , 91 , 97 , 3 , 108 , 96 , 1 , 96 , 248 , 27 , 129 , 86 , 91 , 96 , 64 , 81 , 96 , 1 , 96 , 1 , 96 , 240 , 27 , 3 , 25 , 144 , 145 , 22 , 129 , 82 , 96 , 32 , 1 , 97 , 2 , 6 , 86 , 91 , 96 , 0 , 84 , 97 , 2 , 98 , 144 , 96 , 1 , 96 , 200 , 27 , 144 , 4 , 99 , 255 , 255 , 255 , 255 , 22 , 129 , 86 , 91 , 97 , 2 , 157 , 97 , 3 , 170 , 54 , 96 , 4 , 97 , 28 , 59 , 86 , 91 , 97 , 13 , 92 , 86 , 91 , 97 , 2 , 19 , 96 , 8 , 84 , 129 , 86 , 91 , 97 , 2 , 157 , 97 , 3 , 198 , 54 , 96 , 4 , 97 , 26 , 9 , 86 , 91 , 97 , 15 , 37 , 86 , 91 , 96 , 4 , 84 , 97 , 2 , 98 , 144 , 99 , 255 , 255 , 255 , 255 , 22 , 129 , 86 , 91 , 97 , 2 , 19 , 96 , 3 , 84 , 129 , 86 , 91 , 97 , 1 , 242 , 97 , 3 , 242 , 54 , 96 , 4 , 97 , 27 , 15 , 86 , 91 , 101 , 255 , 255 , 255 , 255 , 255 , 255 , 22 , 144 , 86 , 91 , 97 , 2 , 19 , 96 , 1 , 84 , 129 , 86 , 91 , 96 , 0 , 84 , 97 , 1 , 0 , 144 , 4 , 96 , 1 , 96 , 1 , 96 , 160 , 27 , 3 , 22 , 51 , 20 , 97 , 2 , 212 , 86 , 91 , 97 , 2 , 19 , 96 , 9 , 84 , 129 , 86 , 91 , 97 , 2 , 157 , 97 , 4 , 53 , 54 , 96 , 4 , 97 , 26 , 60 , 86 , 91 , 97 , 15 , 132 , 86 , 91 , 97 , 2 , 157 , 97 , 4 , 72 , 54 , 96 , 4 , 97 , 27 , 183 , 86 , 91 , 97 , 18 , 65 , 86 , 91 , 97 , 2 , 212 , 97 , 4 , 91 , 54 , 96 , 4 , 97 , 27 , 15 , 86 , 91 , 96 , 48 , 28 , 96 , 1 , 96 , 1 , 96 , 160 , 27 , 3 , 22 , 48 , 20 , 144 , 86 , 91 , 129 , 81 , 96 , 32 , 131 , 1 , 32 , 96 , 0 , 144 , 129 , 97 , 4 , 129 , 130 , 133 , 97 , 20 , 0 , 86 , 91 , 146 , 80 , 80 , 80 , 91 , 146 , 145 , 80 , 80 , 86 , 91 , 96 , 2 , 84 , 97 , 4 , 165 , 144 , 97 , 3 , 232 , 144 , 96 , 1 , 96 , 1 , 96 , 64 , 27 , 3 , 22 , 97 , 33 , 51 , 86 , 91 , 96 , 1 , 96 , 1 , 96 , 64 , 27 , 3 , 22 , 96 , 3 , 84 , 97 , 4 , 187 , 145 , 144 , 97 , 33 , 77 , 86 , 91 , 96 , 8 , 84 , 97 , 4 , 200 , 145 , 144 , 97 , 32 , 208 , 86 , 91 , 66 , 16 , 21 , 97 , 5 , 20 , 87 , 96 , 64 , 81 , 98 , 70 , 27 , 205 , 96 , 229 , 27 , 129 , 82 , 96 , 32 , 96 , 4 , 130 , 1 , 82 , 96 , 21 , 96 , 36 , 130 , 1 , 82 , 116 , 73 , 110 , 118 , 97 , 108 , 105 , 100 , 32 , 116 , 105 , 109 , 101 , 32 , 102 , 111 , 114 , 32 , 118 , 111 , 116 , 101 , 96 , 88 , 27 , 96 , 68 , 130 , 1 , 82 , 96 , 100 , 1 , 91 , 96 , 64 , 81 , 128 , 145 , 3 , 144 , 253 , 91 , 96 , 32 , 129 , 1 , 81 , 129 , 81 , 51 , 145 , 97 , 5 , 40 , 145 , 131 , 144 , 97 , 20 , 36 , 86 , 91 , 97 , 5 , 107 , 87 , 96 , 64 , 81 , 98 , 70 , 27 , 205 , 96 , 229 , 27 , 129 , 82 , 96 , 32 , 96 , 4 , 130 , 1 , 82 , 96 , 20 , 96 , 36 , 130 , 1 , 82 , 115 , 52 , 183 , 59 , 48 , 182 , 52 , 178 , 16 , 54 , 178 , 185 , 53 , 182 , 50 , 144 , 56 , 57 , 55 , 183 , 179 , 96 , 97 , 27 , 96 , 68 , 130 , 1 , 82 , 96 , 100 , 1 , 97 , 5 , 11 , 86 , 91 , 96 , 5 , 84 , 96 , 0 , 144 , 129 , 82 , 96 , 6 , 96 , 32 , 144 , 129 , 82 , 96 , 64 , 128 , 131 , 32 , 96 , 1 , 96 , 1 , 96 , 160 , 27 , 3 , 133 , 22 , 132 , 82 , 144 , 145 , 82 , 144 , 32 , 84 , 96 , 255 , 22 , 21 , 97 , 5 , 209 , 87 , 96 , 64 , 81 , 98 , 70 , 27 , 205 , 96 , 229 , 27 , 129 , 82 , 96 , 32 , 96 , 4 , 130 , 1 , 82 , 96 , 13 , 96 , 36 , 130 , 1 , 82 , 108 , 24 , 91 , 28 , 153 , 88 , 89 , 30 , 72 , 29 , 155 , 221 , 25 , 89 , 96 , 154 , 27 , 96 , 68 , 130 , 1 , 82 , 96 , 100 , 1 , 97 , 5 , 11 , 86 , 91 , 96 , 5 , 128 , 84 , 96 , 0 , 144 , 129 , 82 , 96 , 6 , 96 , 32 , 144 , 129 , 82 , 96 , 64 , 128 , 131 , 32 , 96 , 1 , 96 , 1 , 96 , 160 , 27 , 3 , 128 , 135 , 22 , 133 , 82 , 144 , 131 , 82 , 129 , 132 , 32 , 128 , 84 , 96 , 255 , 25 , 22 , 96 , 1 , 144 , 129 , 23 , 144 , 145 , 85 , 148 , 84 , 132 , 82 , 96 , 7 , 131 , 82 , 129 , 132 , 32 , 135 , 131 , 1 , 81 , 144 , 145 , 22 , 132 , 82 , 144 , 145 , 82 , 129 , 32 , 128 , 84 , 144 , 145 , 144 , 97 , 6 , 54 , 144 , 132 , 144 , 99 , 255 , 255 , 255 , 255 , 22 , 97 , 32 , 232 , 86 , 91 , 146 , 80 , 97 , 1 , 0 , 10 , 129 , 84 , 129 , 99 , 255 , 255 , 255 , 255 , 2 , 25 , 22 , 144 , 131 , 99 , 255 , 255 , 255 , 255 , 22 , 2 , 23 , 144 , 85 , 80 , 97 , 6 , 97 , 130 , 96 , 64 , 1 , 81 , 97 , 21 , 92 , 86 , 91 , 80 , 80 , 86 , 91 , 96 , 64 , 128 , 81 , 96 , 1 , 96 , 248 , 27 , 96 , 32 , 130 , 1 , 129 , 144 , 82 , 70 , 96 , 224 , 27 , 96 , 1 , 96 , 1 , 96 , 224 , 27 , 3 , 25 , 129 , 22 , 96 , 34 , 132 , 1 , 82 , 131 , 81 , 128 , 132 , 3 , 96 , 6 , 1 , 129 , 82 , 96 , 38 , 144 , 147 , 1 , 144 , 147 , 82 , 96 , 0 , 146 , 145 , 97 , 6 , 168 , 129 , 97 , 33 , 151 , 86 , 91 , 96 , 208 , 28 , 147 , 80 , 80 , 80 , 80 , 144 , 86 , 91 , 131 , 99 , 255 , 255 , 255 , 255 , 22 , 128 , 96 , 9 , 84 , 16 , 97 , 7 , 23 , 87 , 96 , 64 , 81 , 98 , 70 , 27 , 205 , 96 , 229 , 27 , 129 , 82 , 96 , 32 , 96 , 4 , 130 , 1 , 82 , 96 , 35 , 96 , 36 , 130 , 1 , 82 , 127 , 80 , 114 , 111 , 112 , 111 , 115 , 97 , 108 , 78 , 111 , 110 , 99 , 101 , 84 , 114 , 97 , 99 , 107 , 101 , 114 , 58 , 32 , 73 , 110 , 118 , 97 , 108 , 105 , 100 , 32 , 110 , 111 , 96 , 68 , 130 , 1 , 82 , 98 , 110 , 99 , 101 , 96 , 232 , 27 , 96 , 100 , 130 , 1 , 82 , 96 , 132 , 1 , 97 , 5 , 11 , 86 , 91 , 96 , 9 , 84 , 97 , 7 , 37 , 144 , 96 , 1 , 97 , 32 , 208 , 86 , 91 , 129 , 17 , 21 , 97 , 7 , 154 , 87 , 96 , 64 , 81 , 98 , 70 , 27 , 205 , 96 , 229 , 27 , 129 , 82 , 96 , 32 , 96 , 4 , 130 , 1 , 82 , 96 , 58 , 96 , 36 , 130 , 1 , 82 , 127 , 80 , 114 , 111 , 112 , 111 , 115 , 97 , 108 , 78 , 111 , 110 , 99 , 101 , 84 , 114 , 97 , 99 , 107 , 101 , 114 , 58 , 32 , 78 , 111 , 110 , 99 , 101 , 32 , 109 , 117 , 115 , 116 , 96 , 68 , 130 , 1 , 82 , 127 , 32 , 110 , 111 , 116 , 32 , 105 , 110 , 99 , 114 , 101 , 109 , 101 , 110 , 116 , 32 , 109 , 111 , 114 , 101 , 32 , 116 , 104 , 97 , 110 , 32 , 49 , 0 , 0 , 0 , 0 , 0 , 0 , 96 , 100 , 130 , 1 , 82 , 96 , 132 , 1 , 97 , 5 , 11 , 86 , 91 , 96 , 9 , 129 , 144 , 85 , 96 , 64 , 128 , 81 , 96 , 32 , 129 , 1 , 137 , 144 , 82 , 96 , 1 , 96 , 1 , 96 , 224 , 27 , 3 , 25 , 136 , 129 , 22 , 130 , 132 , 1 , 82 , 96 , 224 , 136 , 144 , 27 , 22 , 96 , 68 , 130 , 1 , 82 , 96 , 72 , 129 , 1 , 134 , 144 , 82 , 96 , 96 , 133 , 144 , 27 , 107 , 255 , 255 , 255 , 255 , 255 , 255 , 255 , 255 , 255 , 255 , 255 , 255 , 25 , 22 , 96 , 104 , 130 , 1 , 82 , 129 , 81 , 96 , 92 , 129 , 131 , 3 , 1 , 129 , 82 , 96 , 124 , 144 , 145 , 1 , 144 , 145 , 82 , 130 , 97 , 8 , 2 , 130 , 130 , 97 , 13 , 40 , 86 , 91 , 97 , 8 , 30 , 87 , 96 , 64 , 81 , 98 , 70 , 27 , 205 , 96 , 229 , 27 , 129 , 82 , 96 , 4 , 1 , 97 , 5 , 11 , 144 , 97 , 31 , 153 , 86 , 91 , 96 , 64 , 81 , 99 , 131 , 11 , 47 , 87 , 96 , 224 , 27 , 129 , 82 , 96 , 4 , 129 , 1 , 138 , 144 , 82 , 48 , 144 , 99 , 131 , 11 , 47 , 87 , 144 , 96 , 36 , 1 , 96 , 32 , 96 , 64 , 81 , 128 , 131 , 3 , 129 , 134 , 128 , 59 , 21 , 128 , 21 , 97 , 8 , 85 , 87 , 96 , 0 , 128 , 253 , 91 , 80 , 90 , 250 , 21 , 128 , 21 , 97 , 8 , 105 , 87 , 61 , 96 , 0 , 128 , 62 , 61 , 96 , 0 , 253 , 91 , 80 , 80 , 80 , 80 , 96 , 64 , 81 , 61 , 96 , 31 , 25 , 96 , 31 , 130 , 1 , 22 , 130 , 1 , 128 , 96 , 64 , 82 , 80 , 129 , 1 , 144 , 97 , 8 , 141 , 145 , 144 , 97 , 26 , 230 , 86 , 91 , 97 , 8 , 169 , 87 , 96 , 64 , 81 , 98 , 70 , 27 , 205 , 96 , 229 , 27 , 129 , 82 , 96 , 4 , 1 , 97 , 5 , 11 , 144 , 97 , 31 , 60 , 86 , 91 , 96 , 64 , 81 , 99 , 131 , 11 , 47 , 87 , 96 , 224 , 27 , 129 , 82 , 96 , 4 , 129 , 1 , 135 , 144 , 82 , 48 , 144 , 99 , 131 , 11 , 47 , 87 , 144 , 96 , 36 , 1 , 96 , 32 , 96 , 64 , 81 , 128 , 131 , 3 , 129 , 134 , 128 , 59 , 21 , 128 , 21 , 97 , 8 , 224 , 87 , 96 , 0 , 128 , 253 , 91 , 80 , 90 , 250 , 21 , 128 , 21 , 97 , 8 , 244 , 87 , 61 , 96 , 0 , 128 , 62 , 61 , 96 , 0 , 253 , 91 , 80 , 80 , 80 , 80 , 96 , 64 , 81 , 61 , 96 , 31 , 25 , 96 , 31 , 130 , 1 , 22 , 130 , 1 , 128 , 96 , 64 , 82 , 80 , 129 , 1 , 144 , 97 , 9 , 24 , 145 , 144 , 97 , 26 , 230 , 86 , 91 , 97 , 9 , 52 , 87 , 96 , 64 , 81 , 98 , 70 , 27 , 205 , 96 , 229 , 27 , 129 , 82 , 96 , 4 , 1 , 97 , 5 , 11 , 144 , 97 , 31 , 60 , 86 , 91 , 96 , 64 , 81 , 99 , 245 , 252 , 61 , 107 , 96 , 224 , 27 , 129 , 82 , 96 , 4 , 129 , 1 , 138 , 144 , 82 , 48 , 144 , 99 , 245 , 252 , 61 , 107 , 144 , 96 , 36 , 1 , 96 , 32 , 96 , 64 , 81 , 128 , 131 , 3 , 129 , 134 , 128 , 59 , 21 , 128 , 21 , 97 , 9 , 107 , 87 , 96 , 0 , 128 , 253 , 91 , 80 , 90 , 250 , 21 , 128 , 21 , 97 , 9 , 127 , 87 , 61 , 96 , 0 , 128 , 62 , 61 , 96 , 0 , 253 , 91 , 80 , 80 , 80 , 80 , 96 , 64 , 81 , 61 , 96 , 31 , 25 , 96 , 31 , 130 , 1 , 22 , 130 , 1 , 128 , 96 , 64 , 82 , 80 , 129 , 1 , 144 , 97 , 9 , 163 , 145 , 144 , 97 , 26 , 230 , 86 , 91 , 97 , 10 , 21 , 87 , 96 , 64 , 81 , 98 , 70 , 27 , 205 , 96 , 229 , 27 , 129 , 82 , 96 , 32 , 96 , 4 , 130 , 1 , 82 , 96 , 56 , 96 , 36 , 130 , 1 , 82 , 127 , 97 , 100 , 109 , 105 , 110 , 83 , 101 , 116 , 82 , 101 , 115 , 111 , 117 , 114 , 99 , 101 , 87 , 105 , 116 , 104 , 83 , 105 , 103 , 110 , 97 , 116 , 117 , 114 , 101 , 58 , 32 , 73 , 96 , 68 , 130 , 1 , 82 , 127 , 110 , 118 , 97 , 108 , 105 , 100 , 32 , 101 , 120 , 101 , 99 , 117 , 116 , 105 , 111 , 110 , 32 , 99 , 111 , 110 , 116 , 101 , 120 , 116 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 96 , 100 , 130 , 1 , 82 , 96 , 132 , 1 , 97 , 5 , 11 , 86 , 91 , 96 , 1 , 96 , 1 , 96 , 224 , 27 , 3 , 25 , 136 , 22 , 99 , 98 , 69 , 229 , 97 , 96 , 224 , 27 , 20 , 97 , 10 , 155 , 87 , 96 , 64 , 81 , 98 , 70 , 27 , 205 , 96 , 229 , 27 , 129 , 82 , 96 , 32 , 96 , 4 , 130 , 1 , 82 , 96 , 57 , 96 , 36 , 130 , 1 , 82 , 127 , 97 , 100 , 109 , 105 , 110 , 83 , 101 , 116 , 82 , 101 , 115 , 111 , 117 , 114 , 99 , 101 , 87 , 105 , 116 , 104 , 83 , 105 , 103 , 110 , 97 , 116 , 117 , 114 , 101 , 58 , 32 , 73 , 96 , 68 , 130 , 1 , 82 , 127 , 110 , 118 , 97 , 108 , 105 , 100 , 32 , 102 , 117 , 110 , 99 , 116 , 105 , 111 , 110 , 32 , 115 , 105 , 103 , 110 , 97 , 116 , 117 , 114 , 101 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 96 , 100 , 130 , 1 , 82 , 96 , 132 , 1 , 97 , 5 , 11 , 86 , 91 , 96 , 0 , 134 , 129 , 82 , 96 , 10 , 96 , 32 , 82 , 96 , 64 , 144 , 129 , 144 , 32 , 128 , 84 , 96 , 1 , 96 , 1 , 96 , 160 , 27 , 3 , 25 , 22 , 96 , 1 , 96 , 1 , 96 , 160 , 27 , 3 , 136 , 129 , 22 , 145 , 130 , 23 , 144 , 146 , 85 , 145 , 81 , 99 , 92 , 125 , 27 , 155 , 96 , 225 , 27 , 129 , 82 , 96 , 4 , 129 , 1 , 137 , 144 , 82 , 96 , 48 , 137 , 144 , 28 , 144 , 145 , 22 , 96 , 36 , 130 , 1 , 129 , 144 , 82 , 135 , 146 , 144 , 145 , 99 , 184 , 250 , 55 , 54 , 144 , 96 , 68 , 1 , 96 , 0 , 96 , 64 , 81 , 128 , 131 , 3 , 129 , 96 , 0 , 135 , 128 , 59 , 21 , 128 , 21 , 97 , 11 , 17 , 87 , 96 , 0 , 128 , 253 , 91 , 80 , 90 , 241 , 21 , 128 , 21 , 97 , 11 , 37 , 87 , 61 , 96 , 0 , 128 , 62 , 61 , 96 , 0 , 253 , 91 , 80 , 80 , 80 , 80 , 80 , 80 , 80 , 80 , 80 , 80 , 80 , 80 , 80 , 80 , 80 , 86 , 91 , 96 , 0 , 84 , 97 , 1 , 0 , 144 , 4 , 96 , 1 , 96 , 1 , 96 , 160 , 27 , 3 , 22 , 51 , 20 , 97 , 11 , 101 , 87 , 96 , 64 , 81 , 98 , 70 , 27 , 205 , 96 , 229 , 27 , 129 , 82 , 96 , 4 , 1 , 97 , 5 , 11 , 144 , 97 , 30 , 246 , 86 , 91 , 96 , 0 , 128 , 84 , 96 , 64 , 81 , 97 , 1 , 0 , 144 , 145 , 4 , 96 , 1 , 96 , 1 , 96 , 160 , 27 , 3 , 22 , 144 , 127 , 31 , 50 , 52 , 137 , 244 , 4 , 227 , 186 , 215 , 98 , 33 , 95 , 192 , 84 , 71 , 249 , 167 , 123 , 183 , 243 , 182 , 48 , 166 , 240 , 138 , 40 , 81 , 185 , 153 , 219 , 65 , 247 , 144 , 131 , 144 , 163 , 96 , 0 , 128 , 84 , 97 , 1 , 0 , 96 , 1 , 96 , 168 , 27 , 3 , 25 , 22 , 144 , 85 , 86 , 91 , 96 , 0 , 84 , 99 , 255 , 255 , 255 , 255 , 128 , 132 , 22 , 96 , 1 , 96 , 168 , 27 , 144 , 146 , 4 , 22 , 16 , 97 , 12 , 5 , 87 , 96 , 64 , 81 , 98 , 70 , 27 , 205 , 96 , 229 , 27 , 129 , 82 , 96 , 32 , 96 , 4 , 130 , 1 , 82 , 96 , 13 , 96 , 36 , 130 , 1 , 82 , 108 , 73 , 110 , 118 , 97 , 108 , 105 , 100 , 32 , 110 , 111 , 110 , 99 , 101 , 96 , 152 , 27 , 96 , 68 , 130 , 1 , 82 , 96 , 100 , 1 , 97 , 5 , 11 , 86 , 91 , 96 , 0 , 84 , 97 , 12 , 32 , 144 , 96 , 1 , 96 , 168 , 27 , 144 , 4 , 99 , 255 , 255 , 255 , 255 , 22 , 96 , 1 , 97 , 32 , 232 , 86 , 91 , 99 , 255 , 255 , 255 , 255 , 22 , 130 , 99 , 255 , 255 , 255 , 255 , 22 , 17 , 21 , 97 , 12 , 123 , 87 , 96 , 64 , 81 , 98 , 70 , 27 , 205 , 96 , 229 , 27 , 129 , 82 , 96 , 32 , 96 , 4 , 130 , 1 , 82 , 96 , 25 , 96 , 36 , 130 , 1 , 82 , 127 , 78 , 111 , 110 , 99 , 101 , 32 , 109 , 117 , 115 , 116 , 32 , 105 , 110 , 99 , 114 , 101 , 109 , 101 , 110 , 116 , 32 , 98 , 121 , 32 , 49 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 96 , 68 , 130 , 1 , 82 , 96 , 100 , 1 , 97 , 5 , 11 , 86 , 91 , 130 , 81 , 96 , 32 , 128 , 133 , 1 , 145 , 144 , 145 , 32 , 96 , 64 , 81 , 144 , 145 , 130 , 145 , 97 , 12 , 180 , 145 , 97 , 12 , 159 , 145 , 135 , 145 , 137 , 145 , 1 , 97 , 30 , 108 , 86 , 91 , 96 , 64 , 81 , 96 , 32 , 129 , 131 , 3 , 3 , 129 , 82 , 144 , 96 , 64 , 82 , 132 , 97 , 13 , 40 , 86 , 91 , 97 , 12 , 208 , 87 , 96 , 64 , 81 , 98 , 70 , 27 , 205 , 96 , 229 , 27 , 129 , 82 , 96 , 4 , 1 , 97 , 5 , 11 , 144 , 97 , 30 , 246 , 86 , 91 , 97 , 12 , 217 , 129 , 97 , 21 , 179 , 86 , 91 , 80 , 80 , 96 , 0 , 128 , 84 , 99 , 255 , 255 , 255 , 255 , 144 , 147 , 22 , 96 , 1 , 96 , 168 , 27 , 2 , 99 , 255 , 255 , 255 , 255 , 96 , 168 , 27 , 25 , 144 , 147 , 22 , 146 , 144 , 146 , 23 , 144 , 145 , 85 , 80 , 80 , 86 , 91 , 96 , 0 , 101 , 255 , 255 , 255 , 255 , 255 , 255 , 130 , 22 , 128 , 97 , 13 , 24 , 97 , 6 , 101 , 86 , 91 , 101 , 255 , 255 , 255 , 255 , 255 , 255 , 22 , 20 , 147 , 146 , 80 , 80 , 80 , 86 , 91 , 129 , 81 , 96 , 32 , 131 , 1 , 32 , 96 , 0 , 144 , 129 , 97 , 13 , 61 , 130 , 133 , 97 , 20 , 0 , 86 , 91 , 96 , 0 , 84 , 97 , 1 , 0 , 144 , 4 , 96 , 1 , 96 , 1 , 96 , 160 , 27 , 3 , 144 , 129 , 22 , 145 , 22 , 20 , 149 , 148 , 80 , 80 , 80 , 80 , 80 , 86 , 91 , 130 , 130 , 128 , 128 , 96 , 31 , 1 , 96 , 32 , 128 , 145 , 4 , 2 , 96 , 32 , 1 , 96 , 64 , 81 , 144 , 129 , 1 , 96 , 64 , 82 , 128 , 147 , 146 , 145 , 144 , 129 , 129 , 82 , 96 , 32 , 1 , 131 , 131 , 128 , 130 , 132 , 55 , 96 , 0 , 146 , 1 , 145 , 144 , 145 , 82 , 80 , 132 , 146 , 80 , 97 , 13 , 160 , 145 , 80 , 131 , 144 , 80 , 130 , 97 , 13 , 40 , 86 , 91 , 97 , 13 , 188 , 87 , 96 , 64 , 81 , 98 , 70 , 27 , 205 , 96 , 229 , 27 , 129 , 82 , 96 , 4 , 1 , 97 , 5 , 11 , 144 , 97 , 31 , 153 , 86 , 91 , 96 , 0 , 97 , 13 , 203 , 96 , 32 , 130 , 135 , 137 , 97 , 32 , 166 , 86 , 91 , 97 , 13 , 212 , 145 , 97 , 33 , 121 , 86 , 91 , 96 , 64 , 81 , 99 , 131 , 11 , 47 , 87 , 96 , 224 , 27 , 129 , 82 , 96 , 4 , 129 , 1 , 130 , 144 , 82 , 144 , 145 , 80 , 48 , 144 , 99 , 131 , 11 , 47 , 87 , 144 , 96 , 36 , 1 , 96 , 32 , 96 , 64 , 81 , 128 , 131 , 3 , 129 , 134 , 128 , 59 , 21 , 128 , 21 , 97 , 14 , 14 , 87 , 96 , 0 , 128 , 253 , 91 , 80 , 90 , 250 , 21 , 128 , 21 , 97 , 14 , 34 , 87 , 61 , 96 , 0 , 128 , 62 , 61 , 96 , 0 , 253 , 91 , 80 , 80 , 80 , 80 , 96 , 64 , 81 , 61 , 96 , 31 , 25 , 96 , 31 , 130 , 1 , 22 , 130 , 1 , 128 , 96 , 64 , 82 , 80 , 129 , 1 , 144 , 97 , 14 , 70 , 145 , 144 , 97 , 26 , 230 , 86 , 91 , 97 , 14 , 164 , 87 , 96 , 64 , 81 , 98 , 70 , 27 , 205 , 96 , 229 , 27 , 129 , 82 , 96 , 32 , 96 , 4 , 130 , 1 , 82 , 96 , 41 , 96 , 36 , 130 , 1 , 82 , 127 , 83 , 105 , 103 , 110 , 97 , 116 , 117 , 114 , 101 , 66 , 114 , 105 , 100 , 103 , 101 , 58 , 32 , 69 , 120 , 101 , 99 , 117 , 116 , 105 , 110 , 103 , 32 , 111 , 110 , 32 , 119 , 114 , 96 , 68 , 130 , 1 , 82 , 104 , 55 , 183 , 51 , 144 , 49 , 180 , 48 , 180 , 183 , 96 , 185 , 27 , 96 , 100 , 130 , 1 , 82 , 96 , 132 , 1 , 97 , 5 , 11 , 86 , 91 , 96 , 0 , 129 , 129 , 82 , 96 , 10 , 96 , 32 , 82 , 96 , 64 , 144 , 129 , 144 , 32 , 84 , 144 , 81 , 99 , 113 , 36 , 103 , 249 , 96 , 225 , 27 , 129 , 82 , 96 , 1 , 96 , 1 , 96 , 160 , 27 , 3 , 144 , 145 , 22 , 144 , 129 , 144 , 129 , 144 , 99 , 226 , 72 , 207 , 242 , 144 , 97 , 14 , 233 , 144 , 134 , 144 , 140 , 144 , 140 , 144 , 96 , 4 , 1 , 97 , 30 , 192 , 86 , 91 , 96 , 0 , 96 , 64 , 81 , 128 , 131 , 3 , 129 , 96 , 0 , 135 , 128 , 59 , 21 , 128 , 21 , 97 , 15 , 3 , 87 , 96 , 0 , 128 , 253 , 91 , 80 , 90 , 241 , 21 , 128 , 21 , 97 , 15 , 23 , 87 , 61 , 96 , 0 , 128 , 62 , 61 , 96 , 0 , 253 , 91 , 80 , 80 , 80 , 80 , 80 , 80 , 80 , 80 , 80 , 80 , 80 , 80 , 86 , 91 , 96 , 0 , 84 , 97 , 1 , 0 , 144 , 4 , 96 , 1 , 96 , 1 , 96 , 160 , 27 , 3 , 22 , 51 , 20 , 97 , 15 , 84 , 87 , 96 , 64 , 81 , 98 , 70 , 27 , 205 , 96 , 229 , 27 , 129 , 82 , 96 , 4 , 1 , 97 , 5 , 11 , 144 , 97 , 30 , 246 , 86 , 91 , 97 , 15 , 93 , 130 , 97 , 21 , 179 , 86 , 91 , 96 , 0 , 128 , 84 , 99 , 255 , 255 , 255 , 255 , 144 , 146 , 22 , 96 , 1 , 96 , 168 , 27 , 2 , 99 , 255 , 255 , 255 , 255 , 96 , 168 , 27 , 25 , 144 , 146 , 22 , 145 , 144 , 145 , 23 , 144 , 85 , 80 , 86 , 91 , 97 , 15 , 142 , 130 , 132 , 97 , 33 , 108 , 86 , 91 , 129 , 128 , 81 , 130 , 81 , 20 , 97 , 15 , 249 , 87 , 96 , 64 , 81 , 98 , 70 , 27 , 205 , 96 , 229 , 27 , 129 , 82 , 96 , 32 , 96 , 4 , 130 , 1 , 82 , 96 , 48 , 96 , 36 , 130 , 1 , 82 , 127 , 83 , 105 , 103 , 110 , 97 , 116 , 117 , 114 , 101 , 66 , 114 , 105 , 100 , 103 , 101 , 58 , 32 , 68 , 97 , 116 , 97 , 32 , 97 , 110 , 100 , 32 , 115 , 105 , 103 , 32 , 108 , 101 , 96 , 68 , 130 , 1 , 82 , 111 , 13 , 204 , 238 , 141 , 14 , 100 , 13 , 174 , 174 , 110 , 132 , 13 , 172 , 46 , 140 , 109 , 96 , 131 , 27 , 96 , 100 , 130 , 1 , 82 , 96 , 132 , 1 , 97 , 5 , 11 , 86 , 91 , 96 , 0 , 91 , 130 , 81 , 129 , 16 , 21 , 97 , 16 , 111 , 87 , 97 , 16 , 65 , 131 , 130 , 129 , 81 , 129 , 16 , 97 , 16 , 26 , 87 , 97 , 16 , 26 , 97 , 34 , 110 , 86 , 91 , 96 , 32 , 2 , 96 , 32 , 1 , 1 , 81 , 131 , 131 , 129 , 81 , 129 , 16 , 97 , 16 , 52 , 87 , 97 , 16 , 52 , 97 , 34 , 110 , 86 , 91 , 96 , 32 , 2 , 96 , 32 , 1 , 1 , 81 , 97 , 13 , 40 , 86 , 91 , 97 , 16 , 93 , 87 , 96 , 64 , 81 , 98 , 70 , 27 , 205 , 96 , 229 , 27 , 129 , 82 , 96 , 4 , 1 , 97 , 5 , 11 , 144 , 97 , 31 , 153 , 86 , 91 , 128 , 97 , 16 , 103 , 129 , 97 , 33 , 206 , 86 , 91 , 145 , 80 , 80 , 97 , 15 , 252 , 86 , 91 , 80 , 96 , 0 , 91 , 132 , 129 , 16 , 21 , 97 , 18 , 57 , 87 , 96 , 0 , 134 , 134 , 131 , 129 , 129 , 16 , 97 , 16 , 143 , 87 , 97 , 16 , 143 , 97 , 34 , 110 , 86 , 91 , 144 , 80 , 96 , 32 , 2 , 129 , 1 , 144 , 97 , 16 , 161 , 145 , 144 , 97 , 31 , 229 , 86 , 91 , 97 , 16 , 176 , 145 , 96 , 32 , 145 , 96 , 0 , 145 , 97 , 32 , 166 , 86 , 91 , 97 , 16 , 185 , 145 , 97 , 33 , 121 , 86 , 91 , 96 , 64 , 81 , 99 , 131 , 11 , 47 , 87 , 96 , 224 , 27 , 129 , 82 , 96 , 4 , 129 , 1 , 130 , 144 , 82 , 144 , 145 , 80 , 48 , 144 , 99 , 131 , 11 , 47 , 87 , 144 , 96 , 36 , 1 , 96 , 32 , 96 , 64 , 81 , 128 , 131 , 3 , 129 , 134 , 128 , 59 , 21 , 128 , 21 , 97 , 16 , 243 , 87 , 96 , 0 , 128 , 253 , 91 , 80 , 90 , 250 , 21 , 128 , 21 , 97 , 17 , 7 , 87 , 61 , 96 , 0 , 128 , 62 , 61 , 96 , 0 , 253 , 91 , 80 , 80 , 80 , 80 , 96 , 64 , 81 , 61 , 96 , 31 , 25 , 96 , 31 , 130 , 1 , 22 , 130 , 1 , 128 , 96 , 64 , 82 , 80 , 129 , 1 , 144 , 97 , 17 , 43 , 145 , 144 , 97 , 26 , 230 , 86 , 91 , 97 , 17 , 143 , 87 , 96 , 64 , 81 , 98 , 70 , 27 , 205 , 96 , 229 , 27 , 129 , 82 , 96 , 32 , 96 , 4 , 130 , 1 , 82 , 96 , 47 , 96 , 36 , 130 , 1 , 82 , 127 , 83 , 105 , 103 , 110 , 97 , 116 , 117 , 114 , 101 , 66 , 114 , 105 , 100 , 103 , 101 , 58 , 32 , 66 , 97 , 116 , 99 , 104 , 32 , 69 , 120 , 101 , 99 , 117 , 116 , 105 , 110 , 103 , 96 , 68 , 130 , 1 , 82 , 110 , 16 , 55 , 183 , 16 , 59 , 185 , 55 , 183 , 51 , 144 , 49 , 180 , 48 , 180 , 183 , 96 , 137 , 27 , 96 , 100 , 130 , 1 , 82 , 96 , 132 , 1 , 97 , 5 , 11 , 86 , 91 , 96 , 0 , 129 , 129 , 82 , 96 , 10 , 96 , 32 , 82 , 96 , 64 , 144 , 32 , 84 , 96 , 1 , 96 , 1 , 96 , 160 , 27 , 3 , 22 , 128 , 128 , 99 , 226 , 72 , 207 , 242 , 132 , 139 , 139 , 136 , 129 , 129 , 16 , 97 , 17 , 193 , 87 , 97 , 17 , 193 , 97 , 34 , 110 , 86 , 91 , 144 , 80 , 96 , 32 , 2 , 129 , 1 , 144 , 97 , 17 , 211 , 145 , 144 , 97 , 31 , 229 , 86 , 91 , 96 , 64 , 81 , 132 , 99 , 255 , 255 , 255 , 255 , 22 , 96 , 224 , 27 , 129 , 82 , 96 , 4 , 1 , 97 , 17 , 241 , 147 , 146 , 145 , 144 , 97 , 30 , 192 , 86 , 91 , 96 , 0 , 96 , 64 , 81 , 128 , 131 , 3 , 129 , 96 , 0 , 135 , 128 , 59 , 21 , 128 , 21 , 97 , 18 , 11 , 87 , 96 , 0 , 128 , 253 , 91 , 80 , 90 , 241 , 21 , 128 , 21 , 97 , 18 , 31 , 87 , 61 , 96 , 0 , 128 , 62 , 61 , 96 , 0 , 253 , 91 , 80 , 80 , 80 , 80 , 80 , 80 , 80 , 128 , 128 , 97 , 18 , 49 , 144 , 97 , 33 , 206 , 86 , 91 , 145 , 80 , 80 , 97 , 16 , 115 , 86 , 91 , 80 , 80 , 80 , 80 , 80 , 80 , 86 , 91 , 96 , 0 , 84 , 99 , 255 , 255 , 255 , 255 , 128 , 132 , 22 , 96 , 1 , 96 , 200 , 27 , 144 , 146 , 4 , 22 , 16 , 97 , 18 , 146 , 87 , 96 , 64 , 81 , 98 , 70 , 27 , 205 , 96 , 229 , 27 , 129 , 82 , 96 , 32 , 96 , 4 , 130 , 1 , 82 , 96 , 13 , 96 , 36 , 130 , 1 , 82 , 108 , 73 , 110 , 118 , 97 , 108 , 105 , 100 , 32 , 110 , 111 , 110 , 99 , 101 , 96 , 152 , 27 , 96 , 68 , 130 , 1 , 82 , 96 , 100 , 1 , 97 , 5 , 11 , 86 , 91 , 96 , 0 , 84 , 97 , 18 , 173 , 144 , 96 , 1 , 96 , 200 , 27 , 144 , 4 , 99 , 255 , 255 , 255 , 255 , 22 , 96 , 1 , 97 , 32 , 232 , 86 , 91 , 99 , 255 , 255 , 255 , 255 , 22 , 130 , 99 , 255 , 255 , 255 , 255 , 22 , 17 , 21 , 97 , 19 , 20 , 87 , 96 , 64 , 81 , 98 , 70 , 27 , 205 , 96 , 229 , 27 , 129 , 82 , 96 , 32 , 96 , 4 , 130 , 1 , 82 , 96 , 36 , 128 , 130 , 1 , 82 , 127 , 78 , 111 , 110 , 99 , 101 , 32 , 109 , 117 , 115 , 116 , 32 , 110 , 111 , 116 , 32 , 105 , 110 , 99 , 114 , 101 , 109 , 101 , 110 , 116 , 32 , 109 , 111 , 114 , 101 , 32 , 116 , 104 , 96 , 68 , 130 , 1 , 82 , 99 , 97 , 110 , 32 , 49 , 96 , 224 , 27 , 96 , 100 , 130 , 1 , 82 , 96 , 132 , 1 , 97 , 5 , 11 , 86 , 91 , 96 , 64 , 128 , 81 , 96 , 32 , 129 , 1 , 135 , 144 , 82 , 96 , 1 , 96 , 1 , 96 , 192 , 27 , 3 , 25 , 96 , 192 , 135 , 144 , 27 , 22 , 145 , 129 , 1 , 145 , 144 , 145 , 82 , 96 , 1 , 96 , 1 , 96 , 224 , 27 , 3 , 25 , 96 , 224 , 133 , 129 , 27 , 130 , 22 , 96 , 72 , 132 , 1 , 82 , 132 , 144 , 27 , 22 , 96 , 76 , 130 , 1 , 82 , 97 , 19 , 111 , 144 , 96 , 80 , 1 , 96 , 64 , 81 , 96 , 32 , 129 , 131 , 3 , 3 , 129 , 82 , 144 , 96 , 64 , 82 , 130 , 97 , 13 , 40 , 86 , 91 , 97 , 19 , 139 , 87 , 96 , 64 , 81 , 98 , 70 , 27 , 205 , 96 , 229 , 27 , 129 , 82 , 96 , 4 , 1 , 97 , 5 , 11 , 144 , 97 , 30 , 246 , 86 , 91 , 96 , 1 , 133 , 144 , 85 , 96 , 2 , 128 , 84 , 103 , 255 , 255 , 255 , 255 , 255 , 255 , 255 , 255 , 25 , 22 , 96 , 1 , 96 , 1 , 96 , 64 , 27 , 3 , 134 , 22 , 23 , 144 , 85 , 96 , 4 , 128 , 84 , 99 , 255 , 255 , 255 , 255 , 25 , 22 , 99 , 255 , 255 , 255 , 255 , 133 , 129 , 22 , 145 , 144 , 145 , 23 , 144 , 145 , 85 , 96 , 0 , 128 , 84 , 99 , 255 , 255 , 255 , 255 , 96 , 200 , 27 , 25 , 22 , 96 , 1 , 96 , 200 , 27 , 146 , 133 , 22 , 146 , 144 , 146 , 2 , 145 , 144 , 145 , 23 , 129 , 85 , 96 , 5 , 128 , 84 , 145 , 97 , 19 , 244 , 131 , 97 , 33 , 206 , 86 , 91 , 145 , 144 , 80 , 85 , 80 , 80 , 80 , 80 , 80 , 80 , 86 , 91 , 96 , 0 , 128 , 96 , 0 , 97 , 20 , 15 , 133 , 133 , 97 , 22 , 147 , 86 , 91 , 145 , 80 , 145 , 80 , 97 , 20 , 28 , 129 , 97 , 22 , 217 , 86 , 91 , 80 , 147 , 146 , 80 , 80 , 80 , 86 , 91 , 96 , 64 , 81 , 107 , 255 , 255 , 255 , 255 , 255 , 255 , 255 , 255 , 255 , 255 , 255 , 255 , 25 , 96 , 96 , 132 , 144 , 27 , 22 , 96 , 32 , 130 , 1 , 82 , 96 , 0 , 144 , 129 , 144 , 96 , 52 , 1 , 96 , 64 , 128 , 81 , 96 , 31 , 25 , 129 , 132 , 3 , 1 , 129 , 82 , 145 , 144 , 82 , 128 , 81 , 96 , 32 , 144 , 145 , 1 , 32 , 144 , 80 , 128 , 131 , 96 , 0 , 91 , 135 , 81 , 129 , 96 , 255 , 22 , 16 , 21 , 97 , 21 , 77 , 87 , 97 , 20 , 126 , 96 , 2 , 131 , 97 , 34 , 9 , 86 , 91 , 99 , 255 , 255 , 255 , 255 , 22 , 97 , 20 , 221 , 87 , 130 , 136 , 130 , 96 , 255 , 22 , 129 , 81 , 129 , 16 , 97 , 20 , 158 , 87 , 97 , 20 , 158 , 97 , 34 , 110 , 86 , 91 , 96 , 32 , 2 , 96 , 32 , 1 , 1 , 81 , 96 , 64 , 81 , 96 , 32 , 1 , 97 , 20 , 192 , 146 , 145 , 144 , 145 , 130 , 82 , 96 , 32 , 130 , 1 , 82 , 96 , 64 , 1 , 144 , 86 , 91 , 96 , 64 , 81 , 96 , 32 , 129 , 131 , 3 , 3 , 129 , 82 , 144 , 96 , 64 , 82 , 128 , 81 , 144 , 96 , 32 , 1 , 32 , 146 , 80 , 97 , 21 , 46 , 86 , 91 , 135 , 129 , 96 , 255 , 22 , 129 , 81 , 129 , 16 , 97 , 20 , 242 , 87 , 97 , 20 , 242 , 97 , 34 , 110 , 86 , 91 , 96 , 32 , 2 , 96 , 32 , 1 , 1 , 81 , 131 , 96 , 64 , 81 , 96 , 32 , 1 , 97 , 21 , 21 , 146 , 145 , 144 , 145 , 130 , 82 , 96 , 32 , 130 , 1 , 82 , 96 , 64 , 1 , 144 , 86 , 91 , 96 , 64 , 81 , 96 , 32 , 129 , 131 , 3 , 3 , 129 , 82 , 144 , 96 , 64 , 82 , 128 , 81 , 144 , 96 , 32 , 1 , 32 , 146 , 80 , 91 , 97 , 21 , 57 , 96 , 2 , 131 , 97 , 33 , 16 , 86 , 91 , 145 , 80 , 128 , 97 , 21 , 69 , 129 , 97 , 33 , 233 , 86 , 91 , 145 , 80 , 80 , 97 , 20 , 103 , 86 , 91 , 80 , 80 , 96 , 1 , 84 , 20 , 149 , 148 , 80 , 80 , 80 , 80 , 80 , 86 , 91 , 96 , 4 , 84 , 97 , 21 , 113 , 144 , 96 , 2 , 144 , 99 , 255 , 255 , 255 , 255 , 22 , 97 , 33 , 16 , 86 , 91 , 96 , 5 , 84 , 96 , 0 , 144 , 129 , 82 , 96 , 7 , 96 , 32 , 144 , 129 , 82 , 96 , 64 , 128 , 131 , 32 , 96 , 1 , 96 , 1 , 96 , 160 , 27 , 3 , 134 , 22 , 132 , 82 , 144 , 145 , 82 , 144 , 32 , 84 , 99 , 255 , 255 , 255 , 255 , 145 , 130 , 22 , 145 , 22 , 17 , 21 , 97 , 21 , 176 , 87 , 97 , 21 , 176 , 129 , 97 , 21 , 179 , 86 , 91 , 80 , 86 , 91 , 96 , 1 , 96 , 1 , 96 , 160 , 27 , 3 , 129 , 22 , 97 , 22 , 27 , 87 , 96 , 64 , 81 , 98 , 70 , 27 , 205 , 96 , 229 , 27 , 129 , 82 , 96 , 32 , 96 , 4 , 130 , 1 , 82 , 96 , 41 , 96 , 36 , 130 , 1 , 82 , 127 , 71 , 111 , 118 , 101 , 114 , 110 , 97 , 98 , 108 , 101 , 58 , 32 , 110 , 101 , 119 , 32 , 111 , 119 , 110 , 101 , 114 , 32 , 105 , 115 , 32 , 116 , 104 , 101 , 32 , 122 , 101 , 114 , 96 , 68 , 130 , 1 , 82 , 104 , 111 , 32 , 97 , 100 , 100 , 114 , 101 , 115 , 115 , 96 , 184 , 27 , 96 , 100 , 130 , 1 , 82 , 96 , 132 , 1 , 97 , 5 , 11 , 86 , 91 , 96 , 0 , 128 , 84 , 96 , 64 , 81 , 96 , 1 , 96 , 1 , 96 , 160 , 27 , 3 , 128 , 133 , 22 , 147 , 97 , 1 , 0 , 144 , 147 , 4 , 22 , 145 , 127 , 31 , 50 , 52 , 137 , 244 , 4 , 227 , 186 , 215 , 98 , 33 , 95 , 192 , 84 , 71 , 249 , 167 , 123 , 183 , 243 , 182 , 48 , 166 , 240 , 138 , 40 , 81 , 185 , 153 , 219 , 65 , 247 , 145 , 163 , 96 , 0 , 128 , 84 , 97 , 1 , 0 , 96 , 1 , 96 , 168 , 27 , 3 , 25 , 22 , 97 , 1 , 0 , 96 , 1 , 96 , 1 , 96 , 160 , 27 , 3 , 132 , 22 , 2 , 23 , 129 , 85 , 66 , 96 , 8 , 85 , 96 , 5 , 128 , 84 , 145 , 97 , 22 , 139 , 131 , 97 , 33 , 206 , 86 , 91 , 145 , 144 , 80 , 85 , 80 , 80 , 86 , 91 , 96 , 0 , 128 , 130 , 81 , 96 , 65 , 20 , 21 , 97 , 22 , 202 , 87 , 96 , 32 , 131 , 1 , 81 , 96 , 64 , 132 , 1 , 81 , 96 , 96 , 133 , 1 , 81 , 96 , 0 , 26 , 97 , 22 , 190 , 135 , 130 , 133 , 133 , 97 , 24 , 39 , 86 , 91 , 148 , 80 , 148 , 80 , 80 , 80 , 80 , 97 , 22 , 210 , 86 , 91 , 80 , 96 , 0 , 144 , 80 , 96 , 2 , 91 , 146 , 80 , 146 , 144 , 80 , 86 , 91 , 96 , 0 , 129 , 96 , 4 , 129 , 17 , 21 , 97 , 22 , 237 , 87 , 97 , 22 , 237 , 97 , 34 , 88 , 86 , 91 , 20 , 21 , 97 , 22 , 246 , 87 , 80 , 86 , 91 , 96 , 1 , 129 , 96 , 4 , 129 , 17 , 21 , 97 , 23 , 10 , 87 , 97 , 23 , 10 , 97 , 34 , 88 , 86 , 91 , 20 , 21 , 97 , 23 , 88 , 87 , 96 , 64 , 81 , 98 , 70 , 27 , 205 , 96 , 229 , 27 , 129 , 82 , 96 , 32 , 96 , 4 , 130 , 1 , 82 , 96 , 24 , 96 , 36 , 130 , 1 , 82 , 127 , 69 , 67 , 68 , 83 , 65 , 58 , 32 , 105 , 110 , 118 , 97 , 108 , 105 , 100 , 32 , 115 , 105 , 103 , 110 , 97 , 116 , 117 , 114 , 101 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 96 , 68 , 130 , 1 , 82 , 96 , 100 , 1 , 97 , 5 , 11 , 86 , 91 , 96 , 2 , 129 , 96 , 4 , 129 , 17 , 21 , 97 , 23 , 108 , 87 , 97 , 23 , 108 , 97 , 34 , 88 , 86 , 91 , 20 , 21 , 97 , 23 , 186 , 87 , 96 , 64 , 81 , 98 , 70 , 27 , 205 , 96 , 229 , 27 , 129 , 82 , 96 , 32 , 96 , 4 , 130 , 1 , 82 , 96 , 31 , 96 , 36 , 130 , 1 , 82 , 127 , 69 , 67 , 68 , 83 , 65 , 58 , 32 , 105 , 110 , 118 , 97 , 108 , 105 , 100 , 32 , 115 , 105 , 103 , 110 , 97 , 116 , 117 , 114 , 101 , 32 , 108 , 101 , 110 , 103 , 116 , 104 , 0 , 96 , 68 , 130 , 1 , 82 , 96 , 100 , 1 , 97 , 5 , 11 , 86 , 91 , 96 , 3 , 129 , 96 , 4 , 129 , 17 , 21 , 97 , 23 , 206 , 87 , 97 , 23 , 206 , 97 , 34 , 88 , 86 , 91 , 20 , 21 , 97 , 21 , 176 , 87 , 96 , 64 , 81 , 98 , 70 , 27 , 205 , 96 , 229 , 27 , 129 , 82 , 96 , 32 , 96 , 4 , 130 , 1 , 82 , 96 , 34 , 96 , 36 , 130 , 1 , 82 , 127 , 69 , 67 , 68 , 83 , 65 , 58 , 32 , 105 , 110 , 118 , 97 , 108 , 105 , 100 , 32 , 115 , 105 , 103 , 110 , 97 , 116 , 117 , 114 , 101 , 32 , 39 , 115 , 39 , 32 , 118 , 97 , 108 , 96 , 68 , 130 , 1 , 82 , 97 , 117 , 101 , 96 , 240 , 27 , 96 , 100 , 130 , 1 , 82 , 96 , 132 , 1 , 97 , 5 , 11 , 86 , 91 , 96 , 0 , 128 , 127 , 127 , 255 , 255 , 255 , 255 , 255 , 255 , 255 , 255 , 255 , 255 , 255 , 255 , 255 , 255 , 255 , 93 , 87 , 110 , 115 , 87 , 164 , 80 , 29 , 223 , 233 , 47 , 70 , 104 , 27 , 32 , 160 , 131 , 17 , 21 , 97 , 24 , 94 , 87 , 80 , 96 , 0 , 144 , 80 , 96 , 3 , 97 , 24 , 226 , 86 , 91 , 96 , 64 , 128 , 81 , 96 , 0 , 128 , 130 , 82 , 96 , 32 , 130 , 1 , 128 , 132 , 82 , 137 , 144 , 82 , 96 , 255 , 136 , 22 , 146 , 130 , 1 , 146 , 144 , 146 , 82 , 96 , 96 , 129 , 1 , 134 , 144 , 82 , 96 , 128 , 129 , 1 , 133 , 144 , 82 , 96 , 1 , 144 , 96 , 160 , 1 , 96 , 32 , 96 , 64 , 81 , 96 , 32 , 129 , 3 , 144 , 128 , 132 , 3 , 144 , 133 , 90 , 250 , 21 , 128 , 21 , 97 , 24 , 178 , 87 , 61 , 96 , 0 , 128 , 62 , 61 , 96 , 0 , 253 , 91 , 80 , 80 , 96 , 64 , 81 , 96 , 31 , 25 , 1 , 81 , 145 , 80 , 80 , 96 , 1 , 96 , 1 , 96 , 160 , 27 , 3 , 129 , 22 , 97 , 24 , 219 , 87 , 96 , 0 , 96 , 1 , 146 , 80 , 146 , 80 , 80 , 97 , 24 , 226 , 86 , 91 , 145 , 80 , 96 , 0 , 144 , 80 , 91 , 148 , 80 , 148 , 146 , 80 , 80 , 80 , 86 , 91 , 96 , 0 , 97 , 24 , 254 , 97 , 24 , 249 , 132 , 97 , 32 , 131 , 86 , 91 , 97 , 32 , 83 , 86 , 91 , 144 , 80 , 128 , 131 , 130 , 82 , 96 , 32 , 128 , 131 , 1 , 145 , 80 , 131 , 134 , 134 , 96 , 5 , 27 , 134 , 1 , 17 , 21 , 97 , 25 , 30 , 87 , 96 , 0 , 128 , 253 , 91 , 96 , 0 , 128 , 91 , 135 , 129 , 16 , 21 , 97 , 25 , 94 , 87 , 130 , 53 , 96 , 1 , 96 , 1 , 96 , 64 , 27 , 3 , 129 , 17 , 21 , 97 , 25 , 63 , 87 , 130 , 131 , 253 , 91 , 97 , 25 , 75 , 138 , 130 , 138 , 1 , 97 , 25 , 134 , 86 , 91 , 134 , 82 , 80 , 147 , 131 , 1 , 147 , 145 , 131 , 1 , 145 , 96 , 1 , 1 , 97 , 25 , 34 , 86 , 91 , 80 , 80 , 80 , 80 , 80 , 147 , 146 , 80 , 80 , 80 , 86 , 91 , 128 , 53 , 96 , 1 , 96 , 1 , 96 , 160 , 27 , 3 , 129 , 22 , 129 , 20 , 97 , 25 , 129 , 87 , 96 , 0 , 128 , 253 , 91 , 145 , 144 , 80 , 86 , 91 , 96 , 0 , 130 , 96 , 31 , 131 , 1 , 18 , 97 , 25 , 151 , 87 , 96 , 0 , 128 , 253 , 91 , 129 , 53 , 96 , 1 , 96 , 1 , 96 , 64 , 27 , 3 , 129 , 17 , 21 , 97 , 25 , 176 , 87 , 97 , 25 , 176 , 97 , 34 , 132 , 86 , 91 , 97 , 25 , 195 , 96 , 31 , 130 , 1 , 96 , 31 , 25 , 22 , 96 , 32 , 1 , 97 , 32 , 83 , 86 , 91 , 129 , 129 , 82 , 132 , 96 , 32 , 131 , 134 , 1 , 1 , 17 , 21 , 97 , 25 , 216 , 87 , 96 , 0 , 128 , 253 , 91 , 129 , 96 , 32 , 133 , 1 , 96 , 32 , 131 , 1 , 55 , 96 , 0 , 145 , 129 , 1 , 96 , 32 , 1 , 145 , 144 , 145 , 82 , 147 , 146 , 80 , 80 , 80 , 86 , 91 , 128 , 53 , 99 , 255 , 255 , 255 , 255 , 129 , 22 , 129 , 20 , 97 , 25 , 129 , 87 , 96 , 0 , 128 , 253 , 91 , 96 , 0 , 128 , 96 , 64 , 131 , 133 , 3 , 18 , 21 , 97 , 26 , 28 , 87 , 96 , 0 , 128 , 253 , 91 , 97 , 26 , 37 , 131 , 97 , 25 , 106 , 86 , 91 , 145 , 80 , 97 , 26 , 51 , 96 , 32 , 132 , 1 , 97 , 25 , 245 , 86 , 91 , 144 , 80 , 146 , 80 , 146 , 144 , 80 , 86 , 91 , 96 , 0 , 128 , 96 , 0 , 96 , 64 , 132 , 134 , 3 , 18 , 21 , 97 , 26 , 81 , 87 , 96 , 0 , 128 , 253 , 91 , 131 , 53 , 96 , 1 , 96 , 1 , 96 , 64 , 27 , 3 , 128 , 130 , 17 , 21 , 97 , 26 , 104 , 87 , 96 , 0 , 128 , 253 , 91 , 129 , 134 , 1 , 145 , 80 , 134 , 96 , 31 , 131 , 1 , 18 , 97 , 26 , 124 , 87 , 96 , 0 , 128 , 253 , 91 , 129 , 53 , 129 , 129 , 17 , 21 , 97 , 26 , 139 , 87 , 96 , 0 , 128 , 253 , 91 , 135 , 96 , 32 , 130 , 96 , 5 , 27 , 133 , 1 , 1 , 17 , 21 , 97 , 26 , 160 , 87 , 96 , 0 , 128 , 253 , 91 , 96 , 32 , 146 , 131 , 1 , 149 , 80 , 147 , 80 , 144 , 133 , 1 , 53 , 144 , 128 , 130 , 17 , 21 , 97 , 26 , 187 , 87 , 96 , 0 , 128 , 253 , 91 , 80 , 132 , 1 , 96 , 31 , 129 , 1 , 134 , 19 , 97 , 26 , 205 , 87 , 96 , 0 , 128 , 253 , 91 , 97 , 26 , 220 , 134 , 130 , 53 , 96 , 32 , 132 , 1 , 97 , 24 , 235 , 86 , 91 , 145 , 80 , 80 , 146 , 80 , 146 , 80 , 146 , 86 , 91 , 96 , 0 , 96 , 32 , 130 , 132 , 3 , 18 , 21 , 97 , 26 , 248 , 87 , 96 , 0 , 128 , 253 , 91 , 129 , 81 , 128 , 21 , 21 , 129 , 20 , 97 , 27 , 8 , 87 , 96 , 0 , 128 , 253 , 91 , 147 , 146 , 80 , 80 , 80 , 86 , 91 , 96 , 0 , 96 , 32 , 130 , 132 , 3 , 18 , 21 , 97 , 27 , 33 , 87 , 96 , 0 , 128 , 253 , 91 , 80 , 53 , 145 , 144 , 80 , 86 , 91 , 96 , 0 , 128 , 96 , 0 , 128 , 96 , 0 , 128 , 96 , 192 , 135 , 137 , 3 , 18 , 21 , 97 , 27 , 65 , 87 , 96 , 0 , 128 , 253 , 91 , 134 , 53 , 149 , 80 , 96 , 32 , 135 , 1 , 53 , 96 , 1 , 96 , 1 , 96 , 224 , 27 , 3 , 25 , 129 , 22 , 129 , 20 , 97 , 27 , 96 , 87 , 96 , 0 , 128 , 253 , 91 , 148 , 80 , 97 , 27 , 110 , 96 , 64 , 136 , 1 , 97 , 25 , 245 , 86 , 91 , 147 , 80 , 96 , 96 , 135 , 1 , 53 , 146 , 80 , 97 , 27 , 131 , 96 , 128 , 136 , 1 , 97 , 25 , 106 , 86 , 91 , 145 , 80 , 96 , 160 , 135 , 1 , 53 , 96 , 1 , 96 , 1 , 96 , 64 , 27 , 3 , 129 , 17 , 21 , 97 , 27 , 158 , 87 , 96 , 0 , 128 , 253 , 91 , 97 , 27 , 170 , 137 , 130 , 138 , 1 , 97 , 25 , 134 , 86 , 91 , 145 , 80 , 80 , 146 , 149 , 80 , 146 , 149 , 80 , 146 , 149 , 86 , 91 , 96 , 0 , 128 , 96 , 0 , 128 , 96 , 0 , 96 , 160 , 134 , 136 , 3 , 18 , 21 , 97 , 27 , 207 , 87 , 96 , 0 , 128 , 253 , 91 , 133 , 53 , 148 , 80 , 96 , 32 , 134 , 1 , 53 , 96 , 1 , 96 , 1 , 96 , 64 , 27 , 3 , 128 , 130 , 22 , 130 , 20 , 97 , 27 , 238 , 87 , 96 , 0 , 128 , 253 , 91 , 129 , 149 , 80 , 97 , 27 , 253 , 96 , 64 , 137 , 1 , 97 , 25 , 245 , 86 , 91 , 148 , 80 , 97 , 28 , 11 , 96 , 96 , 137 , 1 , 97 , 25 , 245 , 86 , 91 , 147 , 80 , 96 , 128 , 136 , 1 , 53 , 145 , 80 , 128 , 130 , 17 , 21 , 97 , 28 , 33 , 87 , 96 , 0 , 128 , 253 , 91 , 80 , 97 , 28 , 46 , 136 , 130 , 137 , 1 , 97 , 25 , 134 , 86 , 91 , 145 , 80 , 80 , 146 , 149 , 80 , 146 , 149 , 144 , 147 , 80 , 86 , 91 , 96 , 0 , 128 , 96 , 0 , 96 , 64 , 132 , 134 , 3 , 18 , 21 , 97 , 28 , 80 , 87 , 96 , 0 , 128 , 253 , 91 , 131 , 53 , 96 , 1 , 96 , 1 , 96 , 64 , 27 , 3 , 128 , 130 , 17 , 21 , 97 , 28 , 103 , 87 , 96 , 0 , 128 , 253 , 91 , 129 , 134 , 1 , 145 , 80 , 134 , 96 , 31 , 131 , 1 , 18 , 97 , 28 , 123 , 87 , 96 , 0 , 128 , 253 , 91 , 129 , 53 , 129 , 129 , 17 , 21 , 97 , 28 , 138 , 87 , 96 , 0 , 128 , 253 , 91 , 135 , 96 , 32 , 130 , 133 , 1 , 1 , 17 , 21 , 97 , 28 , 156 , 87 , 96 , 0 , 128 , 253 , 91 , 96 , 32 , 146 , 131 , 1 , 149 , 80 , 147 , 80 , 144 , 133 , 1 , 53 , 144 , 128 , 130 , 17 , 21 , 97 , 28 , 183 , 87 , 96 , 0 , 128 , 253 , 91 , 80 , 97 , 26 , 220 , 134 , 130 , 135 , 1 , 97 , 25 , 134 , 86 , 91 , 96 , 0 , 128 , 96 , 64 , 131 , 133 , 3 , 18 , 21 , 97 , 28 , 215 , 87 , 96 , 0 , 128 , 253 , 91 , 130 , 53 , 96 , 1 , 96 , 1 , 96 , 64 , 27 , 3 , 128 , 130 , 17 , 21 , 97 , 28 , 238 , 87 , 96 , 0 , 128 , 253 , 91 , 97 , 28 , 250 , 134 , 131 , 135 , 1 , 97 , 25 , 134 , 86 , 91 , 147 , 80 , 96 , 32 , 133 , 1 , 53 , 145 , 80 , 128 , 130 , 17 , 21 , 97 , 29 , 16 , 87 , 96 , 0 , 128 , 253 , 91 , 80 , 97 , 29 , 29 , 133 , 130 , 134 , 1 , 97 , 25 , 134 , 86 , 91 , 145 , 80 , 80 , 146 , 80 , 146 , 144 , 80 , 86 , 91 , 96 , 0 , 128 , 96 , 0 , 96 , 96 , 132 , 134 , 3 , 18 , 21 , 97 , 29 , 60 , 87 , 96 , 0 , 128 , 253 , 91 , 131 , 53 , 96 , 1 , 96 , 1 , 96 , 64 , 27 , 3 , 128 , 130 , 17 , 21 , 97 , 29 , 83 , 87 , 96 , 0 , 128 , 253 , 91 , 97 , 29 , 95 , 135 , 131 , 136 , 1 , 97 , 25 , 134 , 86 , 91 , 148 , 80 , 97 , 29 , 109 , 96 , 32 , 135 , 1 , 97 , 25 , 245 , 86 , 91 , 147 , 80 , 96 , 64 , 134 , 1 , 53 , 145 , 80 , 128 , 130 , 17 , 21 , 97 , 28 , 183 , 87 , 96 , 0 , 128 , 253 , 91 , 96 , 0 , 96 , 32 , 128 , 131 , 133 , 3 , 18 , 21 , 97 , 29 , 150 , 87 , 96 , 0 , 128 , 253 , 91 , 130 , 53 , 96 , 1 , 96 , 1 , 96 , 64 , 27 , 3 , 128 , 130 , 17 , 21 , 97 , 29 , 173 , 87 , 96 , 0 , 128 , 253 , 91 , 144 , 132 , 1 , 144 , 96 , 96 , 130 , 135 , 3 , 18 , 21 , 97 , 29 , 193 , 87 , 96 , 0 , 128 , 253 , 91 , 97 , 29 , 201 , 97 , 32 , 43 , 86 , 91 , 97 , 29 , 210 , 131 , 97 , 25 , 245 , 86 , 91 , 129 , 82 , 131 , 131 , 1 , 53 , 130 , 129 , 17 , 21 , 97 , 29 , 229 , 87 , 96 , 0 , 128 , 253 , 91 , 131 , 1 , 145 , 80 , 96 , 31 , 130 , 1 , 135 , 19 , 97 , 29 , 248 , 87 , 96 , 0 , 128 , 253 , 91 , 129 , 53 , 97 , 30 , 6 , 97 , 24 , 249 , 130 , 97 , 32 , 131 , 86 , 91 , 128 , 130 , 130 , 82 , 134 , 130 , 1 , 145 , 80 , 134 , 133 , 1 , 138 , 136 , 133 , 96 , 5 , 27 , 136 , 1 , 1 , 17 , 21 , 97 , 30 , 38 , 87 , 96 , 0 , 128 , 253 , 91 , 96 , 0 , 149 , 80 , 91 , 131 , 134 , 16 , 21 , 97 , 30 , 73 , 87 , 128 , 53 , 131 , 82 , 96 , 1 , 149 , 144 , 149 , 1 , 148 , 145 , 135 , 1 , 145 , 135 , 1 , 97 , 30 , 43 , 86 , 91 , 80 , 131 , 135 , 1 , 82 , 80 , 97 , 30 , 93 , 144 , 80 , 96 , 64 , 132 , 1 , 97 , 25 , 106 , 86 , 91 , 96 , 64 , 130 , 1 , 82 , 150 , 149 , 80 , 80 , 80 , 80 , 80 , 80 , 86 , 91 , 99 , 255 , 255 , 255 , 255 , 96 , 224 , 27 , 131 , 96 , 224 , 27 , 22 , 129 , 82 , 96 , 0 , 130 , 81 , 96 , 0 , 91 , 129 , 129 , 16 , 21 , 97 , 30 , 159 , 87 , 96 , 32 , 129 , 134 , 1 , 129 , 1 , 81 , 96 , 4 , 134 , 132 , 1 , 1 , 82 , 1 , 97 , 30 , 130 , 86 , 91 , 129 , 129 , 17 , 21 , 97 , 30 , 177 , 87 , 96 , 0 , 96 , 4 , 131 , 134 , 1 , 1 , 82 , 91 , 80 , 145 , 144 , 145 , 1 , 96 , 4 , 1 , 147 , 146 , 80 , 80 , 80 , 86 , 91 , 131 , 129 , 82 , 96 , 64 , 96 , 32 , 130 , 1 , 82 , 129 , 96 , 64 , 130 , 1 , 82 , 129 , 131 , 96 , 96 , 131 , 1 , 55 , 96 , 0 , 129 , 131 , 1 , 96 , 96 , 144 , 129 , 1 , 145 , 144 , 145 , 82 , 96 , 31 , 144 , 146 , 1 , 96 , 31 , 25 , 22 , 1 , 1 , 146 , 145 , 80 , 80 , 86 , 91 , 96 , 32 , 128 , 130 , 82 , 96 , 38 , 144 , 130 , 1 , 82 , 127 , 71 , 111 , 118 , 101 , 114 , 110 , 97 , 98 , 108 , 101 , 58 , 32 , 99 , 97 , 108 , 108 , 101 , 114 , 32 , 105 , 115 , 32 , 110 , 111 , 116 , 32 , 116 , 104 , 101 , 32 , 103 , 111 , 96 , 64 , 130 , 1 , 82 , 101 , 59 , 50 , 185 , 55 , 55 , 185 , 96 , 209 , 27 , 96 , 96 , 130 , 1 , 82 , 96 , 128 , 1 , 144 , 86 , 91 , 96 , 32 , 128 , 130 , 82 , 96 , 55 , 144 , 130 , 1 , 82 , 127 , 97 , 100 , 109 , 105 , 110 , 83 , 101 , 116 , 82 , 101 , 115 , 111 , 117 , 114 , 99 , 101 , 87 , 105 , 116 , 104 , 83 , 105 , 103 , 110 , 97 , 116 , 117 , 114 , 101 , 58 , 32 , 69 , 96 , 64 , 130 , 1 , 82 , 127 , 120 , 101 , 99 , 117 , 116 , 105 , 110 , 103 , 32 , 111 , 110 , 32 , 119 , 114 , 111 , 110 , 103 , 32 , 99 , 104 , 97 , 105 , 110 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 96 , 96 , 130 , 1 , 82 , 96 , 128 , 1 , 144 , 86 , 91 , 96 , 32 , 128 , 130 , 82 , 96 , 44 , 144 , 130 , 1 , 82 , 127 , 83 , 105 , 103 , 110 , 97 , 116 , 117 , 114 , 101 , 66 , 114 , 105 , 100 , 103 , 101 , 58 , 32 , 78 , 111 , 116 , 32 , 118 , 97 , 108 , 105 , 100 , 32 , 115 , 105 , 103 , 32 , 102 , 96 , 64 , 130 , 1 , 82 , 107 , 57 , 55 , 182 , 144 , 51 , 183 , 187 , 50 , 185 , 55 , 55 , 185 , 96 , 161 , 27 , 96 , 96 , 130 , 1 , 82 , 96 , 128 , 1 , 144 , 86 , 91 , 96 , 0 , 128 , 131 , 53 , 96 , 30 , 25 , 132 , 54 , 3 , 1 , 129 , 18 , 97 , 31 , 252 , 87 , 96 , 0 , 128 , 253 , 91 , 131 , 1 , 128 , 53 , 145 , 80 , 96 , 1 , 96 , 1 , 96 , 64 , 27 , 3 , 130 , 17 , 21 , 97 , 32 , 22 , 87 , 96 , 0 , 128 , 253 , 91 , 96 , 32 , 1 , 145 , 80 , 54 , 129 , 144 , 3 , 130 , 19 , 21 , 97 , 22 , 210 , 87 , 96 , 0 , 128 , 253 , 91 , 96 , 64 , 81 , 96 , 96 , 129 , 1 , 96 , 1 , 96 , 1 , 96 , 64 , 27 , 3 , 129 , 17 , 130 , 130 , 16 , 23 , 21 , 97 , 32 , 77 , 87 , 97 , 32 , 77 , 97 , 34 , 132 , 86 , 91 , 96 , 64 , 82 , 144 , 86 , 91 , 96 , 64 , 81 , 96 , 31 , 130 , 1 , 96 , 31 , 25 , 22 , 129 , 1 , 96 , 1 , 96 , 1 , 96 , 64 , 27 , 3 , 129 , 17 , 130 , 130 , 16 , 23 , 21 , 97 , 32 , 123 , 87 , 97 , 32 , 123 , 97 , 34 , 132 , 86 , 91 , 96 , 64 , 82 , 145 , 144 , 80 , 86 , 91 , 96 , 0 , 96 , 1 , 96 , 1 , 96 , 64 , 27 , 3 , 130 , 17 , 21 , 97 , 32 , 156 , 87 , 97 , 32 , 156 , 97 , 34 , 132 , 86 , 91 , 80 , 96 , 5 , 27 , 96 , 32 , 1 , 144 , 86 , 91 , 96 , 0 , 128 , 133 , 133 , 17 , 21 , 97 , 32 , 182 , 87 , 96 , 0 , 128 , 253 , 91 , 131 , 134 , 17 , 21 , 97 , 32 , 195 , 87 , 96 , 0 , 128 , 253 , 91 , 80 , 80 , 130 , 1 , 147 , 145 , 144 , 146 , 3 , 145 , 80 , 86 , 91 , 96 , 0 , 130 , 25 , 130 , 17 , 21 , 97 , 32 , 227 , 87 , 97 , 32 , 227 , 97 , 34 , 44 , 86 , 91 , 80 , 1 , 144 , 86 , 91 , 96 , 0 , 99 , 255 , 255 , 255 , 255 , 128 , 131 , 22 , 129 , 133 , 22 , 128 , 131 , 3 , 130 , 17 , 21 , 97 , 33 , 7 , 87 , 97 , 33 , 7 , 97 , 34 , 44 , 86 , 91 , 1 , 148 , 147 , 80 , 80 , 80 , 80 , 86 , 91 , 96 , 0 , 99 , 255 , 255 , 255 , 255 , 128 , 132 , 22 , 128 , 97 , 33 , 39 , 87 , 97 , 33 , 39 , 97 , 34 , 66 , 86 , 91 , 146 , 22 , 145 , 144 , 145 , 4 , 146 , 145 , 80 , 80 , 86 , 91 , 96 , 0 , 96 , 1 , 96 , 1 , 96 , 64 , 27 , 3 , 128 , 132 , 22 , 128 , 97 , 33 , 39 , 87 , 97 , 33 , 39 , 97 , 34 , 66 , 86 , 91 , 96 , 0 , 129 , 96 , 0 , 25 , 4 , 131 , 17 , 130 , 21 , 21 , 22 , 21 , 97 , 33 , 103 , 87 , 97 , 33 , 103 , 97 , 34 , 44 , 86 , 91 , 80 , 2 , 144 , 86 , 91 , 96 , 0 , 97 , 27 , 8 , 54 , 132 , 132 , 97 , 24 , 235 , 86 , 91 , 128 , 53 , 96 , 32 , 131 , 16 , 21 , 97 , 4 , 134 , 87 , 96 , 0 , 25 , 96 , 32 , 132 , 144 , 3 , 96 , 3 , 27 , 27 , 22 , 146 , 145 , 80 , 80 , 86 , 91 , 128 , 81 , 96 , 32 , 130 , 1 , 81 , 96 , 1 , 96 , 1 , 96 , 208 , 27 , 3 , 25 , 128 , 130 , 22 , 146 , 145 , 144 , 96 , 6 , 131 , 16 , 21 , 97 , 33 , 198 , 87 , 128 , 129 , 132 , 96 , 6 , 3 , 96 , 3 , 27 , 27 , 131 , 22 , 22 , 147 , 80 , 91 , 80 , 80 , 80 , 145 , 144 , 80 , 86 , 91 , 96 , 0 , 96 , 0 , 25 , 130 , 20 , 21 , 97 , 33 , 226 , 87 , 97 , 33 , 226 , 97 , 34 , 44 , 86 , 91 , 80 , 96 , 1 , 1 , 144 , 86 , 91 , 96 , 0 , 96 , 255 , 130 , 22 , 96 , 255 , 129 , 20 , 21 , 97 , 34 , 0 , 87 , 97 , 34 , 0 , 97 , 34 , 44 , 86 , 91 , 96 , 1 , 1 , 146 , 145 , 80 , 80 , 86 , 91 , 96 , 0 , 99 , 255 , 255 , 255 , 255 , 128 , 132 , 22 , 128 , 97 , 34 , 32 , 87 , 97 , 34 , 32 , 97 , 34 , 66 , 86 , 91 , 146 , 22 , 145 , 144 , 145 , 6 , 146 , 145 , 80 , 80 , 86 , 91 , 99 , 78 , 72 , 123 , 113 , 96 , 224 , 27 , 96 , 0 , 82 , 96 , 17 , 96 , 4 , 82 , 96 , 36 , 96 , 0 , 253 , 91 , 99 , 78 , 72 , 123 , 113 , 96 , 224 , 27 , 96 , 0 , 82 , 96 , 18 , 96 , 4 , 82 , 96 , 36 , 96 , 0 , 253 , 91 , 99 , 78 , 72 , 123 , 113 , 96 , 224 , 27 , 96 , 0 , 82 , 96 , 33 , 96 , 4 , 82 , 96 , 36 , 96 , 0 , 253 , 91 , 99 , 78 , 72 , 123 , 113 , 96 , 224 , 27 , 96 , 0 , 82 , 96 , 50 , 96 , 4 , 82 , 96 , 36 , 96 , 0 , 253 , 91 , 99 , 78 , 72 , 123 , 113 , 96 , 224 , 27 , 96 , 0 , 82 , 96 , 65 , 96 , 4 , 82 , 96 , 36 , 96 , 0 , 253 , 254 , 162 , 100 , 105 , 112 , 102 , 115 , 88 , 34 , 18 , 32 , 98 , 110 , 166 , 227 , 86 , 103 , 214 , 234 , 242 , 12 , 80 , 130 , 195 , 64 , 159 , 5 , 25 , 124 , 111 , 85 , 73 , 234 , 18 , 122 , 205 , 50 , 69 , 118 , 38 , 209 , 39 , 54 , 100 , 115 , 111 , 108 , 99 , 67 , 0 , 8 , 5 , 0 , 51] ;
    #[doc = "The bytecode of the contract."]
    pub static SIGNATUREBRIDGECONTRACT_BYTECODE: ::ethers::core::types::Bytes =
        ::ethers::core::types::Bytes::from_static(__BYTECODE);
    # [rustfmt :: skip] const __DEPLOYED_BYTECODE : & [u8] = & [96 , 128 , 96 , 64 , 82 , 52 , 128 , 21 , 97 , 0 , 16 , 87 , 96 , 0 , 128 , 253 , 91 , 80 , 96 , 4 , 54 , 16 , 97 , 1 , 218 , 87 , 96 , 0 , 53 , 96 , 224 , 28 , 128 , 99 , 135 , 85 , 188 , 173 , 17 , 97 , 1 , 4 , 87 , 128 , 99 , 189 , 250 , 220 , 132 , 17 , 97 , 0 , 162 , 87 , 128 , 99 , 204 , 60 , 116 , 161 , 17 , 97 , 0 , 113 , 87 , 128 , 99 , 204 , 60 , 116 , 161 , 20 , 97 , 4 , 30 , 87 , 128 , 99 , 216 , 198 , 45 , 176 , 20 , 97 , 4 , 39 , 87 , 128 , 99 , 243 , 210 , 61 , 84 , 20 , 97 , 4 , 58 , 87 , 128 , 99 , 245 , 252 , 61 , 107 , 20 , 97 , 4 , 77 , 87 , 96 , 0 , 128 , 253 , 91 , 128 , 99 , 189 , 250 , 220 , 132 , 20 , 97 , 3 , 219 , 87 , 128 , 99 , 194 , 35 , 13 , 110 , 20 , 97 , 3 , 228 , 87 , 128 , 99 , 197 , 235 , 107 , 31 , 20 , 97 , 3 , 253 , 87 , 128 , 99 , 199 , 175 , 51 , 82 , 20 , 97 , 4 , 6 , 87 , 96 , 0 , 128 , 253 , 91 , 128 , 99 , 157 , 43 , 30 , 215 , 17 , 97 , 0 , 222 , 87 , 128 , 99 , 157 , 43 , 30 , 215 , 20 , 97 , 3 , 156 , 87 , 128 , 99 , 158 , 9 , 88 , 60 , 20 , 97 , 3 , 175 , 87 , 128 , 99 , 166 , 233 , 76 , 145 , 20 , 97 , 3 , 184 , 87 , 128 , 99 , 186 , 193 , 99 , 162 , 20 , 97 , 3 , 203 , 87 , 96 , 0 , 128 , 253 , 91 , 128 , 99 , 135 , 85 , 188 , 173 , 20 , 97 , 3 , 78 , 87 , 128 , 99 , 139 , 126 , 135 , 130 , 20 , 97 , 3 , 97 , 87 , 128 , 99 , 147 , 89 , 103 , 0 , 20 , 97 , 3 , 133 , 87 , 96 , 0 , 128 , 253 , 91 , 128 , 99 , 58 , 4 , 158 , 2 , 17 , 97 , 1 , 124 , 87 , 128 , 99 , 113 , 80 , 24 , 166 , 17 , 97 , 1 , 75 , 87 , 128 , 99 , 113 , 80 , 24 , 166 , 20 , 97 , 2 , 247 , 87 , 128 , 99 , 114 , 150 , 181 , 216 , 20 , 97 , 2 , 255 , 87 , 128 , 99 , 131 , 11 , 47 , 87 , 20 , 97 , 3 , 18 , 87 , 128 , 99 , 132 , 219 , 128 , 159 , 20 , 97 , 3 , 37 , 87 , 96 , 0 , 128 , 253 , 91 , 128 , 99 , 58 , 4 , 158 , 2 , 20 , 97 , 2 , 165 , 87 , 128 , 99 , 76 , 131 , 12 , 189 , 20 , 97 , 2 , 174 , 87 , 128 , 99 , 92 , 151 , 90 , 187 , 20 , 97 , 2 , 205 , 87 , 128 , 99 , 98 , 69 , 229 , 97 , 20 , 97 , 2 , 228 , 87 , 96 , 0 , 128 , 253 , 91 , 128 , 99 , 19 , 203 , 1 , 249 , 17 , 97 , 1 , 184 , 87 , 128 , 99 , 19 , 203 , 1 , 249 , 20 , 97 , 2 , 75 , 87 , 128 , 99 , 30 , 209 , 61 , 27 , 20 , 97 , 2 , 119 , 87 , 128 , 99 , 36 , 17 , 136 , 4 , 20 , 97 , 2 , 138 , 87 , 128 , 99 , 52 , 8 , 228 , 112 , 20 , 97 , 2 , 159 , 87 , 96 , 0 , 128 , 253 , 91 , 128 , 99 , 1 , 103 , 55 , 187 , 20 , 97 , 1 , 223 , 87 , 128 , 99 , 11 , 39 , 251 , 154 , 20 , 97 , 2 , 15 , 87 , 128 , 99 , 12 , 52 , 10 , 36 , 20 , 97 , 2 , 33 , 87 , 91 , 96 , 0 , 128 , 253 , 91 , 96 , 2 , 84 , 97 , 1 , 242 , 144 , 96 , 1 , 96 , 1 , 96 , 64 , 27 , 3 , 22 , 129 , 86 , 91 , 96 , 64 , 81 , 96 , 1 , 96 , 1 , 96 , 64 , 27 , 3 , 144 , 145 , 22 , 129 , 82 , 96 , 32 , 1 , 91 , 96 , 64 , 81 , 128 , 145 , 3 , 144 , 243 , 91 , 96 , 9 , 84 , 91 , 96 , 64 , 81 , 144 , 129 , 82 , 96 , 32 , 1 , 97 , 2 , 6 , 86 , 91 , 96 , 0 , 84 , 97 , 1 , 0 , 144 , 4 , 96 , 1 , 96 , 1 , 96 , 160 , 27 , 3 , 22 , 91 , 96 , 64 , 81 , 96 , 1 , 96 , 1 , 96 , 160 , 27 , 3 , 144 , 145 , 22 , 129 , 82 , 96 , 32 , 1 , 97 , 2 , 6 , 86 , 91 , 96 , 0 , 84 , 97 , 2 , 98 , 144 , 96 , 1 , 96 , 168 , 27 , 144 , 4 , 99 , 255 , 255 , 255 , 255 , 22 , 129 , 86 , 91 , 96 , 64 , 81 , 99 , 255 , 255 , 255 , 255 , 144 , 145 , 22 , 129 , 82 , 96 , 32 , 1 , 97 , 2 , 6 , 86 , 91 , 97 , 2 , 51 , 97 , 2 , 133 , 54 , 96 , 4 , 97 , 28 , 196 , 86 , 91 , 97 , 4 , 108 , 86 , 91 , 97 , 2 , 157 , 97 , 2 , 152 , 54 , 96 , 4 , 97 , 29 , 131 , 86 , 91 , 97 , 4 , 140 , 86 , 91 , 0 , 91 , 70 , 97 , 2 , 19 , 86 , 91 , 97 , 2 , 19 , 96 , 5 , 84 , 129 , 86 , 91 , 97 , 2 , 182 , 97 , 6 , 101 , 86 , 91 , 96 , 64 , 81 , 101 , 255 , 255 , 255 , 255 , 255 , 255 , 144 , 145 , 22 , 129 , 82 , 96 , 32 , 1 , 97 , 2 , 6 , 86 , 91 , 96 , 0 , 84 , 96 , 255 , 22 , 91 , 96 , 64 , 81 , 144 , 21 , 21 , 129 , 82 , 96 , 32 , 1 , 97 , 2 , 6 , 86 , 91 , 97 , 2 , 157 , 97 , 2 , 242 , 54 , 96 , 4 , 97 , 27 , 40 , 86 , 91 , 97 , 6 , 179 , 86 , 91 , 97 , 2 , 157 , 97 , 11 , 54 , 86 , 91 , 97 , 2 , 157 , 97 , 3 , 13 , 54 , 96 , 4 , 97 , 29 , 39 , 86 , 91 , 97 , 11 , 180 , 86 , 91 , 97 , 2 , 212 , 97 , 3 , 32 , 54 , 96 , 4 , 97 , 27 , 15 , 86 , 91 , 97 , 13 , 4 , 86 , 91 , 97 , 2 , 51 , 97 , 3 , 51 , 54 , 96 , 4 , 97 , 27 , 15 , 86 , 91 , 96 , 10 , 96 , 32 , 82 , 96 , 0 , 144 , 129 , 82 , 96 , 64 , 144 , 32 , 84 , 96 , 1 , 96 , 1 , 96 , 160 , 27 , 3 , 22 , 129 , 86 , 91 , 97 , 2 , 212 , 97 , 3 , 92 , 54 , 96 , 4 , 97 , 28 , 196 , 86 , 91 , 97 , 13 , 40 , 86 , 91 , 97 , 3 , 108 , 96 , 1 , 96 , 248 , 27 , 129 , 86 , 91 , 96 , 64 , 81 , 96 , 1 , 96 , 1 , 96 , 240 , 27 , 3 , 25 , 144 , 145 , 22 , 129 , 82 , 96 , 32 , 1 , 97 , 2 , 6 , 86 , 91 , 96 , 0 , 84 , 97 , 2 , 98 , 144 , 96 , 1 , 96 , 200 , 27 , 144 , 4 , 99 , 255 , 255 , 255 , 255 , 22 , 129 , 86 , 91 , 97 , 2 , 157 , 97 , 3 , 170 , 54 , 96 , 4 , 97 , 28 , 59 , 86 , 91 , 97 , 13 , 92 , 86 , 91 , 97 , 2 , 19 , 96 , 8 , 84 , 129 , 86 , 91 , 97 , 2 , 157 , 97 , 3 , 198 , 54 , 96 , 4 , 97 , 26 , 9 , 86 , 91 , 97 , 15 , 37 , 86 , 91 , 96 , 4 , 84 , 97 , 2 , 98 , 144 , 99 , 255 , 255 , 255 , 255 , 22 , 129 , 86 , 91 , 97 , 2 , 19 , 96 , 3 , 84 , 129 , 86 , 91 , 97 , 1 , 242 , 97 , 3 , 242 , 54 , 96 , 4 , 97 , 27 , 15 , 86 , 91 , 101 , 255 , 255 , 255 , 255 , 255 , 255 , 22 , 144 , 86 , 91 , 97 , 2 , 19 , 96 , 1 , 84 , 129 , 86 , 91 , 96 , 0 , 84 , 97 , 1 , 0 , 144 , 4 , 96 , 1 , 96 , 1 , 96 , 160 , 27 , 3 , 22 , 51 , 20 , 97 , 2 , 212 , 86 , 91 , 97 , 2 , 19 , 96 , 9 , 84 , 129 , 86 , 91 , 97 , 2 , 157 , 97 , 4 , 53 , 54 , 96 , 4 , 97 , 26 , 60 , 86 , 91 , 97 , 15 , 132 , 86 , 91 , 97 , 2 , 157 , 97 , 4 , 72 , 54 , 96 , 4 , 97 , 27 , 183 , 86 , 91 , 97 , 18 , 65 , 86 , 91 , 97 , 2 , 212 , 97 , 4 , 91 , 54 , 96 , 4 , 97 , 27 , 15 , 86 , 91 , 96 , 48 , 28 , 96 , 1 , 96 , 1 , 96 , 160 , 27 , 3 , 22 , 48 , 20 , 144 , 86 , 91 , 129 , 81 , 96 , 32 , 131 , 1 , 32 , 96 , 0 , 144 , 129 , 97 , 4 , 129 , 130 , 133 , 97 , 20 , 0 , 86 , 91 , 146 , 80 , 80 , 80 , 91 , 146 , 145 , 80 , 80 , 86 , 91 , 96 , 2 , 84 , 97 , 4 , 165 , 144 , 97 , 3 , 232 , 144 , 96 , 1 , 96 , 1 , 96 , 64 , 27 , 3 , 22 , 97 , 33 , 51 , 86 , 91 , 96 , 1 , 96 , 1 , 96 , 64 , 27 , 3 , 22 , 96 , 3 , 84 , 97 , 4 , 187 , 145 , 144 , 97 , 33 , 77 , 86 , 91 , 96 , 8 , 84 , 97 , 4 , 200 , 145 , 144 , 97 , 32 , 208 , 86 , 91 , 66 , 16 , 21 , 97 , 5 , 20 , 87 , 96 , 64 , 81 , 98 , 70 , 27 , 205 , 96 , 229 , 27 , 129 , 82 , 96 , 32 , 96 , 4 , 130 , 1 , 82 , 96 , 21 , 96 , 36 , 130 , 1 , 82 , 116 , 73 , 110 , 118 , 97 , 108 , 105 , 100 , 32 , 116 , 105 , 109 , 101 , 32 , 102 , 111 , 114 , 32 , 118 , 111 , 116 , 101 , 96 , 88 , 27 , 96 , 68 , 130 , 1 , 82 , 96 , 100 , 1 , 91 , 96 , 64 , 81 , 128 , 145 , 3 , 144 , 253 , 91 , 96 , 32 , 129 , 1 , 81 , 129 , 81 , 51 , 145 , 97 , 5 , 40 , 145 , 131 , 144 , 97 , 20 , 36 , 86 , 91 , 97 , 5 , 107 , 87 , 96 , 64 , 81 , 98 , 70 , 27 , 205 , 96 , 229 , 27 , 129 , 82 , 96 , 32 , 96 , 4 , 130 , 1 , 82 , 96 , 20 , 96 , 36 , 130 , 1 , 82 , 115 , 52 , 183 , 59 , 48 , 182 , 52 , 178 , 16 , 54 , 178 , 185 , 53 , 182 , 50 , 144 , 56 , 57 , 55 , 183 , 179 , 96 , 97 , 27 , 96 , 68 , 130 , 1 , 82 , 96 , 100 , 1 , 97 , 5 , 11 , 86 , 91 , 96 , 5 , 84 , 96 , 0 , 144 , 129 , 82 , 96 , 6 , 96 , 32 , 144 , 129 , 82 , 96 , 64 , 128 , 131 , 32 , 96 , 1 , 96 , 1 , 96 , 160 , 27 , 3 , 133 , 22 , 132 , 82 , 144 , 145 , 82 , 144 , 32 , 84 , 96 , 255 , 22 , 21 , 97 , 5 , 209 , 87 , 96 , 64 , 81 , 98 , 70 , 27 , 205 , 96 , 229 , 27 , 129 , 82 , 96 , 32 , 96 , 4 , 130 , 1 , 82 , 96 , 13 , 96 , 36 , 130 , 1 , 82 , 108 , 24 , 91 , 28 , 153 , 88 , 89 , 30 , 72 , 29 , 155 , 221 , 25 , 89 , 96 , 154 , 27 , 96 , 68 , 130 , 1 , 82 , 96 , 100 , 1 , 97 , 5 , 11 , 86 , 91 , 96 , 5 , 128 , 84 , 96 , 0 , 144 , 129 , 82 , 96 , 6 , 96 , 32 , 144 , 129 , 82 , 96 , 64 , 128 , 131 , 32 , 96 , 1 , 96 , 1 , 96 , 160 , 27 , 3 , 128 , 135 , 22 , 133 , 82 , 144 , 131 , 82 , 129 , 132 , 32 , 128 , 84 , 96 , 255 , 25 , 22 , 96 , 1 , 144 , 129 , 23 , 144 , 145 , 85 , 148 , 84 , 132 , 82 , 96 , 7 , 131 , 82 , 129 , 132 , 32 , 135 , 131 , 1 , 81 , 144 , 145 , 22 , 132 , 82 , 144 , 145 , 82 , 129 , 32 , 128 , 84 , 144 , 145 , 144 , 97 , 6 , 54 , 144 , 132 , 144 , 99 , 255 , 255 , 255 , 255 , 22 , 97 , 32 , 232 , 86 , 91 , 146 , 80 , 97 , 1 , 0 , 10 , 129 , 84 , 129 , 99 , 255 , 255 , 255 , 255 , 2 , 25 , 22 , 144 , 131 , 99 , 255 , 255 , 255 , 255 , 22 , 2 , 23 , 144 , 85 , 80 , 97 , 6 , 97 , 130 , 96 , 64 , 1 , 81 , 97 , 21 , 92 , 86 , 91 , 80 , 80 , 86 , 91 , 96 , 64 , 128 , 81 , 96 , 1 , 96 , 248 , 27 , 96 , 32 , 130 , 1 , 129 , 144 , 82 , 70 , 96 , 224 , 27 , 96 , 1 , 96 , 1 , 96 , 224 , 27 , 3 , 25 , 129 , 22 , 96 , 34 , 132 , 1 , 82 , 131 , 81 , 128 , 132 , 3 , 96 , 6 , 1 , 129 , 82 , 96 , 38 , 144 , 147 , 1 , 144 , 147 , 82 , 96 , 0 , 146 , 145 , 97 , 6 , 168 , 129 , 97 , 33 , 151 , 86 , 91 , 96 , 208 , 28 , 147 , 80 , 80 , 80 , 80 , 144 , 86 , 91 , 131 , 99 , 255 , 255 , 255 , 255 , 22 , 128 , 96 , 9 , 84 , 16 , 97 , 7 , 23 , 87 , 96 , 64 , 81 , 98 , 70 , 27 , 205 , 96 , 229 , 27 , 129 , 82 , 96 , 32 , 96 , 4 , 130 , 1 , 82 , 96 , 35 , 96 , 36 , 130 , 1 , 82 , 127 , 80 , 114 , 111 , 112 , 111 , 115 , 97 , 108 , 78 , 111 , 110 , 99 , 101 , 84 , 114 , 97 , 99 , 107 , 101 , 114 , 58 , 32 , 73 , 110 , 118 , 97 , 108 , 105 , 100 , 32 , 110 , 111 , 96 , 68 , 130 , 1 , 82 , 98 , 110 , 99 , 101 , 96 , 232 , 27 , 96 , 100 , 130 , 1 , 82 , 96 , 132 , 1 , 97 , 5 , 11 , 86 , 91 , 96 , 9 , 84 , 97 , 7 , 37 , 144 , 96 , 1 , 97 , 32 , 208 , 86 , 91 , 129 , 17 , 21 , 97 , 7 , 154 , 87 , 96 , 64 , 81 , 98 , 70 , 27 , 205 , 96 , 229 , 27 , 129 , 82 , 96 , 32 , 96 , 4 , 130 , 1 , 82 , 96 , 58 , 96 , 36 , 130 , 1 , 82 , 127 , 80 , 114 , 111 , 112 , 111 , 115 , 97 , 108 , 78 , 111 , 110 , 99 , 101 , 84 , 114 , 97 , 99 , 107 , 101 , 114 , 58 , 32 , 78 , 111 , 110 , 99 , 101 , 32 , 109 , 117 , 115 , 116 , 96 , 68 , 130 , 1 , 82 , 127 , 32 , 110 , 111 , 116 , 32 , 105 , 110 , 99 , 114 , 101 , 109 , 101 , 110 , 116 , 32 , 109 , 111 , 114 , 101 , 32 , 116 , 104 , 97 , 110 , 32 , 49 , 0 , 0 , 0 , 0 , 0 , 0 , 96 , 100 , 130 , 1 , 82 , 96 , 132 , 1 , 97 , 5 , 11 , 86 , 91 , 96 , 9 , 129 , 144 , 85 , 96 , 64 , 128 , 81 , 96 , 32 , 129 , 1 , 137 , 144 , 82 , 96 , 1 , 96 , 1 , 96 , 224 , 27 , 3 , 25 , 136 , 129 , 22 , 130 , 132 , 1 , 82 , 96 , 224 , 136 , 144 , 27 , 22 , 96 , 68 , 130 , 1 , 82 , 96 , 72 , 129 , 1 , 134 , 144 , 82 , 96 , 96 , 133 , 144 , 27 , 107 , 255 , 255 , 255 , 255 , 255 , 255 , 255 , 255 , 255 , 255 , 255 , 255 , 25 , 22 , 96 , 104 , 130 , 1 , 82 , 129 , 81 , 96 , 92 , 129 , 131 , 3 , 1 , 129 , 82 , 96 , 124 , 144 , 145 , 1 , 144 , 145 , 82 , 130 , 97 , 8 , 2 , 130 , 130 , 97 , 13 , 40 , 86 , 91 , 97 , 8 , 30 , 87 , 96 , 64 , 81 , 98 , 70 , 27 , 205 , 96 , 229 , 27 , 129 , 82 , 96 , 4 , 1 , 97 , 5 , 11 , 144 , 97 , 31 , 153 , 86 , 91 , 96 , 64 , 81 , 99 , 131 , 11 , 47 , 87 , 96 , 224 , 27 , 129 , 82 , 96 , 4 , 129 , 1 , 138 , 144 , 82 , 48 , 144 , 99 , 131 , 11 , 47 , 87 , 144 , 96 , 36 , 1 , 96 , 32 , 96 , 64 , 81 , 128 , 131 , 3 , 129 , 134 , 128 , 59 , 21 , 128 , 21 , 97 , 8 , 85 , 87 , 96 , 0 , 128 , 253 , 91 , 80 , 90 , 250 , 21 , 128 , 21 , 97 , 8 , 105 , 87 , 61 , 96 , 0 , 128 , 62 , 61 , 96 , 0 , 253 , 91 , 80 , 80 , 80 , 80 , 96 , 64 , 81 , 61 , 96 , 31 , 25 , 96 , 31 , 130 , 1 , 22 , 130 , 1 , 128 , 96 , 64 , 82 , 80 , 129 , 1 , 144 , 97 , 8 , 141 , 145 , 144 , 97 , 26 , 230 , 86 , 91 , 97 , 8 , 169 , 87 , 96 , 64 , 81 , 98 , 70 , 27 , 205 , 96 , 229 , 27 , 129 , 82 , 96 , 4 , 1 , 97 , 5 , 11 , 144 , 97 , 31 , 60 , 86 , 91 , 96 , 64 , 81 , 99 , 131 , 11 , 47 , 87 , 96 , 224 , 27 , 129 , 82 , 96 , 4 , 129 , 1 , 135 , 144 , 82 , 48 , 144 , 99 , 131 , 11 , 47 , 87 , 144 , 96 , 36 , 1 , 96 , 32 , 96 , 64 , 81 , 128 , 131 , 3 , 129 , 134 , 128 , 59 , 21 , 128 , 21 , 97 , 8 , 224 , 87 , 96 , 0 , 128 , 253 , 91 , 80 , 90 , 250 , 21 , 128 , 21 , 97 , 8 , 244 , 87 , 61 , 96 , 0 , 128 , 62 , 61 , 96 , 0 , 253 , 91 , 80 , 80 , 80 , 80 , 96 , 64 , 81 , 61 , 96 , 31 , 25 , 96 , 31 , 130 , 1 , 22 , 130 , 1 , 128 , 96 , 64 , 82 , 80 , 129 , 1 , 144 , 97 , 9 , 24 , 145 , 144 , 97 , 26 , 230 , 86 , 91 , 97 , 9 , 52 , 87 , 96 , 64 , 81 , 98 , 70 , 27 , 205 , 96 , 229 , 27 , 129 , 82 , 96 , 4 , 1 , 97 , 5 , 11 , 144 , 97 , 31 , 60 , 86 , 91 , 96 , 64 , 81 , 99 , 245 , 252 , 61 , 107 , 96 , 224 , 27 , 129 , 82 , 96 , 4 , 129 , 1 , 138 , 144 , 82 , 48 , 144 , 99 , 245 , 252 , 61 , 107 , 144 , 96 , 36 , 1 , 96 , 32 , 96 , 64 , 81 , 128 , 131 , 3 , 129 , 134 , 128 , 59 , 21 , 128 , 21 , 97 , 9 , 107 , 87 , 96 , 0 , 128 , 253 , 91 , 80 , 90 , 250 , 21 , 128 , 21 , 97 , 9 , 127 , 87 , 61 , 96 , 0 , 128 , 62 , 61 , 96 , 0 , 253 , 91 , 80 , 80 , 80 , 80 , 96 , 64 , 81 , 61 , 96 , 31 , 25 , 96 , 31 , 130 , 1 , 22 , 130 , 1 , 128 , 96 , 64 , 82 , 80 , 129 , 1 , 144 , 97 , 9 , 163 , 145 , 144 , 97 , 26 , 230 , 86 , 91 , 97 , 10 , 21 , 87 , 96 , 64 , 81 , 98 , 70 , 27 , 205 , 96 , 229 , 27 , 129 , 82 , 96 , 32 , 96 , 4 , 130 , 1 , 82 , 96 , 56 , 96 , 36 , 130 , 1 , 82 , 127 , 97 , 100 , 109 , 105 , 110 , 83 , 101 , 116 , 82 , 101 , 115 , 111 , 117 , 114 , 99 , 101 , 87 , 105 , 116 , 104 , 83 , 105 , 103 , 110 , 97 , 116 , 117 , 114 , 101 , 58 , 32 , 73 , 96 , 68 , 130 , 1 , 82 , 127 , 110 , 118 , 97 , 108 , 105 , 100 , 32 , 101 , 120 , 101 , 99 , 117 , 116 , 105 , 111 , 110 , 32 , 99 , 111 , 110 , 116 , 101 , 120 , 116 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 96 , 100 , 130 , 1 , 82 , 96 , 132 , 1 , 97 , 5 , 11 , 86 , 91 , 96 , 1 , 96 , 1 , 96 , 224 , 27 , 3 , 25 , 136 , 22 , 99 , 98 , 69 , 229 , 97 , 96 , 224 , 27 , 20 , 97 , 10 , 155 , 87 , 96 , 64 , 81 , 98 , 70 , 27 , 205 , 96 , 229 , 27 , 129 , 82 , 96 , 32 , 96 , 4 , 130 , 1 , 82 , 96 , 57 , 96 , 36 , 130 , 1 , 82 , 127 , 97 , 100 , 109 , 105 , 110 , 83 , 101 , 116 , 82 , 101 , 115 , 111 , 117 , 114 , 99 , 101 , 87 , 105 , 116 , 104 , 83 , 105 , 103 , 110 , 97 , 116 , 117 , 114 , 101 , 58 , 32 , 73 , 96 , 68 , 130 , 1 , 82 , 127 , 110 , 118 , 97 , 108 , 105 , 100 , 32 , 102 , 117 , 110 , 99 , 116 , 105 , 111 , 110 , 32 , 115 , 105 , 103 , 110 , 97 , 116 , 117 , 114 , 101 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 96 , 100 , 130 , 1 , 82 , 96 , 132 , 1 , 97 , 5 , 11 , 86 , 91 , 96 , 0 , 134 , 129 , 82 , 96 , 10 , 96 , 32 , 82 , 96 , 64 , 144 , 129 , 144 , 32 , 128 , 84 , 96 , 1 , 96 , 1 , 96 , 160 , 27 , 3 , 25 , 22 , 96 , 1 , 96 , 1 , 96 , 160 , 27 , 3 , 136 , 129 , 22 , 145 , 130 , 23 , 144 , 146 , 85 , 145 , 81 , 99 , 92 , 125 , 27 , 155 , 96 , 225 , 27 , 129 , 82 , 96 , 4 , 129 , 1 , 137 , 144 , 82 , 96 , 48 , 137 , 144 , 28 , 144 , 145 , 22 , 96 , 36 , 130 , 1 , 129 , 144 , 82 , 135 , 146 , 144 , 145 , 99 , 184 , 250 , 55 , 54 , 144 , 96 , 68 , 1 , 96 , 0 , 96 , 64 , 81 , 128 , 131 , 3 , 129 , 96 , 0 , 135 , 128 , 59 , 21 , 128 , 21 , 97 , 11 , 17 , 87 , 96 , 0 , 128 , 253 , 91 , 80 , 90 , 241 , 21 , 128 , 21 , 97 , 11 , 37 , 87 , 61 , 96 , 0 , 128 , 62 , 61 , 96 , 0 , 253 , 91 , 80 , 80 , 80 , 80 , 80 , 80 , 80 , 80 , 80 , 80 , 80 , 80 , 80 , 80 , 80 , 86 , 91 , 96 , 0 , 84 , 97 , 1 , 0 , 144 , 4 , 96 , 1 , 96 , 1 , 96 , 160 , 27 , 3 , 22 , 51 , 20 , 97 , 11 , 101 , 87 , 96 , 64 , 81 , 98 , 70 , 27 , 205 , 96 , 229 , 27 , 129 , 82 , 96 , 4 , 1 , 97 , 5 , 11 , 144 , 97 , 30 , 246 , 86 , 91 , 96 , 0 , 128 , 84 , 96 , 64 , 81 , 97 , 1 , 0 , 144 , 145 , 4 , 96 , 1 , 96 , 1 , 96 , 160 , 27 , 3 , 22 , 144 , 127 , 31 , 50 , 52 , 137 , 244 , 4 , 227 , 186 , 215 , 98 , 33 , 95 , 192 , 84 , 71 , 249 , 167 , 123 , 183 , 243 , 182 , 48 , 166 , 240 , 138 , 40 , 81 , 185 , 153 , 219 , 65 , 247 , 144 , 131 , 144 , 163 , 96 , 0 , 128 , 84 , 97 , 1 , 0 , 96 , 1 , 96 , 168 , 27 , 3 , 25 , 22 , 144 , 85 , 86 , 91 , 96 , 0 , 84 , 99 , 255 , 255 , 255 , 255 , 128 , 132 , 22 , 96 , 1 , 96 , 168 , 27 , 144 , 146 , 4 , 22 , 16 , 97 , 12 , 5 , 87 , 96 , 64 , 81 , 98 , 70 , 27 , 205 , 96 , 229 , 27 , 129 , 82 , 96 , 32 , 96 , 4 , 130 , 1 , 82 , 96 , 13 , 96 , 36 , 130 , 1 , 82 , 108 , 73 , 110 , 118 , 97 , 108 , 105 , 100 , 32 , 110 , 111 , 110 , 99 , 101 , 96 , 152 , 27 , 96 , 68 , 130 , 1 , 82 , 96 , 100 , 1 , 97 , 5 , 11 , 86 , 91 , 96 , 0 , 84 , 97 , 12 , 32 , 144 , 96 , 1 , 96 , 168 , 27 , 144 , 4 , 99 , 255 , 255 , 255 , 255 , 22 , 96 , 1 , 97 , 32 , 232 , 86 , 91 , 99 , 255 , 255 , 255 , 255 , 22 , 130 , 99 , 255 , 255 , 255 , 255 , 22 , 17 , 21 , 97 , 12 , 123 , 87 , 96 , 64 , 81 , 98 , 70 , 27 , 205 , 96 , 229 , 27 , 129 , 82 , 96 , 32 , 96 , 4 , 130 , 1 , 82 , 96 , 25 , 96 , 36 , 130 , 1 , 82 , 127 , 78 , 111 , 110 , 99 , 101 , 32 , 109 , 117 , 115 , 116 , 32 , 105 , 110 , 99 , 114 , 101 , 109 , 101 , 110 , 116 , 32 , 98 , 121 , 32 , 49 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 96 , 68 , 130 , 1 , 82 , 96 , 100 , 1 , 97 , 5 , 11 , 86 , 91 , 130 , 81 , 96 , 32 , 128 , 133 , 1 , 145 , 144 , 145 , 32 , 96 , 64 , 81 , 144 , 145 , 130 , 145 , 97 , 12 , 180 , 145 , 97 , 12 , 159 , 145 , 135 , 145 , 137 , 145 , 1 , 97 , 30 , 108 , 86 , 91 , 96 , 64 , 81 , 96 , 32 , 129 , 131 , 3 , 3 , 129 , 82 , 144 , 96 , 64 , 82 , 132 , 97 , 13 , 40 , 86 , 91 , 97 , 12 , 208 , 87 , 96 , 64 , 81 , 98 , 70 , 27 , 205 , 96 , 229 , 27 , 129 , 82 , 96 , 4 , 1 , 97 , 5 , 11 , 144 , 97 , 30 , 246 , 86 , 91 , 97 , 12 , 217 , 129 , 97 , 21 , 179 , 86 , 91 , 80 , 80 , 96 , 0 , 128 , 84 , 99 , 255 , 255 , 255 , 255 , 144 , 147 , 22 , 96 , 1 , 96 , 168 , 27 , 2 , 99 , 255 , 255 , 255 , 255 , 96 , 168 , 27 , 25 , 144 , 147 , 22 , 146 , 144 , 146 , 23 , 144 , 145 , 85 , 80 , 80 , 86 , 91 , 96 , 0 , 101 , 255 , 255 , 255 , 255 , 255 , 255 , 130 , 22 , 128 , 97 , 13 , 24 , 97 , 6 , 101 , 86 , 91 , 101 , 255 , 255 , 255 , 255 , 255 , 255 , 22 , 20 , 147 , 146 , 80 , 80 , 80 , 86 , 91 , 129 , 81 , 96 , 32 , 131 , 1 , 32 , 96 , 0 , 144 , 129 , 97 , 13 , 61 , 130 , 133 , 97 , 20 , 0 , 86 , 91 , 96 , 0 , 84 , 97 , 1 , 0 , 144 , 4 , 96 , 1 , 96 , 1 , 96 , 160 , 27 , 3 , 144 , 129 , 22 , 145 , 22 , 20 , 149 , 148 , 80 , 80 , 80 , 80 , 80 , 86 , 91 , 130 , 130 , 128 , 128 , 96 , 31 , 1 , 96 , 32 , 128 , 145 , 4 , 2 , 96 , 32 , 1 , 96 , 64 , 81 , 144 , 129 , 1 , 96 , 64 , 82 , 128 , 147 , 146 , 145 , 144 , 129 , 129 , 82 , 96 , 32 , 1 , 131 , 131 , 128 , 130 , 132 , 55 , 96 , 0 , 146 , 1 , 145 , 144 , 145 , 82 , 80 , 132 , 146 , 80 , 97 , 13 , 160 , 145 , 80 , 131 , 144 , 80 , 130 , 97 , 13 , 40 , 86 , 91 , 97 , 13 , 188 , 87 , 96 , 64 , 81 , 98 , 70 , 27 , 205 , 96 , 229 , 27 , 129 , 82 , 96 , 4 , 1 , 97 , 5 , 11 , 144 , 97 , 31 , 153 , 86 , 91 , 96 , 0 , 97 , 13 , 203 , 96 , 32 , 130 , 135 , 137 , 97 , 32 , 166 , 86 , 91 , 97 , 13 , 212 , 145 , 97 , 33 , 121 , 86 , 91 , 96 , 64 , 81 , 99 , 131 , 11 , 47 , 87 , 96 , 224 , 27 , 129 , 82 , 96 , 4 , 129 , 1 , 130 , 144 , 82 , 144 , 145 , 80 , 48 , 144 , 99 , 131 , 11 , 47 , 87 , 144 , 96 , 36 , 1 , 96 , 32 , 96 , 64 , 81 , 128 , 131 , 3 , 129 , 134 , 128 , 59 , 21 , 128 , 21 , 97 , 14 , 14 , 87 , 96 , 0 , 128 , 253 , 91 , 80 , 90 , 250 , 21 , 128 , 21 , 97 , 14 , 34 , 87 , 61 , 96 , 0 , 128 , 62 , 61 , 96 , 0 , 253 , 91 , 80 , 80 , 80 , 80 , 96 , 64 , 81 , 61 , 96 , 31 , 25 , 96 , 31 , 130 , 1 , 22 , 130 , 1 , 128 , 96 , 64 , 82 , 80 , 129 , 1 , 144 , 97 , 14 , 70 , 145 , 144 , 97 , 26 , 230 , 86 , 91 , 97 , 14 , 164 , 87 , 96 , 64 , 81 , 98 , 70 , 27 , 205 , 96 , 229 , 27 , 129 , 82 , 96 , 32 , 96 , 4 , 130 , 1 , 82 , 96 , 41 , 96 , 36 , 130 , 1 , 82 , 127 , 83 , 105 , 103 , 110 , 97 , 116 , 117 , 114 , 101 , 66 , 114 , 105 , 100 , 103 , 101 , 58 , 32 , 69 , 120 , 101 , 99 , 117 , 116 , 105 , 110 , 103 , 32 , 111 , 110 , 32 , 119 , 114 , 96 , 68 , 130 , 1 , 82 , 104 , 55 , 183 , 51 , 144 , 49 , 180 , 48 , 180 , 183 , 96 , 185 , 27 , 96 , 100 , 130 , 1 , 82 , 96 , 132 , 1 , 97 , 5 , 11 , 86 , 91 , 96 , 0 , 129 , 129 , 82 , 96 , 10 , 96 , 32 , 82 , 96 , 64 , 144 , 129 , 144 , 32 , 84 , 144 , 81 , 99 , 113 , 36 , 103 , 249 , 96 , 225 , 27 , 129 , 82 , 96 , 1 , 96 , 1 , 96 , 160 , 27 , 3 , 144 , 145 , 22 , 144 , 129 , 144 , 129 , 144 , 99 , 226 , 72 , 207 , 242 , 144 , 97 , 14 , 233 , 144 , 134 , 144 , 140 , 144 , 140 , 144 , 96 , 4 , 1 , 97 , 30 , 192 , 86 , 91 , 96 , 0 , 96 , 64 , 81 , 128 , 131 , 3 , 129 , 96 , 0 , 135 , 128 , 59 , 21 , 128 , 21 , 97 , 15 , 3 , 87 , 96 , 0 , 128 , 253 , 91 , 80 , 90 , 241 , 21 , 128 , 21 , 97 , 15 , 23 , 87 , 61 , 96 , 0 , 128 , 62 , 61 , 96 , 0 , 253 , 91 , 80 , 80 , 80 , 80 , 80 , 80 , 80 , 80 , 80 , 80 , 80 , 80 , 86 , 91 , 96 , 0 , 84 , 97 , 1 , 0 , 144 , 4 , 96 , 1 , 96 , 1 , 96 , 160 , 27 , 3 , 22 , 51 , 20 , 97 , 15 , 84 , 87 , 96 , 64 , 81 , 98 , 70 , 27 , 205 , 96 , 229 , 27 , 129 , 82 , 96 , 4 , 1 , 97 , 5 , 11 , 144 , 97 , 30 , 246 , 86 , 91 , 97 , 15 , 93 , 130 , 97 , 21 , 179 , 86 , 91 , 96 , 0 , 128 , 84 , 99 , 255 , 255 , 255 , 255 , 144 , 146 , 22 , 96 , 1 , 96 , 168 , 27 , 2 , 99 , 255 , 255 , 255 , 255 , 96 , 168 , 27 , 25 , 144 , 146 , 22 , 145 , 144 , 145 , 23 , 144 , 85 , 80 , 86 , 91 , 97 , 15 , 142 , 130 , 132 , 97 , 33 , 108 , 86 , 91 , 129 , 128 , 81 , 130 , 81 , 20 , 97 , 15 , 249 , 87 , 96 , 64 , 81 , 98 , 70 , 27 , 205 , 96 , 229 , 27 , 129 , 82 , 96 , 32 , 96 , 4 , 130 , 1 , 82 , 96 , 48 , 96 , 36 , 130 , 1 , 82 , 127 , 83 , 105 , 103 , 110 , 97 , 116 , 117 , 114 , 101 , 66 , 114 , 105 , 100 , 103 , 101 , 58 , 32 , 68 , 97 , 116 , 97 , 32 , 97 , 110 , 100 , 32 , 115 , 105 , 103 , 32 , 108 , 101 , 96 , 68 , 130 , 1 , 82 , 111 , 13 , 204 , 238 , 141 , 14 , 100 , 13 , 174 , 174 , 110 , 132 , 13 , 172 , 46 , 140 , 109 , 96 , 131 , 27 , 96 , 100 , 130 , 1 , 82 , 96 , 132 , 1 , 97 , 5 , 11 , 86 , 91 , 96 , 0 , 91 , 130 , 81 , 129 , 16 , 21 , 97 , 16 , 111 , 87 , 97 , 16 , 65 , 131 , 130 , 129 , 81 , 129 , 16 , 97 , 16 , 26 , 87 , 97 , 16 , 26 , 97 , 34 , 110 , 86 , 91 , 96 , 32 , 2 , 96 , 32 , 1 , 1 , 81 , 131 , 131 , 129 , 81 , 129 , 16 , 97 , 16 , 52 , 87 , 97 , 16 , 52 , 97 , 34 , 110 , 86 , 91 , 96 , 32 , 2 , 96 , 32 , 1 , 1 , 81 , 97 , 13 , 40 , 86 , 91 , 97 , 16 , 93 , 87 , 96 , 64 , 81 , 98 , 70 , 27 , 205 , 96 , 229 , 27 , 129 , 82 , 96 , 4 , 1 , 97 , 5 , 11 , 144 , 97 , 31 , 153 , 86 , 91 , 128 , 97 , 16 , 103 , 129 , 97 , 33 , 206 , 86 , 91 , 145 , 80 , 80 , 97 , 15 , 252 , 86 , 91 , 80 , 96 , 0 , 91 , 132 , 129 , 16 , 21 , 97 , 18 , 57 , 87 , 96 , 0 , 134 , 134 , 131 , 129 , 129 , 16 , 97 , 16 , 143 , 87 , 97 , 16 , 143 , 97 , 34 , 110 , 86 , 91 , 144 , 80 , 96 , 32 , 2 , 129 , 1 , 144 , 97 , 16 , 161 , 145 , 144 , 97 , 31 , 229 , 86 , 91 , 97 , 16 , 176 , 145 , 96 , 32 , 145 , 96 , 0 , 145 , 97 , 32 , 166 , 86 , 91 , 97 , 16 , 185 , 145 , 97 , 33 , 121 , 86 , 91 , 96 , 64 , 81 , 99 , 131 , 11 , 47 , 87 , 96 , 224 , 27 , 129 , 82 , 96 , 4 , 129 , 1 , 130 , 144 , 82 , 144 , 145 , 80 , 48 , 144 , 99 , 131 , 11 , 47 , 87 , 144 , 96 , 36 , 1 , 96 , 32 , 96 , 64 , 81 , 128 , 131 , 3 , 129 , 134 , 128 , 59 , 21 , 128 , 21 , 97 , 16 , 243 , 87 , 96 , 0 , 128 , 253 , 91 , 80 , 90 , 250 , 21 , 128 , 21 , 97 , 17 , 7 , 87 , 61 , 96 , 0 , 128 , 62 , 61 , 96 , 0 , 253 , 91 , 80 , 80 , 80 , 80 , 96 , 64 , 81 , 61 , 96 , 31 , 25 , 96 , 31 , 130 , 1 , 22 , 130 , 1 , 128 , 96 , 64 , 82 , 80 , 129 , 1 , 144 , 97 , 17 , 43 , 145 , 144 , 97 , 26 , 230 , 86 , 91 , 97 , 17 , 143 , 87 , 96 , 64 , 81 , 98 , 70 , 27 , 205 , 96 , 229 , 27 , 129 , 82 , 96 , 32 , 96 , 4 , 130 , 1 , 82 , 96 , 47 , 96 , 36 , 130 , 1 , 82 , 127 , 83 , 105 , 103 , 110 , 97 , 116 , 117 , 114 , 101 , 66 , 114 , 105 , 100 , 103 , 101 , 58 , 32 , 66 , 97 , 116 , 99 , 104 , 32 , 69 , 120 , 101 , 99 , 117 , 116 , 105 , 110 , 103 , 96 , 68 , 130 , 1 , 82 , 110 , 16 , 55 , 183 , 16 , 59 , 185 , 55 , 183 , 51 , 144 , 49 , 180 , 48 , 180 , 183 , 96 , 137 , 27 , 96 , 100 , 130 , 1 , 82 , 96 , 132 , 1 , 97 , 5 , 11 , 86 , 91 , 96 , 0 , 129 , 129 , 82 , 96 , 10 , 96 , 32 , 82 , 96 , 64 , 144 , 32 , 84 , 96 , 1 , 96 , 1 , 96 , 160 , 27 , 3 , 22 , 128 , 128 , 99 , 226 , 72 , 207 , 242 , 132 , 139 , 139 , 136 , 129 , 129 , 16 , 97 , 17 , 193 , 87 , 97 , 17 , 193 , 97 , 34 , 110 , 86 , 91 , 144 , 80 , 96 , 32 , 2 , 129 , 1 , 144 , 97 , 17 , 211 , 145 , 144 , 97 , 31 , 229 , 86 , 91 , 96 , 64 , 81 , 132 , 99 , 255 , 255 , 255 , 255 , 22 , 96 , 224 , 27 , 129 , 82 , 96 , 4 , 1 , 97 , 17 , 241 , 147 , 146 , 145 , 144 , 97 , 30 , 192 , 86 , 91 , 96 , 0 , 96 , 64 , 81 , 128 , 131 , 3 , 129 , 96 , 0 , 135 , 128 , 59 , 21 , 128 , 21 , 97 , 18 , 11 , 87 , 96 , 0 , 128 , 253 , 91 , 80 , 90 , 241 , 21 , 128 , 21 , 97 , 18 , 31 , 87 , 61 , 96 , 0 , 128 , 62 , 61 , 96 , 0 , 253 , 91 , 80 , 80 , 80 , 80 , 80 , 80 , 80 , 128 , 128 , 97 , 18 , 49 , 144 , 97 , 33 , 206 , 86 , 91 , 145 , 80 , 80 , 97 , 16 , 115 , 86 , 91 , 80 , 80 , 80 , 80 , 80 , 80 , 86 , 91 , 96 , 0 , 84 , 99 , 255 , 255 , 255 , 255 , 128 , 132 , 22 , 96 , 1 , 96 , 200 , 27 , 144 , 146 , 4 , 22 , 16 , 97 , 18 , 146 , 87 , 96 , 64 , 81 , 98 , 70 , 27 , 205 , 96 , 229 , 27 , 129 , 82 , 96 , 32 , 96 , 4 , 130 , 1 , 82 , 96 , 13 , 96 , 36 , 130 , 1 , 82 , 108 , 73 , 110 , 118 , 97 , 108 , 105 , 100 , 32 , 110 , 111 , 110 , 99 , 101 , 96 , 152 , 27 , 96 , 68 , 130 , 1 , 82 , 96 , 100 , 1 , 97 , 5 , 11 , 86 , 91 , 96 , 0 , 84 , 97 , 18 , 173 , 144 , 96 , 1 , 96 , 200 , 27 , 144 , 4 , 99 , 255 , 255 , 255 , 255 , 22 , 96 , 1 , 97 , 32 , 232 , 86 , 91 , 99 , 255 , 255 , 255 , 255 , 22 , 130 , 99 , 255 , 255 , 255 , 255 , 22 , 17 , 21 , 97 , 19 , 20 , 87 , 96 , 64 , 81 , 98 , 70 , 27 , 205 , 96 , 229 , 27 , 129 , 82 , 96 , 32 , 96 , 4 , 130 , 1 , 82 , 96 , 36 , 128 , 130 , 1 , 82 , 127 , 78 , 111 , 110 , 99 , 101 , 32 , 109 , 117 , 115 , 116 , 32 , 110 , 111 , 116 , 32 , 105 , 110 , 99 , 114 , 101 , 109 , 101 , 110 , 116 , 32 , 109 , 111 , 114 , 101 , 32 , 116 , 104 , 96 , 68 , 130 , 1 , 82 , 99 , 97 , 110 , 32 , 49 , 96 , 224 , 27 , 96 , 100 , 130 , 1 , 82 , 96 , 132 , 1 , 97 , 5 , 11 , 86 , 91 , 96 , 64 , 128 , 81 , 96 , 32 , 129 , 1 , 135 , 144 , 82 , 96 , 1 , 96 , 1 , 96 , 192 , 27 , 3 , 25 , 96 , 192 , 135 , 144 , 27 , 22 , 145 , 129 , 1 , 145 , 144 , 145 , 82 , 96 , 1 , 96 , 1 , 96 , 224 , 27 , 3 , 25 , 96 , 224 , 133 , 129 , 27 , 130 , 22 , 96 , 72 , 132 , 1 , 82 , 132 , 144 , 27 , 22 , 96 , 76 , 130 , 1 , 82 , 97 , 19 , 111 , 144 , 96 , 80 , 1 , 96 , 64 , 81 , 96 , 32 , 129 , 131 , 3 , 3 , 129 , 82 , 144 , 96 , 64 , 82 , 130 , 97 , 13 , 40 , 86 , 91 , 97 , 19 , 139 , 87 , 96 , 64 , 81 , 98 , 70 , 27 , 205 , 96 , 229 , 27 , 129 , 82 , 96 , 4 , 1 , 97 , 5 , 11 , 144 , 97 , 30 , 246 , 86 , 91 , 96 , 1 , 133 , 144 , 85 , 96 , 2 , 128 , 84 , 103 , 255 , 255 , 255 , 255 , 255 , 255 , 255 , 255 , 25 , 22 , 96 , 1 , 96 , 1 , 96 , 64 , 27 , 3 , 134 , 22 , 23 , 144 , 85 , 96 , 4 , 128 , 84 , 99 , 255 , 255 , 255 , 255 , 25 , 22 , 99 , 255 , 255 , 255 , 255 , 133 , 129 , 22 , 145 , 144 , 145 , 23 , 144 , 145 , 85 , 96 , 0 , 128 , 84 , 99 , 255 , 255 , 255 , 255 , 96 , 200 , 27 , 25 , 22 , 96 , 1 , 96 , 200 , 27 , 146 , 133 , 22 , 146 , 144 , 146 , 2 , 145 , 144 , 145 , 23 , 129 , 85 , 96 , 5 , 128 , 84 , 145 , 97 , 19 , 244 , 131 , 97 , 33 , 206 , 86 , 91 , 145 , 144 , 80 , 85 , 80 , 80 , 80 , 80 , 80 , 80 , 86 , 91 , 96 , 0 , 128 , 96 , 0 , 97 , 20 , 15 , 133 , 133 , 97 , 22 , 147 , 86 , 91 , 145 , 80 , 145 , 80 , 97 , 20 , 28 , 129 , 97 , 22 , 217 , 86 , 91 , 80 , 147 , 146 , 80 , 80 , 80 , 86 , 91 , 96 , 64 , 81 , 107 , 255 , 255 , 255 , 255 , 255 , 255 , 255 , 255 , 255 , 255 , 255 , 255 , 25 , 96 , 96 , 132 , 144 , 27 , 22 , 96 , 32 , 130 , 1 , 82 , 96 , 0 , 144 , 129 , 144 , 96 , 52 , 1 , 96 , 64 , 128 , 81 , 96 , 31 , 25 , 129 , 132 , 3 , 1 , 129 , 82 , 145 , 144 , 82 , 128 , 81 , 96 , 32 , 144 , 145 , 1 , 32 , 144 , 80 , 128 , 131 , 96 , 0 , 91 , 135 , 81 , 129 , 96 , 255 , 22 , 16 , 21 , 97 , 21 , 77 , 87 , 97 , 20 , 126 , 96 , 2 , 131 , 97 , 34 , 9 , 86 , 91 , 99 , 255 , 255 , 255 , 255 , 22 , 97 , 20 , 221 , 87 , 130 , 136 , 130 , 96 , 255 , 22 , 129 , 81 , 129 , 16 , 97 , 20 , 158 , 87 , 97 , 20 , 158 , 97 , 34 , 110 , 86 , 91 , 96 , 32 , 2 , 96 , 32 , 1 , 1 , 81 , 96 , 64 , 81 , 96 , 32 , 1 , 97 , 20 , 192 , 146 , 145 , 144 , 145 , 130 , 82 , 96 , 32 , 130 , 1 , 82 , 96 , 64 , 1 , 144 , 86 , 91 , 96 , 64 , 81 , 96 , 32 , 129 , 131 , 3 , 3 , 129 , 82 , 144 , 96 , 64 , 82 , 128 , 81 , 144 , 96 , 32 , 1 , 32 , 146 , 80 , 97 , 21 , 46 , 86 , 91 , 135 , 129 , 96 , 255 , 22 , 129 , 81 , 129 , 16 , 97 , 20 , 242 , 87 , 97 , 20 , 242 , 97 , 34 , 110 , 86 , 91 , 96 , 32 , 2 , 96 , 32 , 1 , 1 , 81 , 131 , 96 , 64 , 81 , 96 , 32 , 1 , 97 , 21 , 21 , 146 , 145 , 144 , 145 , 130 , 82 , 96 , 32 , 130 , 1 , 82 , 96 , 64 , 1 , 144 , 86 , 91 , 96 , 64 , 81 , 96 , 32 , 129 , 131 , 3 , 3 , 129 , 82 , 144 , 96 , 64 , 82 , 128 , 81 , 144 , 96 , 32 , 1 , 32 , 146 , 80 , 91 , 97 , 21 , 57 , 96 , 2 , 131 , 97 , 33 , 16 , 86 , 91 , 145 , 80 , 128 , 97 , 21 , 69 , 129 , 97 , 33 , 233 , 86 , 91 , 145 , 80 , 80 , 97 , 20 , 103 , 86 , 91 , 80 , 80 , 96 , 1 , 84 , 20 , 149 , 148 , 80 , 80 , 80 , 80 , 80 , 86 , 91 , 96 , 4 , 84 , 97 , 21 , 113 , 144 , 96 , 2 , 144 , 99 , 255 , 255 , 255 , 255 , 22 , 97 , 33 , 16 , 86 , 91 , 96 , 5 , 84 , 96 , 0 , 144 , 129 , 82 , 96 , 7 , 96 , 32 , 144 , 129 , 82 , 96 , 64 , 128 , 131 , 32 , 96 , 1 , 96 , 1 , 96 , 160 , 27 , 3 , 134 , 22 , 132 , 82 , 144 , 145 , 82 , 144 , 32 , 84 , 99 , 255 , 255 , 255 , 255 , 145 , 130 , 22 , 145 , 22 , 17 , 21 , 97 , 21 , 176 , 87 , 97 , 21 , 176 , 129 , 97 , 21 , 179 , 86 , 91 , 80 , 86 , 91 , 96 , 1 , 96 , 1 , 96 , 160 , 27 , 3 , 129 , 22 , 97 , 22 , 27 , 87 , 96 , 64 , 81 , 98 , 70 , 27 , 205 , 96 , 229 , 27 , 129 , 82 , 96 , 32 , 96 , 4 , 130 , 1 , 82 , 96 , 41 , 96 , 36 , 130 , 1 , 82 , 127 , 71 , 111 , 118 , 101 , 114 , 110 , 97 , 98 , 108 , 101 , 58 , 32 , 110 , 101 , 119 , 32 , 111 , 119 , 110 , 101 , 114 , 32 , 105 , 115 , 32 , 116 , 104 , 101 , 32 , 122 , 101 , 114 , 96 , 68 , 130 , 1 , 82 , 104 , 111 , 32 , 97 , 100 , 100 , 114 , 101 , 115 , 115 , 96 , 184 , 27 , 96 , 100 , 130 , 1 , 82 , 96 , 132 , 1 , 97 , 5 , 11 , 86 , 91 , 96 , 0 , 128 , 84 , 96 , 64 , 81 , 96 , 1 , 96 , 1 , 96 , 160 , 27 , 3 , 128 , 133 , 22 , 147 , 97 , 1 , 0 , 144 , 147 , 4 , 22 , 145 , 127 , 31 , 50 , 52 , 137 , 244 , 4 , 227 , 186 , 215 , 98 , 33 , 95 , 192 , 84 , 71 , 249 , 167 , 123 , 183 , 243 , 182 , 48 , 166 , 240 , 138 , 40 , 81 , 185 , 153 , 219 , 65 , 247 , 145 , 163 , 96 , 0 , 128 , 84 , 97 , 1 , 0 , 96 , 1 , 96 , 168 , 27 , 3 , 25 , 22 , 97 , 1 , 0 , 96 , 1 , 96 , 1 , 96 , 160 , 27 , 3 , 132 , 22 , 2 , 23 , 129 , 85 , 66 , 96 , 8 , 85 , 96 , 5 , 128 , 84 , 145 , 97 , 22 , 139 , 131 , 97 , 33 , 206 , 86 , 91 , 145 , 144 , 80 , 85 , 80 , 80 , 86 , 91 , 96 , 0 , 128 , 130 , 81 , 96 , 65 , 20 , 21 , 97 , 22 , 202 , 87 , 96 , 32 , 131 , 1 , 81 , 96 , 64 , 132 , 1 , 81 , 96 , 96 , 133 , 1 , 81 , 96 , 0 , 26 , 97 , 22 , 190 , 135 , 130 , 133 , 133 , 97 , 24 , 39 , 86 , 91 , 148 , 80 , 148 , 80 , 80 , 80 , 80 , 97 , 22 , 210 , 86 , 91 , 80 , 96 , 0 , 144 , 80 , 96 , 2 , 91 , 146 , 80 , 146 , 144 , 80 , 86 , 91 , 96 , 0 , 129 , 96 , 4 , 129 , 17 , 21 , 97 , 22 , 237 , 87 , 97 , 22 , 237 , 97 , 34 , 88 , 86 , 91 , 20 , 21 , 97 , 22 , 246 , 87 , 80 , 86 , 91 , 96 , 1 , 129 , 96 , 4 , 129 , 17 , 21 , 97 , 23 , 10 , 87 , 97 , 23 , 10 , 97 , 34 , 88 , 86 , 91 , 20 , 21 , 97 , 23 , 88 , 87 , 96 , 64 , 81 , 98 , 70 , 27 , 205 , 96 , 229 , 27 , 129 , 82 , 96 , 32 , 96 , 4 , 130 , 1 , 82 , 96 , 24 , 96 , 36 , 130 , 1 , 82 , 127 , 69 , 67 , 68 , 83 , 65 , 58 , 32 , 105 , 110 , 118 , 97 , 108 , 105 , 100 , 32 , 115 , 105 , 103 , 110 , 97 , 116 , 117 , 114 , 101 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 96 , 68 , 130 , 1 , 82 , 96 , 100 , 1 , 97 , 5 , 11 , 86 , 91 , 96 , 2 , 129 , 96 , 4 , 129 , 17 , 21 , 97 , 23 , 108 , 87 , 97 , 23 , 108 , 97 , 34 , 88 , 86 , 91 , 20 , 21 , 97 , 23 , 186 , 87 , 96 , 64 , 81 , 98 , 70 , 27 , 205 , 96 , 229 , 27 , 129 , 82 , 96 , 32 , 96 , 4 , 130 , 1 , 82 , 96 , 31 , 96 , 36 , 130 , 1 , 82 , 127 , 69 , 67 , 68 , 83 , 65 , 58 , 32 , 105 , 110 , 118 , 97 , 108 , 105 , 100 , 32 , 115 , 105 , 103 , 110 , 97 , 116 , 117 , 114 , 101 , 32 , 108 , 101 , 110 , 103 , 116 , 104 , 0 , 96 , 68 , 130 , 1 , 82 , 96 , 100 , 1 , 97 , 5 , 11 , 86 , 91 , 96 , 3 , 129 , 96 , 4 , 129 , 17 , 21 , 97 , 23 , 206 , 87 , 97 , 23 , 206 , 97 , 34 , 88 , 86 , 91 , 20 , 21 , 97 , 21 , 176 , 87 , 96 , 64 , 81 , 98 , 70 , 27 , 205 , 96 , 229 , 27 , 129 , 82 , 96 , 32 , 96 , 4 , 130 , 1 , 82 , 96 , 34 , 96 , 36 , 130 , 1 , 82 , 127 , 69 , 67 , 68 , 83 , 65 , 58 , 32 , 105 , 110 , 118 , 97 , 108 , 105 , 100 , 32 , 115 , 105 , 103 , 110 , 97 , 116 , 117 , 114 , 101 , 32 , 39 , 115 , 39 , 32 , 118 , 97 , 108 , 96 , 68 , 130 , 1 , 82 , 97 , 117 , 101 , 96 , 240 , 27 , 96 , 100 , 130 , 1 , 82 , 96 , 132 , 1 , 97 , 5 , 11 , 86 , 91 , 96 , 0 , 128 , 127 , 127 , 255 , 255 , 255 , 255 , 255 , 255 , 255 , 255 , 255 , 255 , 255 , 255 , 255 , 255 , 255 , 93 , 87 , 110 , 115 , 87 , 164 , 80 , 29 , 223 , 233 , 47 , 70 , 104 , 27 , 32 , 160 , 131 , 17 , 21 , 97 , 24 , 94 , 87 , 80 , 96 , 0 , 144 , 80 , 96 , 3 , 97 , 24 , 226 , 86 , 91 , 96 , 64 , 128 , 81 , 96 , 0 , 128 , 130 , 82 , 96 , 32 , 130 , 1 , 128 , 132 , 82 , 137 , 144 , 82 , 96 , 255 , 136 , 22 , 146 , 130 , 1 , 146 , 144 , 146 , 82 , 96 , 96 , 129 , 1 , 134 , 144 , 82 , 96 , 128 , 129 , 1 , 133 , 144 , 82 , 96 , 1 , 144 , 96 , 160 , 1 , 96 , 32 , 96 , 64 , 81 , 96 , 32 , 129 , 3 , 144 , 128 , 132 , 3 , 144 , 133 , 90 , 250 , 21 , 128 , 21 , 97 , 24 , 178 , 87 , 61 , 96 , 0 , 128 , 62 , 61 , 96 , 0 , 253 , 91 , 80 , 80 , 96 , 64 , 81 , 96 , 31 , 25 , 1 , 81 , 145 , 80 , 80 , 96 , 1 , 96 , 1 , 96 , 160 , 27 , 3 , 129 , 22 , 97 , 24 , 219 , 87 , 96 , 0 , 96 , 1 , 146 , 80 , 146 , 80 , 80 , 97 , 24 , 226 , 86 , 91 , 145 , 80 , 96 , 0 , 144 , 80 , 91 , 148 , 80 , 148 , 146 , 80 , 80 , 80 , 86 , 91 , 96 , 0 , 97 , 24 , 254 , 97 , 24 , 249 , 132 , 97 , 32 , 131 , 86 , 91 , 97 , 32 , 83 , 86 , 91 , 144 , 80 , 128 , 131 , 130 , 82 , 96 , 32 , 128 , 131 , 1 , 145 , 80 , 131 , 134 , 134 , 96 , 5 , 27 , 134 , 1 , 17 , 21 , 97 , 25 , 30 , 87 , 96 , 0 , 128 , 253 , 91 , 96 , 0 , 128 , 91 , 135 , 129 , 16 , 21 , 97 , 25 , 94 , 87 , 130 , 53 , 96 , 1 , 96 , 1 , 96 , 64 , 27 , 3 , 129 , 17 , 21 , 97 , 25 , 63 , 87 , 130 , 131 , 253 , 91 , 97 , 25 , 75 , 138 , 130 , 138 , 1 , 97 , 25 , 134 , 86 , 91 , 134 , 82 , 80 , 147 , 131 , 1 , 147 , 145 , 131 , 1 , 145 , 96 , 1 , 1 , 97 , 25 , 34 , 86 , 91 , 80 , 80 , 80 , 80 , 80 , 147 , 146 , 80 , 80 , 80 , 86 , 91 , 128 , 53 , 96 , 1 , 96 , 1 , 96 , 160 , 27 , 3 , 129 , 22 , 129 , 20 , 97 , 25 , 129 , 87 , 96 , 0 , 128 , 253 , 91 , 145 , 144 , 80 , 86 , 91 , 96 , 0 , 130 , 96 , 31 , 131 , 1 , 18 , 97 , 25 , 151 , 87 , 96 , 0 , 128 , 253 , 91 , 129 , 53 , 96 , 1 , 96 , 1 , 96 , 64 , 27 , 3 , 129 , 17 , 21 , 97 , 25 , 176 , 87 , 97 , 25 , 176 , 97 , 34 , 132 , 86 , 91 , 97 , 25 , 195 , 96 , 31 , 130 , 1 , 96 , 31 , 25 , 22 , 96 , 32 , 1 , 97 , 32 , 83 , 86 , 91 , 129 , 129 , 82 , 132 , 96 , 32 , 131 , 134 , 1 , 1 , 17 , 21 , 97 , 25 , 216 , 87 , 96 , 0 , 128 , 253 , 91 , 129 , 96 , 32 , 133 , 1 , 96 , 32 , 131 , 1 , 55 , 96 , 0 , 145 , 129 , 1 , 96 , 32 , 1 , 145 , 144 , 145 , 82 , 147 , 146 , 80 , 80 , 80 , 86 , 91 , 128 , 53 , 99 , 255 , 255 , 255 , 255 , 129 , 22 , 129 , 20 , 97 , 25 , 129 , 87 , 96 , 0 , 128 , 253 , 91 , 96 , 0 , 128 , 96 , 64 , 131 , 133 , 3 , 18 , 21 , 97 , 26 , 28 , 87 , 96 , 0 , 128 , 253 , 91 , 97 , 26 , 37 , 131 , 97 , 25 , 106 , 86 , 91 , 145 , 80 , 97 , 26 , 51 , 96 , 32 , 132 , 1 , 97 , 25 , 245 , 86 , 91 , 144 , 80 , 146 , 80 , 146 , 144 , 80 , 86 , 91 , 96 , 0 , 128 , 96 , 0 , 96 , 64 , 132 , 134 , 3 , 18 , 21 , 97 , 26 , 81 , 87 , 96 , 0 , 128 , 253 , 91 , 131 , 53 , 96 , 1 , 96 , 1 , 96 , 64 , 27 , 3 , 128 , 130 , 17 , 21 , 97 , 26 , 104 , 87 , 96 , 0 , 128 , 253 , 91 , 129 , 134 , 1 , 145 , 80 , 134 , 96 , 31 , 131 , 1 , 18 , 97 , 26 , 124 , 87 , 96 , 0 , 128 , 253 , 91 , 129 , 53 , 129 , 129 , 17 , 21 , 97 , 26 , 139 , 87 , 96 , 0 , 128 , 253 , 91 , 135 , 96 , 32 , 130 , 96 , 5 , 27 , 133 , 1 , 1 , 17 , 21 , 97 , 26 , 160 , 87 , 96 , 0 , 128 , 253 , 91 , 96 , 32 , 146 , 131 , 1 , 149 , 80 , 147 , 80 , 144 , 133 , 1 , 53 , 144 , 128 , 130 , 17 , 21 , 97 , 26 , 187 , 87 , 96 , 0 , 128 , 253 , 91 , 80 , 132 , 1 , 96 , 31 , 129 , 1 , 134 , 19 , 97 , 26 , 205 , 87 , 96 , 0 , 128 , 253 , 91 , 97 , 26 , 220 , 134 , 130 , 53 , 96 , 32 , 132 , 1 , 97 , 24 , 235 , 86 , 91 , 145 , 80 , 80 , 146 , 80 , 146 , 80 , 146 , 86 , 91 , 96 , 0 , 96 , 32 , 130 , 132 , 3 , 18 , 21 , 97 , 26 , 248 , 87 , 96 , 0 , 128 , 253 , 91 , 129 , 81 , 128 , 21 , 21 , 129 , 20 , 97 , 27 , 8 , 87 , 96 , 0 , 128 , 253 , 91 , 147 , 146 , 80 , 80 , 80 , 86 , 91 , 96 , 0 , 96 , 32 , 130 , 132 , 3 , 18 , 21 , 97 , 27 , 33 , 87 , 96 , 0 , 128 , 253 , 91 , 80 , 53 , 145 , 144 , 80 , 86 , 91 , 96 , 0 , 128 , 96 , 0 , 128 , 96 , 0 , 128 , 96 , 192 , 135 , 137 , 3 , 18 , 21 , 97 , 27 , 65 , 87 , 96 , 0 , 128 , 253 , 91 , 134 , 53 , 149 , 80 , 96 , 32 , 135 , 1 , 53 , 96 , 1 , 96 , 1 , 96 , 224 , 27 , 3 , 25 , 129 , 22 , 129 , 20 , 97 , 27 , 96 , 87 , 96 , 0 , 128 , 253 , 91 , 148 , 80 , 97 , 27 , 110 , 96 , 64 , 136 , 1 , 97 , 25 , 245 , 86 , 91 , 147 , 80 , 96 , 96 , 135 , 1 , 53 , 146 , 80 , 97 , 27 , 131 , 96 , 128 , 136 , 1 , 97 , 25 , 106 , 86 , 91 , 145 , 80 , 96 , 160 , 135 , 1 , 53 , 96 , 1 , 96 , 1 , 96 , 64 , 27 , 3 , 129 , 17 , 21 , 97 , 27 , 158 , 87 , 96 , 0 , 128 , 253 , 91 , 97 , 27 , 170 , 137 , 130 , 138 , 1 , 97 , 25 , 134 , 86 , 91 , 145 , 80 , 80 , 146 , 149 , 80 , 146 , 149 , 80 , 146 , 149 , 86 , 91 , 96 , 0 , 128 , 96 , 0 , 128 , 96 , 0 , 96 , 160 , 134 , 136 , 3 , 18 , 21 , 97 , 27 , 207 , 87 , 96 , 0 , 128 , 253 , 91 , 133 , 53 , 148 , 80 , 96 , 32 , 134 , 1 , 53 , 96 , 1 , 96 , 1 , 96 , 64 , 27 , 3 , 128 , 130 , 22 , 130 , 20 , 97 , 27 , 238 , 87 , 96 , 0 , 128 , 253 , 91 , 129 , 149 , 80 , 97 , 27 , 253 , 96 , 64 , 137 , 1 , 97 , 25 , 245 , 86 , 91 , 148 , 80 , 97 , 28 , 11 , 96 , 96 , 137 , 1 , 97 , 25 , 245 , 86 , 91 , 147 , 80 , 96 , 128 , 136 , 1 , 53 , 145 , 80 , 128 , 130 , 17 , 21 , 97 , 28 , 33 , 87 , 96 , 0 , 128 , 253 , 91 , 80 , 97 , 28 , 46 , 136 , 130 , 137 , 1 , 97 , 25 , 134 , 86 , 91 , 145 , 80 , 80 , 146 , 149 , 80 , 146 , 149 , 144 , 147 , 80 , 86 , 91 , 96 , 0 , 128 , 96 , 0 , 96 , 64 , 132 , 134 , 3 , 18 , 21 , 97 , 28 , 80 , 87 , 96 , 0 , 128 , 253 , 91 , 131 , 53 , 96 , 1 , 96 , 1 , 96 , 64 , 27 , 3 , 128 , 130 , 17 , 21 , 97 , 28 , 103 , 87 , 96 , 0 , 128 , 253 , 91 , 129 , 134 , 1 , 145 , 80 , 134 , 96 , 31 , 131 , 1 , 18 , 97 , 28 , 123 , 87 , 96 , 0 , 128 , 253 , 91 , 129 , 53 , 129 , 129 , 17 , 21 , 97 , 28 , 138 , 87 , 96 , 0 , 128 , 253 , 91 , 135 , 96 , 32 , 130 , 133 , 1 , 1 , 17 , 21 , 97 , 28 , 156 , 87 , 96 , 0 , 128 , 253 , 91 , 96 , 32 , 146 , 131 , 1 , 149 , 80 , 147 , 80 , 144 , 133 , 1 , 53 , 144 , 128 , 130 , 17 , 21 , 97 , 28 , 183 , 87 , 96 , 0 , 128 , 253 , 91 , 80 , 97 , 26 , 220 , 134 , 130 , 135 , 1 , 97 , 25 , 134 , 86 , 91 , 96 , 0 , 128 , 96 , 64 , 131 , 133 , 3 , 18 , 21 , 97 , 28 , 215 , 87 , 96 , 0 , 128 , 253 , 91 , 130 , 53 , 96 , 1 , 96 , 1 , 96 , 64 , 27 , 3 , 128 , 130 , 17 , 21 , 97 , 28 , 238 , 87 , 96 , 0 , 128 , 253 , 91 , 97 , 28 , 250 , 134 , 131 , 135 , 1 , 97 , 25 , 134 , 86 , 91 , 147 , 80 , 96 , 32 , 133 , 1 , 53 , 145 , 80 , 128 , 130 , 17 , 21 , 97 , 29 , 16 , 87 , 96 , 0 , 128 , 253 , 91 , 80 , 97 , 29 , 29 , 133 , 130 , 134 , 1 , 97 , 25 , 134 , 86 , 91 , 145 , 80 , 80 , 146 , 80 , 146 , 144 , 80 , 86 , 91 , 96 , 0 , 128 , 96 , 0 , 96 , 96 , 132 , 134 , 3 , 18 , 21 , 97 , 29 , 60 , 87 , 96 , 0 , 128 , 253 , 91 , 131 , 53 , 96 , 1 , 96 , 1 , 96 , 64 , 27 , 3 , 128 , 130 , 17 , 21 , 97 , 29 , 83 , 87 , 96 , 0 , 128 , 253 , 91 , 97 , 29 , 95 , 135 , 131 , 136 , 1 , 97 , 25 , 134 , 86 , 91 , 148 , 80 , 97 , 29 , 109 , 96 , 32 , 135 , 1 , 97 , 25 , 245 , 86 , 91 , 147 , 80 , 96 , 64 , 134 , 1 , 53 , 145 , 80 , 128 , 130 , 17 , 21 , 97 , 28 , 183 , 87 , 96 , 0 , 128 , 253 , 91 , 96 , 0 , 96 , 32 , 128 , 131 , 133 , 3 , 18 , 21 , 97 , 29 , 150 , 87 , 96 , 0 , 128 , 253 , 91 , 130 , 53 , 96 , 1 , 96 , 1 , 96 , 64 , 27 , 3 , 128 , 130 , 17 , 21 , 97 , 29 , 173 , 87 , 96 , 0 , 128 , 253 , 91 , 144 , 132 , 1 , 144 , 96 , 96 , 130 , 135 , 3 , 18 , 21 , 97 , 29 , 193 , 87 , 96 , 0 , 128 , 253 , 91 , 97 , 29 , 201 , 97 , 32 , 43 , 86 , 91 , 97 , 29 , 210 , 131 , 97 , 25 , 245 , 86 , 91 , 129 , 82 , 131 , 131 , 1 , 53 , 130 , 129 , 17 , 21 , 97 , 29 , 229 , 87 , 96 , 0 , 128 , 253 , 91 , 131 , 1 , 145 , 80 , 96 , 31 , 130 , 1 , 135 , 19 , 97 , 29 , 248 , 87 , 96 , 0 , 128 , 253 , 91 , 129 , 53 , 97 , 30 , 6 , 97 , 24 , 249 , 130 , 97 , 32 , 131 , 86 , 91 , 128 , 130 , 130 , 82 , 134 , 130 , 1 , 145 , 80 , 134 , 133 , 1 , 138 , 136 , 133 , 96 , 5 , 27 , 136 , 1 , 1 , 17 , 21 , 97 , 30 , 38 , 87 , 96 , 0 , 128 , 253 , 91 , 96 , 0 , 149 , 80 , 91 , 131 , 134 , 16 , 21 , 97 , 30 , 73 , 87 , 128 , 53 , 131 , 82 , 96 , 1 , 149 , 144 , 149 , 1 , 148 , 145 , 135 , 1 , 145 , 135 , 1 , 97 , 30 , 43 , 86 , 91 , 80 , 131 , 135 , 1 , 82 , 80 , 97 , 30 , 93 , 144 , 80 , 96 , 64 , 132 , 1 , 97 , 25 , 106 , 86 , 91 , 96 , 64 , 130 , 1 , 82 , 150 , 149 , 80 , 80 , 80 , 80 , 80 , 80 , 86 , 91 , 99 , 255 , 255 , 255 , 255 , 96 , 224 , 27 , 131 , 96 , 224 , 27 , 22 , 129 , 82 , 96 , 0 , 130 , 81 , 96 , 0 , 91 , 129 , 129 , 16 , 21 , 97 , 30 , 159 , 87 , 96 , 32 , 129 , 134 , 1 , 129 , 1 , 81 , 96 , 4 , 134 , 132 , 1 , 1 , 82 , 1 , 97 , 30 , 130 , 86 , 91 , 129 , 129 , 17 , 21 , 97 , 30 , 177 , 87 , 96 , 0 , 96 , 4 , 131 , 134 , 1 , 1 , 82 , 91 , 80 , 145 , 144 , 145 , 1 , 96 , 4 , 1 , 147 , 146 , 80 , 80 , 80 , 86 , 91 , 131 , 129 , 82 , 96 , 64 , 96 , 32 , 130 , 1 , 82 , 129 , 96 , 64 , 130 , 1 , 82 , 129 , 131 , 96 , 96 , 131 , 1 , 55 , 96 , 0 , 129 , 131 , 1 , 96 , 96 , 144 , 129 , 1 , 145 , 144 , 145 , 82 , 96 , 31 , 144 , 146 , 1 , 96 , 31 , 25 , 22 , 1 , 1 , 146 , 145 , 80 , 80 , 86 , 91 , 96 , 32 , 128 , 130 , 82 , 96 , 38 , 144 , 130 , 1 , 82 , 127 , 71 , 111 , 118 , 101 , 114 , 110 , 97 , 98 , 108 , 101 , 58 , 32 , 99 , 97 , 108 , 108 , 101 , 114 , 32 , 105 , 115 , 32 , 110 , 111 , 116 , 32 , 116 , 104 , 101 , 32 , 103 , 111 , 96 , 64 , 130 , 1 , 82 , 101 , 59 , 50 , 185 , 55 , 55 , 185 , 96 , 209 , 27 , 96 , 96 , 130 , 1 , 82 , 96 , 128 , 1 , 144 , 86 , 91 , 96 , 32 , 128 , 130 , 82 , 96 , 55 , 144 , 130 , 1 , 82 , 127 , 97 , 100 , 109 , 105 , 110 , 83 , 101 , 116 , 82 , 101 , 115 , 111 , 117 , 114 , 99 , 101 , 87 , 105 , 116 , 104 , 83 , 105 , 103 , 110 , 97 , 116 , 117 , 114 , 101 , 58 , 32 , 69 , 96 , 64 , 130 , 1 , 82 , 127 , 120 , 101 , 99 , 117 , 116 , 105 , 110 , 103 , 32 , 111 , 110 , 32 , 119 , 114 , 111 , 110 , 103 , 32 , 99 , 104 , 97 , 105 , 110 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 96 , 96 , 130 , 1 , 82 , 96 , 128 , 1 , 144 , 86 , 91 , 96 , 32 , 128 , 130 , 82 , 96 , 44 , 144 , 130 , 1 , 82 , 127 , 83 , 105 , 103 , 110 , 97 , 116 , 117 , 114 , 101 , 66 , 114 , 105 , 100 , 103 , 101 , 58 , 32 , 78 , 111 , 116 , 32 , 118 , 97 , 108 , 105 , 100 , 32 , 115 , 105 , 103 , 32 , 102 , 96 , 64 , 130 , 1 , 82 , 107 , 57 , 55 , 182 , 144 , 51 , 183 , 187 , 50 , 185 , 55 , 55 , 185 , 96 , 161 , 27 , 96 , 96 , 130 , 1 , 82 , 96 , 128 , 1 , 144 , 86 , 91 , 96 , 0 , 128 , 131 , 53 , 96 , 30 , 25 , 132 , 54 , 3 , 1 , 129 , 18 , 97 , 31 , 252 , 87 , 96 , 0 , 128 , 253 , 91 , 131 , 1 , 128 , 53 , 145 , 80 , 96 , 1 , 96 , 1 , 96 , 64 , 27 , 3 , 130 , 17 , 21 , 97 , 32 , 22 , 87 , 96 , 0 , 128 , 253 , 91 , 96 , 32 , 1 , 145 , 80 , 54 , 129 , 144 , 3 , 130 , 19 , 21 , 97 , 22 , 210 , 87 , 96 , 0 , 128 , 253 , 91 , 96 , 64 , 81 , 96 , 96 , 129 , 1 , 96 , 1 , 96 , 1 , 96 , 64 , 27 , 3 , 129 , 17 , 130 , 130 , 16 , 23 , 21 , 97 , 32 , 77 , 87 , 97 , 32 , 77 , 97 , 34 , 132 , 86 , 91 , 96 , 64 , 82 , 144 , 86 , 91 , 96 , 64 , 81 , 96 , 31 , 130 , 1 , 96 , 31 , 25 , 22 , 129 , 1 , 96 , 1 , 96 , 1 , 96 , 64 , 27 , 3 , 129 , 17 , 130 , 130 , 16 , 23 , 21 , 97 , 32 , 123 , 87 , 97 , 32 , 123 , 97 , 34 , 132 , 86 , 91 , 96 , 64 , 82 , 145 , 144 , 80 , 86 , 91 , 96 , 0 , 96 , 1 , 96 , 1 , 96 , 64 , 27 , 3 , 130 , 17 , 21 , 97 , 32 , 156 , 87 , 97 , 32 , 156 , 97 , 34 , 132 , 86 , 91 , 80 , 96 , 5 , 27 , 96 , 32 , 1 , 144 , 86 , 91 , 96 , 0 , 128 , 133 , 133 , 17 , 21 , 97 , 32 , 182 , 87 , 96 , 0 , 128 , 253 , 91 , 131 , 134 , 17 , 21 , 97 , 32 , 195 , 87 , 96 , 0 , 128 , 253 , 91 , 80 , 80 , 130 , 1 , 147 , 145 , 144 , 146 , 3 , 145 , 80 , 86 , 91 , 96 , 0 , 130 , 25 , 130 , 17 , 21 , 97 , 32 , 227 , 87 , 97 , 32 , 227 , 97 , 34 , 44 , 86 , 91 , 80 , 1 , 144 , 86 , 91 , 96 , 0 , 99 , 255 , 255 , 255 , 255 , 128 , 131 , 22 , 129 , 133 , 22 , 128 , 131 , 3 , 130 , 17 , 21 , 97 , 33 , 7 , 87 , 97 , 33 , 7 , 97 , 34 , 44 , 86 , 91 , 1 , 148 , 147 , 80 , 80 , 80 , 80 , 86 , 91 , 96 , 0 , 99 , 255 , 255 , 255 , 255 , 128 , 132 , 22 , 128 , 97 , 33 , 39 , 87 , 97 , 33 , 39 , 97 , 34 , 66 , 86 , 91 , 146 , 22 , 145 , 144 , 145 , 4 , 146 , 145 , 80 , 80 , 86 , 91 , 96 , 0 , 96 , 1 , 96 , 1 , 96 , 64 , 27 , 3 , 128 , 132 , 22 , 128 , 97 , 33 , 39 , 87 , 97 , 33 , 39 , 97 , 34 , 66 , 86 , 91 , 96 , 0 , 129 , 96 , 0 , 25 , 4 , 131 , 17 , 130 , 21 , 21 , 22 , 21 , 97 , 33 , 103 , 87 , 97 , 33 , 103 , 97 , 34 , 44 , 86 , 91 , 80 , 2 , 144 , 86 , 91 , 96 , 0 , 97 , 27 , 8 , 54 , 132 , 132 , 97 , 24 , 235 , 86 , 91 , 128 , 53 , 96 , 32 , 131 , 16 , 21 , 97 , 4 , 134 , 87 , 96 , 0 , 25 , 96 , 32 , 132 , 144 , 3 , 96 , 3 , 27 , 27 , 22 , 146 , 145 , 80 , 80 , 86 , 91 , 128 , 81 , 96 , 32 , 130 , 1 , 81 , 96 , 1 , 96 , 1 , 96 , 208 , 27 , 3 , 25 , 128 , 130 , 22 , 146 , 145 , 144 , 96 , 6 , 131 , 16 , 21 , 97 , 33 , 198 , 87 , 128 , 129 , 132 , 96 , 6 , 3 , 96 , 3 , 27 , 27 , 131 , 22 , 22 , 147 , 80 , 91 , 80 , 80 , 80 , 145 , 144 , 80 , 86 , 91 , 96 , 0 , 96 , 0 , 25 , 130 , 20 , 21 , 97 , 33 , 226 , 87 , 97 , 33 , 226 , 97 , 34 , 44 , 86 , 91 , 80 , 96 , 1 , 1 , 144 , 86 , 91 , 96 , 0 , 96 , 255 , 130 , 22 , 96 , 255 , 129 , 20 , 21 , 97 , 34 , 0 , 87 , 97 , 34 , 0 , 97 , 34 , 44 , 86 , 91 , 96 , 1 , 1 , 146 , 145 , 80 , 80 , 86 , 91 , 96 , 0 , 99 , 255 , 255 , 255 , 255 , 128 , 132 , 22 , 128 , 97 , 34 , 32 , 87 , 97 , 34 , 32 , 97 , 34 , 66 , 86 , 91 , 146 , 22 , 145 , 144 , 145 , 6 , 146 , 145 , 80 , 80 , 86 , 91 , 99 , 78 , 72 , 123 , 113 , 96 , 224 , 27 , 96 , 0 , 82 , 96 , 17 , 96 , 4 , 82 , 96 , 36 , 96 , 0 , 253 , 91 , 99 , 78 , 72 , 123 , 113 , 96 , 224 , 27 , 96 , 0 , 82 , 96 , 18 , 96 , 4 , 82 , 96 , 36 , 96 , 0 , 253 , 91 , 99 , 78 , 72 , 123 , 113 , 96 , 224 , 27 , 96 , 0 , 82 , 96 , 33 , 96 , 4 , 82 , 96 , 36 , 96 , 0 , 253 , 91 , 99 , 78 , 72 , 123 , 113 , 96 , 224 , 27 , 96 , 0 , 82 , 96 , 50 , 96 , 4 , 82 , 96 , 36 , 96 , 0 , 253 , 91 , 99 , 78 , 72 , 123 , 113 , 96 , 224 , 27 , 96 , 0 , 82 , 96 , 65 , 96 , 4 , 82 , 96 , 36 , 96 , 0 , 253 , 254 , 162 , 100 , 105 , 112 , 102 , 115 , 88 , 34 , 18 , 32 , 98 , 110 , 166 , 227 , 86 , 103 , 214 , 234 , 242 , 12 , 80 , 130 , 195 , 64 , 159 , 5 , 25 , 124 , 111 , 85 , 73 , 234 , 18 , 122 , 205 , 50 , 69 , 118 , 38 , 209 , 39 , 54 , 100 , 115 , 111 , 108 , 99 , 67 , 0 , 8 , 5 , 0 , 51] ;
    #[doc = "The deployed bytecode of the contract."]
    pub static SIGNATUREBRIDGECONTRACT_DEPLOYED_BYTECODE:
        ::ethers::core::types::Bytes =
        ::ethers::core::types::Bytes::from_static(__DEPLOYED_BYTECODE);
    pub struct SignatureBridgeContract<M>(::ethers::contract::Contract<M>);
    impl<M> ::core::clone::Clone for SignatureBridgeContract<M> {
        fn clone(&self) -> Self {
            Self(::core::clone::Clone::clone(&self.0))
        }
    }
    impl<M> ::core::ops::Deref for SignatureBridgeContract<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> ::core::ops::DerefMut for SignatureBridgeContract<M> {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl<M> ::core::fmt::Debug for SignatureBridgeContract<M> {
        fn fmt(
            &self,
            f: &mut ::core::fmt::Formatter<'_>,
        ) -> ::core::fmt::Result {
            f.debug_tuple(stringify!(SignatureBridgeContract))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> SignatureBridgeContract<M> {
        #[doc = r" Creates a new contract instance with the specified `ethers` client at"]
        #[doc = r" `address`. The contract derefs to a `ethers::Contract` object."]
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(::ethers::contract::Contract::new(
                address.into(),
                SIGNATUREBRIDGECONTRACT_ABI.clone(),
                client,
            ))
        }
        #[doc = r" Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it."]
        #[doc = r" Returns a new instance of a deployer that returns an instance of this contract after sending the transaction"]
        #[doc = r""]
        #[doc = r" Notes:"]
        #[doc = r" - If there are no constructor arguments, you should pass `()` as the argument."]
        #[doc = r" - The default poll duration is 7 seconds."]
        #[doc = r" - The default number of confirmations is 1 block."]
        #[doc = r""]
        #[doc = r""]
        #[doc = r" # Example"]
        #[doc = r""]
        #[doc = r" Generate contract bindings with `abigen!` and deploy a new contract instance."]
        #[doc = r""]
        #[doc = r" *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact."]
        #[doc = r""]
        #[doc = r" ```ignore"]
        #[doc = r" # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {"]
        #[doc = r#"     abigen!(Greeter, "../greeter.json");"#]
        #[doc = r""]
        #[doc = r#"    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();"#]
        #[doc = r"    let msg = greeter_contract.greet().call().await.unwrap();"]
        #[doc = r" # }"]
        #[doc = r" ```"]
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::core::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                SIGNATUREBRIDGECONTRACT_ABI.clone(),
                SIGNATUREBRIDGECONTRACT_BYTECODE.clone(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        #[doc = "Calls the contract's `EVM_CHAIN_ID_TYPE` (0x8b7e8782) function"]
        pub fn evm_chain_id_type(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, [u8; 2]> {
            self.0
                .method_hash([139, 126, 135, 130], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `_resourceIDToHandlerAddress` (0x84db809f) function"]
        pub fn resource_id_to_handler_address(
            &self,
            p0: [u8; 32],
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([132, 219, 128, 159], p0)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `adminSetResourceWithSignature` (0x6245e561) function"]
        pub fn admin_set_resource_with_signature(
            &self,
            resource_id: [u8; 32],
            function_sig: [u8; 4],
            nonce: u32,
            new_resource_id: [u8; 32],
            handler_address: ::ethers::core::types::Address,
            sig: ::ethers::core::types::Bytes,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash(
                    [98, 69, 229, 97],
                    (
                        resource_id,
                        function_sig,
                        nonce,
                        new_resource_id,
                        handler_address,
                        sig,
                    ),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `averageSessionLengthInMillisecs` (0x016737bb) function"]
        pub fn average_session_length_in_millisecs(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, u64> {
            self.0
                .method_hash([1, 103, 55, 187], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `batchExecuteProposalWithSignature` (0xd8c62db0) function"]
        pub fn batch_execute_proposal_with_signature(
            &self,
            data: ::std::vec::Vec<::ethers::core::types::Bytes>,
            sig: ::std::vec::Vec<::ethers::core::types::Bytes>,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([216, 198, 45, 176], (data, sig))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `currentVotingPeriod` (0x3a049e02) function"]
        pub fn current_voting_period(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::U256,
        > {
            self.0
                .method_hash([58, 4, 158, 2], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `executeProposalWithSignature` (0x9d2b1ed7) function"]
        pub fn execute_proposal_with_signature(
            &self,
            data: ::ethers::core::types::Bytes,
            sig: ::ethers::core::types::Bytes,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([157, 43, 30, 215], (data, sig))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getChainId` (0x3408e470) function"]
        pub fn get_chain_id(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::U256,
        > {
            self.0
                .method_hash([52, 8, 228, 112], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getChainIdType` (0x4c830cbd) function"]
        pub fn get_chain_id_type(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, u64> {
            self.0
                .method_hash([76, 131, 12, 189], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getProposalNonce` (0x0b27fb9a) function"]
        pub fn get_proposal_nonce(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::U256,
        > {
            self.0
                .method_hash([11, 39, 251, 154], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `governor` (0x0c340a24) function"]
        pub fn governor(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([12, 52, 10, 36], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `isCorrectExecutionChain` (0x830b2f57) function"]
        pub fn is_correct_execution_chain(
            &self,
            resource_id: [u8; 32],
        ) -> ::ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([131, 11, 47, 87], resource_id)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `isCorrectExecutionContext` (0xf5fc3d6b) function"]
        pub fn is_correct_execution_context(
            &self,
            resource_id: [u8; 32],
        ) -> ::ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([245, 252, 61, 107], resource_id)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `isGovernor` (0xc7af3352) function"]
        pub fn is_governor(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([199, 175, 51, 82], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `isSignatureFromGovernor` (0x8755bcad) function"]
        pub fn is_signature_from_governor(
            &self,
            data: ::ethers::core::types::Bytes,
            sig: ::ethers::core::types::Bytes,
        ) -> ::ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([135, 85, 188, 173], (data, sig))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `lastGovernorUpdateTime` (0x9e09583c) function"]
        pub fn last_governor_update_time(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::U256,
        > {
            self.0
                .method_hash([158, 9, 88, 60], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `numOfProposers` (0xbac163a2) function"]
        pub fn num_of_proposers(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, u32> {
            self.0
                .method_hash([186, 193, 99, 162], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `parseChainIdFromResourceId` (0xc2230d6e) function"]
        pub fn parse_chain_id_from_resource_id(
            &self,
            resource_id: [u8; 32],
        ) -> ::ethers::contract::builders::ContractCall<M, u64> {
            self.0
                .method_hash([194, 35, 13, 110], resource_id)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `paused` (0x5c975abb) function"]
        pub fn paused(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([92, 151, 90, 187], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `proposalNonce` (0xcc3c74a1) function"]
        pub fn proposal_nonce(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::U256,
        > {
            self.0
                .method_hash([204, 60, 116, 161], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `proposerSetRoot` (0xc5eb6b1f) function"]
        pub fn proposer_set_root(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, [u8; 32]> {
            self.0
                .method_hash([197, 235, 107, 31], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `proposerSetUpdateNonce` (0x93596700) function"]
        pub fn proposer_set_update_nonce(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, u32> {
            self.0
                .method_hash([147, 89, 103, 0], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `recover` (0x1ed13d1b) function"]
        pub fn recover(
            &self,
            data: ::ethers::core::types::Bytes,
            sig: ::ethers::core::types::Bytes,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([30, 209, 61, 27], (data, sig))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `refreshNonce` (0x13cb01f9) function"]
        pub fn refresh_nonce(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, u32> {
            self.0
                .method_hash([19, 203, 1, 249], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `renounceOwnership` (0x715018a6) function"]
        pub fn renounce_ownership(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([113, 80, 24, 166], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `sessionLengthMultiplier` (0xbdfadc84) function"]
        pub fn session_length_multiplier(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::U256,
        > {
            self.0
                .method_hash([189, 250, 220, 132], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `transferOwnership` (0xa6e94c91) function"]
        pub fn transfer_ownership(
            &self,
            new_owner: ::ethers::core::types::Address,
            nonce: u32,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([166, 233, 76, 145], (new_owner, nonce))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `transferOwnershipWithSignaturePubKey` (0x7296b5d8) function"]
        pub fn transfer_ownership_with_signature_pub_key(
            &self,
            public_key: ::ethers::core::types::Bytes,
            nonce: u32,
            sig: ::ethers::core::types::Bytes,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([114, 150, 181, 216], (public_key, nonce, sig))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `updateProposerSetData` (0xf3d23d54) function"]
        pub fn update_proposer_set_data(
            &self,
            proposer_set_root: [u8; 32],
            average_session_length_in_millisecs: u64,
            num_of_proposers: u32,
            proposer_set_update_nonce: u32,
            sig: ::ethers::core::types::Bytes,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash(
                    [243, 210, 61, 84],
                    (
                        proposer_set_root,
                        average_session_length_in_millisecs,
                        num_of_proposers,
                        proposer_set_update_nonce,
                        sig,
                    ),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `voteInFavorForceSetGovernor` (0x24118804) function"]
        pub fn vote_in_favor_force_set_governor(
            &self,
            vote: Vote,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([36, 17, 136, 4], (vote,))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Gets the contract's `GovernanceOwnershipTransferred` event"]
        pub fn governance_ownership_transferred_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            GovernanceOwnershipTransferredFilter,
        > {
            self.0.event()
        }
        #[doc = "Gets the contract's `Paused` event"]
        pub fn paused_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            PausedFilter,
        > {
            self.0.event()
        }
        #[doc = "Gets the contract's `RecoveredAddress` event"]
        pub fn recovered_address_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            RecoveredAddressFilter,
        > {
            self.0.event()
        }
        #[doc = "Gets the contract's `Unpaused` event"]
        pub fn unpaused_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            UnpausedFilter,
        > {
            self.0.event()
        }
        #[doc = r" Returns an `Event` builder for all the events of this contract."]
        pub fn events(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            SignatureBridgeContractEvents,
        > {
            self.0
                .event_with_filter(::core::default::Default::default())
        }
    }
    impl<M: ::ethers::providers::Middleware>
        From<::ethers::contract::Contract<M>> for SignatureBridgeContract<M>
    {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    #[derive(
        Clone,
        :: ethers :: contract :: EthEvent,
        :: ethers :: contract :: EthDisplay,
        serde :: Serialize,
        serde :: Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethevent(
        name = "GovernanceOwnershipTransferred",
        abi = "GovernanceOwnershipTransferred(address,address)"
    )]
    pub struct GovernanceOwnershipTransferredFilter {
        #[ethevent(indexed)]
        pub previous_owner: ::ethers::core::types::Address,
        #[ethevent(indexed)]
        pub new_owner: ::ethers::core::types::Address,
    }
    #[derive(
        Clone,
        :: ethers :: contract :: EthEvent,
        :: ethers :: contract :: EthDisplay,
        serde :: Serialize,
        serde :: Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethevent(name = "Paused", abi = "Paused(address)")]
    pub struct PausedFilter {
        pub account: ::ethers::core::types::Address,
    }
    #[derive(
        Clone,
        :: ethers :: contract :: EthEvent,
        :: ethers :: contract :: EthDisplay,
        serde :: Serialize,
        serde :: Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethevent(name = "RecoveredAddress", abi = "RecoveredAddress(address)")]
    pub struct RecoveredAddressFilter {
        #[ethevent(indexed)]
        pub recovered: ::ethers::core::types::Address,
    }
    #[derive(
        Clone,
        :: ethers :: contract :: EthEvent,
        :: ethers :: contract :: EthDisplay,
        serde :: Serialize,
        serde :: Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethevent(name = "Unpaused", abi = "Unpaused(address)")]
    pub struct UnpausedFilter {
        pub account: ::ethers::core::types::Address,
    }
    #[doc = "Container type for all of the contract's events"]
    #[derive(
        Clone,
        :: ethers :: contract :: EthAbiType,
        serde :: Serialize,
        serde :: Deserialize,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub enum SignatureBridgeContractEvents {
        GovernanceOwnershipTransferredFilter(
            GovernanceOwnershipTransferredFilter,
        ),
        PausedFilter(PausedFilter),
        RecoveredAddressFilter(RecoveredAddressFilter),
        UnpausedFilter(UnpausedFilter),
    }
    impl ::ethers::contract::EthLogDecode for SignatureBridgeContractEvents {
        fn decode_log(
            log: &::ethers::core::abi::RawLog,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::Error> {
            if let Ok(decoded) =
                GovernanceOwnershipTransferredFilter::decode_log(log)
            {
                return Ok (SignatureBridgeContractEvents :: GovernanceOwnershipTransferredFilter (decoded));
            }
            if let Ok(decoded) = PausedFilter::decode_log(log) {
                return Ok(SignatureBridgeContractEvents::PausedFilter(
                    decoded,
                ));
            }
            if let Ok(decoded) = RecoveredAddressFilter::decode_log(log) {
                return Ok(
                    SignatureBridgeContractEvents::RecoveredAddressFilter(
                        decoded,
                    ),
                );
            }
            if let Ok(decoded) = UnpausedFilter::decode_log(log) {
                return Ok(SignatureBridgeContractEvents::UnpausedFilter(
                    decoded,
                ));
            }
            Err(::ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::core::fmt::Display for SignatureBridgeContractEvents {
        fn fmt(
            &self,
            f: &mut ::core::fmt::Formatter<'_>,
        ) -> ::core::fmt::Result {
            match self {
                Self::GovernanceOwnershipTransferredFilter(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::PausedFilter(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::RecoveredAddressFilter(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::UnpausedFilter(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
            }
        }
    }
    impl ::core::convert::From<GovernanceOwnershipTransferredFilter>
        for SignatureBridgeContractEvents
    {
        fn from(value: GovernanceOwnershipTransferredFilter) -> Self {
            Self::GovernanceOwnershipTransferredFilter(value)
        }
    }
    impl ::core::convert::From<PausedFilter> for SignatureBridgeContractEvents {
        fn from(value: PausedFilter) -> Self {
            Self::PausedFilter(value)
        }
    }
    impl ::core::convert::From<RecoveredAddressFilter>
        for SignatureBridgeContractEvents
    {
        fn from(value: RecoveredAddressFilter) -> Self {
            Self::RecoveredAddressFilter(value)
        }
    }
    impl ::core::convert::From<UnpausedFilter> for SignatureBridgeContractEvents {
        fn from(value: UnpausedFilter) -> Self {
            Self::UnpausedFilter(value)
        }
    }
    #[doc = "Container type for all input parameters for the `EVM_CHAIN_ID_TYPE` function with signature `EVM_CHAIN_ID_TYPE()` and selector `0x8b7e8782`"]
    #[derive(
        Clone,
        :: ethers :: contract :: EthCall,
        :: ethers :: contract :: EthDisplay,
        serde :: Serialize,
        serde :: Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "EVM_CHAIN_ID_TYPE", abi = "EVM_CHAIN_ID_TYPE()")]
    pub struct EvmChainIdTypeCall;
    #[doc = "Container type for all input parameters for the `_resourceIDToHandlerAddress` function with signature `_resourceIDToHandlerAddress(bytes32)` and selector `0x84db809f`"]
    #[derive(
        Clone,
        :: ethers :: contract :: EthCall,
        :: ethers :: contract :: EthDisplay,
        serde :: Serialize,
        serde :: Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(
        name = "_resourceIDToHandlerAddress",
        abi = "_resourceIDToHandlerAddress(bytes32)"
    )]
    pub struct ResourceIDToHandlerAddressCall(pub [u8; 32]);
    #[doc = "Container type for all input parameters for the `adminSetResourceWithSignature` function with signature `adminSetResourceWithSignature(bytes32,bytes4,uint32,bytes32,address,bytes)` and selector `0x6245e561`"]
    #[derive(
        Clone,
        :: ethers :: contract :: EthCall,
        :: ethers :: contract :: EthDisplay,
        serde :: Serialize,
        serde :: Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(
        name = "adminSetResourceWithSignature",
        abi = "adminSetResourceWithSignature(bytes32,bytes4,uint32,bytes32,address,bytes)"
    )]
    pub struct AdminSetResourceWithSignatureCall {
        pub resource_id: [u8; 32],
        pub function_sig: [u8; 4],
        pub nonce: u32,
        pub new_resource_id: [u8; 32],
        pub handler_address: ::ethers::core::types::Address,
        pub sig: ::ethers::core::types::Bytes,
    }
    #[doc = "Container type for all input parameters for the `averageSessionLengthInMillisecs` function with signature `averageSessionLengthInMillisecs()` and selector `0x016737bb`"]
    #[derive(
        Clone,
        :: ethers :: contract :: EthCall,
        :: ethers :: contract :: EthDisplay,
        serde :: Serialize,
        serde :: Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(
        name = "averageSessionLengthInMillisecs",
        abi = "averageSessionLengthInMillisecs()"
    )]
    pub struct AverageSessionLengthInMillisecsCall;
    #[doc = "Container type for all input parameters for the `batchExecuteProposalWithSignature` function with signature `batchExecuteProposalWithSignature(bytes[],bytes[])` and selector `0xd8c62db0`"]
    #[derive(
        Clone,
        :: ethers :: contract :: EthCall,
        :: ethers :: contract :: EthDisplay,
        serde :: Serialize,
        serde :: Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(
        name = "batchExecuteProposalWithSignature",
        abi = "batchExecuteProposalWithSignature(bytes[],bytes[])"
    )]
    pub struct BatchExecuteProposalWithSignatureCall {
        pub data: ::std::vec::Vec<::ethers::core::types::Bytes>,
        pub sig: ::std::vec::Vec<::ethers::core::types::Bytes>,
    }
    #[doc = "Container type for all input parameters for the `currentVotingPeriod` function with signature `currentVotingPeriod()` and selector `0x3a049e02`"]
    #[derive(
        Clone,
        :: ethers :: contract :: EthCall,
        :: ethers :: contract :: EthDisplay,
        serde :: Serialize,
        serde :: Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "currentVotingPeriod", abi = "currentVotingPeriod()")]
    pub struct CurrentVotingPeriodCall;
    #[doc = "Container type for all input parameters for the `executeProposalWithSignature` function with signature `executeProposalWithSignature(bytes,bytes)` and selector `0x9d2b1ed7`"]
    #[derive(
        Clone,
        :: ethers :: contract :: EthCall,
        :: ethers :: contract :: EthDisplay,
        serde :: Serialize,
        serde :: Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(
        name = "executeProposalWithSignature",
        abi = "executeProposalWithSignature(bytes,bytes)"
    )]
    pub struct ExecuteProposalWithSignatureCall {
        pub data: ::ethers::core::types::Bytes,
        pub sig: ::ethers::core::types::Bytes,
    }
    #[doc = "Container type for all input parameters for the `getChainId` function with signature `getChainId()` and selector `0x3408e470`"]
    #[derive(
        Clone,
        :: ethers :: contract :: EthCall,
        :: ethers :: contract :: EthDisplay,
        serde :: Serialize,
        serde :: Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "getChainId", abi = "getChainId()")]
    pub struct GetChainIdCall;
    #[doc = "Container type for all input parameters for the `getChainIdType` function with signature `getChainIdType()` and selector `0x4c830cbd`"]
    #[derive(
        Clone,
        :: ethers :: contract :: EthCall,
        :: ethers :: contract :: EthDisplay,
        serde :: Serialize,
        serde :: Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "getChainIdType", abi = "getChainIdType()")]
    pub struct GetChainIdTypeCall;
    #[doc = "Container type for all input parameters for the `getProposalNonce` function with signature `getProposalNonce()` and selector `0x0b27fb9a`"]
    #[derive(
        Clone,
        :: ethers :: contract :: EthCall,
        :: ethers :: contract :: EthDisplay,
        serde :: Serialize,
        serde :: Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "getProposalNonce", abi = "getProposalNonce()")]
    pub struct GetProposalNonceCall;
    #[doc = "Container type for all input parameters for the `governor` function with signature `governor()` and selector `0x0c340a24`"]
    #[derive(
        Clone,
        :: ethers :: contract :: EthCall,
        :: ethers :: contract :: EthDisplay,
        serde :: Serialize,
        serde :: Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "governor", abi = "governor()")]
    pub struct GovernorCall;
    #[doc = "Container type for all input parameters for the `isCorrectExecutionChain` function with signature `isCorrectExecutionChain(bytes32)` and selector `0x830b2f57`"]
    #[derive(
        Clone,
        :: ethers :: contract :: EthCall,
        :: ethers :: contract :: EthDisplay,
        serde :: Serialize,
        serde :: Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(
        name = "isCorrectExecutionChain",
        abi = "isCorrectExecutionChain(bytes32)"
    )]
    pub struct IsCorrectExecutionChainCall {
        pub resource_id: [u8; 32],
    }
    #[doc = "Container type for all input parameters for the `isCorrectExecutionContext` function with signature `isCorrectExecutionContext(bytes32)` and selector `0xf5fc3d6b`"]
    #[derive(
        Clone,
        :: ethers :: contract :: EthCall,
        :: ethers :: contract :: EthDisplay,
        serde :: Serialize,
        serde :: Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(
        name = "isCorrectExecutionContext",
        abi = "isCorrectExecutionContext(bytes32)"
    )]
    pub struct IsCorrectExecutionContextCall {
        pub resource_id: [u8; 32],
    }
    #[doc = "Container type for all input parameters for the `isGovernor` function with signature `isGovernor()` and selector `0xc7af3352`"]
    #[derive(
        Clone,
        :: ethers :: contract :: EthCall,
        :: ethers :: contract :: EthDisplay,
        serde :: Serialize,
        serde :: Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "isGovernor", abi = "isGovernor()")]
    pub struct IsGovernorCall;
    #[doc = "Container type for all input parameters for the `isSignatureFromGovernor` function with signature `isSignatureFromGovernor(bytes,bytes)` and selector `0x8755bcad`"]
    #[derive(
        Clone,
        :: ethers :: contract :: EthCall,
        :: ethers :: contract :: EthDisplay,
        serde :: Serialize,
        serde :: Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(
        name = "isSignatureFromGovernor",
        abi = "isSignatureFromGovernor(bytes,bytes)"
    )]
    pub struct IsSignatureFromGovernorCall {
        pub data: ::ethers::core::types::Bytes,
        pub sig: ::ethers::core::types::Bytes,
    }
    #[doc = "Container type for all input parameters for the `lastGovernorUpdateTime` function with signature `lastGovernorUpdateTime()` and selector `0x9e09583c`"]
    #[derive(
        Clone,
        :: ethers :: contract :: EthCall,
        :: ethers :: contract :: EthDisplay,
        serde :: Serialize,
        serde :: Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(
        name = "lastGovernorUpdateTime",
        abi = "lastGovernorUpdateTime()"
    )]
    pub struct LastGovernorUpdateTimeCall;
    #[doc = "Container type for all input parameters for the `numOfProposers` function with signature `numOfProposers()` and selector `0xbac163a2`"]
    #[derive(
        Clone,
        :: ethers :: contract :: EthCall,
        :: ethers :: contract :: EthDisplay,
        serde :: Serialize,
        serde :: Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "numOfProposers", abi = "numOfProposers()")]
    pub struct NumOfProposersCall;
    #[doc = "Container type for all input parameters for the `parseChainIdFromResourceId` function with signature `parseChainIdFromResourceId(bytes32)` and selector `0xc2230d6e`"]
    #[derive(
        Clone,
        :: ethers :: contract :: EthCall,
        :: ethers :: contract :: EthDisplay,
        serde :: Serialize,
        serde :: Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(
        name = "parseChainIdFromResourceId",
        abi = "parseChainIdFromResourceId(bytes32)"
    )]
    pub struct ParseChainIdFromResourceIdCall {
        pub resource_id: [u8; 32],
    }
    #[doc = "Container type for all input parameters for the `paused` function with signature `paused()` and selector `0x5c975abb`"]
    #[derive(
        Clone,
        :: ethers :: contract :: EthCall,
        :: ethers :: contract :: EthDisplay,
        serde :: Serialize,
        serde :: Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "paused", abi = "paused()")]
    pub struct PausedCall;
    #[doc = "Container type for all input parameters for the `proposalNonce` function with signature `proposalNonce()` and selector `0xcc3c74a1`"]
    #[derive(
        Clone,
        :: ethers :: contract :: EthCall,
        :: ethers :: contract :: EthDisplay,
        serde :: Serialize,
        serde :: Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "proposalNonce", abi = "proposalNonce()")]
    pub struct ProposalNonceCall;
    #[doc = "Container type for all input parameters for the `proposerSetRoot` function with signature `proposerSetRoot()` and selector `0xc5eb6b1f`"]
    #[derive(
        Clone,
        :: ethers :: contract :: EthCall,
        :: ethers :: contract :: EthDisplay,
        serde :: Serialize,
        serde :: Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "proposerSetRoot", abi = "proposerSetRoot()")]
    pub struct ProposerSetRootCall;
    #[doc = "Container type for all input parameters for the `proposerSetUpdateNonce` function with signature `proposerSetUpdateNonce()` and selector `0x93596700`"]
    #[derive(
        Clone,
        :: ethers :: contract :: EthCall,
        :: ethers :: contract :: EthDisplay,
        serde :: Serialize,
        serde :: Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(
        name = "proposerSetUpdateNonce",
        abi = "proposerSetUpdateNonce()"
    )]
    pub struct ProposerSetUpdateNonceCall;
    #[doc = "Container type for all input parameters for the `recover` function with signature `recover(bytes,bytes)` and selector `0x1ed13d1b`"]
    #[derive(
        Clone,
        :: ethers :: contract :: EthCall,
        :: ethers :: contract :: EthDisplay,
        serde :: Serialize,
        serde :: Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "recover", abi = "recover(bytes,bytes)")]
    pub struct RecoverCall {
        pub data: ::ethers::core::types::Bytes,
        pub sig: ::ethers::core::types::Bytes,
    }
    #[doc = "Container type for all input parameters for the `refreshNonce` function with signature `refreshNonce()` and selector `0x13cb01f9`"]
    #[derive(
        Clone,
        :: ethers :: contract :: EthCall,
        :: ethers :: contract :: EthDisplay,
        serde :: Serialize,
        serde :: Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "refreshNonce", abi = "refreshNonce()")]
    pub struct RefreshNonceCall;
    #[doc = "Container type for all input parameters for the `renounceOwnership` function with signature `renounceOwnership()` and selector `0x715018a6`"]
    #[derive(
        Clone,
        :: ethers :: contract :: EthCall,
        :: ethers :: contract :: EthDisplay,
        serde :: Serialize,
        serde :: Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "renounceOwnership", abi = "renounceOwnership()")]
    pub struct RenounceOwnershipCall;
    #[doc = "Container type for all input parameters for the `sessionLengthMultiplier` function with signature `sessionLengthMultiplier()` and selector `0xbdfadc84`"]
    #[derive(
        Clone,
        :: ethers :: contract :: EthCall,
        :: ethers :: contract :: EthDisplay,
        serde :: Serialize,
        serde :: Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(
        name = "sessionLengthMultiplier",
        abi = "sessionLengthMultiplier()"
    )]
    pub struct SessionLengthMultiplierCall;
    #[doc = "Container type for all input parameters for the `transferOwnership` function with signature `transferOwnership(address,uint32)` and selector `0xa6e94c91`"]
    #[derive(
        Clone,
        :: ethers :: contract :: EthCall,
        :: ethers :: contract :: EthDisplay,
        serde :: Serialize,
        serde :: Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(
        name = "transferOwnership",
        abi = "transferOwnership(address,uint32)"
    )]
    pub struct TransferOwnershipCall {
        pub new_owner: ::ethers::core::types::Address,
        pub nonce: u32,
    }
    #[doc = "Container type for all input parameters for the `transferOwnershipWithSignaturePubKey` function with signature `transferOwnershipWithSignaturePubKey(bytes,uint32,bytes)` and selector `0x7296b5d8`"]
    #[derive(
        Clone,
        :: ethers :: contract :: EthCall,
        :: ethers :: contract :: EthDisplay,
        serde :: Serialize,
        serde :: Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(
        name = "transferOwnershipWithSignaturePubKey",
        abi = "transferOwnershipWithSignaturePubKey(bytes,uint32,bytes)"
    )]
    pub struct TransferOwnershipWithSignaturePubKeyCall {
        pub public_key: ::ethers::core::types::Bytes,
        pub nonce: u32,
        pub sig: ::ethers::core::types::Bytes,
    }
    #[doc = "Container type for all input parameters for the `updateProposerSetData` function with signature `updateProposerSetData(bytes32,uint64,uint32,uint32,bytes)` and selector `0xf3d23d54`"]
    #[derive(
        Clone,
        :: ethers :: contract :: EthCall,
        :: ethers :: contract :: EthDisplay,
        serde :: Serialize,
        serde :: Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(
        name = "updateProposerSetData",
        abi = "updateProposerSetData(bytes32,uint64,uint32,uint32,bytes)"
    )]
    pub struct UpdateProposerSetDataCall {
        pub proposer_set_root: [u8; 32],
        pub average_session_length_in_millisecs: u64,
        pub num_of_proposers: u32,
        pub proposer_set_update_nonce: u32,
        pub sig: ::ethers::core::types::Bytes,
    }
    #[doc = "Container type for all input parameters for the `voteInFavorForceSetGovernor` function with signature `voteInFavorForceSetGovernor((uint32,bytes32[],address))` and selector `0x24118804`"]
    #[derive(
        Clone,
        :: ethers :: contract :: EthCall,
        :: ethers :: contract :: EthDisplay,
        serde :: Serialize,
        serde :: Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(
        name = "voteInFavorForceSetGovernor",
        abi = "voteInFavorForceSetGovernor((uint32,bytes32[],address))"
    )]
    pub struct VoteInFavorForceSetGovernorCall {
        pub vote: Vote,
    }
    #[doc = "Container type for all of the contract's call "]
    #[derive(
        Clone,
        :: ethers :: contract :: EthAbiType,
        serde :: Serialize,
        serde :: Deserialize,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub enum SignatureBridgeContractCalls {
        EvmChainIdType(EvmChainIdTypeCall),
        ResourceIDToHandlerAddress(ResourceIDToHandlerAddressCall),
        AdminSetResourceWithSignature(AdminSetResourceWithSignatureCall),
        AverageSessionLengthInMillisecs(AverageSessionLengthInMillisecsCall),
        BatchExecuteProposalWithSignature(
            BatchExecuteProposalWithSignatureCall,
        ),
        CurrentVotingPeriod(CurrentVotingPeriodCall),
        ExecuteProposalWithSignature(ExecuteProposalWithSignatureCall),
        GetChainId(GetChainIdCall),
        GetChainIdType(GetChainIdTypeCall),
        GetProposalNonce(GetProposalNonceCall),
        Governor(GovernorCall),
        IsCorrectExecutionChain(IsCorrectExecutionChainCall),
        IsCorrectExecutionContext(IsCorrectExecutionContextCall),
        IsGovernor(IsGovernorCall),
        IsSignatureFromGovernor(IsSignatureFromGovernorCall),
        LastGovernorUpdateTime(LastGovernorUpdateTimeCall),
        NumOfProposers(NumOfProposersCall),
        ParseChainIdFromResourceId(ParseChainIdFromResourceIdCall),
        Paused(PausedCall),
        ProposalNonce(ProposalNonceCall),
        ProposerSetRoot(ProposerSetRootCall),
        ProposerSetUpdateNonce(ProposerSetUpdateNonceCall),
        Recover(RecoverCall),
        RefreshNonce(RefreshNonceCall),
        RenounceOwnership(RenounceOwnershipCall),
        SessionLengthMultiplier(SessionLengthMultiplierCall),
        TransferOwnership(TransferOwnershipCall),
        TransferOwnershipWithSignaturePubKey(
            TransferOwnershipWithSignaturePubKeyCall,
        ),
        UpdateProposerSetData(UpdateProposerSetDataCall),
        VoteInFavorForceSetGovernor(VoteInFavorForceSetGovernorCall),
    }
    impl ::ethers::core::abi::AbiDecode for SignatureBridgeContractCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError>
        {
            let data = data.as_ref();
            if let Ok(decoded) =
                <EvmChainIdTypeCall as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                )
            {
                return Ok(Self::EvmChainIdType(decoded));
            }
            if let Ok (decoded) = < ResourceIDToHandlerAddressCall as :: ethers :: core :: abi :: AbiDecode > :: decode (data) { return Ok (Self :: ResourceIDToHandlerAddress (decoded)) }
            if let Ok (decoded) = < AdminSetResourceWithSignatureCall as :: ethers :: core :: abi :: AbiDecode > :: decode (data) { return Ok (Self :: AdminSetResourceWithSignature (decoded)) }
            if let Ok (decoded) = < AverageSessionLengthInMillisecsCall as :: ethers :: core :: abi :: AbiDecode > :: decode (data) { return Ok (Self :: AverageSessionLengthInMillisecs (decoded)) }
            if let Ok (decoded) = < BatchExecuteProposalWithSignatureCall as :: ethers :: core :: abi :: AbiDecode > :: decode (data) { return Ok (Self :: BatchExecuteProposalWithSignature (decoded)) }
            if let Ok (decoded) = < CurrentVotingPeriodCall as :: ethers :: core :: abi :: AbiDecode > :: decode (data) { return Ok (Self :: CurrentVotingPeriod (decoded)) }
            if let Ok (decoded) = < ExecuteProposalWithSignatureCall as :: ethers :: core :: abi :: AbiDecode > :: decode (data) { return Ok (Self :: ExecuteProposalWithSignature (decoded)) }
            if let Ok(decoded) =
                <GetChainIdCall as ::ethers::core::abi::AbiDecode>::decode(data)
            {
                return Ok(Self::GetChainId(decoded));
            }
            if let Ok(decoded) =
                <GetChainIdTypeCall as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                )
            {
                return Ok(Self::GetChainIdType(decoded));
            }
            if let Ok(decoded) =
                <GetProposalNonceCall as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                )
            {
                return Ok(Self::GetProposalNonce(decoded));
            }
            if let Ok(decoded) =
                <GovernorCall as ::ethers::core::abi::AbiDecode>::decode(data)
            {
                return Ok(Self::Governor(decoded));
            }
            if let Ok (decoded) = < IsCorrectExecutionChainCall as :: ethers :: core :: abi :: AbiDecode > :: decode (data) { return Ok (Self :: IsCorrectExecutionChain (decoded)) }
            if let Ok (decoded) = < IsCorrectExecutionContextCall as :: ethers :: core :: abi :: AbiDecode > :: decode (data) { return Ok (Self :: IsCorrectExecutionContext (decoded)) }
            if let Ok(decoded) =
                <IsGovernorCall as ::ethers::core::abi::AbiDecode>::decode(data)
            {
                return Ok(Self::IsGovernor(decoded));
            }
            if let Ok (decoded) = < IsSignatureFromGovernorCall as :: ethers :: core :: abi :: AbiDecode > :: decode (data) { return Ok (Self :: IsSignatureFromGovernor (decoded)) }
            if let Ok (decoded) = < LastGovernorUpdateTimeCall as :: ethers :: core :: abi :: AbiDecode > :: decode (data) { return Ok (Self :: LastGovernorUpdateTime (decoded)) }
            if let Ok(decoded) =
                <NumOfProposersCall as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                )
            {
                return Ok(Self::NumOfProposers(decoded));
            }
            if let Ok (decoded) = < ParseChainIdFromResourceIdCall as :: ethers :: core :: abi :: AbiDecode > :: decode (data) { return Ok (Self :: ParseChainIdFromResourceId (decoded)) }
            if let Ok(decoded) =
                <PausedCall as ::ethers::core::abi::AbiDecode>::decode(data)
            {
                return Ok(Self::Paused(decoded));
            }
            if let Ok(decoded) =
                <ProposalNonceCall as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                )
            {
                return Ok(Self::ProposalNonce(decoded));
            }
            if let Ok(decoded) =
                <ProposerSetRootCall as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                )
            {
                return Ok(Self::ProposerSetRoot(decoded));
            }
            if let Ok (decoded) = < ProposerSetUpdateNonceCall as :: ethers :: core :: abi :: AbiDecode > :: decode (data) { return Ok (Self :: ProposerSetUpdateNonce (decoded)) }
            if let Ok(decoded) =
                <RecoverCall as ::ethers::core::abi::AbiDecode>::decode(data)
            {
                return Ok(Self::Recover(decoded));
            }
            if let Ok(decoded) =
                <RefreshNonceCall as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                )
            {
                return Ok(Self::RefreshNonce(decoded));
            }
            if let Ok (decoded) = < RenounceOwnershipCall as :: ethers :: core :: abi :: AbiDecode > :: decode (data) { return Ok (Self :: RenounceOwnership (decoded)) }
            if let Ok (decoded) = < SessionLengthMultiplierCall as :: ethers :: core :: abi :: AbiDecode > :: decode (data) { return Ok (Self :: SessionLengthMultiplier (decoded)) }
            if let Ok (decoded) = < TransferOwnershipCall as :: ethers :: core :: abi :: AbiDecode > :: decode (data) { return Ok (Self :: TransferOwnership (decoded)) }
            if let Ok (decoded) = < TransferOwnershipWithSignaturePubKeyCall as :: ethers :: core :: abi :: AbiDecode > :: decode (data) { return Ok (Self :: TransferOwnershipWithSignaturePubKey (decoded)) }
            if let Ok (decoded) = < UpdateProposerSetDataCall as :: ethers :: core :: abi :: AbiDecode > :: decode (data) { return Ok (Self :: UpdateProposerSetData (decoded)) }
            if let Ok (decoded) = < VoteInFavorForceSetGovernorCall as :: ethers :: core :: abi :: AbiDecode > :: decode (data) { return Ok (Self :: VoteInFavorForceSetGovernor (decoded)) }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for SignatureBridgeContractCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                Self::EvmChainIdType(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::ResourceIDToHandlerAddress(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::AdminSetResourceWithSignature(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::AverageSessionLengthInMillisecs(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::BatchExecuteProposalWithSignature(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::CurrentVotingPeriod(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::ExecuteProposalWithSignature(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::GetChainId(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::GetChainIdType(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::GetProposalNonce(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Governor(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::IsCorrectExecutionChain(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::IsCorrectExecutionContext(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::IsGovernor(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::IsSignatureFromGovernor(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::LastGovernorUpdateTime(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::NumOfProposers(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::ParseChainIdFromResourceId(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Paused(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::ProposalNonce(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::ProposerSetRoot(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::ProposerSetUpdateNonce(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Recover(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::RefreshNonce(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::RenounceOwnership(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::SessionLengthMultiplier(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::TransferOwnership(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::TransferOwnershipWithSignaturePubKey(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::UpdateProposerSetData(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::VoteInFavorForceSetGovernor(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
            }
        }
    }
    impl ::core::fmt::Display for SignatureBridgeContractCalls {
        fn fmt(
            &self,
            f: &mut ::core::fmt::Formatter<'_>,
        ) -> ::core::fmt::Result {
            match self {
                Self::EvmChainIdType(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::ResourceIDToHandlerAddress(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::AdminSetResourceWithSignature(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::AverageSessionLengthInMillisecs(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::BatchExecuteProposalWithSignature(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::CurrentVotingPeriod(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::ExecuteProposalWithSignature(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::GetChainId(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::GetChainIdType(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::GetProposalNonce(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::Governor(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::IsCorrectExecutionChain(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::IsCorrectExecutionContext(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::IsGovernor(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::IsSignatureFromGovernor(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::LastGovernorUpdateTime(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::NumOfProposers(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::ParseChainIdFromResourceId(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::Paused(element) => ::core::fmt::Display::fmt(element, f),
                Self::ProposalNonce(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::ProposerSetRoot(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::ProposerSetUpdateNonce(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::Recover(element) => ::core::fmt::Display::fmt(element, f),
                Self::RefreshNonce(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::RenounceOwnership(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::SessionLengthMultiplier(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::TransferOwnership(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::TransferOwnershipWithSignaturePubKey(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::UpdateProposerSetData(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::VoteInFavorForceSetGovernor(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
            }
        }
    }
    impl ::core::convert::From<EvmChainIdTypeCall>
        for SignatureBridgeContractCalls
    {
        fn from(value: EvmChainIdTypeCall) -> Self {
            Self::EvmChainIdType(value)
        }
    }
    impl ::core::convert::From<ResourceIDToHandlerAddressCall>
        for SignatureBridgeContractCalls
    {
        fn from(value: ResourceIDToHandlerAddressCall) -> Self {
            Self::ResourceIDToHandlerAddress(value)
        }
    }
    impl ::core::convert::From<AdminSetResourceWithSignatureCall>
        for SignatureBridgeContractCalls
    {
        fn from(value: AdminSetResourceWithSignatureCall) -> Self {
            Self::AdminSetResourceWithSignature(value)
        }
    }
    impl ::core::convert::From<AverageSessionLengthInMillisecsCall>
        for SignatureBridgeContractCalls
    {
        fn from(value: AverageSessionLengthInMillisecsCall) -> Self {
            Self::AverageSessionLengthInMillisecs(value)
        }
    }
    impl ::core::convert::From<BatchExecuteProposalWithSignatureCall>
        for SignatureBridgeContractCalls
    {
        fn from(value: BatchExecuteProposalWithSignatureCall) -> Self {
            Self::BatchExecuteProposalWithSignature(value)
        }
    }
    impl ::core::convert::From<CurrentVotingPeriodCall>
        for SignatureBridgeContractCalls
    {
        fn from(value: CurrentVotingPeriodCall) -> Self {
            Self::CurrentVotingPeriod(value)
        }
    }
    impl ::core::convert::From<ExecuteProposalWithSignatureCall>
        for SignatureBridgeContractCalls
    {
        fn from(value: ExecuteProposalWithSignatureCall) -> Self {
            Self::ExecuteProposalWithSignature(value)
        }
    }
    impl ::core::convert::From<GetChainIdCall> for SignatureBridgeContractCalls {
        fn from(value: GetChainIdCall) -> Self {
            Self::GetChainId(value)
        }
    }
    impl ::core::convert::From<GetChainIdTypeCall>
        for SignatureBridgeContractCalls
    {
        fn from(value: GetChainIdTypeCall) -> Self {
            Self::GetChainIdType(value)
        }
    }
    impl ::core::convert::From<GetProposalNonceCall>
        for SignatureBridgeContractCalls
    {
        fn from(value: GetProposalNonceCall) -> Self {
            Self::GetProposalNonce(value)
        }
    }
    impl ::core::convert::From<GovernorCall> for SignatureBridgeContractCalls {
        fn from(value: GovernorCall) -> Self {
            Self::Governor(value)
        }
    }
    impl ::core::convert::From<IsCorrectExecutionChainCall>
        for SignatureBridgeContractCalls
    {
        fn from(value: IsCorrectExecutionChainCall) -> Self {
            Self::IsCorrectExecutionChain(value)
        }
    }
    impl ::core::convert::From<IsCorrectExecutionContextCall>
        for SignatureBridgeContractCalls
    {
        fn from(value: IsCorrectExecutionContextCall) -> Self {
            Self::IsCorrectExecutionContext(value)
        }
    }
    impl ::core::convert::From<IsGovernorCall> for SignatureBridgeContractCalls {
        fn from(value: IsGovernorCall) -> Self {
            Self::IsGovernor(value)
        }
    }
    impl ::core::convert::From<IsSignatureFromGovernorCall>
        for SignatureBridgeContractCalls
    {
        fn from(value: IsSignatureFromGovernorCall) -> Self {
            Self::IsSignatureFromGovernor(value)
        }
    }
    impl ::core::convert::From<LastGovernorUpdateTimeCall>
        for SignatureBridgeContractCalls
    {
        fn from(value: LastGovernorUpdateTimeCall) -> Self {
            Self::LastGovernorUpdateTime(value)
        }
    }
    impl ::core::convert::From<NumOfProposersCall>
        for SignatureBridgeContractCalls
    {
        fn from(value: NumOfProposersCall) -> Self {
            Self::NumOfProposers(value)
        }
    }
    impl ::core::convert::From<ParseChainIdFromResourceIdCall>
        for SignatureBridgeContractCalls
    {
        fn from(value: ParseChainIdFromResourceIdCall) -> Self {
            Self::ParseChainIdFromResourceId(value)
        }
    }
    impl ::core::convert::From<PausedCall> for SignatureBridgeContractCalls {
        fn from(value: PausedCall) -> Self {
            Self::Paused(value)
        }
    }
    impl ::core::convert::From<ProposalNonceCall> for SignatureBridgeContractCalls {
        fn from(value: ProposalNonceCall) -> Self {
            Self::ProposalNonce(value)
        }
    }
    impl ::core::convert::From<ProposerSetRootCall>
        for SignatureBridgeContractCalls
    {
        fn from(value: ProposerSetRootCall) -> Self {
            Self::ProposerSetRoot(value)
        }
    }
    impl ::core::convert::From<ProposerSetUpdateNonceCall>
        for SignatureBridgeContractCalls
    {
        fn from(value: ProposerSetUpdateNonceCall) -> Self {
            Self::ProposerSetUpdateNonce(value)
        }
    }
    impl ::core::convert::From<RecoverCall> for SignatureBridgeContractCalls {
        fn from(value: RecoverCall) -> Self {
            Self::Recover(value)
        }
    }
    impl ::core::convert::From<RefreshNonceCall> for SignatureBridgeContractCalls {
        fn from(value: RefreshNonceCall) -> Self {
            Self::RefreshNonce(value)
        }
    }
    impl ::core::convert::From<RenounceOwnershipCall>
        for SignatureBridgeContractCalls
    {
        fn from(value: RenounceOwnershipCall) -> Self {
            Self::RenounceOwnership(value)
        }
    }
    impl ::core::convert::From<SessionLengthMultiplierCall>
        for SignatureBridgeContractCalls
    {
        fn from(value: SessionLengthMultiplierCall) -> Self {
            Self::SessionLengthMultiplier(value)
        }
    }
    impl ::core::convert::From<TransferOwnershipCall>
        for SignatureBridgeContractCalls
    {
        fn from(value: TransferOwnershipCall) -> Self {
            Self::TransferOwnership(value)
        }
    }
    impl ::core::convert::From<TransferOwnershipWithSignaturePubKeyCall>
        for SignatureBridgeContractCalls
    {
        fn from(value: TransferOwnershipWithSignaturePubKeyCall) -> Self {
            Self::TransferOwnershipWithSignaturePubKey(value)
        }
    }
    impl ::core::convert::From<UpdateProposerSetDataCall>
        for SignatureBridgeContractCalls
    {
        fn from(value: UpdateProposerSetDataCall) -> Self {
            Self::UpdateProposerSetData(value)
        }
    }
    impl ::core::convert::From<VoteInFavorForceSetGovernorCall>
        for SignatureBridgeContractCalls
    {
        fn from(value: VoteInFavorForceSetGovernorCall) -> Self {
            Self::VoteInFavorForceSetGovernor(value)
        }
    }
    #[doc = "Container type for all return fields from the `EVM_CHAIN_ID_TYPE` function with signature `EVM_CHAIN_ID_TYPE()` and selector `0x8b7e8782`"]
    #[derive(
        Clone,
        :: ethers :: contract :: EthAbiType,
        :: ethers :: contract :: EthAbiCodec,
        serde :: Serialize,
        serde :: Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct EvmChainIdTypeReturn(pub [u8; 2]);
    #[doc = "Container type for all return fields from the `_resourceIDToHandlerAddress` function with signature `_resourceIDToHandlerAddress(bytes32)` and selector `0x84db809f`"]
    #[derive(
        Clone,
        :: ethers :: contract :: EthAbiType,
        :: ethers :: contract :: EthAbiCodec,
        serde :: Serialize,
        serde :: Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct ResourceIDToHandlerAddressReturn(
        pub ::ethers::core::types::Address,
    );
    #[doc = "Container type for all return fields from the `averageSessionLengthInMillisecs` function with signature `averageSessionLengthInMillisecs()` and selector `0x016737bb`"]
    #[derive(
        Clone,
        :: ethers :: contract :: EthAbiType,
        :: ethers :: contract :: EthAbiCodec,
        serde :: Serialize,
        serde :: Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct AverageSessionLengthInMillisecsReturn(pub u64);
    #[doc = "Container type for all return fields from the `currentVotingPeriod` function with signature `currentVotingPeriod()` and selector `0x3a049e02`"]
    #[derive(
        Clone,
        :: ethers :: contract :: EthAbiType,
        :: ethers :: contract :: EthAbiCodec,
        serde :: Serialize,
        serde :: Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct CurrentVotingPeriodReturn(pub ::ethers::core::types::U256);
    #[doc = "Container type for all return fields from the `getChainId` function with signature `getChainId()` and selector `0x3408e470`"]
    #[derive(
        Clone,
        :: ethers :: contract :: EthAbiType,
        :: ethers :: contract :: EthAbiCodec,
        serde :: Serialize,
        serde :: Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct GetChainIdReturn(pub ::ethers::core::types::U256);
    #[doc = "Container type for all return fields from the `getChainIdType` function with signature `getChainIdType()` and selector `0x4c830cbd`"]
    #[derive(
        Clone,
        :: ethers :: contract :: EthAbiType,
        :: ethers :: contract :: EthAbiCodec,
        serde :: Serialize,
        serde :: Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct GetChainIdTypeReturn(pub u64);
    #[doc = "Container type for all return fields from the `getProposalNonce` function with signature `getProposalNonce()` and selector `0x0b27fb9a`"]
    #[derive(
        Clone,
        :: ethers :: contract :: EthAbiType,
        :: ethers :: contract :: EthAbiCodec,
        serde :: Serialize,
        serde :: Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct GetProposalNonceReturn(pub ::ethers::core::types::U256);
    #[doc = "Container type for all return fields from the `governor` function with signature `governor()` and selector `0x0c340a24`"]
    #[derive(
        Clone,
        :: ethers :: contract :: EthAbiType,
        :: ethers :: contract :: EthAbiCodec,
        serde :: Serialize,
        serde :: Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct GovernorReturn(pub ::ethers::core::types::Address);
    #[doc = "Container type for all return fields from the `isCorrectExecutionChain` function with signature `isCorrectExecutionChain(bytes32)` and selector `0x830b2f57`"]
    #[derive(
        Clone,
        :: ethers :: contract :: EthAbiType,
        :: ethers :: contract :: EthAbiCodec,
        serde :: Serialize,
        serde :: Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct IsCorrectExecutionChainReturn(pub bool);
    #[doc = "Container type for all return fields from the `isCorrectExecutionContext` function with signature `isCorrectExecutionContext(bytes32)` and selector `0xf5fc3d6b`"]
    #[derive(
        Clone,
        :: ethers :: contract :: EthAbiType,
        :: ethers :: contract :: EthAbiCodec,
        serde :: Serialize,
        serde :: Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct IsCorrectExecutionContextReturn(pub bool);
    #[doc = "Container type for all return fields from the `isGovernor` function with signature `isGovernor()` and selector `0xc7af3352`"]
    #[derive(
        Clone,
        :: ethers :: contract :: EthAbiType,
        :: ethers :: contract :: EthAbiCodec,
        serde :: Serialize,
        serde :: Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct IsGovernorReturn(pub bool);
    #[doc = "Container type for all return fields from the `isSignatureFromGovernor` function with signature `isSignatureFromGovernor(bytes,bytes)` and selector `0x8755bcad`"]
    #[derive(
        Clone,
        :: ethers :: contract :: EthAbiType,
        :: ethers :: contract :: EthAbiCodec,
        serde :: Serialize,
        serde :: Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct IsSignatureFromGovernorReturn(pub bool);
    #[doc = "Container type for all return fields from the `lastGovernorUpdateTime` function with signature `lastGovernorUpdateTime()` and selector `0x9e09583c`"]
    #[derive(
        Clone,
        :: ethers :: contract :: EthAbiType,
        :: ethers :: contract :: EthAbiCodec,
        serde :: Serialize,
        serde :: Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct LastGovernorUpdateTimeReturn(pub ::ethers::core::types::U256);
    #[doc = "Container type for all return fields from the `numOfProposers` function with signature `numOfProposers()` and selector `0xbac163a2`"]
    #[derive(
        Clone,
        :: ethers :: contract :: EthAbiType,
        :: ethers :: contract :: EthAbiCodec,
        serde :: Serialize,
        serde :: Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct NumOfProposersReturn(pub u32);
    #[doc = "Container type for all return fields from the `parseChainIdFromResourceId` function with signature `parseChainIdFromResourceId(bytes32)` and selector `0xc2230d6e`"]
    #[derive(
        Clone,
        :: ethers :: contract :: EthAbiType,
        :: ethers :: contract :: EthAbiCodec,
        serde :: Serialize,
        serde :: Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct ParseChainIdFromResourceIdReturn(pub u64);
    #[doc = "Container type for all return fields from the `paused` function with signature `paused()` and selector `0x5c975abb`"]
    #[derive(
        Clone,
        :: ethers :: contract :: EthAbiType,
        :: ethers :: contract :: EthAbiCodec,
        serde :: Serialize,
        serde :: Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct PausedReturn(pub bool);
    #[doc = "Container type for all return fields from the `proposalNonce` function with signature `proposalNonce()` and selector `0xcc3c74a1`"]
    #[derive(
        Clone,
        :: ethers :: contract :: EthAbiType,
        :: ethers :: contract :: EthAbiCodec,
        serde :: Serialize,
        serde :: Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct ProposalNonceReturn(pub ::ethers::core::types::U256);
    #[doc = "Container type for all return fields from the `proposerSetRoot` function with signature `proposerSetRoot()` and selector `0xc5eb6b1f`"]
    #[derive(
        Clone,
        :: ethers :: contract :: EthAbiType,
        :: ethers :: contract :: EthAbiCodec,
        serde :: Serialize,
        serde :: Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct ProposerSetRootReturn(pub [u8; 32]);
    #[doc = "Container type for all return fields from the `proposerSetUpdateNonce` function with signature `proposerSetUpdateNonce()` and selector `0x93596700`"]
    #[derive(
        Clone,
        :: ethers :: contract :: EthAbiType,
        :: ethers :: contract :: EthAbiCodec,
        serde :: Serialize,
        serde :: Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct ProposerSetUpdateNonceReturn(pub u32);
    #[doc = "Container type for all return fields from the `recover` function with signature `recover(bytes,bytes)` and selector `0x1ed13d1b`"]
    #[derive(
        Clone,
        :: ethers :: contract :: EthAbiType,
        :: ethers :: contract :: EthAbiCodec,
        serde :: Serialize,
        serde :: Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct RecoverReturn(pub ::ethers::core::types::Address);
    #[doc = "Container type for all return fields from the `refreshNonce` function with signature `refreshNonce()` and selector `0x13cb01f9`"]
    #[derive(
        Clone,
        :: ethers :: contract :: EthAbiType,
        :: ethers :: contract :: EthAbiCodec,
        serde :: Serialize,
        serde :: Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct RefreshNonceReturn(pub u32);
    #[doc = "Container type for all return fields from the `sessionLengthMultiplier` function with signature `sessionLengthMultiplier()` and selector `0xbdfadc84`"]
    #[derive(
        Clone,
        :: ethers :: contract :: EthAbiType,
        :: ethers :: contract :: EthAbiCodec,
        serde :: Serialize,
        serde :: Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct SessionLengthMultiplierReturn(pub ::ethers::core::types::U256);
    #[doc = "`Vote(uint32,bytes32[],address)`"]
    #[derive(
        Clone,
        :: ethers :: contract :: EthAbiType,
        :: ethers :: contract :: EthAbiCodec,
        serde :: Serialize,
        serde :: Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct Vote {
        pub leaf_index: u32,
        pub sibling_path_nodes: ::std::vec::Vec<[u8; 32]>,
        pub proposed_governor: ::ethers::core::types::Address,
    }
}
