pub use v_anchor_base_contract :: * ; # [allow (clippy :: too_many_arguments , non_camel_case_types)] pub mod v_anchor_base_contract { # ! [allow (clippy :: enum_variant_names)] # ! [allow (dead_code)] # ! [allow (clippy :: type_complexity)] # ! [allow (unused_imports)] # [doc = "VAnchorBaseContract was auto-generated with ethers-rs Abigen. More information at: https://github.com/gakonst/ethers-rs"] use std :: sync :: Arc ; use ethers :: core :: { abi :: { Abi , Token , Detokenize , InvalidOutputType , Tokenizable } , types :: * , } ; use ethers :: contract :: { Contract , builders :: { ContractCall , Event } , Lazy } ; use ethers :: providers :: Middleware ; pub static VANCHORBASECONTRACT_ABI : ethers :: contract :: Lazy < ethers :: core :: abi :: Abi > = ethers :: contract :: Lazy :: new (|| ethers :: core :: utils :: __serde_json :: from_str ("[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"latestLeafIndex\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"EdgeAddition\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"latestLeafIndex\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"EdgeUpdate\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"Initialized\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint32\",\"name\":\"leafIndex\",\"type\":\"uint32\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"Insertion\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes\",\"name\":\"encryptedOutput\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"NewCommitment\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"nullifier\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"NewNullifier\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"bytes\",\"name\":\"key\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"PublicKey\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"EVM_CHAIN_ID_TYPE\",\"outputs\":[{\"internalType\":\"bytes2\",\"name\":\"\",\"type\":\"bytes2\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"FIELD_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"MAX_EXT_AMOUNT\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"MAX_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"ROOT_HISTORY_SIZE\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"ZERO_VALUE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_extAmount\",\"type\":\"int256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"pure\",\"type\":\"function\",\"name\":\"calculatePublicAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"commitments\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maximumDepositAmount\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint32\",\"name\":\"_nonce\",\"type\":\"uint32\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"configureMaximumDepositLimit\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimalWithdrawalAmount\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint32\",\"name\":\"_nonce\",\"type\":\"uint32\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"configureMinimalWithdrawalLimit\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"currentNeighborRootIndex\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"currentRootIndex\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"edgeExistsForChain\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"edgeIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"edgeList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"latestLeafIndex\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bytes32\",\"name\":\"srcResourceID\",\"type\":\"bytes32\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"filledSubtrees\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getChainIdType\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getLastRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getLatestNeighborEdges\",\"outputs\":[{\"internalType\":\"struct LinkableAnchor.Edge[]\",\"name\":\"\",\"type\":\"tuple[]\",\"components\":[{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"latestLeafIndex\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bytes32\",\"name\":\"srcResourceID\",\"type\":\"bytes32\",\"components\":[]}]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getLatestNeighborRoots\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getProposalNonce\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"handler\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainID\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"hasEdge\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"contract IPoseidonT3\",\"name\":\"_hasher\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"bytes32\",\"name\":\"_left\",\"type\":\"bytes32\",\"components\":[]},{\"internalType\":\"bytes32\",\"name\":\"_right\",\"type\":\"bytes32\",\"components\":[]}],\"stateMutability\":\"pure\",\"type\":\"function\",\"name\":\"hashLeftRight\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"hasher\",\"outputs\":[{\"internalType\":\"contract IPoseidonT3\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimalWithdrawalAmount\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"_maximumDepositAmount\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"initialize\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_neighborChainID\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"isKnownNeighborRoot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"isKnownRoot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_nullifierHash\",\"type\":\"bytes32\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"isSpent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_nullifierHashes\",\"type\":\"bytes32[]\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"isSpentArray\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_roots\",\"type\":\"bytes32[]\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"isValidRoots\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"lastBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"levels\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"maxEdges\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"maximumDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"minimalWithdrawalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"neighborRoots\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"nextIndex\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"nullifierHashes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_resourceId\",\"type\":\"bytes32\",\"components\":[]}],\"stateMutability\":\"pure\",\"type\":\"function\",\"name\":\"parseChainIdFromResourceId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"struct VAnchorBase.Account\",\"name\":\"_account\",\"type\":\"tuple\",\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\",\"components\":[]}]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"register\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"roots\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_handler\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint32\",\"name\":\"_nonce\",\"type\":\"uint32\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setHandler\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verifier\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint32\",\"name\":\"_nonce\",\"type\":\"uint32\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setVerifier\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256[8]\",\"name\":\"_proof\",\"type\":\"uint256[8]\",\"components\":[]}],\"stateMutability\":\"pure\",\"type\":\"function\",\"name\":\"unpackProof\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\",\"components\":[]},{\"internalType\":\"uint256[2][2]\",\"name\":\"\",\"type\":\"uint256[2][2]\",\"components\":[]},{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\",\"components\":[]},{\"internalType\":\"uint32\",\"name\":\"_leafIndex\",\"type\":\"uint32\",\"components\":[]},{\"internalType\":\"bytes32\",\"name\":\"_srcResourceID\",\"type\":\"bytes32\",\"components\":[]}],\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"updateEdge\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"verifier\",\"outputs\":[{\"internalType\":\"contract IAnchorVerifier\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"pure\",\"type\":\"function\",\"name\":\"zeros\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[]}]}]") . expect ("invalid abi")) ; pub struct VAnchorBaseContract < M > (ethers :: contract :: Contract < M >) ; impl < M > Clone for VAnchorBaseContract < M > { fn clone (& self) -> Self { VAnchorBaseContract (self . 0 . clone ()) } } impl < M > std :: ops :: Deref for VAnchorBaseContract < M > { type Target = ethers :: contract :: Contract < M > ; fn deref (& self) -> & Self :: Target { & self . 0 } } impl < M : ethers :: providers :: Middleware > std :: fmt :: Debug for VAnchorBaseContract < M > { fn fmt (& self , f : & mut std :: fmt :: Formatter) -> std :: fmt :: Result { f . debug_tuple (stringify ! (VAnchorBaseContract)) . field (& self . address ()) . finish () } } impl < M : ethers :: providers :: Middleware > VAnchorBaseContract < M > { # [doc = r" Creates a new contract instance with the specified `ethers`"] # [doc = r" client at the given `Address`. The contract derefs to a `ethers::Contract`"] # [doc = r" object"] pub fn new < T : Into < ethers :: core :: types :: Address >> (address : T , client : :: std :: sync :: Arc < M >) -> Self { ethers :: contract :: Contract :: new (address . into () , VANCHORBASECONTRACT_ABI . clone () , client) . into () } # [doc = "Calls the contract's `EVM_CHAIN_ID_TYPE` (0x8b7e8782) function"] pub fn evm_chain_id_type (& self) -> ethers :: contract :: builders :: ContractCall < M , [u8 ; 2] > { self . 0 . method_hash ([139 , 126 , 135 , 130] , ()) . expect ("method not found (this should never happen)") } # [doc = "Calls the contract's `FIELD_SIZE` (0x414a37ba) function"] pub fn field_size (& self) -> ethers :: contract :: builders :: ContractCall < M , ethers :: core :: types :: U256 > { self . 0 . method_hash ([65 , 74 , 55 , 186] , ()) . expect ("method not found (this should never happen)") } # [doc = "Calls the contract's `MAX_EXT_AMOUNT` (0x7fe24ffe) function"] pub fn max_ext_amount (& self) -> ethers :: contract :: builders :: ContractCall < M , I256 > { self . 0 . method_hash ([127 , 226 , 79 , 254] , ()) . expect ("method not found (this should never happen)") } # [doc = "Calls the contract's `MAX_FEE` (0xbc063e1a) function"] pub fn max_fee (& self) -> ethers :: contract :: builders :: ContractCall < M , ethers :: core :: types :: U256 > { self . 0 . method_hash ([188 , 6 , 62 , 26] , ()) . expect ("method not found (this should never happen)") } # [doc = "Calls the contract's `ROOT_HISTORY_SIZE` (0xcd87a3b4) function"] pub fn root_history_size (& self) -> ethers :: contract :: builders :: ContractCall < M , u32 > { self . 0 . method_hash ([205 , 135 , 163 , 180] , ()) . expect ("method not found (this should never happen)") } # [doc = "Calls the contract's `ZERO_VALUE` (0xec732959) function"] pub fn zero_value (& self) -> ethers :: contract :: builders :: ContractCall < M , ethers :: core :: types :: U256 > { self . 0 . method_hash ([236 , 115 , 41 , 89] , ()) . expect ("method not found (this should never happen)") } # [doc = "Calls the contract's `calculatePublicAmount` (0x2570b7b4) function"] pub fn calculate_public_amount (& self , ext_amount : I256 , fee : ethers :: core :: types :: U256) -> ethers :: contract :: builders :: ContractCall < M , ethers :: core :: types :: U256 > { self . 0 . method_hash ([37 , 112 , 183 , 180] , (ext_amount , fee ,)) . expect ("method not found (this should never happen)") } # [doc = "Calls the contract's `commitments` (0x839df945) function"] pub fn commitments (& self , p0 : [u8 ; 32]) -> ethers :: contract :: builders :: ContractCall < M , bool > { self . 0 . method_hash ([131 , 157 , 249 , 69] , p0) . expect ("method not found (this should never happen)") } # [doc = "Calls the contract's `configureMaximumDepositLimit` (0x8c832b13) function"] pub fn configure_maximum_deposit_limit (& self , maximum_deposit_amount : ethers :: core :: types :: U256 , nonce : u32) -> ethers :: contract :: builders :: ContractCall < M , () > { self . 0 . method_hash ([140 , 131 , 43 , 19] , (maximum_deposit_amount , nonce ,)) . expect ("method not found (this should never happen)") } # [doc = "Calls the contract's `configureMinimalWithdrawalLimit` (0x1f7f99f7) function"] pub fn configure_minimal_withdrawal_limit (& self , minimal_withdrawal_amount : ethers :: core :: types :: U256 , nonce : u32) -> ethers :: contract :: builders :: ContractCall < M , () > { self . 0 . method_hash ([31 , 127 , 153 , 247] , (minimal_withdrawal_amount , nonce ,)) . expect ("method not found (this should never happen)") } # [doc = "Calls the contract's `currentNeighborRootIndex` (0x5d2d766c) function"] pub fn current_neighbor_root_index (& self , p0 : ethers :: core :: types :: U256) -> ethers :: contract :: builders :: ContractCall < M , u32 > { self . 0 . method_hash ([93 , 45 , 118 , 108] , p0) . expect ("method not found (this should never happen)") } # [doc = "Calls the contract's `currentRootIndex` (0x90eeb02b) function"] pub fn current_root_index (& self) -> ethers :: contract :: builders :: ContractCall < M , u32 > { self . 0 . method_hash ([144 , 238 , 176 , 43] , ()) . expect ("method not found (this should never happen)") } # [doc = "Calls the contract's `edgeExistsForChain` (0xfa731687) function"] pub fn edge_exists_for_chain (& self , p0 : ethers :: core :: types :: U256) -> ethers :: contract :: builders :: ContractCall < M , bool > { self . 0 . method_hash ([250 , 115 , 22 , 135] , p0) . expect ("method not found (this should never happen)") } # [doc = "Calls the contract's `edgeIndex` (0xe70ea87c) function"] pub fn edge_index (& self , p0 : ethers :: core :: types :: U256) -> ethers :: contract :: builders :: ContractCall < M , ethers :: core :: types :: U256 > { self . 0 . method_hash ([231 , 14 , 168 , 124] , p0) . expect ("method not found (this should never happen)") } # [doc = "Calls the contract's `edgeList` (0xdbc916b8) function"] pub fn edge_list (& self , p0 : ethers :: core :: types :: U256) -> ethers :: contract :: builders :: ContractCall < M , (ethers :: core :: types :: U256 , [u8 ; 32] , ethers :: core :: types :: U256 , [u8 ; 32]) > { self . 0 . method_hash ([219 , 201 , 22 , 184] , p0) . expect ("method not found (this should never happen)") } # [doc = "Calls the contract's `filledSubtrees` (0xf178e47c) function"] pub fn filled_subtrees (& self , p0 : ethers :: core :: types :: U256) -> ethers :: contract :: builders :: ContractCall < M , [u8 ; 32] > { self . 0 . method_hash ([241 , 120 , 228 , 124] , p0) . expect ("method not found (this should never happen)") } # [doc = "Calls the contract's `getChainId` (0x3408e470) function"] pub fn get_chain_id (& self) -> ethers :: contract :: builders :: ContractCall < M , ethers :: core :: types :: U256 > { self . 0 . method_hash ([52 , 8 , 228 , 112] , ()) . expect ("method not found (this should never happen)") } # [doc = "Calls the contract's `getChainIdType` (0x4c830cbd) function"] pub fn get_chain_id_type (& self) -> ethers :: contract :: builders :: ContractCall < M , u64 > { self . 0 . method_hash ([76 , 131 , 12 , 189] , ()) . expect ("method not found (this should never happen)") } # [doc = "Calls the contract's `getLastRoot` (0xba70f757) function"] pub fn get_last_root (& self) -> ethers :: contract :: builders :: ContractCall < M , [u8 ; 32] > { self . 0 . method_hash ([186 , 112 , 247 , 87] , ()) . expect ("method not found (this should never happen)") } # [doc = "Calls the contract's `getLatestNeighborEdges` (0x8c0d34d8) function"] pub fn get_latest_neighbor_edges (& self) -> ethers :: contract :: builders :: ContractCall < M , :: std :: vec :: Vec < Edge > > { self . 0 . method_hash ([140 , 13 , 52 , 216] , ()) . expect ("method not found (this should never happen)") } # [doc = "Calls the contract's `getLatestNeighborRoots` (0x1e627617) function"] pub fn get_latest_neighbor_roots (& self) -> ethers :: contract :: builders :: ContractCall < M , :: std :: vec :: Vec < [u8 ; 32] > > { self . 0 . method_hash ([30 , 98 , 118 , 23] , ()) . expect ("method not found (this should never happen)") } # [doc = "Calls the contract's `getProposalNonce` (0x0b27fb9a) function"] pub fn get_proposal_nonce (& self) -> ethers :: contract :: builders :: ContractCall < M , u32 > { self . 0 . method_hash ([11 , 39 , 251 , 154] , ()) . expect ("method not found (this should never happen)") } # [doc = "Calls the contract's `handler` (0xc80916d4) function"] pub fn handler (& self) -> ethers :: contract :: builders :: ContractCall < M , ethers :: core :: types :: Address > { self . 0 . method_hash ([200 , 9 , 22 , 212] , ()) . expect ("method not found (this should never happen)") } # [doc = "Calls the contract's `hasEdge` (0x92156311) function"] pub fn has_edge (& self , chain_id : ethers :: core :: types :: U256) -> ethers :: contract :: builders :: ContractCall < M , bool > { self . 0 . method_hash ([146 , 21 , 99 , 17] , chain_id) . expect ("method not found (this should never happen)") } # [doc = "Calls the contract's `hashLeftRight` (0x8ea3099e) function"] pub fn hash_left_right (& self , hasher : ethers :: core :: types :: Address , left : [u8 ; 32] , right : [u8 ; 32]) -> ethers :: contract :: builders :: ContractCall < M , [u8 ; 32] > { self . 0 . method_hash ([142 , 163 , 9 , 158] , (hasher , left , right ,)) . expect ("method not found (this should never happen)") } # [doc = "Calls the contract's `hasher` (0xed33639f) function"] pub fn hasher (& self) -> ethers :: contract :: builders :: ContractCall < M , ethers :: core :: types :: Address > { self . 0 . method_hash ([237 , 51 , 99 , 159] , ()) . expect ("method not found (this should never happen)") } # [doc = "Calls the contract's `initialize` (0xe4a30116) function"] pub fn initialize (& self , minimal_withdrawal_amount : ethers :: core :: types :: U256 , maximum_deposit_amount : ethers :: core :: types :: U256) -> ethers :: contract :: builders :: ContractCall < M , () > { self . 0 . method_hash ([228 , 163 , 1 , 22] , (minimal_withdrawal_amount , maximum_deposit_amount ,)) . expect ("method not found (this should never happen)") } # [doc = "Calls the contract's `isKnownNeighborRoot` (0x11e4dcb9) function"] pub fn is_known_neighbor_root (& self , neighbor_chain_id : ethers :: core :: types :: U256 , root : [u8 ; 32]) -> ethers :: contract :: builders :: ContractCall < M , bool > { self . 0 . method_hash ([17 , 228 , 220 , 185] , (neighbor_chain_id , root ,)) . expect ("method not found (this should never happen)") } # [doc = "Calls the contract's `isKnownRoot` (0x6d9833e3) function"] pub fn is_known_root (& self , root : [u8 ; 32]) -> ethers :: contract :: builders :: ContractCall < M , bool > { self . 0 . method_hash ([109 , 152 , 51 , 227] , root) . expect ("method not found (this should never happen)") } # [doc = "Calls the contract's `isSpent` (0xe5285dcc) function"] pub fn is_spent (& self , nullifier_hash : [u8 ; 32]) -> ethers :: contract :: builders :: ContractCall < M , bool > { self . 0 . method_hash ([229 , 40 , 93 , 204] , nullifier_hash) . expect ("method not found (this should never happen)") } # [doc = "Calls the contract's `isSpentArray` (0x9fa12d0b) function"] pub fn is_spent_array (& self , nullifier_hashes : :: std :: vec :: Vec < [u8 ; 32] >) -> ethers :: contract :: builders :: ContractCall < M , :: std :: vec :: Vec < bool > > { self . 0 . method_hash ([159 , 161 , 45 , 11] , nullifier_hashes) . expect ("method not found (this should never happen)") } # [doc = "Calls the contract's `isValidRoots` (0x616e0957) function"] pub fn is_valid_roots (& self , roots : :: std :: vec :: Vec < [u8 ; 32] >) -> ethers :: contract :: builders :: ContractCall < M , bool > { self . 0 . method_hash ([97 , 110 , 9 , 87] , roots) . expect ("method not found (this should never happen)") } # [doc = "Calls the contract's `lastBalance` (0x8f1c56bd) function"] pub fn last_balance (& self) -> ethers :: contract :: builders :: ContractCall < M , ethers :: core :: types :: U256 > { self . 0 . method_hash ([143 , 28 , 86 , 189] , ()) . expect ("method not found (this should never happen)") } # [doc = "Calls the contract's `levels` (0x4ecf518b) function"] pub fn levels (& self) -> ethers :: contract :: builders :: ContractCall < M , u32 > { self . 0 . method_hash ([78 , 207 , 81 , 139] , ()) . expect ("method not found (this should never happen)") } # [doc = "Calls the contract's `maxEdges` (0x71523c32) function"] pub fn max_edges (& self) -> ethers :: contract :: builders :: ContractCall < M , u8 > { self . 0 . method_hash ([113 , 82 , 60 , 50] , ()) . expect ("method not found (this should never happen)") } # [doc = "Calls the contract's `maximumDepositAmount` (0x78abb49b) function"] pub fn maximum_deposit_amount (& self) -> ethers :: contract :: builders :: ContractCall < M , ethers :: core :: types :: U256 > { self . 0 . method_hash ([120 , 171 , 180 , 155] , ()) . expect ("method not found (this should never happen)") } # [doc = "Calls the contract's `minimalWithdrawalAmount` (0x840b2791) function"] pub fn minimal_withdrawal_amount (& self) -> ethers :: contract :: builders :: ContractCall < M , ethers :: core :: types :: U256 > { self . 0 . method_hash ([132 , 11 , 39 , 145] , ()) . expect ("method not found (this should never happen)") } # [doc = "Calls the contract's `neighborRoots` (0x43e7119f) function"] pub fn neighbor_roots (& self , p0 : ethers :: core :: types :: U256 , p1 : u32) -> ethers :: contract :: builders :: ContractCall < M , [u8 ; 32] > { self . 0 . method_hash ([67 , 231 , 17 , 159] , (p0 , p1 ,)) . expect ("method not found (this should never happen)") } # [doc = "Calls the contract's `nextIndex` (0xfc7e9c6f) function"] pub fn next_index (& self) -> ethers :: contract :: builders :: ContractCall < M , u32 > { self . 0 . method_hash ([252 , 126 , 156 , 111] , ()) . expect ("method not found (this should never happen)") } # [doc = "Calls the contract's `nullifierHashes` (0x17cc915c) function"] pub fn nullifier_hashes (& self , p0 : [u8 ; 32]) -> ethers :: contract :: builders :: ContractCall < M , bool > { self . 0 . method_hash ([23 , 204 , 145 , 92] , p0) . expect ("method not found (this should never happen)") } # [doc = "Calls the contract's `parseChainIdFromResourceId` (0xc2230d6e) function"] pub fn parse_chain_id_from_resource_id (& self , resource_id : [u8 ; 32]) -> ethers :: contract :: builders :: ContractCall < M , u64 > { self . 0 . method_hash ([194 , 35 , 13 , 110] , resource_id) . expect ("method not found (this should never happen)") } # [doc = "Calls the contract's `register` (0xb2bc6e0f) function"] pub fn register (& self , account : Account) -> ethers :: contract :: builders :: ContractCall < M , () > { self . 0 . method_hash ([178 , 188 , 110 , 15] , (account ,)) . expect ("method not found (this should never happen)") } # [doc = "Calls the contract's `roots` (0xc2b40ae4) function"] pub fn roots (& self , p0 : ethers :: core :: types :: U256) -> ethers :: contract :: builders :: ContractCall < M , [u8 ; 32] > { self . 0 . method_hash ([194 , 180 , 10 , 228] , p0) . expect ("method not found (this should never happen)") } # [doc = "Calls the contract's `setHandler` (0x72c1ad03) function"] pub fn set_handler (& self , handler : ethers :: core :: types :: Address , nonce : u32) -> ethers :: contract :: builders :: ContractCall < M , () > { self . 0 . method_hash ([114 , 193 , 173 , 3] , (handler , nonce ,)) . expect ("method not found (this should never happen)") } # [doc = "Calls the contract's `setVerifier` (0xa0d192f5) function"] pub fn set_verifier (& self , verifier : ethers :: core :: types :: Address , nonce : u32) -> ethers :: contract :: builders :: ContractCall < M , () > { self . 0 . method_hash ([160 , 209 , 146 , 245] , (verifier , nonce ,)) . expect ("method not found (this should never happen)") } # [doc = "Calls the contract's `unpackProof` (0xf5ab0dd6) function"] pub fn unpack_proof (& self , proof : [ethers :: core :: types :: U256 ; 8usize]) -> ethers :: contract :: builders :: ContractCall < M , ([ethers :: core :: types :: U256 ; 2usize] , [[ethers :: core :: types :: U256 ; 2usize] ; 2usize] , [ethers :: core :: types :: U256 ; 2usize]) > { self . 0 . method_hash ([245 , 171 , 13 , 214] , proof) . expect ("method not found (this should never happen)") } # [doc = "Calls the contract's `updateEdge` (0xa07b7e1d) function"] pub fn update_edge (& self , root : [u8 ; 32] , leaf_index : u32 , src_resource_id : [u8 ; 32]) -> ethers :: contract :: builders :: ContractCall < M , () > { self . 0 . method_hash ([160 , 123 , 126 , 29] , (root , leaf_index , src_resource_id ,)) . expect ("method not found (this should never happen)") } # [doc = "Calls the contract's `verifier` (0x2b7ac3f3) function"] pub fn verifier (& self) -> ethers :: contract :: builders :: ContractCall < M , ethers :: core :: types :: Address > { self . 0 . method_hash ([43 , 122 , 195 , 243] , ()) . expect ("method not found (this should never happen)") } # [doc = "Calls the contract's `zeros` (0xe8295588) function"] pub fn zeros (& self , i : ethers :: core :: types :: U256) -> ethers :: contract :: builders :: ContractCall < M , [u8 ; 32] > { self . 0 . method_hash ([232 , 41 , 85 , 136] , i) . expect ("method not found (this should never happen)") } # [doc = "Gets the contract's `EdgeAddition` event"] pub fn edge_addition_filter (& self) -> ethers :: contract :: builders :: Event < M , EdgeAdditionFilter > { self . 0 . event () } # [doc = "Gets the contract's `EdgeUpdate` event"] pub fn edge_update_filter (& self) -> ethers :: contract :: builders :: Event < M , EdgeUpdateFilter > { self . 0 . event () } # [doc = "Gets the contract's `Initialized` event"] pub fn initialized_filter (& self) -> ethers :: contract :: builders :: Event < M , InitializedFilter > { self . 0 . event () } # [doc = "Gets the contract's `Insertion` event"] pub fn insertion_filter (& self) -> ethers :: contract :: builders :: Event < M , InsertionFilter > { self . 0 . event () } # [doc = "Gets the contract's `NewCommitment` event"] pub fn new_commitment_filter (& self) -> ethers :: contract :: builders :: Event < M , NewCommitmentFilter > { self . 0 . event () } # [doc = "Gets the contract's `NewNullifier` event"] pub fn new_nullifier_filter (& self) -> ethers :: contract :: builders :: Event < M , NewNullifierFilter > { self . 0 . event () } # [doc = "Gets the contract's `PublicKey` event"] pub fn public_key_filter (& self) -> ethers :: contract :: builders :: Event < M , PublicKeyFilter > { self . 0 . event () } # [doc = r" Returns an [`Event`](#ethers_contract::builders::Event) builder for all events of this contract"] pub fn events (& self) -> ethers :: contract :: builders :: Event < M , VAnchorBaseContractEvents > { self . 0 . event_with_filter (Default :: default ()) } } impl < M : ethers :: providers :: Middleware > From < ethers :: contract :: Contract < M >> for VAnchorBaseContract < M > { fn from (contract : ethers :: contract :: Contract < M >) -> Self { Self (contract) } } # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthEvent , ethers :: contract :: EthDisplay , serde :: Serialize , serde :: Deserialize)] # [ethevent (name = "EdgeAddition" , abi = "EdgeAddition(uint256,uint256,bytes32)")] pub struct EdgeAdditionFilter { pub chain_id : ethers :: core :: types :: U256 , pub latest_leaf_index : ethers :: core :: types :: U256 , pub merkle_root : [u8 ; 32] , } # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthEvent , ethers :: contract :: EthDisplay , serde :: Serialize , serde :: Deserialize)] # [ethevent (name = "EdgeUpdate" , abi = "EdgeUpdate(uint256,uint256,bytes32)")] pub struct EdgeUpdateFilter { pub chain_id : ethers :: core :: types :: U256 , pub latest_leaf_index : ethers :: core :: types :: U256 , pub merkle_root : [u8 ; 32] , } # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthEvent , ethers :: contract :: EthDisplay , serde :: Serialize , serde :: Deserialize)] # [ethevent (name = "Initialized" , abi = "Initialized(uint8)")] pub struct InitializedFilter { pub version : u8 , } # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthEvent , ethers :: contract :: EthDisplay , serde :: Serialize , serde :: Deserialize)] # [ethevent (name = "Insertion" , abi = "Insertion(bytes32,uint32,uint256)")] pub struct InsertionFilter { # [ethevent (indexed)] pub commitment : [u8 ; 32] , pub leaf_index : u32 , pub timestamp : ethers :: core :: types :: U256 , } # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthEvent , ethers :: contract :: EthDisplay , serde :: Serialize , serde :: Deserialize)] # [ethevent (name = "NewCommitment" , abi = "NewCommitment(bytes32,uint256,bytes)")] pub struct NewCommitmentFilter { pub commitment : [u8 ; 32] , pub index : ethers :: core :: types :: U256 , pub encrypted_output : ethers :: core :: types :: Bytes , } # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthEvent , ethers :: contract :: EthDisplay , serde :: Serialize , serde :: Deserialize)] # [ethevent (name = "NewNullifier" , abi = "NewNullifier(bytes32)")] pub struct NewNullifierFilter { pub nullifier : [u8 ; 32] , } # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthEvent , ethers :: contract :: EthDisplay , serde :: Serialize , serde :: Deserialize)] # [ethevent (name = "PublicKey" , abi = "PublicKey(address,bytes)")] pub struct PublicKeyFilter { # [ethevent (indexed)] pub owner : ethers :: core :: types :: Address , pub key : ethers :: core :: types :: Bytes , } # [derive (Debug , Clone , PartialEq , Eq , ethers :: contract :: EthAbiType , serde :: Serialize , serde :: Deserialize)] pub enum VAnchorBaseContractEvents { EdgeAdditionFilter (EdgeAdditionFilter) , EdgeUpdateFilter (EdgeUpdateFilter) , InitializedFilter (InitializedFilter) , InsertionFilter (InsertionFilter) , NewCommitmentFilter (NewCommitmentFilter) , NewNullifierFilter (NewNullifierFilter) , PublicKeyFilter (PublicKeyFilter) } impl ethers :: contract :: EthLogDecode for VAnchorBaseContractEvents { fn decode_log (log : & ethers :: core :: abi :: RawLog) -> Result < Self , ethers :: core :: abi :: Error > where Self : Sized , { if let Ok (decoded) = EdgeAdditionFilter :: decode_log (log) { return Ok (VAnchorBaseContractEvents :: EdgeAdditionFilter (decoded)) } if let Ok (decoded) = EdgeUpdateFilter :: decode_log (log) { return Ok (VAnchorBaseContractEvents :: EdgeUpdateFilter (decoded)) } if let Ok (decoded) = InitializedFilter :: decode_log (log) { return Ok (VAnchorBaseContractEvents :: InitializedFilter (decoded)) } if let Ok (decoded) = InsertionFilter :: decode_log (log) { return Ok (VAnchorBaseContractEvents :: InsertionFilter (decoded)) } if let Ok (decoded) = NewCommitmentFilter :: decode_log (log) { return Ok (VAnchorBaseContractEvents :: NewCommitmentFilter (decoded)) } if let Ok (decoded) = NewNullifierFilter :: decode_log (log) { return Ok (VAnchorBaseContractEvents :: NewNullifierFilter (decoded)) } if let Ok (decoded) = PublicKeyFilter :: decode_log (log) { return Ok (VAnchorBaseContractEvents :: PublicKeyFilter (decoded)) } Err (ethers :: core :: abi :: Error :: InvalidData) } } impl :: std :: fmt :: Display for VAnchorBaseContractEvents { fn fmt (& self , f : & mut :: std :: fmt :: Formatter < '_ >) -> :: std :: fmt :: Result { match self { VAnchorBaseContractEvents :: EdgeAdditionFilter (element) => element . fmt (f) , VAnchorBaseContractEvents :: EdgeUpdateFilter (element) => element . fmt (f) , VAnchorBaseContractEvents :: InitializedFilter (element) => element . fmt (f) , VAnchorBaseContractEvents :: InsertionFilter (element) => element . fmt (f) , VAnchorBaseContractEvents :: NewCommitmentFilter (element) => element . fmt (f) , VAnchorBaseContractEvents :: NewNullifierFilter (element) => element . fmt (f) , VAnchorBaseContractEvents :: PublicKeyFilter (element) => element . fmt (f) } } } # [doc = "Container type for all input parameters for the `EVM_CHAIN_ID_TYPE` function with signature `EVM_CHAIN_ID_TYPE()` and selector `[139, 126, 135, 130]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthCall , ethers :: contract :: EthDisplay , serde :: Serialize , serde :: Deserialize)] # [ethcall (name = "EVM_CHAIN_ID_TYPE" , abi = "EVM_CHAIN_ID_TYPE()")] pub struct EvmChainIdTypeCall ; # [doc = "Container type for all input parameters for the `FIELD_SIZE` function with signature `FIELD_SIZE()` and selector `[65, 74, 55, 186]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthCall , ethers :: contract :: EthDisplay , serde :: Serialize , serde :: Deserialize)] # [ethcall (name = "FIELD_SIZE" , abi = "FIELD_SIZE()")] pub struct FieldSizeCall ; # [doc = "Container type for all input parameters for the `MAX_EXT_AMOUNT` function with signature `MAX_EXT_AMOUNT()` and selector `[127, 226, 79, 254]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthCall , ethers :: contract :: EthDisplay , serde :: Serialize , serde :: Deserialize)] # [ethcall (name = "MAX_EXT_AMOUNT" , abi = "MAX_EXT_AMOUNT()")] pub struct MaxExtAmountCall ; # [doc = "Container type for all input parameters for the `MAX_FEE` function with signature `MAX_FEE()` and selector `[188, 6, 62, 26]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthCall , ethers :: contract :: EthDisplay , serde :: Serialize , serde :: Deserialize)] # [ethcall (name = "MAX_FEE" , abi = "MAX_FEE()")] pub struct MaxFeeCall ; # [doc = "Container type for all input parameters for the `ROOT_HISTORY_SIZE` function with signature `ROOT_HISTORY_SIZE()` and selector `[205, 135, 163, 180]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthCall , ethers :: contract :: EthDisplay , serde :: Serialize , serde :: Deserialize)] # [ethcall (name = "ROOT_HISTORY_SIZE" , abi = "ROOT_HISTORY_SIZE()")] pub struct RootHistorySizeCall ; # [doc = "Container type for all input parameters for the `ZERO_VALUE` function with signature `ZERO_VALUE()` and selector `[236, 115, 41, 89]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthCall , ethers :: contract :: EthDisplay , serde :: Serialize , serde :: Deserialize)] # [ethcall (name = "ZERO_VALUE" , abi = "ZERO_VALUE()")] pub struct ZeroValueCall ; # [doc = "Container type for all input parameters for the `calculatePublicAmount` function with signature `calculatePublicAmount(int256,uint256)` and selector `[37, 112, 183, 180]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthCall , ethers :: contract :: EthDisplay , serde :: Serialize , serde :: Deserialize)] # [ethcall (name = "calculatePublicAmount" , abi = "calculatePublicAmount(int256,uint256)")] pub struct CalculatePublicAmountCall { pub ext_amount : I256 , pub fee : ethers :: core :: types :: U256 , } # [doc = "Container type for all input parameters for the `commitments` function with signature `commitments(bytes32)` and selector `[131, 157, 249, 69]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthCall , ethers :: contract :: EthDisplay , serde :: Serialize , serde :: Deserialize)] # [ethcall (name = "commitments" , abi = "commitments(bytes32)")] pub struct CommitmentsCall (pub [u8 ; 32]) ; # [doc = "Container type for all input parameters for the `configureMaximumDepositLimit` function with signature `configureMaximumDepositLimit(uint256,uint32)` and selector `[140, 131, 43, 19]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthCall , ethers :: contract :: EthDisplay , serde :: Serialize , serde :: Deserialize)] # [ethcall (name = "configureMaximumDepositLimit" , abi = "configureMaximumDepositLimit(uint256,uint32)")] pub struct ConfigureMaximumDepositLimitCall { pub maximum_deposit_amount : ethers :: core :: types :: U256 , pub nonce : u32 , } # [doc = "Container type for all input parameters for the `configureMinimalWithdrawalLimit` function with signature `configureMinimalWithdrawalLimit(uint256,uint32)` and selector `[31, 127, 153, 247]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthCall , ethers :: contract :: EthDisplay , serde :: Serialize , serde :: Deserialize)] # [ethcall (name = "configureMinimalWithdrawalLimit" , abi = "configureMinimalWithdrawalLimit(uint256,uint32)")] pub struct ConfigureMinimalWithdrawalLimitCall { pub minimal_withdrawal_amount : ethers :: core :: types :: U256 , pub nonce : u32 , } # [doc = "Container type for all input parameters for the `currentNeighborRootIndex` function with signature `currentNeighborRootIndex(uint256)` and selector `[93, 45, 118, 108]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthCall , ethers :: contract :: EthDisplay , serde :: Serialize , serde :: Deserialize)] # [ethcall (name = "currentNeighborRootIndex" , abi = "currentNeighborRootIndex(uint256)")] pub struct CurrentNeighborRootIndexCall (pub ethers :: core :: types :: U256) ; # [doc = "Container type for all input parameters for the `currentRootIndex` function with signature `currentRootIndex()` and selector `[144, 238, 176, 43]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthCall , ethers :: contract :: EthDisplay , serde :: Serialize , serde :: Deserialize)] # [ethcall (name = "currentRootIndex" , abi = "currentRootIndex()")] pub struct CurrentRootIndexCall ; # [doc = "Container type for all input parameters for the `edgeExistsForChain` function with signature `edgeExistsForChain(uint256)` and selector `[250, 115, 22, 135]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthCall , ethers :: contract :: EthDisplay , serde :: Serialize , serde :: Deserialize)] # [ethcall (name = "edgeExistsForChain" , abi = "edgeExistsForChain(uint256)")] pub struct EdgeExistsForChainCall (pub ethers :: core :: types :: U256) ; # [doc = "Container type for all input parameters for the `edgeIndex` function with signature `edgeIndex(uint256)` and selector `[231, 14, 168, 124]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthCall , ethers :: contract :: EthDisplay , serde :: Serialize , serde :: Deserialize)] # [ethcall (name = "edgeIndex" , abi = "edgeIndex(uint256)")] pub struct EdgeIndexCall (pub ethers :: core :: types :: U256) ; # [doc = "Container type for all input parameters for the `edgeList` function with signature `edgeList(uint256)` and selector `[219, 201, 22, 184]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthCall , ethers :: contract :: EthDisplay , serde :: Serialize , serde :: Deserialize)] # [ethcall (name = "edgeList" , abi = "edgeList(uint256)")] pub struct EdgeListCall (pub ethers :: core :: types :: U256) ; # [doc = "Container type for all input parameters for the `filledSubtrees` function with signature `filledSubtrees(uint256)` and selector `[241, 120, 228, 124]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthCall , ethers :: contract :: EthDisplay , serde :: Serialize , serde :: Deserialize)] # [ethcall (name = "filledSubtrees" , abi = "filledSubtrees(uint256)")] pub struct FilledSubtreesCall (pub ethers :: core :: types :: U256) ; # [doc = "Container type for all input parameters for the `getChainId` function with signature `getChainId()` and selector `[52, 8, 228, 112]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthCall , ethers :: contract :: EthDisplay , serde :: Serialize , serde :: Deserialize)] # [ethcall (name = "getChainId" , abi = "getChainId()")] pub struct GetChainIdCall ; # [doc = "Container type for all input parameters for the `getChainIdType` function with signature `getChainIdType()` and selector `[76, 131, 12, 189]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthCall , ethers :: contract :: EthDisplay , serde :: Serialize , serde :: Deserialize)] # [ethcall (name = "getChainIdType" , abi = "getChainIdType()")] pub struct GetChainIdTypeCall ; # [doc = "Container type for all input parameters for the `getLastRoot` function with signature `getLastRoot()` and selector `[186, 112, 247, 87]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthCall , ethers :: contract :: EthDisplay , serde :: Serialize , serde :: Deserialize)] # [ethcall (name = "getLastRoot" , abi = "getLastRoot()")] pub struct GetLastRootCall ; # [doc = "Container type for all input parameters for the `getLatestNeighborEdges` function with signature `getLatestNeighborEdges()` and selector `[140, 13, 52, 216]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthCall , ethers :: contract :: EthDisplay , serde :: Serialize , serde :: Deserialize)] # [ethcall (name = "getLatestNeighborEdges" , abi = "getLatestNeighborEdges()")] pub struct GetLatestNeighborEdgesCall ; # [doc = "Container type for all input parameters for the `getLatestNeighborRoots` function with signature `getLatestNeighborRoots()` and selector `[30, 98, 118, 23]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthCall , ethers :: contract :: EthDisplay , serde :: Serialize , serde :: Deserialize)] # [ethcall (name = "getLatestNeighborRoots" , abi = "getLatestNeighborRoots()")] pub struct GetLatestNeighborRootsCall ; # [doc = "Container type for all input parameters for the `getProposalNonce` function with signature `getProposalNonce()` and selector `[11, 39, 251, 154]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthCall , ethers :: contract :: EthDisplay , serde :: Serialize , serde :: Deserialize)] # [ethcall (name = "getProposalNonce" , abi = "getProposalNonce()")] pub struct GetProposalNonceCall ; # [doc = "Container type for all input parameters for the `handler` function with signature `handler()` and selector `[200, 9, 22, 212]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthCall , ethers :: contract :: EthDisplay , serde :: Serialize , serde :: Deserialize)] # [ethcall (name = "handler" , abi = "handler()")] pub struct HandlerCall ; # [doc = "Container type for all input parameters for the `hasEdge` function with signature `hasEdge(uint256)` and selector `[146, 21, 99, 17]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthCall , ethers :: contract :: EthDisplay , serde :: Serialize , serde :: Deserialize)] # [ethcall (name = "hasEdge" , abi = "hasEdge(uint256)")] pub struct HasEdgeCall { pub chain_id : ethers :: core :: types :: U256 , } # [doc = "Container type for all input parameters for the `hashLeftRight` function with signature `hashLeftRight(address,bytes32,bytes32)` and selector `[142, 163, 9, 158]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthCall , ethers :: contract :: EthDisplay , serde :: Serialize , serde :: Deserialize)] # [ethcall (name = "hashLeftRight" , abi = "hashLeftRight(address,bytes32,bytes32)")] pub struct HashLeftRightCall { pub hasher : ethers :: core :: types :: Address , pub left : [u8 ; 32] , pub right : [u8 ; 32] , } # [doc = "Container type for all input parameters for the `hasher` function with signature `hasher()` and selector `[237, 51, 99, 159]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthCall , ethers :: contract :: EthDisplay , serde :: Serialize , serde :: Deserialize)] # [ethcall (name = "hasher" , abi = "hasher()")] pub struct HasherCall ; # [doc = "Container type for all input parameters for the `initialize` function with signature `initialize(uint256,uint256)` and selector `[228, 163, 1, 22]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthCall , ethers :: contract :: EthDisplay , serde :: Serialize , serde :: Deserialize)] # [ethcall (name = "initialize" , abi = "initialize(uint256,uint256)")] pub struct InitializeCall { pub minimal_withdrawal_amount : ethers :: core :: types :: U256 , pub maximum_deposit_amount : ethers :: core :: types :: U256 , } # [doc = "Container type for all input parameters for the `isKnownNeighborRoot` function with signature `isKnownNeighborRoot(uint256,bytes32)` and selector `[17, 228, 220, 185]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthCall , ethers :: contract :: EthDisplay , serde :: Serialize , serde :: Deserialize)] # [ethcall (name = "isKnownNeighborRoot" , abi = "isKnownNeighborRoot(uint256,bytes32)")] pub struct IsKnownNeighborRootCall { pub neighbor_chain_id : ethers :: core :: types :: U256 , pub root : [u8 ; 32] , } # [doc = "Container type for all input parameters for the `isKnownRoot` function with signature `isKnownRoot(bytes32)` and selector `[109, 152, 51, 227]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthCall , ethers :: contract :: EthDisplay , serde :: Serialize , serde :: Deserialize)] # [ethcall (name = "isKnownRoot" , abi = "isKnownRoot(bytes32)")] pub struct IsKnownRootCall { pub root : [u8 ; 32] , } # [doc = "Container type for all input parameters for the `isSpent` function with signature `isSpent(bytes32)` and selector `[229, 40, 93, 204]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthCall , ethers :: contract :: EthDisplay , serde :: Serialize , serde :: Deserialize)] # [ethcall (name = "isSpent" , abi = "isSpent(bytes32)")] pub struct IsSpentCall { pub nullifier_hash : [u8 ; 32] , } # [doc = "Container type for all input parameters for the `isSpentArray` function with signature `isSpentArray(bytes32[])` and selector `[159, 161, 45, 11]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthCall , ethers :: contract :: EthDisplay , serde :: Serialize , serde :: Deserialize)] # [ethcall (name = "isSpentArray" , abi = "isSpentArray(bytes32[])")] pub struct IsSpentArrayCall { pub nullifier_hashes : :: std :: vec :: Vec < [u8 ; 32] > , } # [doc = "Container type for all input parameters for the `isValidRoots` function with signature `isValidRoots(bytes32[])` and selector `[97, 110, 9, 87]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthCall , ethers :: contract :: EthDisplay , serde :: Serialize , serde :: Deserialize)] # [ethcall (name = "isValidRoots" , abi = "isValidRoots(bytes32[])")] pub struct IsValidRootsCall { pub roots : :: std :: vec :: Vec < [u8 ; 32] > , } # [doc = "Container type for all input parameters for the `lastBalance` function with signature `lastBalance()` and selector `[143, 28, 86, 189]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthCall , ethers :: contract :: EthDisplay , serde :: Serialize , serde :: Deserialize)] # [ethcall (name = "lastBalance" , abi = "lastBalance()")] pub struct LastBalanceCall ; # [doc = "Container type for all input parameters for the `levels` function with signature `levels()` and selector `[78, 207, 81, 139]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthCall , ethers :: contract :: EthDisplay , serde :: Serialize , serde :: Deserialize)] # [ethcall (name = "levels" , abi = "levels()")] pub struct LevelsCall ; # [doc = "Container type for all input parameters for the `maxEdges` function with signature `maxEdges()` and selector `[113, 82, 60, 50]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthCall , ethers :: contract :: EthDisplay , serde :: Serialize , serde :: Deserialize)] # [ethcall (name = "maxEdges" , abi = "maxEdges()")] pub struct MaxEdgesCall ; # [doc = "Container type for all input parameters for the `maximumDepositAmount` function with signature `maximumDepositAmount()` and selector `[120, 171, 180, 155]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthCall , ethers :: contract :: EthDisplay , serde :: Serialize , serde :: Deserialize)] # [ethcall (name = "maximumDepositAmount" , abi = "maximumDepositAmount()")] pub struct MaximumDepositAmountCall ; # [doc = "Container type for all input parameters for the `minimalWithdrawalAmount` function with signature `minimalWithdrawalAmount()` and selector `[132, 11, 39, 145]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthCall , ethers :: contract :: EthDisplay , serde :: Serialize , serde :: Deserialize)] # [ethcall (name = "minimalWithdrawalAmount" , abi = "minimalWithdrawalAmount()")] pub struct MinimalWithdrawalAmountCall ; # [doc = "Container type for all input parameters for the `neighborRoots` function with signature `neighborRoots(uint256,uint32)` and selector `[67, 231, 17, 159]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthCall , ethers :: contract :: EthDisplay , serde :: Serialize , serde :: Deserialize)] # [ethcall (name = "neighborRoots" , abi = "neighborRoots(uint256,uint32)")] pub struct NeighborRootsCall (pub ethers :: core :: types :: U256 , pub u32) ; # [doc = "Container type for all input parameters for the `nextIndex` function with signature `nextIndex()` and selector `[252, 126, 156, 111]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthCall , ethers :: contract :: EthDisplay , serde :: Serialize , serde :: Deserialize)] # [ethcall (name = "nextIndex" , abi = "nextIndex()")] pub struct NextIndexCall ; # [doc = "Container type for all input parameters for the `nullifierHashes` function with signature `nullifierHashes(bytes32)` and selector `[23, 204, 145, 92]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthCall , ethers :: contract :: EthDisplay , serde :: Serialize , serde :: Deserialize)] # [ethcall (name = "nullifierHashes" , abi = "nullifierHashes(bytes32)")] pub struct NullifierHashesCall (pub [u8 ; 32]) ; # [doc = "Container type for all input parameters for the `parseChainIdFromResourceId` function with signature `parseChainIdFromResourceId(bytes32)` and selector `[194, 35, 13, 110]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthCall , ethers :: contract :: EthDisplay , serde :: Serialize , serde :: Deserialize)] # [ethcall (name = "parseChainIdFromResourceId" , abi = "parseChainIdFromResourceId(bytes32)")] pub struct ParseChainIdFromResourceIdCall { pub resource_id : [u8 ; 32] , } # [doc = "Container type for all input parameters for the `register` function with signature `register((address,bytes))` and selector `[178, 188, 110, 15]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthCall , ethers :: contract :: EthDisplay , serde :: Serialize , serde :: Deserialize)] # [ethcall (name = "register" , abi = "register((address,bytes))")] pub struct RegisterCall { pub account : Account , } # [doc = "Container type for all input parameters for the `roots` function with signature `roots(uint256)` and selector `[194, 180, 10, 228]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthCall , ethers :: contract :: EthDisplay , serde :: Serialize , serde :: Deserialize)] # [ethcall (name = "roots" , abi = "roots(uint256)")] pub struct RootsCall (pub ethers :: core :: types :: U256) ; # [doc = "Container type for all input parameters for the `setHandler` function with signature `setHandler(address,uint32)` and selector `[114, 193, 173, 3]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthCall , ethers :: contract :: EthDisplay , serde :: Serialize , serde :: Deserialize)] # [ethcall (name = "setHandler" , abi = "setHandler(address,uint32)")] pub struct SetHandlerCall { pub handler : ethers :: core :: types :: Address , pub nonce : u32 , } # [doc = "Container type for all input parameters for the `setVerifier` function with signature `setVerifier(address,uint32)` and selector `[160, 209, 146, 245]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthCall , ethers :: contract :: EthDisplay , serde :: Serialize , serde :: Deserialize)] # [ethcall (name = "setVerifier" , abi = "setVerifier(address,uint32)")] pub struct SetVerifierCall { pub verifier : ethers :: core :: types :: Address , pub nonce : u32 , } # [doc = "Container type for all input parameters for the `unpackProof` function with signature `unpackProof(uint256[8])` and selector `[245, 171, 13, 214]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthCall , ethers :: contract :: EthDisplay , serde :: Serialize , serde :: Deserialize)] # [ethcall (name = "unpackProof" , abi = "unpackProof(uint256[8])")] pub struct UnpackProofCall { pub proof : [ethers :: core :: types :: U256 ; 8usize] , } # [doc = "Container type for all input parameters for the `updateEdge` function with signature `updateEdge(bytes32,uint32,bytes32)` and selector `[160, 123, 126, 29]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthCall , ethers :: contract :: EthDisplay , serde :: Serialize , serde :: Deserialize)] # [ethcall (name = "updateEdge" , abi = "updateEdge(bytes32,uint32,bytes32)")] pub struct UpdateEdgeCall { pub root : [u8 ; 32] , pub leaf_index : u32 , pub src_resource_id : [u8 ; 32] , } # [doc = "Container type for all input parameters for the `verifier` function with signature `verifier()` and selector `[43, 122, 195, 243]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthCall , ethers :: contract :: EthDisplay , serde :: Serialize , serde :: Deserialize)] # [ethcall (name = "verifier" , abi = "verifier()")] pub struct VerifierCall ; # [doc = "Container type for all input parameters for the `zeros` function with signature `zeros(uint256)` and selector `[232, 41, 85, 136]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthCall , ethers :: contract :: EthDisplay , serde :: Serialize , serde :: Deserialize)] # [ethcall (name = "zeros" , abi = "zeros(uint256)")] pub struct ZerosCall { pub i : ethers :: core :: types :: U256 , } # [derive (Debug , Clone , PartialEq , Eq , ethers :: contract :: EthAbiType , serde :: Serialize , serde :: Deserialize)] pub enum VAnchorBaseContractCalls { EvmChainIdType (EvmChainIdTypeCall) , FieldSize (FieldSizeCall) , MaxExtAmount (MaxExtAmountCall) , MaxFee (MaxFeeCall) , RootHistorySize (RootHistorySizeCall) , ZeroValue (ZeroValueCall) , CalculatePublicAmount (CalculatePublicAmountCall) , Commitments (CommitmentsCall) , ConfigureMaximumDepositLimit (ConfigureMaximumDepositLimitCall) , ConfigureMinimalWithdrawalLimit (ConfigureMinimalWithdrawalLimitCall) , CurrentNeighborRootIndex (CurrentNeighborRootIndexCall) , CurrentRootIndex (CurrentRootIndexCall) , EdgeExistsForChain (EdgeExistsForChainCall) , EdgeIndex (EdgeIndexCall) , EdgeList (EdgeListCall) , FilledSubtrees (FilledSubtreesCall) , GetChainId (GetChainIdCall) , GetChainIdType (GetChainIdTypeCall) , GetLastRoot (GetLastRootCall) , GetLatestNeighborEdges (GetLatestNeighborEdgesCall) , GetLatestNeighborRoots (GetLatestNeighborRootsCall) , GetProposalNonce (GetProposalNonceCall) , Handler (HandlerCall) , HasEdge (HasEdgeCall) , HashLeftRight (HashLeftRightCall) , Hasher (HasherCall) , Initialize (InitializeCall) , IsKnownNeighborRoot (IsKnownNeighborRootCall) , IsKnownRoot (IsKnownRootCall) , IsSpent (IsSpentCall) , IsSpentArray (IsSpentArrayCall) , IsValidRoots (IsValidRootsCall) , LastBalance (LastBalanceCall) , Levels (LevelsCall) , MaxEdges (MaxEdgesCall) , MaximumDepositAmount (MaximumDepositAmountCall) , MinimalWithdrawalAmount (MinimalWithdrawalAmountCall) , NeighborRoots (NeighborRootsCall) , NextIndex (NextIndexCall) , NullifierHashes (NullifierHashesCall) , ParseChainIdFromResourceId (ParseChainIdFromResourceIdCall) , Register (RegisterCall) , Roots (RootsCall) , SetHandler (SetHandlerCall) , SetVerifier (SetVerifierCall) , UnpackProof (UnpackProofCall) , UpdateEdge (UpdateEdgeCall) , Verifier (VerifierCall) , Zeros (ZerosCall) } impl ethers :: core :: abi :: AbiDecode for VAnchorBaseContractCalls { fn decode (data : impl AsRef < [u8] >) -> Result < Self , ethers :: core :: abi :: AbiError > { if let Ok (decoded) = < EvmChainIdTypeCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (VAnchorBaseContractCalls :: EvmChainIdType (decoded)) } if let Ok (decoded) = < FieldSizeCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (VAnchorBaseContractCalls :: FieldSize (decoded)) } if let Ok (decoded) = < MaxExtAmountCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (VAnchorBaseContractCalls :: MaxExtAmount (decoded)) } if let Ok (decoded) = < MaxFeeCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (VAnchorBaseContractCalls :: MaxFee (decoded)) } if let Ok (decoded) = < RootHistorySizeCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (VAnchorBaseContractCalls :: RootHistorySize (decoded)) } if let Ok (decoded) = < ZeroValueCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (VAnchorBaseContractCalls :: ZeroValue (decoded)) } if let Ok (decoded) = < CalculatePublicAmountCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (VAnchorBaseContractCalls :: CalculatePublicAmount (decoded)) } if let Ok (decoded) = < CommitmentsCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (VAnchorBaseContractCalls :: Commitments (decoded)) } if let Ok (decoded) = < ConfigureMaximumDepositLimitCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (VAnchorBaseContractCalls :: ConfigureMaximumDepositLimit (decoded)) } if let Ok (decoded) = < ConfigureMinimalWithdrawalLimitCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (VAnchorBaseContractCalls :: ConfigureMinimalWithdrawalLimit (decoded)) } if let Ok (decoded) = < CurrentNeighborRootIndexCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (VAnchorBaseContractCalls :: CurrentNeighborRootIndex (decoded)) } if let Ok (decoded) = < CurrentRootIndexCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (VAnchorBaseContractCalls :: CurrentRootIndex (decoded)) } if let Ok (decoded) = < EdgeExistsForChainCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (VAnchorBaseContractCalls :: EdgeExistsForChain (decoded)) } if let Ok (decoded) = < EdgeIndexCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (VAnchorBaseContractCalls :: EdgeIndex (decoded)) } if let Ok (decoded) = < EdgeListCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (VAnchorBaseContractCalls :: EdgeList (decoded)) } if let Ok (decoded) = < FilledSubtreesCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (VAnchorBaseContractCalls :: FilledSubtrees (decoded)) } if let Ok (decoded) = < GetChainIdCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (VAnchorBaseContractCalls :: GetChainId (decoded)) } if let Ok (decoded) = < GetChainIdTypeCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (VAnchorBaseContractCalls :: GetChainIdType (decoded)) } if let Ok (decoded) = < GetLastRootCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (VAnchorBaseContractCalls :: GetLastRoot (decoded)) } if let Ok (decoded) = < GetLatestNeighborEdgesCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (VAnchorBaseContractCalls :: GetLatestNeighborEdges (decoded)) } if let Ok (decoded) = < GetLatestNeighborRootsCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (VAnchorBaseContractCalls :: GetLatestNeighborRoots (decoded)) } if let Ok (decoded) = < GetProposalNonceCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (VAnchorBaseContractCalls :: GetProposalNonce (decoded)) } if let Ok (decoded) = < HandlerCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (VAnchorBaseContractCalls :: Handler (decoded)) } if let Ok (decoded) = < HasEdgeCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (VAnchorBaseContractCalls :: HasEdge (decoded)) } if let Ok (decoded) = < HashLeftRightCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (VAnchorBaseContractCalls :: HashLeftRight (decoded)) } if let Ok (decoded) = < HasherCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (VAnchorBaseContractCalls :: Hasher (decoded)) } if let Ok (decoded) = < InitializeCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (VAnchorBaseContractCalls :: Initialize (decoded)) } if let Ok (decoded) = < IsKnownNeighborRootCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (VAnchorBaseContractCalls :: IsKnownNeighborRoot (decoded)) } if let Ok (decoded) = < IsKnownRootCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (VAnchorBaseContractCalls :: IsKnownRoot (decoded)) } if let Ok (decoded) = < IsSpentCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (VAnchorBaseContractCalls :: IsSpent (decoded)) } if let Ok (decoded) = < IsSpentArrayCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (VAnchorBaseContractCalls :: IsSpentArray (decoded)) } if let Ok (decoded) = < IsValidRootsCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (VAnchorBaseContractCalls :: IsValidRoots (decoded)) } if let Ok (decoded) = < LastBalanceCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (VAnchorBaseContractCalls :: LastBalance (decoded)) } if let Ok (decoded) = < LevelsCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (VAnchorBaseContractCalls :: Levels (decoded)) } if let Ok (decoded) = < MaxEdgesCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (VAnchorBaseContractCalls :: MaxEdges (decoded)) } if let Ok (decoded) = < MaximumDepositAmountCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (VAnchorBaseContractCalls :: MaximumDepositAmount (decoded)) } if let Ok (decoded) = < MinimalWithdrawalAmountCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (VAnchorBaseContractCalls :: MinimalWithdrawalAmount (decoded)) } if let Ok (decoded) = < NeighborRootsCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (VAnchorBaseContractCalls :: NeighborRoots (decoded)) } if let Ok (decoded) = < NextIndexCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (VAnchorBaseContractCalls :: NextIndex (decoded)) } if let Ok (decoded) = < NullifierHashesCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (VAnchorBaseContractCalls :: NullifierHashes (decoded)) } if let Ok (decoded) = < ParseChainIdFromResourceIdCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (VAnchorBaseContractCalls :: ParseChainIdFromResourceId (decoded)) } if let Ok (decoded) = < RegisterCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (VAnchorBaseContractCalls :: Register (decoded)) } if let Ok (decoded) = < RootsCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (VAnchorBaseContractCalls :: Roots (decoded)) } if let Ok (decoded) = < SetHandlerCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (VAnchorBaseContractCalls :: SetHandler (decoded)) } if let Ok (decoded) = < SetVerifierCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (VAnchorBaseContractCalls :: SetVerifier (decoded)) } if let Ok (decoded) = < UnpackProofCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (VAnchorBaseContractCalls :: UnpackProof (decoded)) } if let Ok (decoded) = < UpdateEdgeCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (VAnchorBaseContractCalls :: UpdateEdge (decoded)) } if let Ok (decoded) = < VerifierCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (VAnchorBaseContractCalls :: Verifier (decoded)) } if let Ok (decoded) = < ZerosCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (VAnchorBaseContractCalls :: Zeros (decoded)) } Err (ethers :: core :: abi :: Error :: InvalidData . into ()) } } impl ethers :: core :: abi :: AbiEncode for VAnchorBaseContractCalls { fn encode (self) -> Vec < u8 > { match self { VAnchorBaseContractCalls :: EvmChainIdType (element) => element . encode () , VAnchorBaseContractCalls :: FieldSize (element) => element . encode () , VAnchorBaseContractCalls :: MaxExtAmount (element) => element . encode () , VAnchorBaseContractCalls :: MaxFee (element) => element . encode () , VAnchorBaseContractCalls :: RootHistorySize (element) => element . encode () , VAnchorBaseContractCalls :: ZeroValue (element) => element . encode () , VAnchorBaseContractCalls :: CalculatePublicAmount (element) => element . encode () , VAnchorBaseContractCalls :: Commitments (element) => element . encode () , VAnchorBaseContractCalls :: ConfigureMaximumDepositLimit (element) => element . encode () , VAnchorBaseContractCalls :: ConfigureMinimalWithdrawalLimit (element) => element . encode () , VAnchorBaseContractCalls :: CurrentNeighborRootIndex (element) => element . encode () , VAnchorBaseContractCalls :: CurrentRootIndex (element) => element . encode () , VAnchorBaseContractCalls :: EdgeExistsForChain (element) => element . encode () , VAnchorBaseContractCalls :: EdgeIndex (element) => element . encode () , VAnchorBaseContractCalls :: EdgeList (element) => element . encode () , VAnchorBaseContractCalls :: FilledSubtrees (element) => element . encode () , VAnchorBaseContractCalls :: GetChainId (element) => element . encode () , VAnchorBaseContractCalls :: GetChainIdType (element) => element . encode () , VAnchorBaseContractCalls :: GetLastRoot (element) => element . encode () , VAnchorBaseContractCalls :: GetLatestNeighborEdges (element) => element . encode () , VAnchorBaseContractCalls :: GetLatestNeighborRoots (element) => element . encode () , VAnchorBaseContractCalls :: GetProposalNonce (element) => element . encode () , VAnchorBaseContractCalls :: Handler (element) => element . encode () , VAnchorBaseContractCalls :: HasEdge (element) => element . encode () , VAnchorBaseContractCalls :: HashLeftRight (element) => element . encode () , VAnchorBaseContractCalls :: Hasher (element) => element . encode () , VAnchorBaseContractCalls :: Initialize (element) => element . encode () , VAnchorBaseContractCalls :: IsKnownNeighborRoot (element) => element . encode () , VAnchorBaseContractCalls :: IsKnownRoot (element) => element . encode () , VAnchorBaseContractCalls :: IsSpent (element) => element . encode () , VAnchorBaseContractCalls :: IsSpentArray (element) => element . encode () , VAnchorBaseContractCalls :: IsValidRoots (element) => element . encode () , VAnchorBaseContractCalls :: LastBalance (element) => element . encode () , VAnchorBaseContractCalls :: Levels (element) => element . encode () , VAnchorBaseContractCalls :: MaxEdges (element) => element . encode () , VAnchorBaseContractCalls :: MaximumDepositAmount (element) => element . encode () , VAnchorBaseContractCalls :: MinimalWithdrawalAmount (element) => element . encode () , VAnchorBaseContractCalls :: NeighborRoots (element) => element . encode () , VAnchorBaseContractCalls :: NextIndex (element) => element . encode () , VAnchorBaseContractCalls :: NullifierHashes (element) => element . encode () , VAnchorBaseContractCalls :: ParseChainIdFromResourceId (element) => element . encode () , VAnchorBaseContractCalls :: Register (element) => element . encode () , VAnchorBaseContractCalls :: Roots (element) => element . encode () , VAnchorBaseContractCalls :: SetHandler (element) => element . encode () , VAnchorBaseContractCalls :: SetVerifier (element) => element . encode () , VAnchorBaseContractCalls :: UnpackProof (element) => element . encode () , VAnchorBaseContractCalls :: UpdateEdge (element) => element . encode () , VAnchorBaseContractCalls :: Verifier (element) => element . encode () , VAnchorBaseContractCalls :: Zeros (element) => element . encode () } } } impl :: std :: fmt :: Display for VAnchorBaseContractCalls { fn fmt (& self , f : & mut :: std :: fmt :: Formatter < '_ >) -> :: std :: fmt :: Result { match self { VAnchorBaseContractCalls :: EvmChainIdType (element) => element . fmt (f) , VAnchorBaseContractCalls :: FieldSize (element) => element . fmt (f) , VAnchorBaseContractCalls :: MaxExtAmount (element) => element . fmt (f) , VAnchorBaseContractCalls :: MaxFee (element) => element . fmt (f) , VAnchorBaseContractCalls :: RootHistorySize (element) => element . fmt (f) , VAnchorBaseContractCalls :: ZeroValue (element) => element . fmt (f) , VAnchorBaseContractCalls :: CalculatePublicAmount (element) => element . fmt (f) , VAnchorBaseContractCalls :: Commitments (element) => element . fmt (f) , VAnchorBaseContractCalls :: ConfigureMaximumDepositLimit (element) => element . fmt (f) , VAnchorBaseContractCalls :: ConfigureMinimalWithdrawalLimit (element) => element . fmt (f) , VAnchorBaseContractCalls :: CurrentNeighborRootIndex (element) => element . fmt (f) , VAnchorBaseContractCalls :: CurrentRootIndex (element) => element . fmt (f) , VAnchorBaseContractCalls :: EdgeExistsForChain (element) => element . fmt (f) , VAnchorBaseContractCalls :: EdgeIndex (element) => element . fmt (f) , VAnchorBaseContractCalls :: EdgeList (element) => element . fmt (f) , VAnchorBaseContractCalls :: FilledSubtrees (element) => element . fmt (f) , VAnchorBaseContractCalls :: GetChainId (element) => element . fmt (f) , VAnchorBaseContractCalls :: GetChainIdType (element) => element . fmt (f) , VAnchorBaseContractCalls :: GetLastRoot (element) => element . fmt (f) , VAnchorBaseContractCalls :: GetLatestNeighborEdges (element) => element . fmt (f) , VAnchorBaseContractCalls :: GetLatestNeighborRoots (element) => element . fmt (f) , VAnchorBaseContractCalls :: GetProposalNonce (element) => element . fmt (f) , VAnchorBaseContractCalls :: Handler (element) => element . fmt (f) , VAnchorBaseContractCalls :: HasEdge (element) => element . fmt (f) , VAnchorBaseContractCalls :: HashLeftRight (element) => element . fmt (f) , VAnchorBaseContractCalls :: Hasher (element) => element . fmt (f) , VAnchorBaseContractCalls :: Initialize (element) => element . fmt (f) , VAnchorBaseContractCalls :: IsKnownNeighborRoot (element) => element . fmt (f) , VAnchorBaseContractCalls :: IsKnownRoot (element) => element . fmt (f) , VAnchorBaseContractCalls :: IsSpent (element) => element . fmt (f) , VAnchorBaseContractCalls :: IsSpentArray (element) => element . fmt (f) , VAnchorBaseContractCalls :: IsValidRoots (element) => element . fmt (f) , VAnchorBaseContractCalls :: LastBalance (element) => element . fmt (f) , VAnchorBaseContractCalls :: Levels (element) => element . fmt (f) , VAnchorBaseContractCalls :: MaxEdges (element) => element . fmt (f) , VAnchorBaseContractCalls :: MaximumDepositAmount (element) => element . fmt (f) , VAnchorBaseContractCalls :: MinimalWithdrawalAmount (element) => element . fmt (f) , VAnchorBaseContractCalls :: NeighborRoots (element) => element . fmt (f) , VAnchorBaseContractCalls :: NextIndex (element) => element . fmt (f) , VAnchorBaseContractCalls :: NullifierHashes (element) => element . fmt (f) , VAnchorBaseContractCalls :: ParseChainIdFromResourceId (element) => element . fmt (f) , VAnchorBaseContractCalls :: Register (element) => element . fmt (f) , VAnchorBaseContractCalls :: Roots (element) => element . fmt (f) , VAnchorBaseContractCalls :: SetHandler (element) => element . fmt (f) , VAnchorBaseContractCalls :: SetVerifier (element) => element . fmt (f) , VAnchorBaseContractCalls :: UnpackProof (element) => element . fmt (f) , VAnchorBaseContractCalls :: UpdateEdge (element) => element . fmt (f) , VAnchorBaseContractCalls :: Verifier (element) => element . fmt (f) , VAnchorBaseContractCalls :: Zeros (element) => element . fmt (f) } } } impl :: std :: convert :: From < EvmChainIdTypeCall > for VAnchorBaseContractCalls { fn from (var : EvmChainIdTypeCall) -> Self { VAnchorBaseContractCalls :: EvmChainIdType (var) } } impl :: std :: convert :: From < FieldSizeCall > for VAnchorBaseContractCalls { fn from (var : FieldSizeCall) -> Self { VAnchorBaseContractCalls :: FieldSize (var) } } impl :: std :: convert :: From < MaxExtAmountCall > for VAnchorBaseContractCalls { fn from (var : MaxExtAmountCall) -> Self { VAnchorBaseContractCalls :: MaxExtAmount (var) } } impl :: std :: convert :: From < MaxFeeCall > for VAnchorBaseContractCalls { fn from (var : MaxFeeCall) -> Self { VAnchorBaseContractCalls :: MaxFee (var) } } impl :: std :: convert :: From < RootHistorySizeCall > for VAnchorBaseContractCalls { fn from (var : RootHistorySizeCall) -> Self { VAnchorBaseContractCalls :: RootHistorySize (var) } } impl :: std :: convert :: From < ZeroValueCall > for VAnchorBaseContractCalls { fn from (var : ZeroValueCall) -> Self { VAnchorBaseContractCalls :: ZeroValue (var) } } impl :: std :: convert :: From < CalculatePublicAmountCall > for VAnchorBaseContractCalls { fn from (var : CalculatePublicAmountCall) -> Self { VAnchorBaseContractCalls :: CalculatePublicAmount (var) } } impl :: std :: convert :: From < CommitmentsCall > for VAnchorBaseContractCalls { fn from (var : CommitmentsCall) -> Self { VAnchorBaseContractCalls :: Commitments (var) } } impl :: std :: convert :: From < ConfigureMaximumDepositLimitCall > for VAnchorBaseContractCalls { fn from (var : ConfigureMaximumDepositLimitCall) -> Self { VAnchorBaseContractCalls :: ConfigureMaximumDepositLimit (var) } } impl :: std :: convert :: From < ConfigureMinimalWithdrawalLimitCall > for VAnchorBaseContractCalls { fn from (var : ConfigureMinimalWithdrawalLimitCall) -> Self { VAnchorBaseContractCalls :: ConfigureMinimalWithdrawalLimit (var) } } impl :: std :: convert :: From < CurrentNeighborRootIndexCall > for VAnchorBaseContractCalls { fn from (var : CurrentNeighborRootIndexCall) -> Self { VAnchorBaseContractCalls :: CurrentNeighborRootIndex (var) } } impl :: std :: convert :: From < CurrentRootIndexCall > for VAnchorBaseContractCalls { fn from (var : CurrentRootIndexCall) -> Self { VAnchorBaseContractCalls :: CurrentRootIndex (var) } } impl :: std :: convert :: From < EdgeExistsForChainCall > for VAnchorBaseContractCalls { fn from (var : EdgeExistsForChainCall) -> Self { VAnchorBaseContractCalls :: EdgeExistsForChain (var) } } impl :: std :: convert :: From < EdgeIndexCall > for VAnchorBaseContractCalls { fn from (var : EdgeIndexCall) -> Self { VAnchorBaseContractCalls :: EdgeIndex (var) } } impl :: std :: convert :: From < EdgeListCall > for VAnchorBaseContractCalls { fn from (var : EdgeListCall) -> Self { VAnchorBaseContractCalls :: EdgeList (var) } } impl :: std :: convert :: From < FilledSubtreesCall > for VAnchorBaseContractCalls { fn from (var : FilledSubtreesCall) -> Self { VAnchorBaseContractCalls :: FilledSubtrees (var) } } impl :: std :: convert :: From < GetChainIdCall > for VAnchorBaseContractCalls { fn from (var : GetChainIdCall) -> Self { VAnchorBaseContractCalls :: GetChainId (var) } } impl :: std :: convert :: From < GetChainIdTypeCall > for VAnchorBaseContractCalls { fn from (var : GetChainIdTypeCall) -> Self { VAnchorBaseContractCalls :: GetChainIdType (var) } } impl :: std :: convert :: From < GetLastRootCall > for VAnchorBaseContractCalls { fn from (var : GetLastRootCall) -> Self { VAnchorBaseContractCalls :: GetLastRoot (var) } } impl :: std :: convert :: From < GetLatestNeighborEdgesCall > for VAnchorBaseContractCalls { fn from (var : GetLatestNeighborEdgesCall) -> Self { VAnchorBaseContractCalls :: GetLatestNeighborEdges (var) } } impl :: std :: convert :: From < GetLatestNeighborRootsCall > for VAnchorBaseContractCalls { fn from (var : GetLatestNeighborRootsCall) -> Self { VAnchorBaseContractCalls :: GetLatestNeighborRoots (var) } } impl :: std :: convert :: From < GetProposalNonceCall > for VAnchorBaseContractCalls { fn from (var : GetProposalNonceCall) -> Self { VAnchorBaseContractCalls :: GetProposalNonce (var) } } impl :: std :: convert :: From < HandlerCall > for VAnchorBaseContractCalls { fn from (var : HandlerCall) -> Self { VAnchorBaseContractCalls :: Handler (var) } } impl :: std :: convert :: From < HasEdgeCall > for VAnchorBaseContractCalls { fn from (var : HasEdgeCall) -> Self { VAnchorBaseContractCalls :: HasEdge (var) } } impl :: std :: convert :: From < HashLeftRightCall > for VAnchorBaseContractCalls { fn from (var : HashLeftRightCall) -> Self { VAnchorBaseContractCalls :: HashLeftRight (var) } } impl :: std :: convert :: From < HasherCall > for VAnchorBaseContractCalls { fn from (var : HasherCall) -> Self { VAnchorBaseContractCalls :: Hasher (var) } } impl :: std :: convert :: From < InitializeCall > for VAnchorBaseContractCalls { fn from (var : InitializeCall) -> Self { VAnchorBaseContractCalls :: Initialize (var) } } impl :: std :: convert :: From < IsKnownNeighborRootCall > for VAnchorBaseContractCalls { fn from (var : IsKnownNeighborRootCall) -> Self { VAnchorBaseContractCalls :: IsKnownNeighborRoot (var) } } impl :: std :: convert :: From < IsKnownRootCall > for VAnchorBaseContractCalls { fn from (var : IsKnownRootCall) -> Self { VAnchorBaseContractCalls :: IsKnownRoot (var) } } impl :: std :: convert :: From < IsSpentCall > for VAnchorBaseContractCalls { fn from (var : IsSpentCall) -> Self { VAnchorBaseContractCalls :: IsSpent (var) } } impl :: std :: convert :: From < IsSpentArrayCall > for VAnchorBaseContractCalls { fn from (var : IsSpentArrayCall) -> Self { VAnchorBaseContractCalls :: IsSpentArray (var) } } impl :: std :: convert :: From < IsValidRootsCall > for VAnchorBaseContractCalls { fn from (var : IsValidRootsCall) -> Self { VAnchorBaseContractCalls :: IsValidRoots (var) } } impl :: std :: convert :: From < LastBalanceCall > for VAnchorBaseContractCalls { fn from (var : LastBalanceCall) -> Self { VAnchorBaseContractCalls :: LastBalance (var) } } impl :: std :: convert :: From < LevelsCall > for VAnchorBaseContractCalls { fn from (var : LevelsCall) -> Self { VAnchorBaseContractCalls :: Levels (var) } } impl :: std :: convert :: From < MaxEdgesCall > for VAnchorBaseContractCalls { fn from (var : MaxEdgesCall) -> Self { VAnchorBaseContractCalls :: MaxEdges (var) } } impl :: std :: convert :: From < MaximumDepositAmountCall > for VAnchorBaseContractCalls { fn from (var : MaximumDepositAmountCall) -> Self { VAnchorBaseContractCalls :: MaximumDepositAmount (var) } } impl :: std :: convert :: From < MinimalWithdrawalAmountCall > for VAnchorBaseContractCalls { fn from (var : MinimalWithdrawalAmountCall) -> Self { VAnchorBaseContractCalls :: MinimalWithdrawalAmount (var) } } impl :: std :: convert :: From < NeighborRootsCall > for VAnchorBaseContractCalls { fn from (var : NeighborRootsCall) -> Self { VAnchorBaseContractCalls :: NeighborRoots (var) } } impl :: std :: convert :: From < NextIndexCall > for VAnchorBaseContractCalls { fn from (var : NextIndexCall) -> Self { VAnchorBaseContractCalls :: NextIndex (var) } } impl :: std :: convert :: From < NullifierHashesCall > for VAnchorBaseContractCalls { fn from (var : NullifierHashesCall) -> Self { VAnchorBaseContractCalls :: NullifierHashes (var) } } impl :: std :: convert :: From < ParseChainIdFromResourceIdCall > for VAnchorBaseContractCalls { fn from (var : ParseChainIdFromResourceIdCall) -> Self { VAnchorBaseContractCalls :: ParseChainIdFromResourceId (var) } } impl :: std :: convert :: From < RegisterCall > for VAnchorBaseContractCalls { fn from (var : RegisterCall) -> Self { VAnchorBaseContractCalls :: Register (var) } } impl :: std :: convert :: From < RootsCall > for VAnchorBaseContractCalls { fn from (var : RootsCall) -> Self { VAnchorBaseContractCalls :: Roots (var) } } impl :: std :: convert :: From < SetHandlerCall > for VAnchorBaseContractCalls { fn from (var : SetHandlerCall) -> Self { VAnchorBaseContractCalls :: SetHandler (var) } } impl :: std :: convert :: From < SetVerifierCall > for VAnchorBaseContractCalls { fn from (var : SetVerifierCall) -> Self { VAnchorBaseContractCalls :: SetVerifier (var) } } impl :: std :: convert :: From < UnpackProofCall > for VAnchorBaseContractCalls { fn from (var : UnpackProofCall) -> Self { VAnchorBaseContractCalls :: UnpackProof (var) } } impl :: std :: convert :: From < UpdateEdgeCall > for VAnchorBaseContractCalls { fn from (var : UpdateEdgeCall) -> Self { VAnchorBaseContractCalls :: UpdateEdge (var) } } impl :: std :: convert :: From < VerifierCall > for VAnchorBaseContractCalls { fn from (var : VerifierCall) -> Self { VAnchorBaseContractCalls :: Verifier (var) } } impl :: std :: convert :: From < ZerosCall > for VAnchorBaseContractCalls { fn from (var : ZerosCall) -> Self { VAnchorBaseContractCalls :: Zeros (var) } } # [doc = "Container type for all return fields from the `EVM_CHAIN_ID_TYPE` function with signature `EVM_CHAIN_ID_TYPE()` and selector `[139, 126, 135, 130]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthAbiType , ethers :: contract :: EthAbiCodec , serde :: Serialize , serde :: Deserialize)] pub struct EvmChainIdTypeReturn (pub [u8 ; 2]) ; # [doc = "Container type for all return fields from the `FIELD_SIZE` function with signature `FIELD_SIZE()` and selector `[65, 74, 55, 186]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthAbiType , ethers :: contract :: EthAbiCodec , serde :: Serialize , serde :: Deserialize)] pub struct FieldSizeReturn (pub ethers :: core :: types :: U256) ; # [doc = "Container type for all return fields from the `MAX_EXT_AMOUNT` function with signature `MAX_EXT_AMOUNT()` and selector `[127, 226, 79, 254]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthAbiType , ethers :: contract :: EthAbiCodec , serde :: Serialize , serde :: Deserialize)] pub struct MaxExtAmountReturn (pub I256) ; # [doc = "Container type for all return fields from the `MAX_FEE` function with signature `MAX_FEE()` and selector `[188, 6, 62, 26]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthAbiType , ethers :: contract :: EthAbiCodec , serde :: Serialize , serde :: Deserialize)] pub struct MaxFeeReturn (pub ethers :: core :: types :: U256) ; # [doc = "Container type for all return fields from the `ROOT_HISTORY_SIZE` function with signature `ROOT_HISTORY_SIZE()` and selector `[205, 135, 163, 180]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthAbiType , ethers :: contract :: EthAbiCodec , serde :: Serialize , serde :: Deserialize)] pub struct RootHistorySizeReturn (pub u32) ; # [doc = "Container type for all return fields from the `ZERO_VALUE` function with signature `ZERO_VALUE()` and selector `[236, 115, 41, 89]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthAbiType , ethers :: contract :: EthAbiCodec , serde :: Serialize , serde :: Deserialize)] pub struct ZeroValueReturn (pub ethers :: core :: types :: U256) ; # [doc = "Container type for all return fields from the `calculatePublicAmount` function with signature `calculatePublicAmount(int256,uint256)` and selector `[37, 112, 183, 180]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthAbiType , ethers :: contract :: EthAbiCodec , serde :: Serialize , serde :: Deserialize)] pub struct CalculatePublicAmountReturn (pub ethers :: core :: types :: U256) ; # [doc = "Container type for all return fields from the `commitments` function with signature `commitments(bytes32)` and selector `[131, 157, 249, 69]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthAbiType , ethers :: contract :: EthAbiCodec , serde :: Serialize , serde :: Deserialize)] pub struct CommitmentsReturn (pub bool) ; # [doc = "Container type for all return fields from the `currentNeighborRootIndex` function with signature `currentNeighborRootIndex(uint256)` and selector `[93, 45, 118, 108]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthAbiType , ethers :: contract :: EthAbiCodec , serde :: Serialize , serde :: Deserialize)] pub struct CurrentNeighborRootIndexReturn (pub u32) ; # [doc = "Container type for all return fields from the `currentRootIndex` function with signature `currentRootIndex()` and selector `[144, 238, 176, 43]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthAbiType , ethers :: contract :: EthAbiCodec , serde :: Serialize , serde :: Deserialize)] pub struct CurrentRootIndexReturn (pub u32) ; # [doc = "Container type for all return fields from the `edgeExistsForChain` function with signature `edgeExistsForChain(uint256)` and selector `[250, 115, 22, 135]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthAbiType , ethers :: contract :: EthAbiCodec , serde :: Serialize , serde :: Deserialize)] pub struct EdgeExistsForChainReturn (pub bool) ; # [doc = "Container type for all return fields from the `edgeIndex` function with signature `edgeIndex(uint256)` and selector `[231, 14, 168, 124]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthAbiType , ethers :: contract :: EthAbiCodec , serde :: Serialize , serde :: Deserialize)] pub struct EdgeIndexReturn (pub ethers :: core :: types :: U256) ; # [doc = "Container type for all return fields from the `edgeList` function with signature `edgeList(uint256)` and selector `[219, 201, 22, 184]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthAbiType , ethers :: contract :: EthAbiCodec , serde :: Serialize , serde :: Deserialize)] pub struct EdgeListReturn { pub chain_id : ethers :: core :: types :: U256 , pub root : [u8 ; 32] , pub latest_leaf_index : ethers :: core :: types :: U256 , pub src_resource_id : [u8 ; 32] , } # [doc = "Container type for all return fields from the `filledSubtrees` function with signature `filledSubtrees(uint256)` and selector `[241, 120, 228, 124]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthAbiType , ethers :: contract :: EthAbiCodec , serde :: Serialize , serde :: Deserialize)] pub struct FilledSubtreesReturn (pub [u8 ; 32]) ; # [doc = "Container type for all return fields from the `getChainId` function with signature `getChainId()` and selector `[52, 8, 228, 112]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthAbiType , ethers :: contract :: EthAbiCodec , serde :: Serialize , serde :: Deserialize)] pub struct GetChainIdReturn (pub ethers :: core :: types :: U256) ; # [doc = "Container type for all return fields from the `getChainIdType` function with signature `getChainIdType()` and selector `[76, 131, 12, 189]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthAbiType , ethers :: contract :: EthAbiCodec , serde :: Serialize , serde :: Deserialize)] pub struct GetChainIdTypeReturn (pub u64) ; # [doc = "Container type for all return fields from the `getLastRoot` function with signature `getLastRoot()` and selector `[186, 112, 247, 87]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthAbiType , ethers :: contract :: EthAbiCodec , serde :: Serialize , serde :: Deserialize)] pub struct GetLastRootReturn (pub [u8 ; 32]) ; # [doc = "Container type for all return fields from the `getLatestNeighborEdges` function with signature `getLatestNeighborEdges()` and selector `[140, 13, 52, 216]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthAbiType , ethers :: contract :: EthAbiCodec , serde :: Serialize , serde :: Deserialize)] pub struct GetLatestNeighborEdgesReturn (pub :: std :: vec :: Vec < (ethers :: core :: types :: U256 , [u8 ; 32] , ethers :: core :: types :: U256 , [u8 ; 32] ,) >) ; # [doc = "Container type for all return fields from the `getLatestNeighborRoots` function with signature `getLatestNeighborRoots()` and selector `[30, 98, 118, 23]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthAbiType , ethers :: contract :: EthAbiCodec , serde :: Serialize , serde :: Deserialize)] pub struct GetLatestNeighborRootsReturn (pub :: std :: vec :: Vec < [u8 ; 32] >) ; # [doc = "Container type for all return fields from the `getProposalNonce` function with signature `getProposalNonce()` and selector `[11, 39, 251, 154]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthAbiType , ethers :: contract :: EthAbiCodec , serde :: Serialize , serde :: Deserialize)] pub struct GetProposalNonceReturn (pub u32) ; # [doc = "Container type for all return fields from the `handler` function with signature `handler()` and selector `[200, 9, 22, 212]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthAbiType , ethers :: contract :: EthAbiCodec , serde :: Serialize , serde :: Deserialize)] pub struct HandlerReturn (pub ethers :: core :: types :: Address) ; # [doc = "Container type for all return fields from the `hasEdge` function with signature `hasEdge(uint256)` and selector `[146, 21, 99, 17]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthAbiType , ethers :: contract :: EthAbiCodec , serde :: Serialize , serde :: Deserialize)] pub struct HasEdgeReturn (pub bool) ; # [doc = "Container type for all return fields from the `hashLeftRight` function with signature `hashLeftRight(address,bytes32,bytes32)` and selector `[142, 163, 9, 158]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthAbiType , ethers :: contract :: EthAbiCodec , serde :: Serialize , serde :: Deserialize)] pub struct HashLeftRightReturn (pub [u8 ; 32]) ; # [doc = "Container type for all return fields from the `hasher` function with signature `hasher()` and selector `[237, 51, 99, 159]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthAbiType , ethers :: contract :: EthAbiCodec , serde :: Serialize , serde :: Deserialize)] pub struct HasherReturn (pub ethers :: core :: types :: Address) ; # [doc = "Container type for all return fields from the `isKnownNeighborRoot` function with signature `isKnownNeighborRoot(uint256,bytes32)` and selector `[17, 228, 220, 185]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthAbiType , ethers :: contract :: EthAbiCodec , serde :: Serialize , serde :: Deserialize)] pub struct IsKnownNeighborRootReturn (pub bool) ; # [doc = "Container type for all return fields from the `isKnownRoot` function with signature `isKnownRoot(bytes32)` and selector `[109, 152, 51, 227]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthAbiType , ethers :: contract :: EthAbiCodec , serde :: Serialize , serde :: Deserialize)] pub struct IsKnownRootReturn (pub bool) ; # [doc = "Container type for all return fields from the `isSpent` function with signature `isSpent(bytes32)` and selector `[229, 40, 93, 204]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthAbiType , ethers :: contract :: EthAbiCodec , serde :: Serialize , serde :: Deserialize)] pub struct IsSpentReturn (pub bool) ; # [doc = "Container type for all return fields from the `isSpentArray` function with signature `isSpentArray(bytes32[])` and selector `[159, 161, 45, 11]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthAbiType , ethers :: contract :: EthAbiCodec , serde :: Serialize , serde :: Deserialize)] pub struct IsSpentArrayReturn (pub :: std :: vec :: Vec < bool >) ; # [doc = "Container type for all return fields from the `isValidRoots` function with signature `isValidRoots(bytes32[])` and selector `[97, 110, 9, 87]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthAbiType , ethers :: contract :: EthAbiCodec , serde :: Serialize , serde :: Deserialize)] pub struct IsValidRootsReturn (pub bool) ; # [doc = "Container type for all return fields from the `lastBalance` function with signature `lastBalance()` and selector `[143, 28, 86, 189]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthAbiType , ethers :: contract :: EthAbiCodec , serde :: Serialize , serde :: Deserialize)] pub struct LastBalanceReturn (pub ethers :: core :: types :: U256) ; # [doc = "Container type for all return fields from the `levels` function with signature `levels()` and selector `[78, 207, 81, 139]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthAbiType , ethers :: contract :: EthAbiCodec , serde :: Serialize , serde :: Deserialize)] pub struct LevelsReturn (pub u32) ; # [doc = "Container type for all return fields from the `maxEdges` function with signature `maxEdges()` and selector `[113, 82, 60, 50]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthAbiType , ethers :: contract :: EthAbiCodec , serde :: Serialize , serde :: Deserialize)] pub struct MaxEdgesReturn (pub u8) ; # [doc = "Container type for all return fields from the `maximumDepositAmount` function with signature `maximumDepositAmount()` and selector `[120, 171, 180, 155]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthAbiType , ethers :: contract :: EthAbiCodec , serde :: Serialize , serde :: Deserialize)] pub struct MaximumDepositAmountReturn (pub ethers :: core :: types :: U256) ; # [doc = "Container type for all return fields from the `minimalWithdrawalAmount` function with signature `minimalWithdrawalAmount()` and selector `[132, 11, 39, 145]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthAbiType , ethers :: contract :: EthAbiCodec , serde :: Serialize , serde :: Deserialize)] pub struct MinimalWithdrawalAmountReturn (pub ethers :: core :: types :: U256) ; # [doc = "Container type for all return fields from the `neighborRoots` function with signature `neighborRoots(uint256,uint32)` and selector `[67, 231, 17, 159]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthAbiType , ethers :: contract :: EthAbiCodec , serde :: Serialize , serde :: Deserialize)] pub struct NeighborRootsReturn (pub [u8 ; 32]) ; # [doc = "Container type for all return fields from the `nextIndex` function with signature `nextIndex()` and selector `[252, 126, 156, 111]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthAbiType , ethers :: contract :: EthAbiCodec , serde :: Serialize , serde :: Deserialize)] pub struct NextIndexReturn (pub u32) ; # [doc = "Container type for all return fields from the `nullifierHashes` function with signature `nullifierHashes(bytes32)` and selector `[23, 204, 145, 92]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthAbiType , ethers :: contract :: EthAbiCodec , serde :: Serialize , serde :: Deserialize)] pub struct NullifierHashesReturn (pub bool) ; # [doc = "Container type for all return fields from the `parseChainIdFromResourceId` function with signature `parseChainIdFromResourceId(bytes32)` and selector `[194, 35, 13, 110]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthAbiType , ethers :: contract :: EthAbiCodec , serde :: Serialize , serde :: Deserialize)] pub struct ParseChainIdFromResourceIdReturn (pub u64) ; # [doc = "Container type for all return fields from the `roots` function with signature `roots(uint256)` and selector `[194, 180, 10, 228]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthAbiType , ethers :: contract :: EthAbiCodec , serde :: Serialize , serde :: Deserialize)] pub struct RootsReturn (pub [u8 ; 32]) ; # [doc = "Container type for all return fields from the `unpackProof` function with signature `unpackProof(uint256[8])` and selector `[245, 171, 13, 214]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthAbiType , ethers :: contract :: EthAbiCodec , serde :: Serialize , serde :: Deserialize)] pub struct UnpackProofReturn (pub [ethers :: core :: types :: U256 ; 2usize] , pub [[ethers :: core :: types :: U256 ; 2usize] ; 2usize] , pub [ethers :: core :: types :: U256 ; 2usize]) ; # [doc = "Container type for all return fields from the `verifier` function with signature `verifier()` and selector `[43, 122, 195, 243]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthAbiType , ethers :: contract :: EthAbiCodec , serde :: Serialize , serde :: Deserialize)] pub struct VerifierReturn (pub ethers :: core :: types :: Address) ; # [doc = "Container type for all return fields from the `zeros` function with signature `zeros(uint256)` and selector `[232, 41, 85, 136]`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthAbiType , ethers :: contract :: EthAbiCodec , serde :: Serialize , serde :: Deserialize)] pub struct ZerosReturn (pub [u8 ; 32]) ; # [doc = "`Edge(uint256,bytes32,uint256,bytes32)`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthAbiType , ethers :: contract :: EthAbiCodec , serde :: Serialize , serde :: Deserialize)] pub struct Edge { pub chain_id : ethers :: core :: types :: U256 , pub root : [u8 ; 32] , pub latest_leaf_index : ethers :: core :: types :: U256 , pub src_resource_id : [u8 ; 32] } # [doc = "`Account(address,bytes)`"] # [derive (Clone , Debug , Default , Eq , PartialEq , ethers :: contract :: EthAbiType , ethers :: contract :: EthAbiCodec , serde :: Serialize , serde :: Deserialize)] pub struct Account { pub owner : ethers :: core :: types :: Address , pub public_key : ethers :: core :: types :: Bytes } }