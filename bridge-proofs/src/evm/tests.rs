mod tests {
    use std::str::FromStr;

    use crate::evm::types::{BlockHeader, LogEntry, Receipt};
    use ethereum::{Header, ReceiptV3};
    use ethers::types::{EIP1186ProofResponse, U256, U64};
    use ethers_core::types::Log;
    use hex::FromHex;
    use rlp::{Encodable, RlpStream};
    use serde::{Deserialize, Serialize};

    use ethereum_types::{Address, H256};
    use serde_json::Value;

    use crate::evm::verify_trie_proof::TrieProver;

    fn parse_eth_get_proof(proof: &str) -> EIP1186ProofResponse {
        serde_json::from_str(proof).unwrap()
    }

    fn parse_eth_get_logs(logs: &str) -> Vec<Log> {
        serde_json::from_str(logs).unwrap()
    }

    fn parse_block_header(header: &str) -> BlockHeader {
        let header: BlockHeader = serde_json::from_str(header).unwrap();
        header
    }

    fn parse_receipt(receipt: &str) -> Receipt {
        serde_json::from_str(receipt).unwrap()
    }

    #[test]
    fn trie_proof_works_for_eip1186_response() {
        // Parse hardcoded Merkle trie proof
        let hardcoded_proof = r#"{
            "address":"0xbfce6b877ebff977bb6e80b24fbbb7bc4ebca4df",
            "balance":"0x0",
            "codeHash":"0x887da3cea6169f31edeb72a08a8ddb87ac755b6d39dbd9fe692e64db48d01d39",
            "nonce":"0x1",
            "storageHash":"0x19cbdcf7cb8bea9507a1f96a7611d588335446f8ca27802fba36ab7c198fcb44",
            "accountProof":[
                "0xf901f1a0b6bf0093a89fc7d11249b8f3d53a9842056cb2217da061bb418cb1a47964b603a0c530dbaa948dfccae8cd27d79e9fd1d71102af7c96a014a32513c3da8b08d0aea0bed1ed1fc5339c7f7959ef025dcede0c99fda88c996486db7647fe49a0f1b519a0b1de04907155ac9102090f82ae04b5716d1cf2bd4d8e2424917d90ee415532bca0de26cb1b4fd99c4d3ed75d4a67931e3c252605c7d68e0148d5327f341bfd5283a022d331fc7c624c391c29236882aad4c424cf90cfbd8e8beb941ddccb29f8106ba0196e0e1c4cd3799ba92dd2568734588a541e9b0d1f0c12bfe94732cd178e594da0c8f5daad4e5dc27440870850040efab5630eb2def2d789cd937c3dcf22192b6aa03dc477ff2f714970ac68cfb6689040748fc8b8e06e474f1a0b55f91dae1c13bfa0f896992a4638f44afcbc158006dee53f163c08f167dead4f4a54f80de6b82ae2a083bdd6e2b5e69cd159491c0927352b543f6d34903fcb1f3f57bed9e06a0a1c8e80a0cdd1b5c6429a44802664273998a18f0b8831aeb39a60a314a3bf926b341add93a0f08144a0299820b6ea6a478811cd96b1907650cf55989b70efa879e536b2a6eca0a9e6cc0d5192cb036c2454c7cf19ff53abf1861b50043a7b3713bc003a5a7d88a0e649a289933a420c1f201faaad3dccd15e13538b85f38e76b6d40b23da7a3e3180",
                "0xf85180a0b86274a4b148d41ba047ae7aad1668f4507a417b5d4b582630d4023995b6f09580808080808080808080808080a00844a6824efe874b61c480f88d1b0639780aa16aefbad5647403fc7ea6c274b280",
                "0xf869a020952e86c2ad89a0772acc940e2c5a0eec5c4d95a70affe1f0c5de2387f7c5c2b846f8440180a019cbdcf7cb8bea9507a1f96a7611d588335446f8ca27802fba36ab7c198fcb44a0887da3cea6169f31edeb72a08a8ddb87ac755b6d39dbd9fe692e64db48d01d39"
            ],
            "storageProof":[{
                "key":"0xac33ff75c19e70fe83507db0d683fd3465c996598dc972688b7ace676c89077b",
                "proof":[
                    "0xf901b1a097166a38c9e39f2d5b7eb7c3c32cc22396387dc550398c8db7721c3c1a478810a01575f87884ba38a75d8041f28fb756e5f59d1eb62c6d3558e172e69d3040ec4d80a0b6df00330786f17ea6907ff7761f9dd8d59535ce0f7ba33f8cafac8e94ec8e5280a043bb357d4ce407cfe9cc415600471aff852eeb3f7dd18f9956040fdfdf083f74a08c7ebea2ae63915497f3a74ea13f8bbe492ef31c148de6139d23f74d2e292513a024844e957318bcf4fd3da57118509a3588e450161832cafb65c0d5dd4594b09fa06a2f79212553bf199ef7b02ef82b3762f96de6b59e87fa0b88423a242b98d0f4a0b073cbccb9b39181a17281696cc63aba42f849d5e7b5765fa542fd02fd4b3584a0fb9f130854c2908748a4b208dae8187b1d52b822ec83167dd23b6948a872e247a0cfa71aea3f693d5484f10ec42357ac692ccfe22b42040d63be8851b73c4f7c53a046b189e5114bf8d2deb463354d67c679c6eb6209816daeafed0eee6ef1e59ba7a02e548024ba626cf86ebc7983bcf693eec58969056be784a97f1e2ff536bfa00ba00dda30a304520b446db65f7a9fe612407b856e9b7fd20ee00e47be69276e33db8080",
                    "0xf8b180a09dda8ee0506dd8da6c3a9968c053a400ff92ef28c89891ea0ac45a6d3cd56515a0a6926de29bb0247c685826ee452d16972b739a19801bffcc3397af59247c2c4ba05babcf173c1b76ed504e16622d047bedfff34083c7639b05ac1c8eb551801002808080a029bfe029aaef01d61d071f5789e808802233cc795b322cd46954662dd9fdae178080808080a05a10b0c631b24115764ba1389a66fb11e2bc0ca5ceea00c741da0a0de555f061808080",
                    "0xf843a0202944a272ac5bae96b5bd2f67b6c13276d541dc09eb1cf414d96b19a09e1c2fa1a023ab323453748129f2765f79615022f5bebd6f4096a796300aab049a60b0f187"
                ],
                "value":"0x23ab323453748129f2765f79615022f5bebd6f4096a796300aab049a60b0f187"
            }]
        }"#;

        let address_hash_vec = hex::decode(
            "f1952e86c2ad89a0772acc940e2c5a0eec5c4d95a70affe1f0c5de2387f7c5c2",
        )
        .unwrap();

        let state_root_H256 = H256::from_slice((hex::decode(
            "4abc4de1c6dfac1f0b733be3797461bf1b0f7c2f2be11cc9f1137054fc4a1314",
        )
        .unwrap())
        .as_slice());

        let parsed_proof: EIP1186ProofResponse =
            parse_eth_get_proof(hardcoded_proof);

        let account_proof = parsed_proof
            .account_proof
            .into_iter()
            .map(|b| b.to_vec())
            .collect::<Vec<Vec<u8>>>();

        use rlp::RlpStream;
        let mut stream = RlpStream::new_list(4);
        stream
            .append(&parsed_proof.nonce)
            .append(&parsed_proof.balance)
            .append(&parsed_proof.storage_hash)
            .append(&parsed_proof.code_hash);
        let account_state_rlp = stream.out();

        // let account_state_rlp = hex::decode("f8440180a019cbdcf7cb8bea9507a1f96a7611d588335446f8ca27802fba36ab7c198fcb44a0887da3cea6169f31edeb72a08a8ddb87ac755b6d39dbd9fe692e64db48d01d39").unwrap();

        assert_eq!(
            hex::encode(TrieProver::verify_trie_proof(
                state_root_H256,
                address_hash_vec,
                account_proof,
            )),
            hex::encode(account_state_rlp)
        )
    }

    #[test]
    fn rainbow_test() {
        let expected_value = "f902a60183af4adfbf9019bf89b94a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48f863a0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa0000000000000000000000000c22df065a81f6e0107e214991b9d7fb179d401b3a000000000000000000000000023ddd3e3692d1861ed57ede224608875809e127fa00000000000000000000000000000000000000000000000000000000005f5e100f8fc9423ddd3e3692d1861ed57ede224608875809e127ff863a0dd85dc56b5b4da387bf69c28ec19b1d66e793e0d51b567882fa31dc50bbd32c5a0000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48a0000000000000000000000000c22df065a81f6e0107e214991b9d7fb179d401b3b8800000000000000000000000000000000000000000000000000000000005f5e1000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000a6d616b6b652e6e65617200000000000000000000000000000000000000000000";
        let expected_root =
            "73733f420161b4189ea48140489bfada55d485fd580ab7e6f0f4b6de229f5177";
        let key = "820137";
        let proof_rlp = vec!["f90131a07dc6deefc13acb3456defc30824e9ba7d344e0fed67d6fe918a845ac6c7ff68ca00743abb9e8a2419e731aabac46e87dd9166ef04f4c0e17b607f699169fd16effa0de6439dd92daf3fe5ae984f9176a1d53f0ab2c03a73ea9ee2c94c79a87b82386a08eccde52f7cdcfa2207e2e8256bbd05a78fbab4f1b564a98a7f5b259b9fcb05da0196a72fd5279acc9146896618d5a134398bfc5d84063bcb2dc4f206bceb1526fa0daa3100c65bc47d986741898d7dfa1cc2f944d9f621b33a53d52047d98ab6e84a0126a9c69a2fb01312dffd739ee2a86c15106497d5e53314875e3a83c915b40c3a0b89b77f6776de33f0d291891d4271546d3b4946325f6fa66d38a1618f699b7b0a06b4f2fac50925da7c11ddac2321257cf157d426bffedcce8c3e999f8dd3902ff8080808080808080", "f871a073170337a44a638efb6d735150b3a06346b54b6176c9424307e6c1f4a4604131a0409f60141274adbaf1fd8808c432c599025a80763a61aca8710ba5416436c885a064d0127fe80ad8301e425eece21dd4811515312fad7e95b9ad4f853d003582a88080808080808080808080808080", "e4820001a022d9ed1b1940164d904d587080c9ca1d5ebb7e711211233bee7ecf6f0fba3d8e", "f8d1a0af41ab83382da16fba21a258c18a231957c14eb91ede9b75b089d37474efe1b8a0102af48a2d48aa200cb90bafdb43c3845ed09e2d34f333944ac7c172f2becec4a0644f776baaf4dd2a45e817c3b70ed881419f31d966debf0e2dac62426b1308eea08498703814dfa09c76b9f8dde1d5e3865b92b805e9ffd77d12cd8221497fe604a02a6a5cc557e67488aef767895f2ad789fa339aab229d7e94b78d6a8187989d3ea002ec005b9dafdfd58601cd6dc96fd958a8681981442c485c87142ae85acc1fd28080808080808080808080", "f90211a02e04ddc4ab28665d70404d04601838d03b219207d68a477e086144d5452b035ea07458b1e7734dcde7a48e763f57b533d39a9893b2fd05ece758eb95c45230b69aa05ce53207da7cb7efdfa60bfc57dc23a5469d2823ac6d94377fda37d7d6e77a23a0ba360fa8bb757bec0086b0d2973bb39de6b874ae3558e0b91eb54579022bc68fa023068af8cff2927c6c437840b4bee730c5ef2d918c0bb086b453da9071f3e3a8a05a6cb3455636113070e724682c1e852b564bc26195690b57adf95b03e453fb56a090e6afaa341c8c8583ba621e0f4369e0a36e488d167061bf0627c8de8e4b1b53a0c974bc6676b17c2e0e0016b86e2261cc69fa10b06ad22938f851674c853face6a0134724224ee173faf5807c3b963e4aff5d8435c2296230ba6fbdf222262ee7a5a0ea6f74b84a4ee7f7d557bb27e61c75ae30ead9092faab3b441c4e5055c8768d7a09e5ab3942cfe8410180611c7eddb2364ba2022e53971b50250636f2576f1528fa0fe27620c114d5ce5b8c96859b754cf0a40a9a0cb7a6c88a492ca906b09db6c5aa023558ac1d7facb4cb81d5ced13c9126b70a898a81b63fe52117792ed5bcadb06a00b52d0a4cd96595521a0783e6f17de8b9bdd15f1e50ab8b51179a98ae6df18e5a0462c433d431953bcead5900c4b372c60b20280d05366fe48de6384152cfc8da9a0a5a9b086a22dc344a40496a9de4ebab616fa87dfc77760eef7939ba51dd193cd80", "f902ad20b902a9f902a60183af4adfbf9019bf89b94a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48f863a0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa0000000000000000000000000c22df065a81f6e0107e214991b9d7fb179d401b3a000000000000000000000000023ddd3e3692d1861ed57ede224608875809e127fa00000000000000000000000000000000000000000000000000000000005f5e100f8fc9423ddd3e3692d1861ed57ede224608875809e127ff863a0dd85dc56b5b4da387bf69c28ec19b1d66e793e0d51b567882fa31dc50bbd32c5a0000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48a0000000000000000000000000c22df065a81f6e0107e214991b9d7fb179d401b3b8800000000000000000000000000000000000000000000000000000000005f5e1000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000a6d616b6b652e6e65617200000000000000000000000000000000000000000000"];

        let expected_root =
            H256::from_slice((hex::decode(expected_root).unwrap()).as_slice());
        let key = hex::decode(key).unwrap();
        let proof = proof_rlp
            .into_iter()
            .map(|x| hex::decode(x).unwrap())
            .collect();
        let expected_value = hex::decode(expected_value).unwrap();

        assert_eq!(
            TrieProver::verify_trie_proof(expected_root, key, proof),
            expected_value
        );
    }

    #[test]
    fn log_test() {
        let log_index = 0;
        let receipt_index = 0x0;
        let header_data = Vec::from_hex("f901f8a0cc21a43127c9ff7ca783ccff211b204c9df02c9636bc418ec412075ef8b066efa01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347940000000000000000000000000000000000000000a01a99aa644e4fc45c67a032b6fdabe818ac1470062488d8205c9388801e2e1cf5a0f401a69e2fb3311b745ade3e3bf05c594ddea58811b3039d9f8238666c59556ba080d221c73457666f066cd4abcb7727efcd167b606dea14538618fb14cfd7105abc8401c9c3808319aed184631a048580a00000000000000000000000000000000000000000000000000000000000000000880000000000000000").unwrap();
        let receipt_data = Vec::from_hex("b9073102f9072d018319aed1bf90622f89b947758f98c1c487e5653795470eeab6c4698be541bf863a08c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925a00000000000000000000000007e5f4552091a69125d5dfcb7b8c2659029395bdfa0000000000000000000000000bfce6b877ebff977bb6e80b24fbbb7bc4ebca4dfa0000000000000000000000000000000000001ed09bead87c0378d8e61abf41c00f89b947758f98c1c487e5653795470eeab6c4698be541bf863a0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa00000000000000000000000007e5f4552091a69125d5dfcb7b8c2659029395bdfa0000000000000000000000000bfce6b877ebff977bb6e80b24fbbb7bc4ebca4dfa000000000000000000000000000000000000000000000000000000002540be400f89b94bfce6b877ebff977bb6e80b24fbbb7bc4ebca4dff842a0e77f587aa74084fff834b53ccbab07695ee4594b9c9d5bfd8a7dd80c556124b5a029284eb9c5a35f9d14fe6fa35224fad33a3e4138b4b537e3538b9992eba2004cb840000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000631a0485f89b94bfce6b877ebff977bb6e80b24fbbb7bc4ebca4dff842a0e77f587aa74084fff834b53ccbab07695ee4594b9c9d5bfd8a7dd80c556124b5a023e63d2e8642495863cc668aef73a378f4fcf8627eebadcb88c42e5b9c77d1dfb840000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000631a0485f9017a94bfce6b877ebff977bb6e80b24fbbb7bc4ebca4dfe1a0f3843eddcfcac65d12d9f26261dab50671fdbf5dc44441816c8bbdace2411afdb9014029284eb9c5a35f9d14fe6fa35224fad33a3e4138b4b537e3538b9992eba2004c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a889fe5d3b8eb76afce30208613beb550c5b9c1b6a374d7b7863465d69b88061b140eb96faa99baae73eaaf92772f30be3dfa8688328546979770ed56aeefd2f4cb50ff6eee14958a3b565e7c6e1598ff9bb28d98a2f5b51fb26d4a76c57fc5adbaa59e9643d697473164e5b0c467f2e9a7a8f0a7e49c2db915d0e45869b57781c5d88c02747f0f04e0f1bbcc1f72303d6c38b2de429e860413ef78fbf0d8d601a1f26bde500a04c4a000000000000000000000000000000000000000000000000f9017a94bfce6b877ebff977bb6e80b24fbbb7bc4ebca4dfe1a0f3843eddcfcac65d12d9f26261dab50671fdbf5dc44441816c8bbdace2411afdb9014023e63d2e8642495863cc668aef73a378f4fcf8627eebadcb88c42e5b9c77d1df0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a8a6c230b57e673ada1789f63f9a6a52ab84c1c9d6d3a80316d8d8e7502f06a969f8ef50812f421286f392339868e275c6583da9f56da78c6e7bb8ac03ae6386838de5f5891abf7e5dc1a8e2a7ceb7dc176d13c7343e34dc66838474f10bab382b758d4adc0575ab112de71c6ef8341e5b48c31154ee30b3f57dfb6a5a2a70e61ce1eca6433ef25319b5638b0ff212f820e481ba6c7a64f3d64c53d0a47471dd371f566f80f258861b000000000000000000000000000000000000000000000000f85894bfce6b877ebff977bb6e80b24fbbb7bc4ebca4dfe1a05e58f77bbf94b46d8d896e29753e4458c6e59b48581e20ed58c9558e96f297cea00edd9667d4813fb6bb45da751a3ce61b3bf00088d194f4b82ae25a856ad9143bf85894bfce6b877ebff977bb6e80b24fbbb7bc4ebca4dfe1a05e58f77bbf94b46d8d896e29753e4458c6e59b48581e20ed58c9558e96f297cea01e64052c8b7dc1493fd806d7160d1d7d77b81060e90c5ffdcd9736702981a305").unwrap();
        let log_entry = Vec::from_hex("f89b947758f98c1c487e5653795470eeab6c4698be541bf863a08c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925a00000000000000000000000007e5f4552091a69125d5dfcb7b8c2659029395bdfa0000000000000000000000000bfce6b877ebff977bb6e80b24fbbb7bc4ebca4dfa0000000000000000000000000000000000001ed09bead87c0378d8e61abf41c00").unwrap();
        let proof = vec![
            vec![
                Vec::from_hex("2080").unwrap(),
                Vec::from_hex("b9073102f9072d018319aed1bf90622f89b947758f98c1c487e5653795470eeab6c4698be541bf863a08c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925a00000000000000000000000007e5f4552091a69125d5dfcb7b8c2659029395bdfa0000000000000000000000000bfce6b877ebff977bb6e80b24fbbb7bc4ebca4dfa0000000000000000000000000000000000001ed09bead87c0378d8e61abf41c00f89b947758f98c1c487e5653795470eeab6c4698be541bf863a0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa00000000000000000000000007e5f4552091a69125d5dfcb7b8c2659029395bdfa0000000000000000000000000bfce6b877ebff977bb6e80b24fbbb7bc4ebca4dfa000000000000000000000000000000000000000000000000000000002540be400f89b94bfce6b877ebff977bb6e80b24fbbb7bc4ebca4dff842a0e77f587aa74084fff834b53ccbab07695ee4594b9c9d5bfd8a7dd80c556124b5a029284eb9c5a35f9d14fe6fa35224fad33a3e4138b4b537e3538b9992eba2004cb840000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000631a0485f89b94bfce6b877ebff977bb6e80b24fbbb7bc4ebca4dff842a0e77f587aa74084fff834b53ccbab07695ee4594b9c9d5bfd8a7dd80c556124b5a023e63d2e8642495863cc668aef73a378f4fcf8627eebadcb88c42e5b9c77d1dfb840000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000631a0485f9017a94bfce6b877ebff977bb6e80b24fbbb7bc4ebca4dfe1a0f3843eddcfcac65d12d9f26261dab50671fdbf5dc44441816c8bbdace2411afdb9014029284eb9c5a35f9d14fe6fa35224fad33a3e4138b4b537e3538b9992eba2004c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a889fe5d3b8eb76afce30208613beb550c5b9c1b6a374d7b7863465d69b88061b140eb96faa99baae73eaaf92772f30be3dfa8688328546979770ed56aeefd2f4cb50ff6eee14958a3b565e7c6e1598ff9bb28d98a2f5b51fb26d4a76c57fc5adbaa59e9643d697473164e5b0c467f2e9a7a8f0a7e49c2db915d0e45869b57781c5d88c02747f0f04e0f1bbcc1f72303d6c38b2de429e860413ef78fbf0d8d601a1f26bde500a04c4a000000000000000000000000000000000000000000000000f9017a94bfce6b877ebff977bb6e80b24fbbb7bc4ebca4dfe1a0f3843eddcfcac65d12d9f26261dab50671fdbf5dc44441816c8bbdace2411afdb9014023e63d2e8642495863cc668aef73a378f4fcf8627eebadcb88c42e5b9c77d1df0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a8a6c230b57e673ada1789f63f9a6a52ab84c1c9d6d3a80316d8d8e7502f06a969f8ef50812f421286f392339868e275c6583da9f56da78c6e7bb8ac03ae6386838de5f5891abf7e5dc1a8e2a7ceb7dc176d13c7343e34dc66838474f10bab382b758d4adc0575ab112de71c6ef8341e5b48c31154ee30b3f57dfb6a5a2a70e61ce1eca6433ef25319b5638b0ff212f820e481ba6c7a64f3d64c53d0a47471dd371f566f80f258861b000000000000000000000000000000000000000000000000f85894bfce6b877ebff977bb6e80b24fbbb7bc4ebca4dfe1a05e58f77bbf94b46d8d896e29753e4458c6e59b48581e20ed58c9558e96f297cea00edd9667d4813fb6bb45da751a3ce61b3bf00088d194f4b82ae25a856ad9143bf85894bfce6b877ebff977bb6e80b24fbbb7bc4ebca4dfe1a05e58f77bbf94b46d8d896e29753e4458c6e59b48581e20ed58c9558e96f297cea01e64052c8b7dc1493fd806d7160d1d7d77b81060e90c5ffdcd9736702981a305").unwrap(),
            ],
        ].iter().map(|node| {
        let mut stream = RlpStream::new();
        stream.begin_list(node.len());
        for item in node {
            stream.append(item);
        }
        stream.out().to_vec()
    }).collect();

        println!(
            "log verify {:?}",
            TrieProver::verify_log_entry(
                log_index,
                log_entry,
                receipt_index,
                receipt_data,
                header_data,
                proof,
            ),
        );
    }

    #[test]
    fn serialize_receipt() {
        let receipt: ethereum::ReceiptV3 =
            ethereum::ReceiptV3::EIP1559(ethereum::EIP1559ReceiptData {
                status_code: 1,
                used_gas: ethereum_types::U256::from_dec_str("1683153")
                    .unwrap(),
                logs_bloom: ethereum_types::Bloom::from_str("0xunwrap(),
                logs: [ethereum::Log { address: ethereum_types::H160::from_str("0x7758f98c1c487e5653795470eeab6c4698be541b").unwrap(), topics: [ethereum_types::H256::from_str("0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925").unwrap(), ethereum_types::H256::from_str("0x0000000000000000000000007e5f4552091a69125d5dfcb7b8c2659029395bdf").unwrap(), ethereum_types::H256::from_str("0x000000000000000000000000bfce6b877ebff977bb6e80b24fbbb7bc4ebca4df").unwrap()].to_vec(), data: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 237, 9, 190, 173, 135, 192, 55, 141, 142, 97, 171, 244, 28, 0].to_vec() }, ethereum::Log { address: ethereum_types::H160::from_str("0x7758f98c1c487e5653795470eeab6c4698be541b").unwrap(), topics: [ethereum_types::H256::from_str("0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef").unwrap(), ethereum_types::H256::from_str("0x0000000000000000000000007e5f4552091a69125d5dfcb7b8c2659029395bdf").unwrap(), ethereum_types::H256::from_str("0x000000000000000000000000bfce6b877ebff977bb6e80b24fbbb7bc4ebca4df").unwrap()].to_vec(), data: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 84, 11, 228, 0].to_vec() }, ethereum::Log { address: ethereum_types::H160::from_str("0xbfce6b877ebff977bb6e80b24fbbb7bc4ebca4df").unwrap(), topics: [ethereum_types::H256::from_str("0xe77f587aa74084fff834b53ccbab07695ee4594b9c9d5bfd8a7dd80c556124b5").unwrap(), ethereum_types::H256::from_str("0x29284eb9c5a35f9d14fe6fa35224fad33a3e4138b4b537e3538b9992eba2004c").unwrap()].to_vec(), data: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 99, 26, 4, 133].to_vec() }, ethereum::Log { address: ethereum_types::H160::from_str("0xbfce6b877ebff977bb6e80b24fbbb7bc4ebca4df").unwrap(), topics: [ethereum_types::H256::from_str("0xe77f587aa74084fff834b53ccbab07695ee4594b9c9d5bfd8a7dd80c556124b5").unwrap(), ethereum_types::H256::from_str("0x23e63d2e8642495863cc668aef73a378f4fcf8627eebadcb88c42e5b9c77d1df").unwrap()].to_vec(), data: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 99, 26, 4, 133].to_vec() }, ethereum::Log { address: ethereum_types::H160::from_str("0xbfce6b877ebff977bb6e80b24fbbb7bc4ebca4df").unwrap(), topics: [ethereum_types::H256::from_str("0xf3843eddcfcac65d12d9f26261dab50671fdbf5dc44441816c8bbdace2411afd").unwrap()].to_vec(), data: [41, 40, 78, 185, 197, 163, 95, 157, 20, 254, 111, 163, 82, 36, 250, 211, 58, 62, 65, 56, 180, 181, 55, 227, 83, 139, 153, 146, 235, 162, 0, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 168, 137, 254, 93, 59, 142, 183, 106, 252, 227, 2, 8, 97, 59, 235, 85, 12, 91, 156, 27, 106, 55, 77, 123, 120, 99, 70, 93, 105, 184, 128, 97, 177, 64, 235, 150, 250, 169, 155, 170, 231, 62, 170, 249, 39, 114, 243, 11, 227, 223, 168, 104, 131, 40, 84, 105, 121, 119, 14, 213, 106, 238, 253, 47, 76, 181, 15, 246, 238, 225, 73, 88, 163, 181, 101, 231, 198, 225, 89, 143, 249, 187, 40, 217, 138, 47, 91, 81, 251, 38, 212, 167, 108, 87, 252, 90, 219, 170, 89, 233, 100, 61, 105, 116, 115, 22, 78, 91, 12, 70, 127, 46, 154, 122, 143, 10, 126, 73, 194, 219, 145, 93, 14, 69, 134, 155, 87, 120, 28, 93, 136, 192, 39, 71, 240, 240, 78, 15, 27, 188, 193, 247, 35, 3, 214, 195, 139, 45, 228, 41, 232, 96, 65, 62, 247, 143, 191, 13, 141, 96, 26, 31, 38, 189, 229, 0, 160, 76, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].to_vec() }, ethereum::Log { address: ethereum_types::H160::from_str("0xbfce6b877ebff977bb6e80b24fbbb7bc4ebca4df").unwrap(), topics: [ethereum_types::H256::from_str("0xf3843eddcfcac65d12d9f26261dab50671fdbf5dc44441816c8bbdace2411afd").unwrap()].to_vec(), data: [35, 230, 61, 46, 134, 66, 73, 88, 99, 204, 102, 138, 239, 115, 163, 120, 244, 252, 248, 98, 126, 235, 173, 203, 136, 196, 46, 91, 156, 119, 209, 223, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 168, 166, 194, 48, 181, 126, 103, 58, 218, 23, 137, 246, 63, 154, 106, 82, 171, 132, 193, 201, 214, 211, 168, 3, 22, 216, 216, 231, 80, 47, 6, 169, 105, 248, 239, 80, 129, 47, 66, 18, 134, 243, 146, 51, 152, 104, 226, 117, 198, 88, 61, 169, 245, 109, 167, 140, 110, 123, 184, 172, 3, 174, 99, 134, 131, 141, 229, 245, 137, 26, 191, 126, 93, 193, 168, 226, 167, 206, 183, 220, 23, 109, 19, 199, 52, 62, 52, 220, 102, 131, 132, 116, 241, 11, 171, 56, 43, 117, 141, 74, 220, 5, 117, 171, 17, 45, 231, 28, 110, 248, 52, 30, 91, 72, 195, 17, 84, 238, 48, 179, 245, 125, 251, 106, 90, 42, 112, 230, 28, 225, 236, 166, 67, 62, 242, 83, 25, 181, 99, 139, 15, 242, 18, 248, 32, 228, 129, 186, 108, 122, 100, 243, 214, 76, 83, 208, 164, 116, 113, 221, 55, 31, 86, 111, 128, 242, 88, 134, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].to_vec() }, ethereum::Log { address: ethereum_types::H160::from_str("0xbfce6b877ebff977bb6e80b24fbbb7bc4ebca4df").unwrap(), topics: [ethereum_types::H256::from_str("0x5e58f77bbf94b46d8d896e29753e4458c6e59b48581e20ed58c9558e96f297ce").unwrap()].to_vec(), data: [14, 221, 150, 103, 212, 129, 63, 182, 187, 69, 218, 117, 26, 60, 230, 27, 59, 240, 0, 136, 209, 148, 244, 184, 42, 226, 90, 133, 106, 217, 20, 59].to_vec() }, ethereum::Log { address: ethereum_types::H160::from_str("0xbfce6b877ebff977bb6e80b24fbbb7bc4ebca4df").unwrap(), topics: [ethereum_types::H256::from_str("0x5e58f77bbf94b46d8d896e29753e4458c6e59b48581e20ed58c9558e96f297ce").unwrap()].to_vec(), data: [30, 100, 5, 44, 139, 125, 193, 73, 63, 216, 6, 215, 22, 13, 29, 125, 119, 184, 16, 96, 233, 12, 95, 253, 205, 151, 54, 112, 41, 129, 163, 5].to_vec() }].to_vec(),
            });

        println!("hihihi {:?}", hex::encode(rlp::encode(&receipt).to_vec()));
    }
}
